Product:
  name: CC Server
  versions: [0.9.60,0.13.11]
  package: neverfail.cc
  description: |-
    CC Server
  link: https://www.neverfail.com/
  contentType: json
Operations:
  addBatchItem:
    description: |-
      Adds an item to a batch
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {
          "type": "object",
          "properties": {
            "payload": {
              "type": "object",
              "description": "Dynamic data payload containing the batch item json data",
              "additionalProperties": true
            }
          }
        }
      ]
      outputs: [
        {
          "type": "object"
        }
      ]
  addOrganization:
    description: |-
      Add new organization
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {
          "type": "object",
          "example": {
            "id": "00000000-0000-0000-0000-000000000000",
            "zoho_id": 12345657890,
            "accredited_3pao": false,
            "company_web_site": "www.company.com",
            "organization_code": "myorg123",
            "organization_name": "My Organization 123",
            "organization_type": [
              "00000000-0000-0000-0000-000000000001",
              "00000000-0000-0000-0000-000000000002"
            ],
            "organization_status": "00000000-0000-0000-0000-000000000002",
            "organization_icon_url_string": "www.company.com/iconstring"
          },
          "required": [
            "id",
            "zoho_id",
            "organization_code",
            "organization_name",
            "organization_type",
            "accredited_3pao",
            "organization_status",
            "organization_icon_url_string",
            "company_web_site"
          ],
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "The uuid of the organization"
            },
            "zoho_id": {
              "type": "string",
              "description": "The Zoho CRM record ID"
            },
            "accredited_3pao": {
              "type": "boolean",
              "description": "Whether the oranization is accredited with 3pao"
            },
            "company_web_site": {
              "type": "string",
              "description": "The organizations website"
            },
            "organization_code": {
              "type": "string",
              "description": "The slug of the organization"
            },
            "organization_name": {
              "type": "string",
              "description": "The name of the organization"
            },
            "organization_type": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "description": "List of the organizations types"
            },
            "organization_status": {
              "type": "string",
              "format": "uuid",
              "description": "The organization engagement state UUID"
            },
            "organization_icon_url_string": {
              "type": "string",
              "description": "The organizations icon url string"
            }
          },
          "description": "Schema for Portal Organization"
        }
      ]
      outputs: [
        {}
      ]
  addOrganizationActivity:
    description: |-
      Adds an organization activity for a given orgId
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {
          "type": "object",
          "example": {
            "status": "NOT APPLICABLE",
            "activity": "00000000-0000-0000-0000-000000000001",
            "required": false,
            "organization": "00000000-0000-0000-0000-000000000000"
          },
          "required": [
            "activity",
            "required",
            "status"
          ],
          "properties": {
            "status": {
              "enum": [
                "NOT APPLICABLE",
                "TO DO",
                "DONE"
              ],
              "type": "string",
              "description": "The status of the organization activity"
            },
            "activity": {
              "type": "string",
              "format": "uuid",
              "description": "Activity UUID"
            },
            "required": {
              "type": "boolean",
              "description": "Whether the activity is required or not"
            }
          },
          "description": "Schema for Adding Farscape Portal Organization Activity"
        }
      ]
      outputs: [
        {}
      ]
  addPortalContract:
    description: |-
      Adds portal contract for given organization
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {
          "type": "object",
          "example": {
            "id": "00000000-0000-0000-0000-000000000000",
            "zoho_id": 1234567890,
            "end_date": "2022-01-30T08:30:00.000Z",
            "start_date": "2021-01-30T08:30:00.000Z",
            "contract_level": "00000000-0000-0000-0000-000000000001",
            "contract_number": "NFCC-0000-E",
            "contract_status": "ACTIVE",
            "contract_master_type": "NFCC AUDITEE CONTRACT"
          },
          "required": [
            "id",
            "zoho_id",
            "contract_number",
            "contract_master_type",
            "contract_level",
            "contract_status",
            "start_date",
            "end_date"
          ],
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "The id of the contract"
            },
            "zoho_id": {
              "type": "string",
              "description": "The Zoho id of the contract"
            },
            "end_date": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp of the contract end date"
            },
            "start_date": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp of the contract start date"
            },
            "contract_level": {
              "type": "string",
              "format": "uuid",
              "description": "The contract level UUID"
            },
            "contract_number": {
              "type": "string",
              "description": "The text value of the contract number"
            },
            "contract_status": {
              "enum": [
                "ACTIVE",
                "SIGNED",
                "EXPIRED"
              ],
              "type": "string",
              "description": "The status of the contract"
            },
            "contract_master_type": {
              "enum": [
                "NFCC AUDITEE CONTRACT"
              ],
              "type": "string",
              "description": "The type of master contract"
            }
          },
          "description": "Schema for New Portal Contract"
        }
      ]
      outputs: [
        {}
      ]
  addPortalUser:
    description: |-
      Adds portal user to given organization
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {
          "type": "object",
          "example": {
            "id": "00000000-0000-0000-0000-000000000000",
            "roles": {
              "00000000-0000-0000-0000-000000000002": null,
              "00000000-0000-0000-0000-000000000003": null
            },
            "zoho_id": 1234567890,
            "user_name": "test user",
            "user_email": "tuser@email.com",
            "organization": "00000000-0000-0000-0000-000000000001",
            "employee_status": "ACTIVE",
            "avatar_url_string": "www.tuser.com/avatar"
          },
          "required": [
            "id",
            "zoho_id",
            "user_name",
            "user_email",
            "avatar_url_string",
            "organization",
            "employee_status",
            "roles"
          ],
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "The id of the user"
            },
            "roles": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "zoho_id": {
              "type": "string",
              "description": "The id of the Zoho CRM contact record"
            },
            "user_name": {
              "type": "string",
              "description": "The name of the user"
            },
            "user_email": {
              "type": "string",
              "description": "The email of the user"
            },
            "organization": {
              "type": "string",
              "description": "The UUID of the users organization"
            },
            "employee_status": {
              "enum": [
                "ACTIVE",
                "INACTIVE"
              ],
              "type": "string",
              "description": "The status of the employee"
            },
            "avatar_url_string": {
              "type": "string",
              "description": "The avatar url string of the user"
            }
          },
          "description": "Schema for Hydra Organization"
        }
      ]
      outputs: [
        {}
      ]
  createBoundary:
    description: |-
      Create a new boundary
    versions:
      from: 0.13.11
      to: 0.13.11
    link: ''
    example:
      inputs: [
        {
          "type": "object",
          "example": {
            "name": "Boundary 1",
            "type": "LAB",
            "orgId": "00000000-0000-0000-0000-000000000000",
            "tagName": "tag",
            "description": "This is an example description"
          },
          "required": [
            "name",
            "description",
            "tagName",
            "type"
          ],
          "properties": {
            "name": {
              "type": "string"
            },
            "type": {
              "enum": [
                "authorization",
                "system",
                "lab"
              ],
              "type": "string"
            },
            "orgId": {
              "type": "string",
              "format": "uuid"
            },
            "tagName": {
              "type": "string"
            },
            "description": {
              "type": "string"
            }
          },
          "description": "Schema for a new boundary"
        }
      ]
      outputs: [
        {
          "type": "object",
          "required": [
            "id",
            "name",
            "description",
            "ownerId",
            "type",
            "status",
            "tagId",
            "createdBy"
          ],
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid"
            },
            "name": {
              "type": "string"
            },
            "type": {
              "enum": [
                "authorization",
                "system",
                "lab"
              ],
              "type": "string",
              "description": "Type of boundary",
              "x-enum-description": [
                "Authorization boundary",
                "System boundary",
                "Lab boundary"
              ]
            },
            "tagId": {
              "type": "string",
              "format": "uuid"
            },
            "status": {
              "enum": [
                "draft",
                "under_review",
                "active",
                "archived"
              ],
              "type": "string",
              "description": "Status of boundary",
              "x-enum-description": [
                "Draft",
                "Under review",
                "Active",
                "Archived"
              ]
            },
            "aliases": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            },
            "created": {
              "type": "string",
              "format": "date-time"
            },
            "deleted": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "ownerId": {
              "type": "string",
              "format": "uuid"
            },
            "updated": {
              "type": "string",
              "format": "date-time"
            },
            "imageUrl": {
              "type": "string",
              "format": "url",
              "nullable": true
            },
            "keywords": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            },
            "parentId": {
              "type": "string",
              "format": "uuid",
              "nullable": true
            },
            "createdBy": {
              "type": "string",
              "format": "uuid"
            },
            "description": {
              "type": "string",
              "nullable": true
            }
          },
          "description": "Describes boundary"
        }
      ]
  createBoundaryEvent:
    description: |-
      Create a new boundary Event
    versions:
      from: 0.13.11
      to: 0.13.11
    link: ''
    example:
      inputs: [
        {
          "type": "object",
          "example": {
            "type": "CONNECTION_ADDED",
            "tstamp": "20-01-2022",
            "userId": "0000-00-0000-00001",
            "targetId": "00000000-0000-0000-0000-000000000003",
            "productId": "00000000-0000-0000-0000-000000000002",
            "boundaryId": "00000000-0000-0000-0000-000000000001",
            "description": "This is an example description"
          },
          "required": [
            "type",
            "boundaryId",
            "userId",
            "tstamp",
            "description"
          ],
          "properties": {
            "type": {
              "enum": [
                "product_added",
                "product_removed",
                "target_added",
                "target_removed",
                "boundary_status_change"
              ],
              "type": "string"
            },
            "tstamp": {
              "type": "string",
              "format": "date-time"
            },
            "userId": {
              "type": "string",
              "format": "uuid"
            },
            "targetId": {
              "type": "string",
              "format": "uuid"
            },
            "productId": {
              "type": "string",
              "format": "uuid"
            },
            "boundaryId": {
              "type": "string",
              "format": "uuid"
            },
            "description": {
              "type": "string"
            }
          },
          "description": "Schema for a new boundary event"
        }
      ]
      outputs: [
        {
          "type": "object",
          "required": [
            "id",
            "type",
            "boundaryId",
            "userId",
            "description",
            "tstamp"
          ],
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid"
            },
            "type": {
              "enum": [
                "product_added",
                "product_removed",
                "target_added",
                "target_removed",
                "boundary_status_change"
              ],
              "type": "string",
              "description": "Type of boundary event",
              "x-enum-description": [
                "Product added",
                "Product removed",
                "Target added",
                "Target removed",
                "Boundary status change"
              ]
            },
            "tstamp": {
              "type": "string",
              "format": "date-time"
            },
            "userId": {
              "type": "string",
              "format": "uuid"
            },
            "targetId": {
              "type": "string",
              "format": "uuid",
              "nullable": true
            },
            "productId": {
              "type": "string",
              "format": "uuid",
              "nullable": true
            },
            "boundaryId": {
              "type": "string",
              "format": "uuid"
            },
            "description": {
              "type": "string"
            }
          },
          "description": "Describes boundary events"
        }
      ]
  createBoundaryProduct:
    description: |-
      Create a new boundary product
    versions:
      from: 0.13.11
      to: 0.13.11
    link: ''
    example:
      inputs: [
        {
          "type": "object",
          "example": {
            "name": "Boundary Product1",
            "productIds": [
              "00000000-0000-0000-0000-000000000000",
              "00000000-0000-0000-0000-000000000001"
            ],
            "description": "This is an example description"
          },
          "required": [
            "name",
            "description",
            "productIds"
          ],
          "properties": {
            "name": {
              "type": "string"
            },
            "productIds": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": {
              "type": "string"
            }
          },
          "description": "Schema for a new boundary product"
        }
      ]
      outputs: [
        {
          "type": "object",
          "example": {
            "boundaryProductFailed": 0,
            "boundaryProductProcessed": 0
          },
          "required": [
            "boundaryProductProcessed",
            "boundaryProductFailed"
          ],
          "properties": {
            "boundaryProductFailed": {
              "type": "number"
            },
            "boundaryProductProcessed": {
              "type": "number"
            }
          },
          "description": "Schema for the response of processing products"
        }
      ]
  createBoundaryProductTarget:
    description: |-
      Create a new boundary product target
    versions:
      from: 0.13.11
      to: 0.13.11
    link: ''
    example:
      inputs: [
        {
          "type": "object",
          "example": {
            "targetIds": [
              "00000000-0000-0000-0000-000000000000",
              "00000000-0000-0000-0000-000000000001"
            ]
          },
          "required": [
            "targetIds"
          ],
          "properties": {
            "targetIds": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          "description": "Schema for a new boundary product targets"
        }
      ]
      outputs: [
        {
          "type": "object",
          "example": {
            "boundaryProductTargetFailed": 0,
            "boundaryProductTargetProcessed": 0
          },
          "required": [
            "boundaryProductTargetProcessed",
            "boundaryProductTargetFailed"
          ],
          "properties": {
            "boundaryProductTargetFailed": {
              "type": "number"
            },
            "boundaryProductTargetProcessed": {
              "type": "number"
            }
          },
          "description": "Schema for the response of processing targets"
        }
      ]
  createEvidenceBot:
    description: |-
      Creates a new evidence bot
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {
          "type": "object",
          "example": {
            "name": "Evidence Bot 1",
            "description": "This is an example description"
          },
          "required": [
            "name",
            "description",
            "queryId",
            "evidenceTypeId"
          ],
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the evidence bot"
            },
            "tags": {
              "type": "array",
              "items": {}
            },
            "queryId": {
              "type": "string",
              "format": "uuid",
              "description": "The UUID of a query"
            },
            "description": {
              "type": "string",
              "description": "The description of the evidence bot"
            },
            "evidenceTypeId": {
              "type": "string",
              "format": "uuid",
              "description": "The UUID of an evidence type"
            },
            "frameworkElements": {
              "type": "array",
              "items": {}
            }
          },
          "description": "Schema for Evidence Bot"
        }
      ]
      outputs: [
        {
          "type": "object"
        }
      ]
  createEvidenceDefinition:
    description: |-
      Creates a new evidence definition
    versions:
      from: 0.13.11
      to: 0.13.11
    link: ''
    example:
      inputs: [
        {
          "type": "object",
          "example": {
            "name": "Evidence Definition 1",
            "description": "This is an example description"
          },
          "required": [
            "name",
            "description"
          ],
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the evidence definition"
            },
            "tags": {
              "type": "array",
              "items": {}
            },
            "description": {
              "type": "string",
              "description": "The description of the evidence definition"
            }
          },
          "description": "Schema for Evidence Definition"
        }
      ]
      outputs: [
        {
          "type": "object",
          "example": {
            "id": "000000-0000-0000-0000000",
            "name": "Evidence Definition 1",
            "status": "DRAFT",
            "description": "This is an example description"
          },
          "required": [
            "id",
            "name",
            "description",
            "status"
          ],
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the evidence definition"
            },
            "name": {
              "type": "string",
              "description": "The name of the evidence definition"
            },
            "tags": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "status": {
              "enum": [
                "draft",
                "publishing",
                "published",
                "retiring",
                "retired"
              ],
              "type": "string",
              "description": "Status of the publishing evidence component"
            },
            "deleted": {
              "type": "string",
              "format": "date-time"
            },
            "ownerId": {
              "type": "string",
              "format": "uuid"
            },
            "artifactId": {
              "type": "string",
              "format": "uuid"
            },
            "description": {
              "type": "string",
              "description": "The description of the evidence definition"
            }
          },
          "description": "Schema for Evidence Definition"
        }
      ]
  createEvidenceRequest:
    description: |-
      Create evidence request
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {
          "oneOf": [
            {
              "type": "object",
              "example": {
                "requests": []
              },
              "required": [
                "requests"
              ],
              "properties": {
                "requests": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "example": {
                      "name": "Evidence Request 1",
                      "description": "This is an example description",
                      "evidenceTypeId": "000000-0000-0000-0000000",
                      "subElementCode": "a",
                      "frameworkElement": "AC-1",
                      "evidenceRequestListId": "000000-0000-0000-0000000"
                    },
                    "required": [
                      "name",
                      "description",
                      "evidenceRequestListId",
                      "requestCode",
                      "frameworkElement"
                    ],
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "The name of the evidence request"
                      },
                      "description": {
                        "type": "string",
                        "description": "The description of the evidence request"
                      },
                      "requestCode": {
                        "type": "string",
                        "description": "The alphanumeric code for a request"
                      },
                      "evidenceTypeId": {
                        "type": "string",
                        "description": "The evidence type ID for a evidence request"
                      },
                      "subElementCode": {
                        "type": "string",
                        "description": "A framework sub element inside the framework version of the ERL"
                      },
                      "frameworkElement": {
                        "type": "string",
                        "description": "A framework element inside the framework version of the ERL"
                      },
                      "evidenceRequestListId": {
                        "type": "string",
                        "description": "The ID of the evidence request list"
                      }
                    },
                    "description": "Schema for Evidence request"
                  }
                }
              },
              "description": "Schema for a bulk of Evidence request"
            },
            {
              "type": "object",
              "example": {
                "name": "Evidence Request 1",
                "description": "This is an example description",
                "evidenceTypeId": "000000-0000-0000-0000000",
                "subElementCode": "a",
                "frameworkElement": "AC-1",
                "evidenceRequestListId": "000000-0000-0000-0000000"
              },
              "required": [
                "name",
                "description",
                "evidenceRequestListId",
                "requestCode",
                "frameworkElement"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The name of the evidence request"
                },
                "description": {
                  "type": "string",
                  "description": "The description of the evidence request"
                },
                "requestCode": {
                  "type": "string",
                  "description": "The alphanumeric code for a request"
                },
                "evidenceTypeId": {
                  "type": "string",
                  "description": "The evidence type ID for a evidence request"
                },
                "subElementCode": {
                  "type": "string",
                  "description": "A framework sub element inside the framework version of the ERL"
                },
                "frameworkElement": {
                  "type": "string",
                  "description": "A framework element inside the framework version of the ERL"
                },
                "evidenceRequestListId": {
                  "type": "string",
                  "description": "The ID of the evidence request list"
                }
              },
              "description": "Schema for Evidence request"
            }
          ]
        }
      ]
      outputs: [
        {
          "type": "object",
          "example": {
            "errors": [
              {
                "errors": [
                  "Name is incorrect",
                  "Framework element invalid"
                ]
              }
            ]
          },
          "required": [
            "totalCount",
            "created",
            "updated",
            "deleted",
            "failed"
          ],
          "properties": {
            "failed": {
              "type": "array",
              "items": {},
              "description": "The a list of errors found"
            },
            "created": {
              "type": "array",
              "items": {}
            },
            "deleted": {
              "type": "array",
              "items": {}
            },
            "updated": {
              "type": "array",
              "items": {}
            },
            "totalCount": {
              "type": "number"
            }
          },
          "description": "Schema for a response where the evidence request bulk had errors"
        }
      ]
  createEvidenceRequestList:
    description: |-
      Creates a new evidence request list
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {
          "type": "object",
          "example": {
            "name": "Evidence Request List 1",
            "description": "This is an example description",
            "frameworkVersionId": "000000-0000-0000-0000000"
          },
          "required": [
            "name",
            "description",
            "frameworkVersionId",
            "version"
          ],
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the evidence request list"
            },
            "tags": {
              "type": "array",
              "items": {}
            },
            "version": {
              "type": "string",
              "description": "The version of the evidence request list"
            },
            "description": {
              "type": "string",
              "description": "The description of the evidence request list"
            },
            "frameworkVersionId": {
              "type": "string",
              "description": "The ID of the framework version assigned to the request list"
            }
          },
          "description": "Schema for Evidence request list"
        }
      ]
      outputs: [
        {
          "type": "object",
          "example": {
            "id": "000000-0000-0000-0000000",
            "name": "Evidence Request List 1",
            "tags": [],
            "status": "000000-0000-0000-0000000",
            "created": "2017-07-21T00:00:00.000Z",
            "updated": "2017-07-21T00:00:00.000Z",
            "description": "This is an example description",
            "frameworkVersionId": "000000-0000-0000-0000000",
            "frameworkVersionName": "rev4"
          },
          "required": [
            "id",
            "name",
            "description",
            "status",
            "version",
            "frameworkVersionId",
            "tags"
          ],
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "The id of the evidence request list"
            },
            "name": {
              "type": "string",
              "description": "The name of the evidence request list"
            },
            "tags": {
              "type": "array",
              "items": {}
            },
            "status": {
              "type": "string",
              "description": "The status of the evidence request list"
            },
            "created": {
              "type": "string",
              "format": "date-time",
              "description": "The date the evidence request list was created"
            },
            "updated": {
              "type": "string",
              "format": "date-time",
              "description": "The date the evidence request list was updated"
            },
            "description": {
              "type": "string",
              "description": "The description of the evidence request list"
            },
            "frameworkVersionId": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the framework version"
            },
            "frameworkVersionName": {
              "type": "string",
              "description": "The name of the framework version"
            }
          },
          "description": "Schema for Evidence request list"
        }
      ]
  createEvidenceType:
    description: |-
      Creates a new evidence type
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {
          "type": "object",
          "example": {
            "name": "Evidence Type 1",
            "description": "This is an example description"
          },
          "required": [
            "name",
            "description"
          ],
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the evidence type"
            },
            "tags": {
              "type": "array",
              "items": {}
            },
            "description": {
              "type": "string",
              "description": "The description of the evidence type"
            }
          },
          "description": "Schema for Evidence Type"
        }
      ]
      outputs: [
        {
          "type": "object"
        }
      ]
  createLinkTypes:
    description: |-
      Walks the indexed object table to look for link_type objects that can be auto-created
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "object"
        }
      ]
  createProduct:
    description: |-
      Creates a new product
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "description": "URL that points to the main website for this vendor"
            },
            "code": {
              "type": "string",
              "description": "Simple code for the vendor, must be unique, lowercase and numbers, no spaces or dashes"
            },
            "logo": {
              "type": "string",
              "description": "URL that points to a small logo glyph for this vendor, must be official"
            },
            "name": {
              "type": "string",
              "description": "Simple name of the vendor"
            },
            "suite": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Suite ID that is associated with this object, if set, no suite will be added"
                },
                "url": {
                  "type": "string",
                  "description": "URL that points to the main website for this suite"
                },
                "code": {
                  "type": "string",
                  "description": "Simple code for the suite, must be unique, lowercase and numbers, no spaces or dashes"
                },
                "logo": {
                  "type": "string",
                  "description": "URL that points to a small logo glyph for this suite, must be official"
                },
                "name": {
                  "type": "string",
                  "description": "Simple name of the suite"
                },
                "vendorId": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Vendor ID that is the root of this suite ID."
                },
                "description": {
                  "type": "string",
                  "description": "Fully qualified name of the suite for the vendors"
                }
              },
              "description": "Schema for Suite"
            },
            "vendor": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "Vendor ID that is associated with this object, if set, no vendor will be added"
                },
                "url": {
                  "type": "string",
                  "description": "URL that points to the main website for this vendor"
                },
                "code": {
                  "type": "string",
                  "description": "Simple code for the vendor, must be unique, lowercase and numbers, no spaces or dashes"
                },
                "logo": {
                  "type": "string",
                  "description": "URL that points to a small logo glyph for this vendor, must be official"
                },
                "name": {
                  "type": "string",
                  "description": "Simple name of the vendor"
                },
                "description": {
                  "type": "string",
                  "description": "Fully qualified name of the vendor, should be the vendor's legal entity name."
                }
              },
              "description": "Schema for Vendor"
            },
            "description": {
              "type": "string",
              "description": "Fully qualified name of the vendor, should be the vendor's legal entity name."
            }
          },
          "description": "Schema for Product"
        }
      ]
      outputs: [
        {
          "type": "object"
        }
      ]
  createProject:
    description: |-
      Add new Project
    versions:
      from: 0.13.11
      to: 0.13.11
    link: ''
    example:
      inputs: [
        {
          "type": "object",
          "required": [
            "id",
            "name",
            "ownerId",
            "status",
            "artifactId"
          ],
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid"
            },
            "due": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "name": {
              "type": "string"
            },
            "status": {
              "enum": [
                "draft",
                "review",
                "publishing",
                "published",
                "retiring",
                "retired",
                "cancelled"
              ],
              "type": "string",
              "description": "Type of Project Status"
            },
            "aliases": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            },
            "created": {
              "type": "string",
              "format": "date-time"
            },
            "deleted": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "ownerId": {
              "type": "string",
              "format": "uuid"
            },
            "updated": {
              "type": "string",
              "format": "date-time"
            },
            "version": {
              "type": "string",
              "nullable": true
            },
            "imageUrl": {
              "type": "string",
              "format": "url",
              "nullable": true
            },
            "keywords": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            },
            "artifactId": {
              "type": "string",
              "format": "uuid"
            },
            "properties": {
              "type": "object",
              "nullable": true
            },
            "description": {
              "type": "string"
            }
          },
          "description": "Describes the project related with the hydra resource"
        }
      ]
      outputs: [
        {}
      ]
  createProjectClass:
    description: |-
      Add a new project class
    versions:
      from: 0.13.11
      to: 0.13.11
    link: ''
    example:
      inputs: [
        {
          "allOf": [
            {
              "type": "object",
              "required": [
                "objectType",
                "productId",
                "id"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid"
                },
                "schema": {
                  "type": "object",
                  "nullable": true
                },
                "productId": {
                  "type": "string",
                  "format": "uuid"
                },
                "artifactId": {
                  "type": "string",
                  "format": "uuid",
                  "nullable": true
                },
                "objectType": {
                  "enum": [
                    "concrete",
                    "interface"
                  ],
                  "type": "string",
                  "description": "Type of class definition",
                  "x-enum-descriptions": [
                    "Concrete class definition",
                    "Interface definition"
                  ]
                },
                "pluralName": {
                  "type": "string",
                  "nullable": true
                }
              }
            },
            {
              "type": "object",
              "required": [
                "projectId",
                "name"
              ],
              "properties": {
                "op": {
                  "enum": [
                    "none",
                    "create",
                    "update",
                    "delete"
                  ],
                  "type": "string",
                  "description": "Status of an operation"
                },
                "name": {
                  "type": "string"
                },
                "mappedId": {
                  "type": "string",
                  "format": "uuid",
                  "nullable": true
                },
                "projectId": {
                  "type": "string",
                  "format": "uuid"
                },
                "description": {
                  "type": "string"
                }
              },
              "description": "Stored class for a project"
            }
          ]
        }
      ]
      outputs: [
        {}
      ]
  createProjectDataType:
    description: |-
      Add a new project data type
    versions:
      from: 0.13.11
      to: 0.13.11
    link: ''
    example:
      inputs: [
        {
          "allOf": [
            {
              "type": "object",
              "required": [
                "type",
                "id"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid"
                },
                "type": {
                  "enum": [
                    "array",
                    "object",
                    "string",
                    "boolean",
                    "number",
                    "enum"
                  ],
                  "type": "string",
                  "description": "JSON Object Type",
                  "x-enum-descriptions": [
                    "Array of one or many objects",
                    "Object definition",
                    "String",
                    "Boolean true/false value",
                    "Numeric value",
                    "Enumeration value"
                  ]
                },
                "values": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true
                },
                "pattern": {
                  "type": "string",
                  "nullable": true
                },
                "coreType": {
                  "type": "boolean",
                  "default": false,
                  "nullable": true
                },
                "examples": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true
                },
                "productId": {
                  "type": "string",
                  "format": "uuid",
                  "nullable": true
                },
                "artifactId": {
                  "type": "string",
                  "format": "uuid",
                  "nullable": true
                }
              }
            },
            {
              "type": "object",
              "required": [
                "projectId",
                "name"
              ],
              "properties": {
                "op": {
                  "enum": [
                    "none",
                    "create",
                    "update",
                    "delete"
                  ],
                  "type": "string",
                  "description": "Status of an operation"
                },
                "name": {
                  "type": "string"
                },
                "mappedId": {
                  "type": "string",
                  "format": "uuid",
                  "nullable": true
                },
                "projectId": {
                  "type": "string",
                  "format": "uuid"
                },
                "description": {
                  "type": "string"
                }
              },
              "description": "Stored data type for a project"
            }
          ]
        }
      ]
      outputs: [
        {}
      ]
  createProjectEnumInfo:
    description: |-
      Add a new project enum info
    versions:
      from: 0.13.11
      to: 0.13.11
    link: ''
    example:
      inputs: [
        {
          "allOf": [
            {
              "type": "object",
              "required": [
                "id",
                "enumName",
                "enumValue",
                "graphqlValue",
                "jsonValue",
                "dataTypeId"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid"
                },
                "enumName": {
                  "type": "string"
                },
                "enumValue": {
                  "type": "string"
                },
                "jsonValue": {
                  "type": "object"
                },
                "dataTypeId": {
                  "type": "string",
                  "format": "uuid"
                },
                "description": {
                  "type": "string",
                  "nullable": true
                },
                "graphqlValue": {
                  "type": "string"
                }
              },
              "description": "Describes an Enum Info"
            },
            {
              "type": "object",
              "required": [
                "projectId",
                "name"
              ],
              "properties": {
                "op": {
                  "enum": [
                    "none",
                    "create",
                    "update",
                    "delete"
                  ],
                  "type": "string",
                  "description": "Status of an operation"
                },
                "name": {
                  "type": "string"
                },
                "mappedId": {
                  "type": "string",
                  "format": "uuid",
                  "nullable": true
                },
                "projectId": {
                  "type": "string",
                  "format": "uuid"
                },
                "description": {
                  "type": "string"
                }
              },
              "description": "New fields added into the project objects"
            }
          ]
        }
      ]
      outputs: [
        {}
      ]
  createProjectField:
    description: |-
      Add a new project field
    versions:
      from: 0.13.11
      to: 0.13.11
    link: ''
    example:
      inputs: [
        {
          "allOf": [
            {
              "type": "object",
              "required": [
                "displayName",
                "productId",
                "id",
                "artifactId",
                "keyed",
                "indexed"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid"
                },
                "keyed": {
                  "type": "boolean",
                  "default": false
                },
                "example": {
                  "type": "string",
                  "nullable": true
                },
                "indexed": {
                  "type": "boolean",
                  "default": true
                },
                "reserved": {
                  "type": "boolean",
                  "default": false,
                  "nullable": true
                },
                "productId": {
                  "type": "string",
                  "format": "uuid"
                },
                "artifactId": {
                  "type": "string",
                  "format": "uuid"
                },
                "dataTypeId": {
                  "type": "string",
                  "format": "uuid",
                  "nullable": true
                },
                "displayName": {
                  "type": "string"
                },
                "defaultValue": {
                  "type": "string",
                  "nullable": true
                }
              }
            },
            {
              "type": "object",
              "required": [
                "projectId",
                "name"
              ],
              "properties": {
                "op": {
                  "enum": [
                    "none",
                    "create",
                    "update",
                    "delete"
                  ],
                  "type": "string",
                  "description": "Status of an operation"
                },
                "name": {
                  "type": "string"
                },
                "mappedId": {
                  "type": "string",
                  "format": "uuid",
                  "nullable": true
                },
                "projectId": {
                  "type": "string",
                  "format": "uuid"
                },
                "description": {
                  "type": "string"
                }
              },
              "description": "New fields added into the project objects"
            }
          ]
        }
      ]
      outputs: [
        {}
      ]
  createProjectProperty:
    description: |-
      Add a new project property
    versions:
      from: 0.13.11
      to: 0.13.11
    link: ''
    example:
      inputs: [
        {
          "allOf": [
            {
              "type": "object",
              "required": [
                "id"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid"
                },
                "multi": {
                  "type": "boolean",
                  "default": false,
                  "nullable": true
                },
                "fieldId": {
                  "type": "string",
                  "format": "uuid",
                  "nullable": true
                },
                "parentId": {
                  "type": "string",
                  "format": "uuid",
                  "nullable": true
                },
                "required": {
                  "type": "boolean",
                  "default": false,
                  "nullable": true
                },
                "artifactId": {
                  "type": "string",
                  "format": "uuid"
                },
                "defaultValue": {
                  "type": "string",
                  "nullable": true
                }
              }
            },
            {
              "type": "object",
              "required": [
                "projectId",
                "name"
              ],
              "properties": {
                "op": {
                  "enum": [
                    "none",
                    "create",
                    "update",
                    "delete"
                  ],
                  "type": "string",
                  "description": "Status of an operation"
                },
                "name": {
                  "type": "string"
                },
                "mappedId": {
                  "type": "string",
                  "format": "uuid",
                  "nullable": true
                },
                "projectId": {
                  "type": "string",
                  "format": "uuid"
                },
                "description": {
                  "type": "string"
                }
              },
              "description": "Stored property for a project"
            }
          ]
        }
      ]
      outputs: [
        {}
      ]
  createSchedule:
    description: |-
      Add new Schedule
    versions:
      from: 0.13.11
      to: 0.13.11
    link: ''
    example:
      inputs: [
        {
          "type": "object",
          "required": [
            "name",
            "cron",
            "createdOn",
            "updatedOn"
          ],
          "properties": {
            "cron": {
              "type": "string"
            },
            "data": {
              "type": "object",
              "nullable": true
            },
            "name": {
              "type": "string"
            },
            "options": {
              "type": "object",
              "nullable": true,
              "properties": {
                "priority": {
                  "type": "integer",
                  "format": "int32"
                },
                "onComplete": {
                  "type": "boolean",
                  "default": false
                },
                "parameters": {
                  "type": "object"
                },
                "retryDelay": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0
                },
                "retrylimit": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0
                },
                "startAfter": {
                  "oneOf": [
                    {
                      "type": "integer",
                      "format": "int32"
                    },
                    {
                      "type": "string"
                    },
                    {
                      "type": "string",
                      "format": "date-time"
                    }
                  ]
                },
                "retryBackoff": {
                  "type": "boolean",
                  "default": false
                },
                "singletonKey": {
                  "type": "string"
                },
                "expireInHours": {
                  "type": "integer",
                  "format": "int32"
                },
                "retentionDays": {
                  "type": "integer",
                  "format": "int32",
                  "default": 30
                },
                "retentionHours": {
                  "type": "integer",
                  "format": "int32"
                },
                "singletonHours": {
                  "type": "integer",
                  "format": "int32"
                },
                "expireInMinutes": {
                  "type": "integer",
                  "format": "int32",
                  "default": 15
                },
                "expireInSeconds": {
                  "type": "integer",
                  "format": "int32"
                },
                "retentionMinutes": {
                  "type": "integer",
                  "format": "int32"
                },
                "retentionSeconds": {
                  "type": "integer",
                  "format": "int32"
                },
                "singletonMinutes": {
                  "type": "integer",
                  "format": "int32"
                },
                "singletonSeconds": {
                  "type": "integer",
                  "format": "int32"
                },
                "singletonNextSlot": {
                  "type": "boolean"
                }
              },
              "description": "Describes the schedules options"
            },
            "timezone": {
              "type": "string",
              "default": "UTC",
              "nullable": true
            },
            "createdOn": {
              "type": "string",
              "format": "date-time"
            },
            "updatedOn": {
              "type": "string",
              "format": "date-time"
            }
          },
          "description": "Describes a schedule"
        }
      ]
      outputs: [
        {}
      ]
  createScriptContext:
    description: |-
      Creates a new scripting context
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {
          "type": "object",
          "properties": {
            "payload": {
              "type": "object",
              "description": "Dynamic data payload containing JSON data",
              "additionalProperties": true
            }
          }
        }
      ]
      outputs: [
        {
          "type": "array",
          "items": {}
        }
      ]
  createSuite:
    description: |-
      Creates a new suite
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "Suite ID that is associated with this object, if set, no suite will be added"
            },
            "url": {
              "type": "string",
              "description": "URL that points to the main website for this suite"
            },
            "code": {
              "type": "string",
              "description": "Simple code for the suite, must be unique, lowercase and numbers, no spaces or dashes"
            },
            "logo": {
              "type": "string",
              "description": "URL that points to a small logo glyph for this suite, must be official"
            },
            "name": {
              "type": "string",
              "description": "Simple name of the suite"
            },
            "vendorId": {
              "type": "string",
              "format": "uuid",
              "description": "Vendor ID that is the root of this suite ID."
            },
            "description": {
              "type": "string",
              "description": "Fully qualified name of the suite for the vendors"
            }
          },
          "description": "Schema for Suite"
        }
      ]
      outputs: [
        {
          "type": "object"
        }
      ]
  createTag:
    description: |-
      Creates a new tag
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "type": "string",
              "description": "Name for the Tag"
            },
            "description": {
              "type": "string",
              "description": "Destription for the Tag"
            }
          },
          "description": "Schema for a Tag"
        }
      ]
      outputs: [
        {
          "type": "object"
        }
      ]
  createUserInvite:
    description: |-
      Creates a new user invite
    versions:
      from: 0.13.11
      to: 0.13.11
    link: ''
    example:
      inputs: [
        {
          "type": "object",
          "example": {
            "emails": [
              "neverfail@neverfail.com"
            ]
          },
          "required": [
            "emails"
          ],
          "properties": {
            "emails": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "email"
              },
              "description": "The email of the user to invite"
            }
          },
          "description": "Schema for the user portal invite"
        }
      ]
      outputs: [
        {
          "type": "object",
          "example": {
            "message": "Simple message response"
          },
          "required": [
            "message"
          ],
          "properties": {
            "message": {
              "type": "string",
              "description": "The message description"
            }
          },
          "description": "Schema for a message"
        }
      ]
  createVendor:
    description: |-
      Creates a new vendor
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "Vendor ID that is associated with this object, if set, no vendor will be added"
            },
            "url": {
              "type": "string",
              "description": "URL that points to the main website for this vendor"
            },
            "code": {
              "type": "string",
              "description": "Simple code for the vendor, must be unique, lowercase and numbers, no spaces or dashes"
            },
            "logo": {
              "type": "string",
              "description": "URL that points to a small logo glyph for this vendor, must be official"
            },
            "name": {
              "type": "string",
              "description": "Simple name of the vendor"
            },
            "description": {
              "type": "string",
              "description": "Fully qualified name of the vendor, should be the vendor's legal entity name."
            }
          },
          "description": "Schema for Vendor"
        }
      ]
      outputs: [
        {
          "type": "object"
        }
      ]
  deleteBoundary:
    description: |-
      Deletes a boundary
    versions:
      from: 0.13.11
      to: 0.13.11
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  deleteBoundaryProducts:
    description: |-
      Deletes products for a boundary
    versions:
      from: 0.13.11
      to: 0.13.11
    link: ''
    example:
      inputs: [
        {
          "type": "object",
          "example": {
            "productIds": [
              "00000000-0000-0000-0000-000000000000",
              "00000000-0000-0000-0000-000000000001"
            ]
          },
          "required": [
            "productIds"
          ],
          "properties": {
            "productIds": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          "description": "Schema for deleting products from a boundary"
        }
      ]
      outputs: [
        {}
      ]
  deleteBoundaryProductTargets:
    description: |-
      Deletes target for a boundary product
    versions:
      from: 0.13.11
      to: 0.13.11
    link: ''
    example:
      inputs: [
        {
          "type": "object",
          "example": {
            "productTargetIds": [
              "00000000-0000-0000-0000-000000000000",
              "00000000-0000-0000-0000-000000000001"
            ]
          },
          "required": [
            "productTargetIds"
          ],
          "properties": {
            "productTargetIds": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          "description": "Schema for deleting targets from a boundary product"
        }
      ]
      outputs: [
        {}
      ]
  deleteEventsForBoundary:
    description: |-
      Deletes events for a boundary
    versions:
      from: 0.13.11
      to: 0.13.11
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  deleteEvidenceBot:
    description: |-
      Delete evidence bot
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "object"
        }
      ]
  deleteEvidenceDefinition:
    description: |-
      Delete evidence definition
    versions:
      from: 0.13.11
      to: 0.13.11
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "object"
        }
      ]
  deleteEvidenceRequest:
    description: |-
      Deletes evidence request
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "object",
          "example": {
            "message": "Simple message response"
          },
          "required": [
            "message"
          ],
          "properties": {
            "message": {
              "type": "string",
              "description": "The message description"
            }
          },
          "description": "Schema for a message"
        }
      ]
  deleteEvidenceRequestList:
    description: |-
      Delete evidence request list
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "object",
          "example": {
            "message": "Simple message response"
          },
          "required": [
            "message"
          ],
          "properties": {
            "message": {
              "type": "string",
              "description": "The message description"
            }
          },
          "description": "Schema for a message"
        }
      ]
  deleteEvidenceType:
    description: |-
      Delete evidence type
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "object"
        }
      ]
  deleteGraphql:
    description: |-
      Deletes a GraphQL query by its ID
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "array",
          "items": {}
        }
      ]
  deleteProject:
    description: |-
      Delete project
    versions:
      from: 0.13.11
      to: 0.13.11
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  deleteProjectClass:
    description: |-
      Delete project class
    versions:
      from: 0.13.11
      to: 0.13.11
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  deleteProjectDataType:
    description: |-
      Delete project data type
    versions:
      from: 0.13.11
      to: 0.13.11
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  deleteProjectEnumInfo:
    description: |-
      Delete project enum info
    versions:
      from: 0.13.11
      to: 0.13.11
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  deleteProjectField:
    description: |-
      Delete project field
    versions:
      from: 0.13.11
      to: 0.13.11
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  deleteProjectProperty:
    description: |-
      Delete project property
    versions:
      from: 0.13.11
      to: 0.13.11
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  deleteSchedule:
    description: |-
      Delete schedule
    versions:
      from: 0.13.11
      to: 0.13.11
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  deleteUserFromOrganization:
    description: |-
      Deletes a user from given organization
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  disableLinkType:
    description: |-
      Disables a link type
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "boolean"
        }
      ]
  enableLinkType:
    description: |-
      Enables a link type
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "boolean"
        }
      ]
  endBatch:
    description: |-
      Ends a batch import, marking it ready for import
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "object"
        }
      ]
  executeGraphql:
    description: |-
      Executes a GraphQL query
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {
          "type": "object",
          "properties": {
            "payload": {
              "type": "object",
              "description": "Dynamic data payload containing JSON data",
              "additionalProperties": true
            }
          }
        }
      ]
      outputs: [
        {
          "type": "array",
          "items": {}
        }
      ]
  getAllProjectClasses:
    description: |-
      get all project classes
    versions:
      from: 0.13.11
      to: 0.13.11
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "array",
          "items": {
            "allOf": [
              {
                "allOf": [
                  {
                    "type": "object",
                    "required": [
                      "objectType",
                      "productId",
                      "id"
                    ],
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      },
                      "schema": {
                        "type": "object",
                        "nullable": true
                      },
                      "productId": {
                        "type": "string",
                        "format": "uuid"
                      },
                      "artifactId": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true
                      },
                      "objectType": {
                        "enum": [
                          "concrete",
                          "interface"
                        ],
                        "type": "string",
                        "description": "Type of class definition",
                        "x-enum-descriptions": [
                          "Concrete class definition",
                          "Interface definition"
                        ]
                      },
                      "pluralName": {
                        "type": "string",
                        "nullable": true
                      }
                    }
                  },
                  {
                    "type": "object",
                    "required": [
                      "projectId",
                      "name"
                    ],
                    "properties": {
                      "op": {
                        "enum": [
                          "none",
                          "create",
                          "update",
                          "delete"
                        ],
                        "type": "string",
                        "description": "Status of an operation"
                      },
                      "name": {
                        "type": "string"
                      },
                      "mappedId": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true
                      },
                      "projectId": {
                        "type": "string",
                        "format": "uuid"
                      },
                      "description": {
                        "type": "string"
                      }
                    },
                    "description": "Stored class for a project"
                  }
                ]
              },
              {
                "type": "object",
                "properties": {
                  "properties": {
                    "type": "array",
                    "items": {
                      "allOf": [
                        {
                          "type": "object",
                          "required": [
                            "id"
                          ],
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "uuid"
                            },
                            "multi": {
                              "type": "boolean",
                              "default": false,
                              "nullable": true
                            },
                            "fieldId": {
                              "type": "string",
                              "format": "uuid",
                              "nullable": true
                            },
                            "parentId": {
                              "type": "string",
                              "format": "uuid",
                              "nullable": true
                            },
                            "required": {
                              "type": "boolean",
                              "default": false,
                              "nullable": true
                            },
                            "artifactId": {
                              "type": "string",
                              "format": "uuid"
                            },
                            "defaultValue": {
                              "type": "string",
                              "nullable": true
                            }
                          }
                        },
                        {
                          "type": "object",
                          "required": [
                            "projectId",
                            "name"
                          ],
                          "properties": {
                            "op": {
                              "enum": [
                                "none",
                                "create",
                                "update",
                                "delete"
                              ],
                              "type": "string",
                              "description": "Status of an operation"
                            },
                            "name": {
                              "type": "string"
                            },
                            "mappedId": {
                              "type": "string",
                              "format": "uuid",
                              "nullable": true
                            },
                            "projectId": {
                              "type": "string",
                              "format": "uuid"
                            },
                            "description": {
                              "type": "string"
                            }
                          },
                          "description": "Stored property for a project"
                        }
                      ]
                    }
                  }
                }
              }
            ]
          }
        }
      ]
  getAllProjectDataTypes:
    description: |-
      get all project datatypes
    versions:
      from: 0.13.11
      to: 0.13.11
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "array",
          "items": {
            "allOf": [
              {
                "allOf": [
                  {
                    "type": "object",
                    "required": [
                      "type",
                      "id"
                    ],
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      },
                      "type": {
                        "enum": [
                          "array",
                          "object",
                          "string",
                          "boolean",
                          "number",
                          "enum"
                        ],
                        "type": "string",
                        "description": "JSON Object Type",
                        "x-enum-descriptions": [
                          "Array of one or many objects",
                          "Object definition",
                          "String",
                          "Boolean true/false value",
                          "Numeric value",
                          "Enumeration value"
                        ]
                      },
                      "values": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "nullable": true
                      },
                      "pattern": {
                        "type": "string",
                        "nullable": true
                      },
                      "coreType": {
                        "type": "boolean",
                        "default": false,
                        "nullable": true
                      },
                      "examples": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "nullable": true
                      },
                      "productId": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true
                      },
                      "artifactId": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true
                      }
                    }
                  },
                  {
                    "type": "object",
                    "required": [
                      "projectId",
                      "name"
                    ],
                    "properties": {
                      "op": {
                        "enum": [
                          "none",
                          "create",
                          "update",
                          "delete"
                        ],
                        "type": "string",
                        "description": "Status of an operation"
                      },
                      "name": {
                        "type": "string"
                      },
                      "mappedId": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true
                      },
                      "projectId": {
                        "type": "string",
                        "format": "uuid"
                      },
                      "description": {
                        "type": "string"
                      }
                    },
                    "description": "Stored data type for a project"
                  }
                ]
              },
              {
                "type": "object",
                "properties": {
                  "values": {
                    "type": "array",
                    "items": {
                      "allOf": [
                        {
                          "type": "object",
                          "required": [
                            "id",
                            "enumName",
                            "enumValue",
                            "graphqlValue",
                            "jsonValue",
                            "dataTypeId"
                          ],
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "uuid"
                            },
                            "enumName": {
                              "type": "string"
                            },
                            "enumValue": {
                              "type": "string"
                            },
                            "jsonValue": {
                              "type": "object"
                            },
                            "dataTypeId": {
                              "type": "string",
                              "format": "uuid"
                            },
                            "description": {
                              "type": "string",
                              "nullable": true
                            },
                            "graphqlValue": {
                              "type": "string"
                            }
                          },
                          "description": "Describes an Enum Info"
                        },
                        {
                          "type": "object",
                          "required": [
                            "projectId",
                            "name"
                          ],
                          "properties": {
                            "op": {
                              "enum": [
                                "none",
                                "create",
                                "update",
                                "delete"
                              ],
                              "type": "string",
                              "description": "Status of an operation"
                            },
                            "name": {
                              "type": "string"
                            },
                            "mappedId": {
                              "type": "string",
                              "format": "uuid",
                              "nullable": true
                            },
                            "projectId": {
                              "type": "string",
                              "format": "uuid"
                            },
                            "description": {
                              "type": "string"
                            }
                          },
                          "description": "New fields added into the project objects"
                        }
                      ]
                    }
                  }
                }
              }
            ]
          }
        }
      ]
  getAllProjectEnumInfo:
    description: |-
      get all project enum info
    versions:
      from: 0.13.11
      to: 0.13.11
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "array",
          "items": {
            "allOf": [
              {
                "type": "object",
                "required": [
                  "id",
                  "enumName",
                  "enumValue",
                  "graphqlValue",
                  "jsonValue",
                  "dataTypeId"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "enumName": {
                    "type": "string"
                  },
                  "enumValue": {
                    "type": "string"
                  },
                  "jsonValue": {
                    "type": "object"
                  },
                  "dataTypeId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "description": {
                    "type": "string",
                    "nullable": true
                  },
                  "graphqlValue": {
                    "type": "string"
                  }
                },
                "description": "Describes an Enum Info"
              },
              {
                "type": "object",
                "required": [
                  "projectId",
                  "name"
                ],
                "properties": {
                  "op": {
                    "enum": [
                      "none",
                      "create",
                      "update",
                      "delete"
                    ],
                    "type": "string",
                    "description": "Status of an operation"
                  },
                  "name": {
                    "type": "string"
                  },
                  "mappedId": {
                    "type": "string",
                    "format": "uuid",
                    "nullable": true
                  },
                  "projectId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "description": {
                    "type": "string"
                  }
                },
                "description": "New fields added into the project objects"
              }
            ]
          }
        }
      ]
  getAllProjectFields:
    description: |-
      get all project fields
    versions:
      from: 0.13.11
      to: 0.13.11
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "array",
          "items": {
            "allOf": [
              {
                "type": "object",
                "required": [
                  "displayName",
                  "productId",
                  "id",
                  "artifactId",
                  "keyed",
                  "indexed"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "keyed": {
                    "type": "boolean",
                    "default": false
                  },
                  "example": {
                    "type": "string",
                    "nullable": true
                  },
                  "indexed": {
                    "type": "boolean",
                    "default": true
                  },
                  "reserved": {
                    "type": "boolean",
                    "default": false,
                    "nullable": true
                  },
                  "productId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "artifactId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "dataTypeId": {
                    "type": "string",
                    "format": "uuid",
                    "nullable": true
                  },
                  "displayName": {
                    "type": "string"
                  },
                  "defaultValue": {
                    "type": "string",
                    "nullable": true
                  }
                }
              },
              {
                "type": "object",
                "required": [
                  "projectId",
                  "name"
                ],
                "properties": {
                  "op": {
                    "enum": [
                      "none",
                      "create",
                      "update",
                      "delete"
                    ],
                    "type": "string",
                    "description": "Status of an operation"
                  },
                  "name": {
                    "type": "string"
                  },
                  "mappedId": {
                    "type": "string",
                    "format": "uuid",
                    "nullable": true
                  },
                  "projectId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "description": {
                    "type": "string"
                  }
                },
                "description": "New fields added into the project objects"
              }
            ]
          }
        }
      ]
  getAllProjectProperties:
    description: |-
      get all project properties
    versions:
      from: 0.13.11
      to: 0.13.11
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "array",
          "items": {
            "allOf": [
              {
                "type": "object",
                "required": [
                  "id"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "multi": {
                    "type": "boolean",
                    "default": false,
                    "nullable": true
                  },
                  "fieldId": {
                    "type": "string",
                    "format": "uuid",
                    "nullable": true
                  },
                  "parentId": {
                    "type": "string",
                    "format": "uuid",
                    "nullable": true
                  },
                  "required": {
                    "type": "boolean",
                    "default": false,
                    "nullable": true
                  },
                  "artifactId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "defaultValue": {
                    "type": "string",
                    "nullable": true
                  }
                }
              },
              {
                "type": "object",
                "required": [
                  "projectId",
                  "name"
                ],
                "properties": {
                  "op": {
                    "enum": [
                      "none",
                      "create",
                      "update",
                      "delete"
                    ],
                    "type": "string",
                    "description": "Status of an operation"
                  },
                  "name": {
                    "type": "string"
                  },
                  "mappedId": {
                    "type": "string",
                    "format": "uuid",
                    "nullable": true
                  },
                  "projectId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "description": {
                    "type": "string"
                  }
                },
                "description": "Stored property for a project"
              }
            ]
          }
        }
      ]
  getAllProjects:
    description: |-
      get all projects
    versions:
      from: 0.13.11
      to: 0.13.11
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "id",
              "name",
              "ownerId",
              "status",
              "artifactId"
            ],
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "due": {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              "name": {
                "type": "string"
              },
              "status": {
                "enum": [
                  "draft",
                  "review",
                  "publishing",
                  "published",
                  "retiring",
                  "retired",
                  "cancelled"
                ],
                "type": "string",
                "description": "Type of Project Status"
              },
              "aliases": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "nullable": true
              },
              "created": {
                "type": "string",
                "format": "date-time"
              },
              "deleted": {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              "ownerId": {
                "type": "string",
                "format": "uuid"
              },
              "updated": {
                "type": "string",
                "format": "date-time"
              },
              "version": {
                "type": "string",
                "nullable": true
              },
              "imageUrl": {
                "type": "string",
                "format": "url",
                "nullable": true
              },
              "keywords": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "nullable": true
              },
              "artifactId": {
                "type": "string",
                "format": "uuid"
              },
              "properties": {
                "type": "object",
                "nullable": true
              },
              "description": {
                "type": "string"
              }
            },
            "description": "Describes the project related with the hydra resource"
          }
        }
      ]
  getAllSchedules:
    description: |-
      get all schedules
    versions:
      from: 0.13.11
      to: 0.13.11
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "name",
              "cron",
              "createdOn",
              "updatedOn"
            ],
            "properties": {
              "cron": {
                "type": "string"
              },
              "data": {
                "type": "object",
                "nullable": true
              },
              "name": {
                "type": "string"
              },
              "options": {
                "type": "object",
                "nullable": true,
                "properties": {
                  "priority": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "onComplete": {
                    "type": "boolean",
                    "default": false
                  },
                  "parameters": {
                    "type": "object"
                  },
                  "retryDelay": {
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                  },
                  "retrylimit": {
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                  },
                  "startAfter": {
                    "oneOf": [
                      {
                        "type": "integer",
                        "format": "int32"
                      },
                      {
                        "type": "string"
                      },
                      {
                        "type": "string",
                        "format": "date-time"
                      }
                    ]
                  },
                  "retryBackoff": {
                    "type": "boolean",
                    "default": false
                  },
                  "singletonKey": {
                    "type": "string"
                  },
                  "expireInHours": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "retentionDays": {
                    "type": "integer",
                    "format": "int32",
                    "default": 30
                  },
                  "retentionHours": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "singletonHours": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "expireInMinutes": {
                    "type": "integer",
                    "format": "int32",
                    "default": 15
                  },
                  "expireInSeconds": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "retentionMinutes": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "retentionSeconds": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "singletonMinutes": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "singletonSeconds": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "singletonNextSlot": {
                    "type": "boolean"
                  }
                },
                "description": "Describes the schedules options"
              },
              "timezone": {
                "type": "string",
                "default": "UTC",
                "nullable": true
              },
              "createdOn": {
                "type": "string",
                "format": "date-time"
              },
              "updatedOn": {
                "type": "string",
                "format": "date-time"
              }
            },
            "description": "Describes a schedule"
          }
        }
      ]
  getAllStatus:
    description: |-
      Returns the status of all import jobs
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "object"
        }
      ]
  getBatchItem:
    description: |-
      Lists batch items by batch ID
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "object"
        }
      ]
  getBoundary:
    description: |-
      Retrieves a boundary
    versions:
      from: 0.13.11
      to: 0.13.11
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "allOf": [
            {
              "type": "object",
              "required": [
                "id",
                "name",
                "description",
                "ownerId",
                "type",
                "status",
                "tagId",
                "createdBy"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid"
                },
                "name": {
                  "type": "string"
                },
                "type": {
                  "enum": [
                    "authorization",
                    "system",
                    "lab"
                  ],
                  "type": "string",
                  "description": "Type of boundary",
                  "x-enum-description": [
                    "Authorization boundary",
                    "System boundary",
                    "Lab boundary"
                  ]
                },
                "tagId": {
                  "type": "string",
                  "format": "uuid"
                },
                "status": {
                  "enum": [
                    "draft",
                    "under_review",
                    "active",
                    "archived"
                  ],
                  "type": "string",
                  "description": "Status of boundary",
                  "x-enum-description": [
                    "Draft",
                    "Under review",
                    "Active",
                    "Archived"
                  ]
                },
                "aliases": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true
                },
                "created": {
                  "type": "string",
                  "format": "date-time"
                },
                "deleted": {
                  "type": "string",
                  "format": "date-time",
                  "nullable": true
                },
                "ownerId": {
                  "type": "string",
                  "format": "uuid"
                },
                "updated": {
                  "type": "string",
                  "format": "date-time"
                },
                "imageUrl": {
                  "type": "string",
                  "format": "url",
                  "nullable": true
                },
                "keywords": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true
                },
                "parentId": {
                  "type": "string",
                  "format": "uuid",
                  "nullable": true
                },
                "createdBy": {
                  "type": "string",
                  "format": "uuid"
                },
                "description": {
                  "type": "string",
                  "nullable": true
                }
              },
              "description": "Describes boundary"
            },
            {
              "type": "object",
              "required": [
                "productCount",
                "createdByUsername"
              ],
              "properties": {
                "productCount": {
                  "type": "number"
                },
                "createdByUsername": {
                  "type": "string"
                }
              },
              "description": "Extends a boundary"
            }
          ]
        }
      ]
  getBoundaryProduct:
    description: |-
      Retrieves a boundary product
    versions:
      from: 0.13.11
      to: 0.13.11
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "allOf": [
            {
              "type": "object",
              "required": [
                "id",
                "name",
                "description",
                "ownerId",
                "status",
                "boundaryId",
                "productId"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid"
                },
                "name": {
                  "type": "string"
                },
                "status": {
                  "enum": [
                    "draft",
                    "verified",
                    "active",
                    "rejected",
                    "deleted"
                  ],
                  "type": "string",
                  "description": "Status of boundary product",
                  "x-enum-description": [
                    "Draft",
                    "Verified",
                    "Active",
                    "Rejected",
                    "Deleted"
                  ]
                },
                "aliases": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true
                },
                "created": {
                  "type": "string",
                  "format": "date-time"
                },
                "deleted": {
                  "type": "string",
                  "format": "date-time",
                  "nullable": true
                },
                "ownerId": {
                  "type": "string",
                  "format": "uuid"
                },
                "updated": {
                  "type": "string",
                  "format": "date-time"
                },
                "imageUrl": {
                  "type": "string",
                  "format": "url",
                  "nullable": true
                },
                "keywords": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true
                },
                "parentId": {
                  "type": "string",
                  "format": "uuid",
                  "nullable": true
                },
                "productId": {
                  "type": "string",
                  "format": "uuid",
                  "nullable": true
                },
                "boundaryId": {
                  "type": "string",
                  "format": "uuid"
                },
                "description": {
                  "type": "string",
                  "nullable": true
                }
              },
              "description": "Describes products in boundaries"
            },
            {
              "type": "object",
              "example": {
                "targets": [],
                "vendorCode": "ec2",
                "vendorName": "EC2",
                "productLogo": "https://www.google.com/logo",
                "productName": "tag",
                "targetsLinked": 0,
                "productPackage": "amazon.aws.ec2"
              },
              "required": [
                "vendorName",
                "productLogo",
                "productName",
                "productPackage"
              ],
              "properties": {
                "targets": {
                  "type": "array",
                  "items": {}
                },
                "vendorCode": {
                  "type": "string"
                },
                "vendorName": {
                  "type": "string"
                },
                "productLogo": {
                  "type": "string"
                },
                "productName": {
                  "type": "string"
                },
                "targetsLinked": {
                  "type": "number"
                },
                "productPackage": {
                  "type": "string"
                }
              },
              "description": "Extends a boundary product"
            }
          ]
        }
      ]
  getBrowserFrameworkVersionElement:
    description: |-
      Retrieves a browser framework element
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "object"
        }
      ]
  getClassInfo:
    description: |-
      Retrieves field level information about a class
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "object"
        }
      ]
  getCMDBData:
    description: |-
      Retrieves needed values for organization/user handling
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "object"
        }
      ]
  getComponentGraph:
    description: |-
      Retrieves a graph of related classes for the given component name
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "array",
          "items": {}
        }
      ]
  getComponentRecords:
    description: |-
      Retrieves object version records for a class
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "array",
          "items": {}
        }
      ]
  getComponents:
    description: |-
      Retrieves a list of all classes from the top level along with their linked objects
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "array",
          "items": {}
        }
      ]
  getDataTypeEnumInfo:
    description: |-
      Retrieves a data type enum info
    versions:
      from: 0.13.11
      to: 0.13.11
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "object",
          "example": {
            "id": "000000-0000-0000-0000000",
            "dataType": {},
            "enumValue": "aq",
            "jsonValue": {}
          },
          "required": [
            "id",
            "enumValue",
            "jsonValue"
          ],
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "The id of the data type enum info"
            },
            "dataType": {
              "type": "object",
              "example": {
                "id": "000000-0000-0000-0000000",
                "name": "Data type 1",
                "values": [
                  "ab",
                  "ac"
                ],
                "coreType": false,
                "examples": [
                  "ab",
                  "ac"
                ],
                "productId": "000000-0000-0000-0000000",
                "description": "This is an example description",
                "regexPattern": "^[a-zA-Z0-9].)$"
              },
              "required": [
                "id",
                "productId",
                "coreType",
                "package",
                "name",
                "description",
                "regexPattern",
                "examples",
                "values"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "The id of the data type"
                },
                "name": {
                  "type": "string",
                  "description": "The name of the data type"
                },
                "values": {
                  "type": "string",
                  "description": "Values of the data type"
                },
                "coreType": {
                  "type": "boolean",
                  "description": "The boolean indicating core type"
                },
                "examples": {
                  "type": "string",
                  "description": "Examples of the data type"
                },
                "productId": {
                  "type": "string",
                  "description": "The ID of the product"
                },
                "description": {
                  "type": "string",
                  "description": "The description of the data type"
                },
                "regexPattern": {
                  "type": "string",
                  "description": "The regex pattern for the data type"
                }
              },
              "description": "Schema for Data type"
            },
            "enumValue": {
              "type": "string",
              "description": "The enum code of the info"
            },
            "jsonValue": {
              "type": "object",
              "description": "The value of the enum"
            }
          },
          "description": "Schema for Data type"
        }
      ]
  getDataTypeInfo:
    description: |-
      Retrieves a data type info
    versions:
      from: 0.13.11
      to: 0.13.11
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "object",
          "example": {
            "id": "000000-0000-0000-0000000",
            "name": "Data type 1",
            "values": [
              "ab",
              "ac"
            ],
            "coreType": false,
            "examples": [
              "ab",
              "ac"
            ],
            "productId": "000000-0000-0000-0000000",
            "description": "This is an example description",
            "regexPattern": "^[a-zA-Z0-9].)$"
          },
          "required": [
            "id",
            "productId",
            "coreType",
            "package",
            "name",
            "description",
            "regexPattern",
            "examples",
            "values"
          ],
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "The id of the data type"
            },
            "name": {
              "type": "string",
              "description": "The name of the data type"
            },
            "values": {
              "type": "string",
              "description": "Values of the data type"
            },
            "coreType": {
              "type": "boolean",
              "description": "The boolean indicating core type"
            },
            "examples": {
              "type": "string",
              "description": "Examples of the data type"
            },
            "productId": {
              "type": "string",
              "description": "The ID of the product"
            },
            "description": {
              "type": "string",
              "description": "The description of the data type"
            },
            "regexPattern": {
              "type": "string",
              "description": "The regex pattern for the data type"
            }
          },
          "description": "Schema for Data type"
        }
      ]
  getEvidenceBot:
    description: |-
      Get evidence bot
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "object"
        }
      ]
  getEvidenceDefinition:
    description: |-
      Get an evidence definition
    versions:
      from: 0.13.11
      to: 0.13.11
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "object"
        }
      ]
  getEvidenceRequest:
    description: |-
      Get an evidence request
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "object",
          "example": {
            "name": "Evidence Request 1",
            "description": "This is an example description",
            "requestCode": "000000-0000-0000-0000000",
            "evidenceTypeId": "000000-0000-0000-0000000",
            "evidenceTypeName": "evidence type"
          },
          "required": [
            "id",
            "name",
            "description",
            "requestCode"
          ],
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "The id of the evidence request list"
            },
            "name": {
              "type": "string",
              "description": "The name of the evidence request list"
            },
            "description": {
              "type": "string",
              "description": "The description of the evidence request list"
            },
            "requestCode": {
              "type": "string",
              "description": "The ID of the evidence request list"
            },
            "evidenceTypeId": {
              "type": "string",
              "description": "The ID of the evidence type"
            },
            "evidenceTypeName": {
              "type": "string",
              "description": "The name of the evidence type"
            }
          },
          "description": "Schema for Evidence request list"
        }
      ]
  getEvidenceRequestList:
    description: |-
      Get evidence request list
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "object",
          "example": {
            "id": "000000-0000-0000-0000000",
            "name": "Evidence Request List 1",
            "tags": [],
            "status": "000000-0000-0000-0000000",
            "created": "2017-07-21T00:00:00.000Z",
            "updated": "2017-07-21T00:00:00.000Z",
            "description": "This is an example description",
            "frameworkVersionId": "000000-0000-0000-0000000",
            "frameworkVersionName": "rev4"
          },
          "required": [
            "id",
            "name",
            "description",
            "status",
            "version",
            "frameworkVersionId",
            "tags"
          ],
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "The id of the evidence request list"
            },
            "name": {
              "type": "string",
              "description": "The name of the evidence request list"
            },
            "tags": {
              "type": "array",
              "items": {}
            },
            "status": {
              "type": "string",
              "description": "The status of the evidence request list"
            },
            "created": {
              "type": "string",
              "format": "date-time",
              "description": "The date the evidence request list was created"
            },
            "updated": {
              "type": "string",
              "format": "date-time",
              "description": "The date the evidence request list was updated"
            },
            "description": {
              "type": "string",
              "description": "The description of the evidence request list"
            },
            "frameworkVersionId": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the framework version"
            },
            "frameworkVersionName": {
              "type": "string",
              "description": "The name of the framework version"
            }
          },
          "description": "Schema for Evidence request list"
        }
      ]
  getEvidenceType:
    description: |-
      Get evidence type
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "object"
        }
      ]
  getFieldDetails:
    description: |-
      Retrieves details about a field
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "object"
        }
      ]
  getFieldsList:
    description: |-
      Retrieves a list of all known fields and compound fields
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "array",
          "items": {}
        }
      ]
  getFrameworkElement:
    description: |-
      Retrieves a framework element
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "object"
        }
      ]
  getFrameworkVersion:
    description: |-
      Retrieves a framework version
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "object",
          "example": {
            "id": "000000-0000-0000-0000000",
            "url": "000000-0000-0000-0000000",
            "code": "nist-800 rev4",
            "status": "Public",
            "version": "rev4",
            "frameworkId": "evidence type",
            "frameworkElements": []
          },
          "required": [
            "id",
            "version",
            "code",
            "status",
            "url",
            "frameworkId",
            "elementTypes"
          ],
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the framework version"
            },
            "url": {
              "type": "string",
              "description": "The URL of the framework version"
            },
            "code": {
              "type": "string",
              "description": "The code of the framework version"
            },
            "status": {
              "type": "string",
              "description": "The status of the framework version"
            },
            "version": {
              "type": "string",
              "description": "The version of the framework version"
            },
            "frameworkId": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the parent framework"
            },
            "elementTypes": {
              "type": "array",
              "items": {}
            },
            "frameworkName": {
              "type": "string",
              "description": "The name of the parent framework"
            }
          },
          "description": "Schema for framework version"
        }
      ]
  getGraphqlQuery:
    description: |-
      Retrieves a saved GraphQL query
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "object"
        }
      ]
  getLinkDetails:
    description: |-
      Retrieve link type detail by ID
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "object"
        }
      ]
  getLinksForId:
    description: |-
      Lists all links for a given link type ID
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "array",
          "items": {}
        }
      ]
  getMockupById:
    description: |-
      Retrieves a mockup for a given mockupId
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "object"
        }
      ]
  getNavigationItemsByOrg:
    description: |-
      Retrieves navigation items for a specific organization
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "array",
          "items": {}
        }
      ]
  getNavigationItemsByOrgAndUser:
    description: |-
      Retrieves navigation items for a specific organization
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "array",
          "items": {}
        }
      ]
  getObjectGraph:
    description: |-
      Retrieves a graph of related classes for the given component ID
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "array",
          "items": {}
        }
      ]
  getObjectInstances:
    description: |-
      Retrieves a list of objects by class name
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "array",
          "items": {}
        }
      ]
  getObjectVersionsForId:
    description: |-
      Returns a list of the object versions matching a field value by ID
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "array",
          "items": {}
        }
      ]
  getOrganizationActivitiesByOrgId:
    description: |-
      Retrieves organization activities for a given orgId
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "array",
          "items": {
            "type": "object",
            "example": {
              "id": "00000000-0000-0000-0000-000000000000",
              "status": "NOT APPLICABLE",
              "required": false,
              "activityId": "00000000-0000-0000-0000-000000000001",
              "activityName": "Activity 1",
              "activityDescription": "Activity 1 Description"
            },
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid",
                "description": "The uuid of the organization"
              },
              "status": {
                "enum": [
                  "NOT APPLICABLE",
                  "TO DO",
                  "DONE"
                ],
                "type": "string",
                "description": "The status of the organization activity"
              },
              "required": {
                "type": "boolean"
              },
              "activityId": {
                "type": "string",
                "format": "uuid",
                "description": "The UUID for the activity"
              },
              "activityName": {
                "type": "string",
                "description": "The name of the activity"
              },
              "activityDescription": {
                "type": "string",
                "description": "The desciption of the activity"
              }
            },
            "description": "Schema for Farscape Portal Organization Activity"
          }
        }
      ]
  getOrganizationActivityById:
    description: |-
      Retrieves an organization activity for a given orgId and orgActivityId
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "object",
          "example": {
            "id": "00000000-0000-0000-0000-000000000000",
            "status": "NOT APPLICABLE",
            "required": false,
            "activityId": "00000000-0000-0000-0000-000000000001",
            "activityName": "Activity 1",
            "activityDescription": "Activity 1 Description"
          },
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "The uuid of the organization"
            },
            "status": {
              "enum": [
                "NOT APPLICABLE",
                "TO DO",
                "DONE"
              ],
              "type": "string",
              "description": "The status of the organization activity"
            },
            "required": {
              "type": "boolean"
            },
            "activityId": {
              "type": "string",
              "format": "uuid",
              "description": "The UUID for the activity"
            },
            "activityName": {
              "type": "string",
              "description": "The name of the activity"
            },
            "activityDescription": {
              "type": "string",
              "description": "The desciption of the activity"
            }
          },
          "description": "Schema for Farscape Portal Organization Activity"
        }
      ]
  getOrganizationById:
    description: |-
      Retrieves an organization for a given orgId
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "object",
          "example": {
            "id": "00000000-0000-0000-0000-000000000000",
            "code": "ARS",
            "name": "Artech Systems",
            "type": "AUDITEE",
            "status": "ONBOARDING",
            "iconURLString": "https://www.artechsystems.com/logo.png",
            "orgActivities": [
              {}
            ],
            "accredited3pao": false,
            "companyWebsite": "https://www.artechsystems.com",
            "complianceURLString": "https://www.zoho.com"
          },
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "The uuid of the organization"
            },
            "code": {
              "type": "string",
              "description": "The code for the organization"
            },
            "name": {
              "type": "string",
              "description": "The name of the organization"
            },
            "type": {
              "enum": [
                "AUDITEE",
                "ADVISORY FIRM",
                "AUDITOR",
                "CLIENT",
                "NEVERFAIL"
              ],
              "type": "string",
              "description": "The type of the organization"
            },
            "status": {
              "enum": [
                "ONBOARDING",
                "EVALUATION",
                "PRODUCTION",
                "SUSPENDED SERVICE"
              ],
              "type": "string",
              "description": "The status of the organization"
            },
            "iconURLString": {
              "type": "string",
              "description": "The icon URL String for the organization"
            },
            "orgActivities": {
              "type": "array",
              "items": {
                "type": "object",
                "example": {
                  "id": "00000000-0000-0000-0000-000000000000",
                  "status": "NOT APPLICABLE",
                  "required": false,
                  "activityId": "00000000-0000-0000-0000-000000000001",
                  "activityName": "Activity 1",
                  "activityDescription": "Activity 1 Description"
                },
                "properties": {
                  "id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The uuid of the organization"
                  },
                  "status": {
                    "enum": [
                      "NOT APPLICABLE",
                      "TO DO",
                      "DONE"
                    ],
                    "type": "string",
                    "description": "The status of the organization activity"
                  },
                  "required": {
                    "type": "boolean"
                  },
                  "activityId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The UUID for the activity"
                  },
                  "activityName": {
                    "type": "string",
                    "description": "The name of the activity"
                  },
                  "activityDescription": {
                    "type": "string",
                    "description": "The desciption of the activity"
                  }
                },
                "description": "Schema for Farscape Portal Organization Activity"
              },
              "description": "The activities for the organization"
            },
            "accredited3pao": {
              "type": "boolean"
            },
            "companyWebsite": {
              "type": "string",
              "description": "The URL String for the organization"
            },
            "complianceBridgeURLString": {
              "type": "string",
              "description": "The URL String for the organizations compliance bridge"
            }
          },
          "description": "Schema for Farscape Portal Organization"
        }
      ]
  getOrganizationGroups:
    description: |-
      Gets a list of all groups in an organizations
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "array",
          "items": {
            "type": "object",
            "example": {
              "id": "00000000-0000-0000-0000-000000000000",
              "name": "Group 1",
              "ownerId": "00000000-0000-0000-0000-000000000001"
            },
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid",
                "description": "The uuid of the group"
              },
              "name": {
                "type": "string",
                "description": "The name of the user"
              },
              "ownerId": {
                "type": "string",
                "format": "uuid",
                "description": "The uuid of the group organization"
              }
            },
            "description": "Schema for Hydra Group"
          }
        }
      ]
  getOrganizations:
    description: |-
      Gets a list of all organizations
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "array",
          "items": {
            "type": "object",
            "example": {
              "id": "00000000-0000-0000-0000-000000000000",
              "zoho_id": 12345657890,
              "accredited_3pao": false,
              "company_web_site": "www.company.com",
              "organization_code": "myorg123",
              "organization_name": "My Organization 123",
              "organization_type": [
                "00000000-0000-0000-0000-000000000001",
                "00000000-0000-0000-0000-000000000002"
              ],
              "organization_status": "00000000-0000-0000-0000-000000000002",
              "organization_icon_url_string": "www.company.com/iconstring"
            },
            "required": [
              "id",
              "zoho_id",
              "organization_code",
              "organization_name",
              "organization_type",
              "accredited_3pao",
              "organization_status",
              "organization_icon_url_string",
              "company_web_site"
            ],
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid",
                "description": "The uuid of the organization"
              },
              "zoho_id": {
                "type": "string",
                "description": "The Zoho CRM record ID"
              },
              "accredited_3pao": {
                "type": "boolean",
                "description": "Whether the oranization is accredited with 3pao"
              },
              "company_web_site": {
                "type": "string",
                "description": "The organizations website"
              },
              "organization_code": {
                "type": "string",
                "description": "The slug of the organization"
              },
              "organization_name": {
                "type": "string",
                "description": "The name of the organization"
              },
              "organization_type": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                },
                "description": "List of the organizations types"
              },
              "organization_status": {
                "type": "string",
                "format": "uuid",
                "description": "The organization engagement state UUID"
              },
              "organization_icon_url_string": {
                "type": "string",
                "description": "The organizations icon url string"
              }
            },
            "description": "Schema for Portal Organization"
          }
        }
      ]
  getOrgUsers:
    description: |-
      Gets a list of all organization user members
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "array",
          "items": {
            "type": "object",
            "example": {
              "id": "00000000-0000-0000-0000-000000000000",
              "name": "Fred Tompson",
              "email": "user@domain.com",
              "owner_id": "00000000-0000-0000-0000-000000000001",
              "avatar_url": "www.domain.com/useravatarurl",
              "security_groups": [
                "00000000-0000-0000-0000-000000000002",
                "00000000-0000-0000-0000-000000000003"
              ]
            },
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid",
                "description": "The UUID of the user"
              },
              "name": {
                "type": "string",
                "description": "The name of the user"
              },
              "email": {
                "type": "string",
                "description": "The email for the user"
              },
              "owner_id": {
                "type": "string",
                "format": "uuid",
                "description": "The UUID of the users owner"
              },
              "avatar_url": {
                "type": "string",
                "description": "The avatar URL of the user"
              },
              "security_groups": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                },
                "description": "List of security groups the user belongs to within the organization"
              }
            },
            "description": "Schema for Farscape Portal User"
          }
        }
      ]
  getPortalActivities:
    description: |-
      Retrieves navigation activities
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "array",
          "items": {
            "type": "object",
            "example": {
              "id": "00000000-0000-0000-0000-000000000000",
              "app": "00000000-0000-0000-0000-000000000001",
              "name": "Activity 1",
              "zoho_id": 1234567890,
              "description": "Activity 1 Description"
            },
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid",
                "description": "The uuid of the activity"
              },
              "app": {
                "type": "string",
                "format": "uuid",
                "description": "The uuid of app the activity relates to"
              },
              "name": {
                "type": "string",
                "description": "The name of the activity"
              },
              "zoho_id": {
                "type": "string",
                "format": "uuid",
                "description": "The zoho id of the activity"
              },
              "description": {
                "type": "string",
                "description": "The desciption of the activity"
              }
            },
            "description": "Schema for Farscape Portal Activity"
          }
        }
      ]
  getPortalOrganizationById:
    description: |-
      Gets an organization record by ID
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "array",
          "items": {
            "type": "object",
            "example": {
              "id": "00000000-0000-0000-0000-000000000000",
              "zoho_id": 12345657890,
              "accredited_3pao": false,
              "company_web_site": "www.company.com",
              "organization_code": "myorg123",
              "organization_name": "My Organization 123",
              "organization_type": [
                "00000000-0000-0000-0000-000000000001",
                "00000000-0000-0000-0000-000000000002"
              ],
              "organization_status": "00000000-0000-0000-0000-000000000002",
              "organization_icon_url_string": "www.company.com/iconstring"
            },
            "required": [
              "id",
              "zoho_id",
              "organization_code",
              "organization_name",
              "organization_type",
              "accredited_3pao",
              "organization_status",
              "organization_icon_url_string",
              "company_web_site"
            ],
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid",
                "description": "The uuid of the organization"
              },
              "zoho_id": {
                "type": "string",
                "description": "The Zoho CRM record ID"
              },
              "accredited_3pao": {
                "type": "boolean",
                "description": "Whether the oranization is accredited with 3pao"
              },
              "company_web_site": {
                "type": "string",
                "description": "The organizations website"
              },
              "organization_code": {
                "type": "string",
                "description": "The slug of the organization"
              },
              "organization_name": {
                "type": "string",
                "description": "The name of the organization"
              },
              "organization_type": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                },
                "description": "List of the organizations types"
              },
              "organization_status": {
                "type": "string",
                "format": "uuid",
                "description": "The organization engagement state UUID"
              },
              "organization_icon_url_string": {
                "type": "string",
                "description": "The organizations icon url string"
              }
            },
            "description": "Schema for Portal Organization"
          }
        }
      ]
  getPortalOrganizationContractById:
    description: |-
      Gets an organization contract by id
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "array",
          "items": {
            "type": "object",
            "example": {
              "id": "00000000-0000-0000-0000-000000000000",
              "zoho_id": 1234567890,
              "end_date": "2022-01-30T08:30:00.000Z",
              "start_date": "2021-01-30T08:30:00.000Z",
              "contract_level": "00000000-0000-0000-0000-000000000001",
              "contract_number": "NFCC-0000-E",
              "contract_status": "ACTIVE",
              "contract_master_type": "NFCC AUDITEE CONTRACT"
            },
            "required": [
              "id",
              "zoho_id",
              "contract_number",
              "contract_master_type",
              "contract_level",
              "contract_status",
              "start_date",
              "end_date"
            ],
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid",
                "description": "The id of the contract"
              },
              "zoho_id": {
                "type": "string",
                "description": "The Zoho id of the contract"
              },
              "end_date": {
                "type": "string",
                "format": "date-time",
                "description": "The timestamp of the contract end date"
              },
              "start_date": {
                "type": "string",
                "format": "date-time",
                "description": "The timestamp of the contract start date"
              },
              "contract_level": {
                "type": "string",
                "format": "uuid",
                "description": "The contract level UUID"
              },
              "contract_number": {
                "type": "string",
                "description": "The text value of the contract number"
              },
              "contract_status": {
                "enum": [
                  "ACTIVE",
                  "SIGNED",
                  "EXPIRED"
                ],
                "type": "string",
                "description": "The status of the contract"
              },
              "contract_master_type": {
                "enum": [
                  "NFCC AUDITEE CONTRACT"
                ],
                "type": "string",
                "description": "The type of master contract"
              }
            },
            "description": "Schema for New Portal Contract"
          }
        }
      ]
  getPortalOrganizationContracts:
    description: |-
      Gets an organizations contracts
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "array",
          "items": {
            "type": "object",
            "example": {
              "id": "00000000-0000-0000-0000-000000000000",
              "zoho_id": 1234567890,
              "end_date": "2022-01-30T08:30:00.000Z",
              "start_date": "2021-01-30T08:30:00.000Z",
              "contract_level": "00000000-0000-0000-0000-000000000001",
              "contract_number": "NFCC-0000-E",
              "contract_status": "ACTIVE",
              "contract_master_type": "NFCC AUDITEE CONTRACT"
            },
            "required": [
              "id",
              "zoho_id",
              "contract_number",
              "contract_master_type",
              "contract_level",
              "contract_status",
              "start_date",
              "end_date"
            ],
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid",
                "description": "The id of the contract"
              },
              "zoho_id": {
                "type": "string",
                "description": "The Zoho id of the contract"
              },
              "end_date": {
                "type": "string",
                "format": "date-time",
                "description": "The timestamp of the contract end date"
              },
              "start_date": {
                "type": "string",
                "format": "date-time",
                "description": "The timestamp of the contract start date"
              },
              "contract_level": {
                "type": "string",
                "format": "uuid",
                "description": "The contract level UUID"
              },
              "contract_number": {
                "type": "string",
                "description": "The text value of the contract number"
              },
              "contract_status": {
                "enum": [
                  "ACTIVE",
                  "SIGNED",
                  "EXPIRED"
                ],
                "type": "string",
                "description": "The status of the contract"
              },
              "contract_master_type": {
                "enum": [
                  "NFCC AUDITEE CONTRACT"
                ],
                "type": "string",
                "description": "The type of master contract"
              }
            },
            "description": "Schema for New Portal Contract"
          }
        }
      ]
  getPortalUsers:
    description: |-
      Gets a list of all portal organization users
    versions:
      from: 0.13.11
      to: 0.13.11
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "array",
          "items": {
            "type": "object",
            "example": {
              "id": "00000000-0000-0000-0000-000000000000",
              "roles": {
                "00000000-0000-0000-0000-000000000002": null,
                "00000000-0000-0000-0000-000000000003": null
              },
              "zoho_id": 1234567890,
              "user_name": "test user",
              "user_email": "tuser@email.com",
              "organization": "00000000-0000-0000-0000-000000000001",
              "employee_status": "active",
              "avatar_url_string": "www.tuser.com/avatar"
            },
            "required": [
              "id",
              "zoho_id",
              "user_name",
              "user_email",
              "avatar_url_string",
              "organization",
              "employee_status",
              "roles"
            ],
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid",
                "description": "The id of the user"
              },
              "roles": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              },
              "zoho_id": {
                "type": "string",
                "description": "The id of the Zoho CRM contact record"
              },
              "user_name": {
                "type": "string",
                "description": "The name of the user"
              },
              "user_email": {
                "type": "string",
                "description": "The email of the user"
              },
              "organization": {
                "type": "string",
                "description": "The UUID of the users organization"
              },
              "employee_status": {
                "enum": [
                  "active",
                  "inactive"
                ],
                "type": "string",
                "description": "The status of the employee"
              },
              "avatar_url_string": {
                "type": "string",
                "description": "The avatar url string of the user"
              }
            },
            "description": "Schema for Hydra Organization"
          }
        }
      ]
  getProductDetails:
    description: |-
      Retrieves details about a product
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "object"
        }
      ]
  getProductsList:
    description: |-
      Retrieves a list of all known products
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "array",
          "items": {}
        }
      ]
  getProjectById:
    description: |-
      Get project by id.
    versions:
      from: 0.13.11
      to: 0.13.11
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  getProjectClassById:
    description: |-
      Get project class by id.
    versions:
      from: 0.13.11
      to: 0.13.11
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  getProjectDataTypeById:
    description: |-
      Get project data type by id.
    versions:
      from: 0.13.11
      to: 0.13.11
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "allOf": [
            {
              "allOf": [
                {
                  "type": "object",
                  "required": [
                    "type",
                    "id"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "type": {
                      "enum": [
                        "array",
                        "object",
                        "string",
                        "boolean",
                        "number",
                        "enum"
                      ],
                      "type": "string",
                      "description": "JSON Object Type",
                      "x-enum-descriptions": [
                        "Array of one or many objects",
                        "Object definition",
                        "String",
                        "Boolean true/false value",
                        "Numeric value",
                        "Enumeration value"
                      ]
                    },
                    "values": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true
                    },
                    "pattern": {
                      "type": "string",
                      "nullable": true
                    },
                    "coreType": {
                      "type": "boolean",
                      "default": false,
                      "nullable": true
                    },
                    "examples": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true
                    },
                    "productId": {
                      "type": "string",
                      "format": "uuid",
                      "nullable": true
                    },
                    "artifactId": {
                      "type": "string",
                      "format": "uuid",
                      "nullable": true
                    }
                  }
                },
                {
                  "type": "object",
                  "required": [
                    "projectId",
                    "name"
                  ],
                  "properties": {
                    "op": {
                      "enum": [
                        "none",
                        "create",
                        "update",
                        "delete"
                      ],
                      "type": "string",
                      "description": "Status of an operation"
                    },
                    "name": {
                      "type": "string"
                    },
                    "mappedId": {
                      "type": "string",
                      "format": "uuid",
                      "nullable": true
                    },
                    "projectId": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "description": {
                      "type": "string"
                    }
                  },
                  "description": "Stored data type for a project"
                }
              ]
            },
            {
              "type": "object",
              "properties": {
                "values": {
                  "type": "array",
                  "items": {
                    "allOf": [
                      {
                        "type": "object",
                        "required": [
                          "id",
                          "enumName",
                          "enumValue",
                          "graphqlValue",
                          "jsonValue",
                          "dataTypeId"
                        ],
                        "properties": {
                          "id": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "enumName": {
                            "type": "string"
                          },
                          "enumValue": {
                            "type": "string"
                          },
                          "jsonValue": {
                            "type": "object"
                          },
                          "dataTypeId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "description": {
                            "type": "string",
                            "nullable": true
                          },
                          "graphqlValue": {
                            "type": "string"
                          }
                        },
                        "description": "Describes an Enum Info"
                      },
                      {
                        "type": "object",
                        "required": [
                          "projectId",
                          "name"
                        ],
                        "properties": {
                          "op": {
                            "enum": [
                              "none",
                              "create",
                              "update",
                              "delete"
                            ],
                            "type": "string",
                            "description": "Status of an operation"
                          },
                          "name": {
                            "type": "string"
                          },
                          "mappedId": {
                            "type": "string",
                            "format": "uuid",
                            "nullable": true
                          },
                          "projectId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "description": {
                            "type": "string"
                          }
                        },
                        "description": "New fields added into the project objects"
                      }
                    ]
                  }
                }
              }
            }
          ]
        }
      ]
  getProjectEnumInfoById:
    description: |-
      Get project enum info by id.
    versions:
      from: 0.13.11
      to: 0.13.11
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  getProjectFieldById:
    description: |-
      Get project field by id.
    versions:
      from: 0.13.11
      to: 0.13.11
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  getProjectPropertyById:
    description: |-
      Get project property by id.
    versions:
      from: 0.13.11
      to: 0.13.11
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  getScfControl:
    description: |-
      Retrieves a scf control with all the mappings
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "object"
        }
      ]
  getScheduleByName:
    description: |-
      Get schedule by name.
    versions:
      from: 0.13.11
      to: 0.13.11
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  getScreenByPageId:
    description: |-
      Retrieves the screens for a given page
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "object"
        }
      ]
  getServerSpec:
    description: |-
      Retrieves the server specification OpenAPI file
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  getStatus:
    description: |-
      Returns the status of an import job
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "object"
        }
      ]
  getSuiteDetails:
    description: |-
      Retrieves details about a suite
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "object"
        }
      ]
  getSuitesList:
    description: |-
      Retrieves a list of all known suites
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "array",
          "items": {}
        }
      ]
  getTag:
    description: |-
      Retrieves information about a tag by ID
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "object"
        }
      ]
  getTypesDetails:
    description: |-
      Retrieves information about a data type including all of its document properties if an object
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "object"
        }
      ]
  getTypesList:
    description: |-
      Retrieves a list of all known JSON data types
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "array",
          "items": {}
        }
      ]
  getUserInviteById:
    description: |-
      Gets a list of a user invite
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "object",
          "example": {
            "id": "00000000-0000-0000-0000-000000000000",
            "admin": true,
            "email": "user@domain.com",
            "org_id": "00000000-0000-0000-0000-000000000001",
            "group_ids": [
              "00000000-0000-0000-0000-000000000002"
            ],
            "isExpired": false,
            "authorized": false,
            "expiration": "2021-01-30T08:30:00.000Z"
          },
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "The UUID of the user invite"
            },
            "admin": {
              "type": "boolean",
              "description": "Whether the user will be an admin"
            },
            "email": {
              "type": "string",
              "description": "The email for the user being invited"
            },
            "org_id": {
              "type": "string",
              "format": "uuid",
              "description": "The UUID of the invitations org principal"
            },
            "group_ids": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "description": "List of group principals to be added to on acceptance of invite"
            },
            "isExpired": {
              "type": "boolean",
              "description": "Whether the invitation has expired"
            },
            "authorized": {
              "type": "boolean",
              "description": "Whether the user will be authorized"
            },
            "expiration": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp of the invitation expiration"
            }
          },
          "description": "Schema for Farscape Portal User Invite"
        }
      ]
  getUserInvites:
    description: |-
      Gets a list of all user invites
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "array",
          "items": {
            "type": "object",
            "example": {
              "id": "00000000-0000-0000-0000-000000000000",
              "admin": true,
              "email": "user@domain.com",
              "org_id": "00000000-0000-0000-0000-000000000001",
              "group_ids": [
                "00000000-0000-0000-0000-000000000002"
              ],
              "isExpired": false,
              "authorized": false,
              "expiration": "2021-01-30T08:30:00.000Z"
            },
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid",
                "description": "The UUID of the user invite"
              },
              "admin": {
                "type": "boolean",
                "description": "Whether the user will be an admin"
              },
              "email": {
                "type": "string",
                "description": "The email for the user being invited"
              },
              "org_id": {
                "type": "string",
                "format": "uuid",
                "description": "The UUID of the invitations org principal"
              },
              "group_ids": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                },
                "description": "List of group principals to be added to on acceptance of invite"
              },
              "isExpired": {
                "type": "boolean",
                "description": "Whether the invitation has expired"
              },
              "authorized": {
                "type": "boolean",
                "description": "Whether the user will be authorized"
              },
              "expiration": {
                "type": "string",
                "format": "date-time",
                "description": "The timestamp of the invitation expiration"
              }
            },
            "description": "Schema for Farscape Portal User Invite"
          }
        }
      ]
  getVendorDetails:
    description: |-
      Retrieves details about a vendor
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "object"
        }
      ]
  getVendorsList:
    description: |-
      Retrieves a list of all known vendors
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "array",
          "items": {}
        }
      ]
  installPackage:
    description: |-
      Installs a package, given an optional version.  If no version is specified, latest is used.
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "object"
        }
      ]
  installPackagePost:
    description: |-
      Installs a package, given an optional version.  If no version is specified, latest is used.
    versions:
      from: 0.13.11
      to: 0.13.11
    link: ''
    example:
      inputs: [
        {
          "type": "object",
          "example": {
            "version": "1.0.0",
            "packageName": "@nfcc/bundle-all"
          },
          "required": [
            "packageName"
          ],
          "properties": {
            "version": {
              "type": "string",
              "description": "The version of the package to install"
            },
            "packageName": {
              "type": "string",
              "description": "The name of the package to install"
            }
          },
          "description": "Schema for Catalog Package Install"
        }
      ]
      outputs: [
        {
          "type": "object",
          "example": {
            "taskId": "00000000-0000-0000-0000-000000000000"
          },
          "required": [
            "taskId"
          ],
          "properties": {
            "taskId": {
              "type": "string",
              "format": "uuid",
              "description": "The uuid of the task"
            }
          },
          "description": "Schema for Task Object Return"
        }
      ]
  listBatches:
    description: |-
      Lists batches in the system, sorted by date
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "array",
          "items": {}
        }
      ]
  listBatchItems:
    description: |-
      Lists batch items by batch ID
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "array",
          "items": {}
        }
      ]
  listBoundaries:
    description: |-
      Retrieves a list of all boundaries
    versions:
      from: 0.13.11
      to: 0.13.11
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "array",
          "items": {
            "allOf": [
              {
                "type": "object",
                "required": [
                  "id",
                  "name",
                  "description",
                  "ownerId",
                  "type",
                  "status",
                  "tagId",
                  "createdBy"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "name": {
                    "type": "string"
                  },
                  "type": {
                    "enum": [
                      "authorization",
                      "system",
                      "lab"
                    ],
                    "type": "string",
                    "description": "Type of boundary",
                    "x-enum-description": [
                      "Authorization boundary",
                      "System boundary",
                      "Lab boundary"
                    ]
                  },
                  "tagId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "status": {
                    "enum": [
                      "draft",
                      "under_review",
                      "active",
                      "archived"
                    ],
                    "type": "string",
                    "description": "Status of boundary",
                    "x-enum-description": [
                      "Draft",
                      "Under review",
                      "Active",
                      "Archived"
                    ]
                  },
                  "aliases": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "created": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "deleted": {
                    "type": "string",
                    "format": "date-time",
                    "nullable": true
                  },
                  "ownerId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "updated": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "imageUrl": {
                    "type": "string",
                    "format": "url",
                    "nullable": true
                  },
                  "keywords": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "parentId": {
                    "type": "string",
                    "format": "uuid",
                    "nullable": true
                  },
                  "createdBy": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "description": {
                    "type": "string",
                    "nullable": true
                  }
                },
                "description": "Describes boundary"
              },
              {
                "type": "object",
                "required": [
                  "productCount",
                  "createdByUsername"
                ],
                "properties": {
                  "productCount": {
                    "type": "number"
                  },
                  "createdByUsername": {
                    "type": "string"
                  }
                },
                "description": "Extends a boundary"
              }
            ]
          }
        }
      ]
  listBoundaryEvents:
    description: |-
      Retrieves a list of events for a boundary
    versions:
      from: 0.13.11
      to: 0.13.11
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "array",
          "items": {
            "allOf": [
              {
                "type": "object",
                "required": [
                  "id",
                  "type",
                  "boundaryId",
                  "userId",
                  "description",
                  "tstamp"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "type": {
                    "enum": [
                      "product_added",
                      "product_removed",
                      "target_added",
                      "target_removed",
                      "boundary_status_change"
                    ],
                    "type": "string",
                    "description": "Type of boundary event",
                    "x-enum-description": [
                      "Product added",
                      "Product removed",
                      "Target added",
                      "Target removed",
                      "Boundary status change"
                    ]
                  },
                  "tstamp": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "userId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "targetId": {
                    "type": "string",
                    "format": "uuid",
                    "nullable": true
                  },
                  "productId": {
                    "type": "string",
                    "format": "uuid",
                    "nullable": true
                  },
                  "boundaryId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "description": {
                    "type": "string"
                  }
                },
                "description": "Describes boundary events"
              },
              {
                "type": "object",
                "required": [
                  "username"
                ],
                "properties": {
                  "username": {
                    "type": "string"
                  }
                },
                "description": "Extends a boundary event"
              }
            ]
          }
        }
      ]
  listBoundaryProductsByBoundary:
    description: |-
      Retrieves a list of products for a boundary
    versions:
      from: 0.13.11
      to: 0.13.11
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "array",
          "items": {
            "allOf": [
              {
                "type": "object",
                "required": [
                  "id",
                  "name",
                  "description",
                  "ownerId",
                  "status",
                  "boundaryId",
                  "productId"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "name": {
                    "type": "string"
                  },
                  "status": {
                    "enum": [
                      "draft",
                      "verified",
                      "active",
                      "rejected",
                      "deleted"
                    ],
                    "type": "string",
                    "description": "Status of boundary product",
                    "x-enum-description": [
                      "Draft",
                      "Verified",
                      "Active",
                      "Rejected",
                      "Deleted"
                    ]
                  },
                  "aliases": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "created": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "deleted": {
                    "type": "string",
                    "format": "date-time",
                    "nullable": true
                  },
                  "ownerId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "updated": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "imageUrl": {
                    "type": "string",
                    "format": "url",
                    "nullable": true
                  },
                  "keywords": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "parentId": {
                    "type": "string",
                    "format": "uuid",
                    "nullable": true
                  },
                  "productId": {
                    "type": "string",
                    "format": "uuid",
                    "nullable": true
                  },
                  "boundaryId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "description": {
                    "type": "string",
                    "nullable": true
                  }
                },
                "description": "Describes products in boundaries"
              },
              {
                "type": "object",
                "example": {
                  "targets": [],
                  "vendorCode": "ec2",
                  "vendorName": "EC2",
                  "productLogo": "https://www.google.com/logo",
                  "productName": "tag",
                  "targetsLinked": 0,
                  "productPackage": "amazon.aws.ec2"
                },
                "required": [
                  "vendorName",
                  "productLogo",
                  "productName",
                  "productPackage"
                ],
                "properties": {
                  "targets": {
                    "type": "array",
                    "items": {}
                  },
                  "vendorCode": {
                    "type": "string"
                  },
                  "vendorName": {
                    "type": "string"
                  },
                  "productLogo": {
                    "type": "string"
                  },
                  "productName": {
                    "type": "string"
                  },
                  "targetsLinked": {
                    "type": "number"
                  },
                  "productPackage": {
                    "type": "string"
                  }
                },
                "description": "Extends a boundary product"
              }
            ]
          }
        }
      ]
  listBoundaryTargetsByProduct:
    description: |-
      Retrieves a list of targets for a boundary
    versions:
      from: 0.13.11
      to: 0.13.11
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "array",
          "items": {
            "allOf": [
              {
                "type": "object",
                "required": [
                  "id",
                  "boundaryProductId",
                  "targetId"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "targetId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "boundaryProductId": {
                    "type": "string",
                    "format": "uuid"
                  }
                },
                "description": "Describes the bonds between boundary products to targets"
              },
              {
                "type": "object",
                "required": [
                  "connectionInfo"
                ],
                "properties": {
                  "connectionInfo": {
                    "type": "object"
                  }
                },
                "description": "Extends a boundary product target"
              }
            ]
          }
        }
      ]
  listBrowserFrameworks:
    description: |-
      Retrieves a human version list of all frameworks
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "object"
        }
      ]
  listBrowserFrameworkVersionElements:
    description: |-
      Retrieves a browser version list of elements for a framework version
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "object"
        }
      ]
  listBrowserFrameworkVersions:
    description: |-
      Retrieves a browser version list of versions for a framework
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "object"
        }
      ]
  listDataTypeEnumInfo:
    description: |-
      Retrieves a list of all data type enum info
    versions:
      from: 0.13.11
      to: 0.13.11
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "array",
          "items": {
            "type": "object",
            "example": {
              "id": "000000-0000-0000-0000000",
              "dataType": {},
              "enumValue": "aq",
              "jsonValue": {}
            },
            "required": [
              "id",
              "enumValue",
              "jsonValue"
            ],
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid",
                "description": "The id of the data type enum info"
              },
              "dataType": {
                "type": "object",
                "example": {
                  "id": "000000-0000-0000-0000000",
                  "name": "Data type 1",
                  "values": [
                    "ab",
                    "ac"
                  ],
                  "coreType": false,
                  "examples": [
                    "ab",
                    "ac"
                  ],
                  "productId": "000000-0000-0000-0000000",
                  "description": "This is an example description",
                  "regexPattern": "^[a-zA-Z0-9].)$"
                },
                "required": [
                  "id",
                  "productId",
                  "coreType",
                  "package",
                  "name",
                  "description",
                  "regexPattern",
                  "examples",
                  "values"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The id of the data type"
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the data type"
                  },
                  "values": {
                    "type": "string",
                    "description": "Values of the data type"
                  },
                  "coreType": {
                    "type": "boolean",
                    "description": "The boolean indicating core type"
                  },
                  "examples": {
                    "type": "string",
                    "description": "Examples of the data type"
                  },
                  "productId": {
                    "type": "string",
                    "description": "The ID of the product"
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of the data type"
                  },
                  "regexPattern": {
                    "type": "string",
                    "description": "The regex pattern for the data type"
                  }
                },
                "description": "Schema for Data type"
              },
              "enumValue": {
                "type": "string",
                "description": "The enum code of the info"
              },
              "jsonValue": {
                "type": "object",
                "description": "The value of the enum"
              }
            },
            "description": "Schema for Data type"
          }
        }
      ]
  listDataTypes:
    description: |-
      Retrieves a list of all data type
    versions:
      from: 0.13.11
      to: 0.13.11
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "array",
          "items": {
            "type": "object",
            "example": {
              "id": "000000-0000-0000-0000000",
              "name": "Data type 1",
              "values": [
                "ab",
                "ac"
              ],
              "coreType": false,
              "examples": [
                "ab",
                "ac"
              ],
              "productId": "000000-0000-0000-0000000",
              "description": "This is an example description",
              "regexPattern": "^[a-zA-Z0-9].)$"
            },
            "required": [
              "id",
              "productId",
              "coreType",
              "package",
              "name",
              "description",
              "regexPattern",
              "examples",
              "values"
            ],
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid",
                "description": "The id of the data type"
              },
              "name": {
                "type": "string",
                "description": "The name of the data type"
              },
              "values": {
                "type": "string",
                "description": "Values of the data type"
              },
              "coreType": {
                "type": "boolean",
                "description": "The boolean indicating core type"
              },
              "examples": {
                "type": "string",
                "description": "Examples of the data type"
              },
              "productId": {
                "type": "string",
                "description": "The ID of the product"
              },
              "description": {
                "type": "string",
                "description": "The description of the data type"
              },
              "regexPattern": {
                "type": "string",
                "description": "The regex pattern for the data type"
              }
            },
            "description": "Schema for Data type"
          }
        }
      ]
  listEvidenceBots:
    description: |-
      List evidence bots
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "object"
        }
      ]
  listEvidenceDefinitions:
    description: |-
      List evidence definitions
    versions:
      from: 0.13.11
      to: 0.13.11
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "array",
          "items": {
            "type": "object",
            "example": {
              "id": "000000-0000-0000-0000000",
              "name": "Evidence Definition 1",
              "status": "DRAFT",
              "description": "This is an example description"
            },
            "required": [
              "id",
              "name",
              "description",
              "status"
            ],
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid",
                "description": "The ID of the evidence definition"
              },
              "name": {
                "type": "string",
                "description": "The name of the evidence definition"
              },
              "tags": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "status": {
                "enum": [
                  "draft",
                  "publishing",
                  "published",
                  "retiring",
                  "retired"
                ],
                "type": "string",
                "description": "Status of the publishing evidence component"
              },
              "deleted": {
                "type": "string",
                "format": "date-time"
              },
              "ownerId": {
                "type": "string",
                "format": "uuid"
              },
              "artifactId": {
                "type": "string",
                "format": "uuid"
              },
              "description": {
                "type": "string",
                "description": "The description of the evidence definition"
              }
            },
            "description": "Schema for Evidence Definition"
          }
        }
      ]
  listEvidenceRequestLists:
    description: |-
      List evidence request lists
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "array",
          "items": {
            "type": "object",
            "example": {
              "id": "000000-0000-0000-0000000",
              "name": "Evidence Request List 1",
              "tags": [],
              "status": "000000-0000-0000-0000000",
              "created": "2017-07-21T00:00:00.000Z",
              "updated": "2017-07-21T00:00:00.000Z",
              "description": "This is an example description",
              "frameworkVersionId": "000000-0000-0000-0000000",
              "frameworkVersionName": "rev4"
            },
            "required": [
              "id",
              "name",
              "description",
              "status",
              "version",
              "frameworkVersionId",
              "tags"
            ],
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid",
                "description": "The id of the evidence request list"
              },
              "name": {
                "type": "string",
                "description": "The name of the evidence request list"
              },
              "tags": {
                "type": "array",
                "items": {}
              },
              "status": {
                "type": "string",
                "description": "The status of the evidence request list"
              },
              "created": {
                "type": "string",
                "format": "date-time",
                "description": "The date the evidence request list was created"
              },
              "updated": {
                "type": "string",
                "format": "date-time",
                "description": "The date the evidence request list was updated"
              },
              "description": {
                "type": "string",
                "description": "The description of the evidence request list"
              },
              "frameworkVersionId": {
                "type": "string",
                "format": "uuid",
                "description": "The ID of the framework version"
              },
              "frameworkVersionName": {
                "type": "string",
                "description": "The name of the framework version"
              }
            },
            "description": "Schema for Evidence request list"
          }
        }
      ]
  listEvidenceRequestListsByRequest:
    description: |-
      Get the evidence request list by request code
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "array",
          "items": {
            "type": "object",
            "example": {
              "id": "000000-0000-0000-0000000",
              "name": "Evidence Request List 1",
              "tags": [],
              "status": "000000-0000-0000-0000000",
              "created": "2017-07-21T00:00:00.000Z",
              "updated": "2017-07-21T00:00:00.000Z",
              "description": "This is an example description",
              "frameworkVersionId": "000000-0000-0000-0000000",
              "frameworkVersionName": "rev4"
            },
            "required": [
              "id",
              "name",
              "description",
              "status",
              "version",
              "frameworkVersionId",
              "tags"
            ],
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid",
                "description": "The id of the evidence request list"
              },
              "name": {
                "type": "string",
                "description": "The name of the evidence request list"
              },
              "tags": {
                "type": "array",
                "items": {}
              },
              "status": {
                "type": "string",
                "description": "The status of the evidence request list"
              },
              "created": {
                "type": "string",
                "format": "date-time",
                "description": "The date the evidence request list was created"
              },
              "updated": {
                "type": "string",
                "format": "date-time",
                "description": "The date the evidence request list was updated"
              },
              "description": {
                "type": "string",
                "description": "The description of the evidence request list"
              },
              "frameworkVersionId": {
                "type": "string",
                "format": "uuid",
                "description": "The ID of the framework version"
              },
              "frameworkVersionName": {
                "type": "string",
                "description": "The name of the framework version"
              }
            },
            "description": "Schema for Evidence request list"
          }
        }
      ]
  listEvidenceRequests:
    description: |-
      List all evidence requests
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "array",
          "items": {
            "type": "object",
            "example": {
              "name": "Evidence Request 1",
              "description": "This is an example description",
              "requestCode": "000000-0000-0000-0000000",
              "evidenceTypeId": "000000-0000-0000-0000000",
              "evidenceTypeName": "evidence type"
            },
            "required": [
              "id",
              "name",
              "description",
              "requestCode"
            ],
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid",
                "description": "The id of the evidence request list"
              },
              "name": {
                "type": "string",
                "description": "The name of the evidence request list"
              },
              "description": {
                "type": "string",
                "description": "The description of the evidence request list"
              },
              "requestCode": {
                "type": "string",
                "description": "The ID of the evidence request list"
              },
              "evidenceTypeId": {
                "type": "string",
                "description": "The ID of the evidence type"
              },
              "evidenceTypeName": {
                "type": "string",
                "description": "The name of the evidence type"
              }
            },
            "description": "Schema for Evidence request list"
          }
        }
      ]
  listEvidenceRequestsForList:
    description: |-
      List evidence requests for list
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "array",
          "items": {
            "type": "object",
            "example": {
              "name": "Evidence Request 1",
              "description": "This is an example description",
              "requestCode": "000000-0000-0000-0000000",
              "evidenceTypeId": "000000-0000-0000-0000000",
              "evidenceTypeName": "evidence type"
            },
            "required": [
              "id",
              "name",
              "description",
              "requestCode"
            ],
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid",
                "description": "The id of the evidence request list"
              },
              "name": {
                "type": "string",
                "description": "The name of the evidence request list"
              },
              "description": {
                "type": "string",
                "description": "The description of the evidence request list"
              },
              "requestCode": {
                "type": "string",
                "description": "The ID of the evidence request list"
              },
              "evidenceTypeId": {
                "type": "string",
                "description": "The ID of the evidence type"
              },
              "evidenceTypeName": {
                "type": "string",
                "description": "The name of the evidence type"
              }
            },
            "description": "Schema for Evidence request list"
          }
        }
      ]
  listEvidenceTypes:
    description: |-
      List evidence types
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "object"
        }
      ]
  listFieldValues:
    description: |-
      Returns a list of cached field values
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "array",
          "items": {}
        }
      ]
  listFrameworks:
    description: |-
      Retrieves a list of all frameworks
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "object"
        }
      ]
  listFrameworkVersionElements:
    description: |-
      Retrieves a list of a framework elements by version
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "object"
        }
      ]
  listFrameworkVersions:
    description: |-
      Retrieves a list of a framework versions
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "object"
        }
      ]
  listGraphql:
    description: |-
      Retrieves a list of all of the available GraphQL queries
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "array",
          "items": {}
        }
      ]
  listLinkTypes:
    description: |-
      Returns a list of link types
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "array",
          "items": {}
        }
      ]
  listPackages:
    description: |-
      Lists all of the packages that are installed on the current server
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "object"
        }
      ]
  listScfControls:
    description: |-
      Retrieves a list of all existing scf elements
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "object"
        }
      ]
  listTags:
    description: |-
      Returns a list of tags
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "array",
          "items": {}
        }
      ]
  listUpdates:
    description: |-
      Lists all of the packages that are eligible for update
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "object"
        }
      ]
  logBatch:
    description: |-
      Logs a message associated with a batch
    versions:
      from: 0.13.11
      to: 0.13.11
    link: ''
    example:
      inputs: [
        {
          "type": "object",
          "example": {
            "id": "00000000-0000-0000-0000-000000000000",
            "data": "{}",
            "tstamp": "3 March 2022, 01:01:00",
            "message": "This is a complicated log message",
            "logLevel": "warn"
          },
          "required": [
            "message",
            "logLevel"
          ],
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "The uuid of the log message"
            },
            "data": {
              "type": "object"
            },
            "tstamp": {
              "type": "string",
              "format": "date-time"
            },
            "message": {
              "type": "string",
              "description": "The message to log"
            },
            "batchLogLevel": {
              "enum": [
                "debug",
                "info",
                "warn",
                "error",
                "crit"
              ],
              "type": "string",
              "description": "Level of the log message that was captured"
            }
          },
          "description": "Log Item for a Batch"
        }
      ]
      outputs: [
        {}
      ]
  performActionOnERL:
    description: |-
      Update evidence request list
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {
          "type": "object",
          "example": {
            "action": "publish"
          },
          "required": [
            "action"
          ],
          "properties": {
            "action": {
              "enum": [
                "PUBLISH",
                "RETIRE"
              ],
              "type": "string",
              "description": "The action to perform over the record"
            }
          },
          "description": "Schema for Publish/Retire options"
        }
      ]
      outputs: [
        {
          "type": "object",
          "example": {
            "id": "00000000-0000-0000-0000-000000000000"
          },
          "required": [
            "id"
          ],
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "The id of the response object"
            }
          },
          "description": "Schema for a response with single id"
        }
      ]
  performActionOnEvidenceDefinition:
    description: |-
      Publishes or retires evidence definition
    versions:
      from: 0.13.11
      to: 0.13.11
    link: ''
    example:
      inputs: [
        {
          "type": "object",
          "example": {
            "action": "publish"
          },
          "required": [
            "action"
          ],
          "properties": {
            "action": {
              "enum": [
                "publish",
                "retire"
              ],
              "type": "string",
              "description": "The action to perform over the record should be `publish` or `retire`"
            }
          },
          "description": "Schema for Publish/Retire options"
        }
      ]
      outputs: [
        {
          "type": "object",
          "example": {
            "id": "00000000-0000-0000-0000-000000000000"
          },
          "required": [
            "id"
          ],
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "The id of the response object"
            }
          },
          "description": "Schema for a response with single id"
        }
      ]
  ping:
    description: |-
      Pings the server to make sure it's live and authentication is successful
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "object"
        }
      ]
  publishEvidenceBot:
    description: |-
      Publish an evidence bot
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "object"
        }
      ]
  publishEvidenceType:
    description: |-
      Publish evidence type
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "object"
        }
      ]
  publishGraphql:
    description: |-
      Publishes a GraphQL query
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "object"
        }
      ]
  publishProject:
    description: |-
      Publish studio schema
    versions:
      from: 0.13.11
      to: 0.13.11
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "object"
        }
      ]
  refreshStudio:
    description: |-
      Refresh studio schema
    versions:
      from: 0.13.11
      to: 0.13.11
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  reindexObjects:
    description: |-
      Reindexes the server object_versions table for lookups and auto-linking
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "object"
        }
      ]
  retireEvidenceBot:
    description: |-
      Retire evidence bot
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "object"
        }
      ]
  retireEvidenceType:
    description: |-
      Retire evidence type
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "object"
        }
      ]
  saveGraphqlQuery:
    description: |-
      Saves a GraphQL query
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {
          "type": "object",
          "properties": {
            "payload": {
              "type": "object",
              "description": "Dynamic data payload containing JSON data",
              "additionalProperties": true
            }
          }
        }
      ]
      outputs: [
        {
          "type": "object"
        }
      ]
  saveMockupComment:
    description: |-
      Saves a comment to the db
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {
          "type": "object",
          "example": {
            "comment": "I approve this mockup.",
            "feedback": "REJECT",
            "mockupId": "12345678-1234-1234-1234-123456789012",
            "stakeholderName": "Joey\""
          },
          "required": [
            "mockupId",
            "feedback",
            "stakeholderName"
          ],
          "properties": {
            "comment": {
              "type": "string",
              "description": "The text of the comment"
            },
            "feedback": {
              "enum": [
                "APPROVE",
                "REJECT"
              ],
              "type": "string",
              "description": "User feedback of the mockup with their comment"
            },
            "mockupId": {
              "type": "string",
              "description": "The uuid of the mockup"
            },
            "stakeholderName": {
              "enum": [
                "Bhanu",
                "Brian",
                "Eric",
                "Jason",
                "Joey",
                "Kevin",
                "Kris",
                "Olivier",
                "Steven",
                "Christian",
                "Guest"
              ],
              "type": "string",
              "description": "Stakeholder that is creating the comment"
            }
          },
          "description": "Schema for Farscape Portal Mockup Comment"
        }
      ]
      outputs: [
        {
          "type": "object"
        }
      ]
  searchGraphql:
    description: |-
      Searches for a list of all of the available GraphQL queries based on search criteria
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "array",
          "items": {}
        }
      ]
  searchResources:
    description: |-
      Returns a list of resources
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "array",
          "items": {
            "type": "object",
            "example": {
              "id": "006bb76a-c4bb-11eb-8df1-1fa0680ef083",
              "name": "emailAddress",
              "type": "field",
              "image": "https://someurl/some"
            },
            "required": [
              "id",
              "name",
              "type",
              "image"
            ],
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid",
                "description": "The UUID of the resource"
              },
              "name": {
                "type": "string",
                "description": "The name of the resource"
              },
              "type": {
                "type": "string",
                "description": "The type of the resource"
              },
              "image": {
                "type": "string",
                "description": "The url of the image"
              }
            },
            "description": "Schema for search resource"
          }
        }
      ]
  startBatch:
    description: |-
      Starts a batch import for a specific ImportSpec
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {
          "type": "object",
          "required": [
            "className"
          ],
          "properties": {
            "filters": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Delete filter directives"
            },
            "className": {
              "type": "string",
              "description": "Name of the class"
            }
          },
          "description": "Schema for Service Directives"
        }
      ]
      outputs: [
        {
          "type": "object"
        }
      ]
  testGraphql:
    description: |-
      Tests a GraphQL query that has been templatized, applying variables to it, and computing the result before saving
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {
          "type": "object",
          "properties": {
            "payload": {
              "type": "object",
              "description": "Dynamic data payload containing JSON data",
              "additionalProperties": true
            }
          }
        }
      ]
      outputs: [
        {
          "type": "array",
          "items": {}
        }
      ]
  updateBoundary:
    description: |-
      Updates a boundary
    versions:
      from: 0.13.11
      to: 0.13.11
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "object",
          "required": [
            "id",
            "name",
            "description",
            "ownerId",
            "type",
            "status",
            "tagId",
            "createdBy"
          ],
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid"
            },
            "name": {
              "type": "string"
            },
            "type": {
              "enum": [
                "authorization",
                "system",
                "lab"
              ],
              "type": "string",
              "description": "Type of boundary",
              "x-enum-description": [
                "Authorization boundary",
                "System boundary",
                "Lab boundary"
              ]
            },
            "tagId": {
              "type": "string",
              "format": "uuid"
            },
            "status": {
              "enum": [
                "draft",
                "under_review",
                "active",
                "archived"
              ],
              "type": "string",
              "description": "Status of boundary",
              "x-enum-description": [
                "Draft",
                "Under review",
                "Active",
                "Archived"
              ]
            },
            "aliases": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            },
            "created": {
              "type": "string",
              "format": "date-time"
            },
            "deleted": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "ownerId": {
              "type": "string",
              "format": "uuid"
            },
            "updated": {
              "type": "string",
              "format": "date-time"
            },
            "imageUrl": {
              "type": "string",
              "format": "url",
              "nullable": true
            },
            "keywords": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            },
            "parentId": {
              "type": "string",
              "format": "uuid",
              "nullable": true
            },
            "createdBy": {
              "type": "string",
              "format": "uuid"
            },
            "description": {
              "type": "string",
              "nullable": true
            }
          },
          "description": "Describes boundary"
        }
      ]
  updateBoundaryProduct:
    description: |-
      Updates a boundary product
    versions:
      from: 0.13.11
      to: 0.13.11
    link: ''
    example:
      inputs: [
        {
          "type": "object",
          "required": [
            "id",
            "name",
            "description",
            "ownerId",
            "status",
            "boundaryId",
            "productId"
          ],
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid"
            },
            "name": {
              "type": "string"
            },
            "status": {
              "enum": [
                "draft",
                "verified",
                "active",
                "rejected",
                "deleted"
              ],
              "type": "string",
              "description": "Status of boundary product",
              "x-enum-description": [
                "Draft",
                "Verified",
                "Active",
                "Rejected",
                "Deleted"
              ]
            },
            "aliases": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            },
            "created": {
              "type": "string",
              "format": "date-time"
            },
            "deleted": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "ownerId": {
              "type": "string",
              "format": "uuid"
            },
            "updated": {
              "type": "string",
              "format": "date-time"
            },
            "imageUrl": {
              "type": "string",
              "format": "url",
              "nullable": true
            },
            "keywords": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            },
            "parentId": {
              "type": "string",
              "format": "uuid",
              "nullable": true
            },
            "productId": {
              "type": "string",
              "format": "uuid",
              "nullable": true
            },
            "boundaryId": {
              "type": "string",
              "format": "uuid"
            },
            "description": {
              "type": "string",
              "nullable": true
            }
          },
          "description": "Describes products in boundaries"
        }
      ]
      outputs: [
        {}
      ]
  updateEvidenceBot:
    description: |-
      Update evidence bot
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {
          "type": "object",
          "example": {
            "name": "Evidence Bot 1",
            "description": "This is an example description"
          },
          "required": [
            "name",
            "description",
            "queryId",
            "evidenceTypeId"
          ],
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the evidence bot"
            },
            "tags": {
              "type": "array",
              "items": {}
            },
            "status": {
              "enum": [
                "DRAFT",
                "PUBLISHING",
                "PUBLISHED",
                "RETIRING",
                "RETIRED"
              ],
              "type": "string"
            },
            "queryId": {
              "type": "string",
              "format": "uuid",
              "description": "The UUID of a query"
            },
            "description": {
              "type": "string",
              "description": "The description of the evidence bot"
            },
            "evidenceTypeId": {
              "type": "string",
              "format": "uuid",
              "description": "The UUID of an evidence type"
            },
            "frameworkElements": {
              "type": "array",
              "items": {}
            }
          },
          "description": "Schema for updating Evidence Bot"
        }
      ]
      outputs: [
        {
          "type": "object"
        }
      ]
  updateEvidenceDefinition:
    description: |-
      Update evidence definition
    versions:
      from: 0.13.11
      to: 0.13.11
    link: ''
    example:
      inputs: [
        {
          "type": "object",
          "example": {
            "name": "Evidence Definition 1",
            "status": "DRAFT",
            "description": "This is an example description"
          },
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the evidence definition"
            },
            "tags": {
              "type": "array",
              "items": {}
            },
            "status": {
              "enum": [
                "draft",
                "publishing",
                "published",
                "retiring",
                "retired"
              ],
              "type": "string",
              "description": "Status of the publishing evidence component"
            },
            "description": {
              "type": "string",
              "description": "The description of the evidence definition"
            }
          },
          "description": "Schema for Evidence Definition"
        }
      ]
      outputs: [
        {
          "type": "object"
        }
      ]
  updateEvidenceRequest:
    description: |-
      Update evidence request
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {
          "type": "object",
          "example": {
            "name": "Evidence Request 1",
            "description": "This is an example description",
            "evidenceTypeId": "000000-0000-0000-0000000",
            "subElementCode": "a",
            "frameworkElement": "AC-1",
            "evidenceRequestListId": "000000-0000-0000-0000000"
          },
          "required": [
            "name",
            "description",
            "requestCode",
            "evidenceTypeId"
          ],
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the evidence request list"
            },
            "description": {
              "type": "string",
              "description": "The description of the evidence request list"
            },
            "requestCode": {
              "type": "string",
              "description": "The alphanumeric code for a request"
            },
            "evidenceTypeId": {
              "type": "string",
              "description": "The ID of the evidence request list"
            },
            "subElementCode": {
              "type": "string",
              "description": "A framework sub element inside the framework version of the ERL"
            },
            "frameworkElement": {
              "type": "string",
              "description": "A framework element inside the framework version of the ERL"
            },
            "evidenceRequestListId": {
              "type": "string",
              "description": "The ID of the evidence request list"
            }
          },
          "description": "Schema for Evidence request"
        }
      ]
      outputs: [
        {
          "oneOf": [
            {
              "type": "object",
              "example": {
                "name": "Evidence Request 1",
                "description": "This is an example description",
                "requestCode": "000000-0000-0000-0000000",
                "evidenceTypeId": "000000-0000-0000-0000000",
                "evidenceTypeName": "evidence type"
              },
              "required": [
                "id",
                "name",
                "description",
                "requestCode"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "The id of the evidence request list"
                },
                "name": {
                  "type": "string",
                  "description": "The name of the evidence request list"
                },
                "description": {
                  "type": "string",
                  "description": "The description of the evidence request list"
                },
                "requestCode": {
                  "type": "string",
                  "description": "The ID of the evidence request list"
                },
                "evidenceTypeId": {
                  "type": "string",
                  "description": "The ID of the evidence type"
                },
                "evidenceTypeName": {
                  "type": "string",
                  "description": "The name of the evidence type"
                }
              },
              "description": "Schema for Evidence request list"
            },
            {
              "type": "object",
              "example": {
                "errors": [
                  "Name is incorrect",
                  "Framework element invalid"
                ]
              },
              "required": [
                "errors"
              ],
              "properties": {
                "errors": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "The a list of errors found"
                }
              },
              "description": "Schema for a response where the evidence request had errors"
            }
          ]
        }
      ]
  updateEvidenceRequestList:
    description: |-
      Update evidence request list
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {
          "type": "object",
          "example": {
            "name": "Evidence Request List 1",
            "description": "This is an example description",
            "frameworkVersionId": "000000-0000-0000-0000000"
          },
          "required": [
            "name",
            "description",
            "frameworkVersionId"
          ],
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the evidence request list"
            },
            "tags": {
              "type": "array",
              "items": {}
            },
            "status": {
              "enum": [
                "DRAFT",
                "PUBLISHING",
                "PUBLISHED",
                "RETIRING",
                "RETIRED"
              ],
              "type": "string",
              "description": "The status of the evidence request list"
            },
            "version": {
              "type": "string",
              "description": "The version of the evidence request list"
            },
            "description": {
              "type": "string",
              "description": "The description of the evidence request list"
            },
            "frameworkVersionId": {
              "type": "string",
              "description": "The ID of the framework version assigned to the request list"
            }
          },
          "description": "Schema for Evidence request list"
        }
      ]
      outputs: [
        {
          "type": "object",
          "example": {
            "id": "000000-0000-0000-0000000",
            "name": "Evidence Request List 1",
            "tags": [],
            "status": "000000-0000-0000-0000000",
            "created": "2017-07-21T00:00:00.000Z",
            "updated": "2017-07-21T00:00:00.000Z",
            "description": "This is an example description",
            "frameworkVersionId": "000000-0000-0000-0000000",
            "frameworkVersionName": "rev4"
          },
          "required": [
            "id",
            "name",
            "description",
            "status",
            "version",
            "frameworkVersionId",
            "tags"
          ],
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "The id of the evidence request list"
            },
            "name": {
              "type": "string",
              "description": "The name of the evidence request list"
            },
            "tags": {
              "type": "array",
              "items": {}
            },
            "status": {
              "type": "string",
              "description": "The status of the evidence request list"
            },
            "created": {
              "type": "string",
              "format": "date-time",
              "description": "The date the evidence request list was created"
            },
            "updated": {
              "type": "string",
              "format": "date-time",
              "description": "The date the evidence request list was updated"
            },
            "description": {
              "type": "string",
              "description": "The description of the evidence request list"
            },
            "frameworkVersionId": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the framework version"
            },
            "frameworkVersionName": {
              "type": "string",
              "description": "The name of the framework version"
            }
          },
          "description": "Schema for Evidence request list"
        }
      ]
  updateEvidenceType:
    description: |-
      Update evidence type
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {
          "type": "object",
          "example": {
            "name": "Evidence Type 1",
            "status": "DRAFT",
            "description": "This is an example description"
          },
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the evidence type"
            },
            "tags": {
              "type": "array",
              "items": {}
            },
            "status": {
              "enum": [
                "DRAFT",
                "PUBLISHING",
                "PUBLISHED",
                "RETIRING",
                "RETIRED"
              ],
              "type": "string"
            },
            "description": {
              "type": "string",
              "description": "The description of the evidence type"
            }
          },
          "description": "Schema for Evidence Type"
        }
      ]
      outputs: [
        {
          "type": "object"
        }
      ]
  updateOrganizationActivityById:
    description: |-
      Updates an organization activity for a given orgId and orgActivityId
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {
          "type": "object",
          "example": {
            "status": "NOT APPLICABLE",
            "required": false
          },
          "properties": {
            "status": {
              "enum": [
                "NOT APPLICABLE",
                "TO DO",
                "DONE"
              ],
              "type": "string",
              "description": "The status of the organization activity"
            },
            "required": {
              "type": "boolean"
            }
          },
          "description": "Schema for Updating Farscape Portal Organization Activity"
        }
      ]
      outputs: [
        {}
      ]
  updatePackage:
    description: |-
      Updates a package.
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "object"
        }
      ]
  updatePortalOrganizationById:
    description: |-
      Update portal organization by id
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {
          "type": "object",
          "example": {
            "accredited_3pao": false,
            "company_web_site": "www.company.com",
            "organization_type": [
              "0000000-0000-0000-0000-000000000001",
              "0000000-0000-0000-0000-000000000002"
            ],
            "organization_status": "00000000-0000-0000-0000-000000000002",
            "compliance_bridge_url_string": "www.companybridge.com",
            "organization_icon_url_string": "www.company.com/iconstring"
          },
          "properties": {
            "accredited_3pao": {
              "type": "boolean",
              "description": "Whether the oranization is accredited with 3pao"
            },
            "company_web_site": {
              "type": "string",
              "description": "The organizations website"
            },
            "organization_type": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "description": "List of the organizations types"
            },
            "organization_status": {
              "type": "string",
              "format": "uuid",
              "description": "The organization engagement state UUID"
            },
            "compliance_bridge_url_string": {
              "type": "string",
              "description": "The organizations bridge url string"
            },
            "organization_icon_url_string": {
              "type": "string",
              "description": "The organizations icon url string"
            }
          },
          "description": "Schema for Update Portal Organization"
        }
      ]
      outputs: [
        {}
      ]
  updatePortalOrganizationContractById:
    description: |-
      Updated portal contract for given organization by id
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {
          "type": "object",
          "example": {
            "end_date": "2022-01-30T08:30:00.000Z",
            "contract_level": "00000000-0000-0000-0000-000000000001",
            "contract_status": "EXPIRED"
          },
          "properties": {
            "end_date": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp of the contract end date"
            },
            "contract_level": {
              "type": "string",
              "format": "uuid",
              "description": "The contract level UUID"
            },
            "contract_status": {
              "enum": [
                "ACTIVE",
                "SIGNED",
                "EXPIRED"
              ],
              "type": "string",
              "description": "The stauts of the contract"
            }
          },
          "description": "Schema for Update Portal Contract"
        }
      ]
      outputs: [
        {}
      ]
  updateProject:
    description: |-
      Update studio project
    versions:
      from: 0.13.11
      to: 0.13.11
    link: ''
    example:
      inputs: [
        {
          "type": "object",
          "required": [
            "id",
            "name",
            "ownerId",
            "status",
            "artifactId"
          ],
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid"
            },
            "due": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "name": {
              "type": "string"
            },
            "status": {
              "enum": [
                "draft",
                "review",
                "publishing",
                "published",
                "retiring",
                "retired",
                "cancelled"
              ],
              "type": "string",
              "description": "Type of Project Status"
            },
            "aliases": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            },
            "created": {
              "type": "string",
              "format": "date-time"
            },
            "deleted": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "ownerId": {
              "type": "string",
              "format": "uuid"
            },
            "updated": {
              "type": "string",
              "format": "date-time"
            },
            "version": {
              "type": "string",
              "nullable": true
            },
            "imageUrl": {
              "type": "string",
              "format": "url",
              "nullable": true
            },
            "keywords": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            },
            "artifactId": {
              "type": "string",
              "format": "uuid"
            },
            "properties": {
              "type": "object",
              "nullable": true
            },
            "description": {
              "type": "string"
            }
          },
          "description": "Describes the project related with the hydra resource"
        }
      ]
      outputs: [
        {}
      ]
  updateProjectClass:
    description: |-
      Update studio project class
    versions:
      from: 0.13.11
      to: 0.13.11
    link: ''
    example:
      inputs: [
        {
          "allOf": [
            {
              "type": "object",
              "required": [
                "objectType",
                "productId",
                "id"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid"
                },
                "schema": {
                  "type": "object",
                  "nullable": true
                },
                "productId": {
                  "type": "string",
                  "format": "uuid"
                },
                "artifactId": {
                  "type": "string",
                  "format": "uuid",
                  "nullable": true
                },
                "objectType": {
                  "enum": [
                    "concrete",
                    "interface"
                  ],
                  "type": "string",
                  "description": "Type of class definition",
                  "x-enum-descriptions": [
                    "Concrete class definition",
                    "Interface definition"
                  ]
                },
                "pluralName": {
                  "type": "string",
                  "nullable": true
                }
              }
            },
            {
              "type": "object",
              "required": [
                "projectId",
                "name"
              ],
              "properties": {
                "op": {
                  "enum": [
                    "none",
                    "create",
                    "update",
                    "delete"
                  ],
                  "type": "string",
                  "description": "Status of an operation"
                },
                "name": {
                  "type": "string"
                },
                "mappedId": {
                  "type": "string",
                  "format": "uuid",
                  "nullable": true
                },
                "projectId": {
                  "type": "string",
                  "format": "uuid"
                },
                "description": {
                  "type": "string"
                }
              },
              "description": "Stored class for a project"
            }
          ]
        }
      ]
      outputs: [
        {}
      ]
  updateProjectDataType:
    description: |-
      Update studio project data type
    versions:
      from: 0.13.11
      to: 0.13.11
    link: ''
    example:
      inputs: [
        {
          "allOf": [
            {
              "type": "object",
              "required": [
                "type",
                "id"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid"
                },
                "type": {
                  "enum": [
                    "array",
                    "object",
                    "string",
                    "boolean",
                    "number",
                    "enum"
                  ],
                  "type": "string",
                  "description": "JSON Object Type",
                  "x-enum-descriptions": [
                    "Array of one or many objects",
                    "Object definition",
                    "String",
                    "Boolean true/false value",
                    "Numeric value",
                    "Enumeration value"
                  ]
                },
                "values": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true
                },
                "pattern": {
                  "type": "string",
                  "nullable": true
                },
                "coreType": {
                  "type": "boolean",
                  "default": false,
                  "nullable": true
                },
                "examples": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true
                },
                "productId": {
                  "type": "string",
                  "format": "uuid",
                  "nullable": true
                },
                "artifactId": {
                  "type": "string",
                  "format": "uuid",
                  "nullable": true
                }
              }
            },
            {
              "type": "object",
              "required": [
                "projectId",
                "name"
              ],
              "properties": {
                "op": {
                  "enum": [
                    "none",
                    "create",
                    "update",
                    "delete"
                  ],
                  "type": "string",
                  "description": "Status of an operation"
                },
                "name": {
                  "type": "string"
                },
                "mappedId": {
                  "type": "string",
                  "format": "uuid",
                  "nullable": true
                },
                "projectId": {
                  "type": "string",
                  "format": "uuid"
                },
                "description": {
                  "type": "string"
                }
              },
              "description": "Stored data type for a project"
            }
          ]
        }
      ]
      outputs: [
        {}
      ]
  updateProjectEnumInfo:
    description: |-
      Update studio project enum info
    versions:
      from: 0.13.11
      to: 0.13.11
    link: ''
    example:
      inputs: [
        {
          "allOf": [
            {
              "type": "object",
              "required": [
                "id",
                "enumName",
                "enumValue",
                "graphqlValue",
                "jsonValue",
                "dataTypeId"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid"
                },
                "enumName": {
                  "type": "string"
                },
                "enumValue": {
                  "type": "string"
                },
                "jsonValue": {
                  "type": "object"
                },
                "dataTypeId": {
                  "type": "string",
                  "format": "uuid"
                },
                "description": {
                  "type": "string",
                  "nullable": true
                },
                "graphqlValue": {
                  "type": "string"
                }
              },
              "description": "Describes an Enum Info"
            },
            {
              "type": "object",
              "required": [
                "projectId",
                "name"
              ],
              "properties": {
                "op": {
                  "enum": [
                    "none",
                    "create",
                    "update",
                    "delete"
                  ],
                  "type": "string",
                  "description": "Status of an operation"
                },
                "name": {
                  "type": "string"
                },
                "mappedId": {
                  "type": "string",
                  "format": "uuid",
                  "nullable": true
                },
                "projectId": {
                  "type": "string",
                  "format": "uuid"
                },
                "description": {
                  "type": "string"
                }
              },
              "description": "New fields added into the project objects"
            }
          ]
        }
      ]
      outputs: [
        {}
      ]
  updateProjectField:
    description: |-
      Update studio project field
    versions:
      from: 0.13.11
      to: 0.13.11
    link: ''
    example:
      inputs: [
        {
          "allOf": [
            {
              "type": "object",
              "required": [
                "displayName",
                "productId",
                "id",
                "artifactId",
                "keyed",
                "indexed"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid"
                },
                "keyed": {
                  "type": "boolean",
                  "default": false
                },
                "example": {
                  "type": "string",
                  "nullable": true
                },
                "indexed": {
                  "type": "boolean",
                  "default": true
                },
                "reserved": {
                  "type": "boolean",
                  "default": false,
                  "nullable": true
                },
                "productId": {
                  "type": "string",
                  "format": "uuid"
                },
                "artifactId": {
                  "type": "string",
                  "format": "uuid"
                },
                "dataTypeId": {
                  "type": "string",
                  "format": "uuid",
                  "nullable": true
                },
                "displayName": {
                  "type": "string"
                },
                "defaultValue": {
                  "type": "string",
                  "nullable": true
                }
              }
            },
            {
              "type": "object",
              "required": [
                "projectId",
                "name"
              ],
              "properties": {
                "op": {
                  "enum": [
                    "none",
                    "create",
                    "update",
                    "delete"
                  ],
                  "type": "string",
                  "description": "Status of an operation"
                },
                "name": {
                  "type": "string"
                },
                "mappedId": {
                  "type": "string",
                  "format": "uuid",
                  "nullable": true
                },
                "projectId": {
                  "type": "string",
                  "format": "uuid"
                },
                "description": {
                  "type": "string"
                }
              },
              "description": "New fields added into the project objects"
            }
          ]
        }
      ]
      outputs: [
        {}
      ]
  updateProjectProperty:
    description: |-
      Update studio project property
    versions:
      from: 0.13.11
      to: 0.13.11
    link: ''
    example:
      inputs: [
        {
          "allOf": [
            {
              "type": "object",
              "required": [
                "id"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid"
                },
                "multi": {
                  "type": "boolean",
                  "default": false,
                  "nullable": true
                },
                "fieldId": {
                  "type": "string",
                  "format": "uuid",
                  "nullable": true
                },
                "parentId": {
                  "type": "string",
                  "format": "uuid",
                  "nullable": true
                },
                "required": {
                  "type": "boolean",
                  "default": false,
                  "nullable": true
                },
                "artifactId": {
                  "type": "string",
                  "format": "uuid"
                },
                "defaultValue": {
                  "type": "string",
                  "nullable": true
                }
              }
            },
            {
              "type": "object",
              "required": [
                "projectId",
                "name"
              ],
              "properties": {
                "op": {
                  "enum": [
                    "none",
                    "create",
                    "update",
                    "delete"
                  ],
                  "type": "string",
                  "description": "Status of an operation"
                },
                "name": {
                  "type": "string"
                },
                "mappedId": {
                  "type": "string",
                  "format": "uuid",
                  "nullable": true
                },
                "projectId": {
                  "type": "string",
                  "format": "uuid"
                },
                "description": {
                  "type": "string"
                }
              },
              "description": "Stored property for a project"
            }
          ]
        }
      ]
      outputs: [
        {}
      ]
  updateSchedule:
    description: |-
      Update oscal schedule
    versions:
      from: 0.13.11
      to: 0.13.11
    link: ''
    example:
      inputs: [
        {
          "type": "object",
          "required": [
            "name",
            "cron",
            "createdOn",
            "updatedOn"
          ],
          "properties": {
            "cron": {
              "type": "string"
            },
            "data": {
              "type": "object",
              "nullable": true
            },
            "name": {
              "type": "string"
            },
            "options": {
              "type": "object",
              "nullable": true,
              "properties": {
                "priority": {
                  "type": "integer",
                  "format": "int32"
                },
                "onComplete": {
                  "type": "boolean",
                  "default": false
                },
                "parameters": {
                  "type": "object"
                },
                "retryDelay": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0
                },
                "retrylimit": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0
                },
                "startAfter": {
                  "oneOf": [
                    {
                      "type": "integer",
                      "format": "int32"
                    },
                    {
                      "type": "string"
                    },
                    {
                      "type": "string",
                      "format": "date-time"
                    }
                  ]
                },
                "retryBackoff": {
                  "type": "boolean",
                  "default": false
                },
                "singletonKey": {
                  "type": "string"
                },
                "expireInHours": {
                  "type": "integer",
                  "format": "int32"
                },
                "retentionDays": {
                  "type": "integer",
                  "format": "int32",
                  "default": 30
                },
                "retentionHours": {
                  "type": "integer",
                  "format": "int32"
                },
                "singletonHours": {
                  "type": "integer",
                  "format": "int32"
                },
                "expireInMinutes": {
                  "type": "integer",
                  "format": "int32",
                  "default": 15
                },
                "expireInSeconds": {
                  "type": "integer",
                  "format": "int32"
                },
                "retentionMinutes": {
                  "type": "integer",
                  "format": "int32"
                },
                "retentionSeconds": {
                  "type": "integer",
                  "format": "int32"
                },
                "singletonMinutes": {
                  "type": "integer",
                  "format": "int32"
                },
                "singletonSeconds": {
                  "type": "integer",
                  "format": "int32"
                },
                "singletonNextSlot": {
                  "type": "boolean"
                }
              },
              "description": "Describes the schedules options"
            },
            "timezone": {
              "type": "string",
              "default": "UTC",
              "nullable": true
            },
            "createdOn": {
              "type": "string",
              "format": "date-time"
            },
            "updatedOn": {
              "type": "string",
              "format": "date-time"
            }
          },
          "description": "Describes a schedule"
        }
      ]
      outputs: [
        {}
      ]
  updateTag:
    description: |-
      Updates a tag by ID
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "type": "string",
              "description": "Name for the Tag"
            },
            "description": {
              "type": "string",
              "description": "Destription for the Tag"
            }
          },
          "description": "Schema for a Tag"
        }
      ]
      outputs: [
        {
          "type": "object"
        }
      ]
  validateGraphql:
    description: |-
      Validates a GraphQL Query, checking if the parameters are valid, and offers parameter types once parsed
    versions:
      from: 0.9.60
    link: ''
    example:
      inputs: [
        {
          "type": "object",
          "properties": {
            "payload": {
              "type": "object",
              "description": "Dynamic data payload containing JSON data",
              "additionalProperties": true
            }
          }
        }
      ]
      outputs: [
        {
          "type": "array",
          "items": {}
        }
      ]