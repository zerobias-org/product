Product:
  name: Kubernetes
  versions: [1.0.0]
  package: kubernetes.kubernetes
  description: |-
    Kubernetes
  link: https://kubernetes.io/
  contentType: json
Operations:
  listAppsV1DeploymentForAllNamespaces:
    description: |-
      list or watch objects of kind Deployment
    versions:
      from: 1.0.0
    link: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.19/#list-all-namespaces-deployment-v1-apps
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  listAppsV1NamespacedDeployment:
    description: |-
      list or watch objects of kind Deployment
    versions:
      from: 1.0.0
    link: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.19/#list-all-namespaces-deployment-v1-apps
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  listCoreV1PodForAllNamespaces:
    description: |-
      list or watch objects of kind Pod
    versions:
      from: 1.0.0
    link: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.19/#list-all-namespaces-pod-v1-core
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  listAppsV1ReplicaSetForAllNamespaces:
    description: |-
      list or watch objects of kind ReplicaSet
    versions:
      from: 1.0.0
    link: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.19/#list-all-namespaces-replicaset-v1-apps
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  listCoreV1ServiceForAllNamespaces:
    description: |-
      list or watch objects of kind Service
    versions:
      from: 1.0.0
    link: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.19/#list-all-namespaces-service-v1-core
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "object",
          "required": [
            "items"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
            },
            "items": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "kind": {
                    "type": "string",
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
                  },
                  "spec": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. \"ClusterIP\" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object or EndpointSlice objects. If clusterIP is \"None\", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a virtual IP. \"NodePort\" builds on ClusterIP and allocates a port on every node which routes to the same endpoints as the clusterIP. \"LoadBalancer\" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the same endpoints as the clusterIP. \"ExternalName\" aliases this service to the specified externalName. Several other fields do not apply to ExternalName services. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types"
                      },
                      "ports": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": [
                            "port"
                          ],
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service."
                            },
                            "port": {
                              "type": "integer",
                              "format": "int32",
                              "description": "The port that will be exposed by this service."
                            },
                            "nodePort": {
                              "type": "integer",
                              "format": "int32",
                              "description": "The port on each node on which this service is exposed when type is NodePort or LoadBalancer.  Usually assigned by the system. If a value is specified, in-range, and not in use it will be used, otherwise the operation will fail.  If not specified, a port will be allocated if this Service requires one.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type from NodePort to ClusterIP). More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport"
                            },
                            "protocol": {
                              "type": "string",
                              "description": "The IP protocol for this port. Supports \"TCP\", \"UDP\", and \"SCTP\". Default is TCP."
                            },
                            "targetPort": {
                              "type": "string",
                              "format": "int-or-string",
                              "description": "Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service"
                            },
                            "appProtocol": {
                              "type": "string",
                              "description": "The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and http://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol. This is a beta field that is guarded by the ServiceAppProtocol feature gate and enabled by default."
                            }
                          },
                          "description": "ServicePort contains information on service's port."
                        },
                        "description": "The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies",
                        "x-kubernetes-list-type": "map",
                        "x-kubernetes-list-map-keys": [
                          "port",
                          "protocol"
                        ],
                        "x-kubernetes-patch-strategy": "merge",
                        "x-kubernetes-patch-merge-key": "port"
                      },
                      "selector": {
                        "type": "object",
                        "description": "Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "x-kubernetes-map-type": "atomic"
                      },
                      "clusterIP": {
                        "type": "string",
                        "description": "clusterIP is the IP address of the service and is usually assigned randomly. If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be blank) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are \"None\", empty string (\"\"), or a valid IP address. Setting this to \"None\" makes a \"headless service\" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies"
                      },
                      "clusterIPs": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "ClusterIPs is a list of IP addresses assigned to this service, and are usually assigned randomly.  If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be empty) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are \"None\", empty string (\"\"), or a valid IP address.  Setting this to \"None\" makes a \"headless service\" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName.  If this field is not specified, it will be initialized from the clusterIP field.  If this field is specified, clients must ensure that clusterIPs[0] and clusterIP have the same value.\n\nUnless the \"IPv6DualStack\" feature gate is enabled, this field is limited to one value, which must be the same as the clusterIP field.  If the feature gate is enabled, this field may hold a maximum of two entries (dual-stack IPs, in either order).  These IPs must correspond to the values of the ipFamilies field. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies",
                        "x-kubernetes-list-type": "atomic"
                      },
                      "ipFamilies": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this service, and is gated by the \"IPv6DualStack\" feature gate.  This field is usually assigned automatically based on cluster configuration and the ipFamilyPolicy field. If this field is specified manually, the requested family is available in the cluster, and ipFamilyPolicy allows it, it will be used; otherwise creation of the service will fail.  This field is conditionally mutable: it allows for adding or removing a secondary IP family, but it does not allow changing the primary IP family of the Service.  Valid values are \"IPv4\" and \"IPv6\".  This field only applies to Services of types ClusterIP, NodePort, and LoadBalancer, and does apply to \"headless\" services.  This field will be wiped when updating a Service to type ExternalName.\n\nThis field may hold a maximum of two entries (dual-stack families, in either order).  These families must correspond to the values of the clusterIPs field, if specified. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.",
                        "x-kubernetes-list-type": "atomic"
                      },
                      "externalIPs": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system."
                      },
                      "externalName": {
                        "type": "string",
                        "description": "externalName is the external reference that discovery mechanisms will return as an alias for this service (e.g. a DNS CNAME record). No proxying will be involved.  Must be a lowercase RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires `type` to be \"ExternalName\"."
                      },
                      "topologyKeys": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "topologyKeys is a preference-order list of topology keys which implementations of services should use to preferentially sort endpoints when accessing this Service, it can not be used at the same time as externalTrafficPolicy=Local. Topology keys must be valid label keys and at most 16 keys may be specified. Endpoints are chosen based on the first topology key with available backends. If this field is specified and all entries have no backends that match the topology of the client, the service has no backends for that client and connections should fail. The special value \"*\" may be used to mean \"any topology\". This catch-all value, if used, only makes sense as the last value in the list. If this is not specified or empty, no topology constraints will be applied. This field is alpha-level and is only honored by servers that enable the ServiceTopology feature. This field is deprecated and will be removed in a future version."
                      },
                      "ipFamilyPolicy": {
                        "type": "string",
                        "description": "IPFamilyPolicy represents the dual-stack-ness requested or required by this Service, and is gated by the \"IPv6DualStack\" feature gate.  If there is no value provided, then this field will be set to SingleStack. Services can be \"SingleStack\" (a single IP family), \"PreferDualStack\" (two IP families on dual-stack configured clusters or a single IP family on single-stack clusters), or \"RequireDualStack\" (two IP families on dual-stack configured clusters, otherwise fail). The ipFamilies and clusterIPs fields depend on the value of this field.  This field will be wiped when updating a service to type ExternalName."
                      },
                      "loadBalancerIP": {
                        "type": "string",
                        "description": "Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature."
                      },
                      "sessionAffinity": {
                        "type": "string",
                        "description": "Supports \"ClientIP\" and \"None\". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies"
                      },
                      "loadBalancerClass": {
                        "type": "string",
                        "description": "loadBalancerClass is the class of the load balancer implementation this Service belongs to. If specified, the value of this field must be a label-style identifier, with an optional prefix, e.g. \"internal-vip\" or \"example.com/internal-vip\". Unprefixed names are reserved for end-users. This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load balancer implementation is used, today this is typically done through the cloud provider integration, but should apply for any default implementation. If set, it is assumed that a load balancer implementation is watching for Services with a matching class. Any default load balancer implementation (e.g. cloud providers) should ignore Services that set this field. This field can only be set when creating or updating a Service to type 'LoadBalancer'. Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type."
                      },
                      "healthCheckNodePort": {
                        "type": "integer",
                        "format": "int32",
                        "description": "healthCheckNodePort specifies the healthcheck nodePort for the service. This only applies when type is set to LoadBalancer and externalTrafficPolicy is set to Local. If a value is specified, is in-range, and is not in use, it will be used.  If not specified, a value will be automatically allocated.  External systems (e.g. load-balancers) can use this port to determine if a given node holds endpoints for this service or not.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type)."
                      },
                      "externalTrafficPolicy": {
                        "type": "string",
                        "description": "externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. \"Local\" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. \"Cluster\" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading."
                      },
                      "internalTrafficPolicy": {
                        "type": "string",
                        "description": "InternalTrafficPolicy specifies if the cluster internal traffic should be routed to all endpoints or node-local endpoints only. \"Cluster\" routes internal traffic to a Service to all endpoints. \"Local\" routes traffic to node-local endpoints only, traffic is dropped if no node-local endpoints are ready. The default value is \"Cluster\"."
                      },
                      "sessionAffinityConfig": {
                        "type": "object",
                        "properties": {
                          "clientIP": {
                            "type": "object",
                            "properties": {
                              "timeoutSeconds": {
                                "type": "integer",
                                "format": "int32",
                                "description": "timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == \"ClientIP\". Default value is 10800(for 3 hours)."
                              }
                            },
                            "description": "clientIP contains the configurations of Client IP based session affinity."
                          }
                        },
                        "description": "sessionAffinityConfig contains the configurations of session affinity."
                      },
                      "loadBalancerSourceRanges": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature.\" More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/"
                      },
                      "publishNotReadyAddresses": {
                        "type": "boolean",
                        "description": "publishNotReadyAddresses indicates that any agent which deals with endpoints for this Service should disregard any indications of ready/not-ready. The primary use case for setting this field is for a StatefulSet's Headless Service to propagate SRV DNS records for its Pods for the purpose of peer discovery. The Kubernetes controllers that generate Endpoints and EndpointSlice resources for Services interpret this to mean that all endpoints are considered \"ready\" even if the Pods themselves are not. Agents which consume only Kubernetes generated endpoints through the Endpoints or EndpointSlice resources can safely assume this behavior."
                      },
                      "allocateLoadBalancerNodePorts": {
                        "type": "boolean",
                        "description": "allocateLoadBalancerNodePorts defines if NodePorts will be automatically allocated for services with type LoadBalancer.  Default is \"true\". It may be set to \"false\" if the cluster load-balancer does not rely on NodePorts. allocateLoadBalancerNodePorts may only be set for services with type LoadBalancer and will be cleared if the type is changed to any other type. This field is alpha-level and is only honored by servers that enable the ServiceLBNodePortControl feature."
                      }
                    },
                    "description": "Spec defines the behavior of a service. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status"
                  },
                  "status": {
                    "type": "object",
                    "properties": {
                      "conditions": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": [
                            "type",
                            "status",
                            "lastTransitionTime",
                            "reason",
                            "message"
                          ],
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "type of condition in CamelCase or in foo.example.com/CamelCase."
                            },
                            "reason": {
                              "type": "string",
                              "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty."
                            },
                            "status": {
                              "type": "string",
                              "description": "status of the condition, one of True, False, Unknown."
                            },
                            "message": {
                              "type": "string",
                              "description": "message is a human readable message indicating details about the transition. This may be an empty string."
                            },
                            "lastTransitionTime": {
                              "type": "string",
                              "format": "date-time",
                              "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers."
                            },
                            "observedGeneration": {
                              "type": "integer",
                              "format": "int64",
                              "description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance."
                            }
                          },
                          "description": "Condition contains details for one aspect of the current state of this API Resource."
                        },
                        "description": "Current service state",
                        "x-kubernetes-list-type": "map",
                        "x-kubernetes-list-map-keys": [
                          "type"
                        ],
                        "x-kubernetes-patch-strategy": "merge",
                        "x-kubernetes-patch-merge-key": "type"
                      },
                      "loadBalancer": {
                        "type": "object",
                        "properties": {
                          "ingress": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "ip": {
                                  "type": "string",
                                  "description": "IP is set for load-balancer ingress points that are IP based (typically GCE or OpenStack load-balancers)"
                                },
                                "ports": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "port",
                                      "protocol"
                                    ],
                                    "properties": {
                                      "port": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "Port is the port number of the service port of which status is recorded here"
                                      },
                                      "error": {
                                        "type": "string",
                                        "description": "Error is to record the problem with the service port The format of the error shall comply with the following rules: - built-in error values shall be specified in this file and those shall use\n  CamelCase names\n- cloud provider specific error values must have names that comply with the\n  format foo.example.com/CamelCase."
                                      },
                                      "protocol": {
                                        "type": "string",
                                        "description": "Protocol is the protocol of the service port of which status is recorded here The supported values are: \"TCP\", \"UDP\", \"SCTP\""
                                      }
                                    }
                                  },
                                  "description": "Ports is a list of records of service ports If used, every port defined in the service should have an entry in it",
                                  "x-kubernetes-list-type": "atomic"
                                },
                                "hostname": {
                                  "type": "string",
                                  "description": "Hostname is set for load-balancer ingress points that are DNS based (typically AWS load-balancers)"
                                }
                              },
                              "description": "LoadBalancerIngress represents the status of a load-balancer ingress point: traffic intended for the service should be sent to an ingress point."
                            },
                            "description": "Ingress is a list containing ingress points for the load-balancer. Traffic intended for the service should be sent to these ingress points."
                          }
                        },
                        "description": "LoadBalancer contains the current status of the load-balancer, if one is present."
                      }
                    },
                    "description": "Most recently observed status of the service. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status"
                  },
                  "metadata": {
                    "type": "object",
                    "properties": {
                      "uid": {
                        "type": "string",
                        "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
                      },
                      "name": {
                        "type": "string",
                        "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
                      },
                      "labels": {
                        "type": "object",
                        "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "selfLink": {
                        "type": "string",
                        "description": "SelfLink is a URL representing this object. Populated by the system. Read-only.\n\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release."
                      },
                      "namespace": {
                        "type": "string",
                        "description": "Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces"
                      },
                      "finalizers": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.",
                        "x-kubernetes-patch-strategy": "merge"
                      },
                      "generation": {
                        "type": "integer",
                        "format": "int64",
                        "description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only."
                      },
                      "annotations": {
                        "type": "object",
                        "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "clusterName": {
                        "type": "string",
                        "description": "The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request."
                      },
                      "generateName": {
                        "type": "string",
                        "description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency"
                      },
                      "managedFields": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "time": {
                              "type": "string",
                              "format": "date-time",
                              "description": "Time is timestamp of when these fields were set. It should always be empty if Operation is 'Apply'"
                            },
                            "manager": {
                              "type": "string",
                              "description": "Manager is an identifier of the workflow managing these fields."
                            },
                            "fieldsV1": {
                              "type": "object",
                              "description": "FieldsV1 holds the first JSON version format as described in the \"FieldsV1\" type."
                            },
                            "operation": {
                              "type": "string",
                              "description": "Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'."
                            },
                            "apiVersion": {
                              "type": "string",
                              "description": "APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted."
                            },
                            "fieldsType": {
                              "type": "string",
                              "description": "FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\""
                            },
                            "subresource": {
                              "type": "string",
                              "description": "Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource."
                            }
                          },
                          "description": "ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to."
                        },
                        "description": "ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object."
                      },
                      "ownerReferences": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": [
                            "apiVersion",
                            "kind",
                            "name",
                            "uid"
                          ],
                          "properties": {
                            "uid": {
                              "type": "string",
                              "description": "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
                            },
                            "kind": {
                              "type": "string",
                              "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
                            },
                            "name": {
                              "type": "string",
                              "description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
                            },
                            "apiVersion": {
                              "type": "string",
                              "description": "API version of the referent."
                            },
                            "controller": {
                              "type": "boolean",
                              "description": "If true, this reference points to the managing controller."
                            },
                            "blockOwnerDeletion": {
                              "type": "boolean",
                              "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned."
                            }
                          },
                          "description": "OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.",
                          "x-kubernetes-map-type": "atomic"
                        },
                        "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
                        "x-kubernetes-patch-strategy": "merge",
                        "x-kubernetes-patch-merge-key": "uid"
                      },
                      "resourceVersion": {
                        "type": "string",
                        "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency"
                      },
                      "creationTimestamp": {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
                      },
                      "deletionTimestamp": {
                        "type": "string",
                        "format": "date-time",
                        "description": "DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.\n\nPopulated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
                      },
                      "deletionGracePeriodSeconds": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only."
                      }
                    },
                    "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create."
                  },
                  "apiVersion": {
                    "type": "string",
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
                  }
                },
                "description": "Service is a named abstraction of software service (for example, mysql) consisting of local port (for example 3306) that the proxy listens on, and the selector that determines which pods will answer requests sent through the proxy.",
                "x-kubernetes-group-version-kind": [
                  {
                    "kind": "Service",
                    "group": "",
                    "version": "v1"
                  }
                ]
              },
              "description": "List of services"
            },
            "metadata": {
              "type": "object",
              "properties": {
                "continue": {
                  "type": "string",
                  "description": "continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message."
                },
                "selfLink": {
                  "type": "string",
                  "description": "selfLink is a URL representing this object. Populated by the system. Read-only.\n\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release."
                },
                "resourceVersion": {
                  "type": "string",
                  "description": "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency"
                },
                "remainingItemCount": {
                  "type": "integer",
                  "format": "int64",
                  "description": "remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact."
                }
              },
              "description": "ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}."
            },
            "apiVersion": {
              "type": "string",
              "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
            }
          },
          "description": "ServiceList holds a list of services.",
          "x-kubernetes-group-version-kind": [
            {
              "kind": "ServiceList",
              "group": "",
              "version": "v1"
            }
          ]
        }
      ]
  listCoreV1Namespace:
    description: |-
      list or watch objects of kind Namespace
    versions:
      from: 1.0.0
    link: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.19/#list-namespace-v1-core
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "object",
          "required": [
            "items"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
            },
            "items": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "kind": {
                    "type": "string",
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
                  },
                  "spec": {
                    "type": "object",
                    "properties": {
                      "finalizers": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Finalizers is an opaque list of values that must be empty to permanently remove object from storage. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/"
                      }
                    },
                    "description": "Spec defines the behavior of the Namespace. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status"
                  },
                  "status": {
                    "type": "object",
                    "properties": {
                      "phase": {
                        "type": "string",
                        "description": "Phase is the current lifecycle phase of the namespace. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/"
                      },
                      "conditions": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": [
                            "type",
                            "status"
                          ],
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "Type of namespace controller condition."
                            },
                            "reason": {
                              "type": "string"
                            },
                            "status": {
                              "type": "string",
                              "description": "Status of the condition, one of True, False, Unknown."
                            },
                            "message": {
                              "type": "string"
                            },
                            "lastTransitionTime": {
                              "type": "string",
                              "format": "date-time",
                              "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers."
                            }
                          },
                          "description": "NamespaceCondition contains details about state of namespace."
                        },
                        "description": "Represents the latest available observations of a namespace's current state.",
                        "x-kubernetes-patch-strategy": "merge",
                        "x-kubernetes-patch-merge-key": "type"
                      }
                    },
                    "description": "Status describes the current status of a Namespace. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status"
                  },
                  "metadata": {
                    "type": "object",
                    "properties": {
                      "uid": {
                        "type": "string",
                        "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
                      },
                      "name": {
                        "type": "string",
                        "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
                      },
                      "labels": {
                        "type": "object",
                        "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "selfLink": {
                        "type": "string",
                        "description": "SelfLink is a URL representing this object. Populated by the system. Read-only.\n\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release."
                      },
                      "namespace": {
                        "type": "string",
                        "description": "Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces"
                      },
                      "finalizers": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.",
                        "x-kubernetes-patch-strategy": "merge"
                      },
                      "generation": {
                        "type": "integer",
                        "format": "int64",
                        "description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only."
                      },
                      "annotations": {
                        "type": "object",
                        "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "clusterName": {
                        "type": "string",
                        "description": "The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request."
                      },
                      "generateName": {
                        "type": "string",
                        "description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency"
                      },
                      "managedFields": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "time": {
                              "type": "string",
                              "format": "date-time",
                              "description": "Time is timestamp of when these fields were set. It should always be empty if Operation is 'Apply'"
                            },
                            "manager": {
                              "type": "string",
                              "description": "Manager is an identifier of the workflow managing these fields."
                            },
                            "fieldsV1": {
                              "type": "object",
                              "description": "FieldsV1 holds the first JSON version format as described in the \"FieldsV1\" type."
                            },
                            "operation": {
                              "type": "string",
                              "description": "Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'."
                            },
                            "apiVersion": {
                              "type": "string",
                              "description": "APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted."
                            },
                            "fieldsType": {
                              "type": "string",
                              "description": "FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\""
                            },
                            "subresource": {
                              "type": "string",
                              "description": "Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource."
                            }
                          },
                          "description": "ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to."
                        },
                        "description": "ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object."
                      },
                      "ownerReferences": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": [
                            "apiVersion",
                            "kind",
                            "name",
                            "uid"
                          ],
                          "properties": {
                            "uid": {
                              "type": "string",
                              "description": "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
                            },
                            "kind": {
                              "type": "string",
                              "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
                            },
                            "name": {
                              "type": "string",
                              "description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
                            },
                            "apiVersion": {
                              "type": "string",
                              "description": "API version of the referent."
                            },
                            "controller": {
                              "type": "boolean",
                              "description": "If true, this reference points to the managing controller."
                            },
                            "blockOwnerDeletion": {
                              "type": "boolean",
                              "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned."
                            }
                          },
                          "description": "OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.",
                          "x-kubernetes-map-type": "atomic"
                        },
                        "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
                        "x-kubernetes-patch-strategy": "merge",
                        "x-kubernetes-patch-merge-key": "uid"
                      },
                      "resourceVersion": {
                        "type": "string",
                        "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency"
                      },
                      "creationTimestamp": {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
                      },
                      "deletionTimestamp": {
                        "type": "string",
                        "format": "date-time",
                        "description": "DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.\n\nPopulated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
                      },
                      "deletionGracePeriodSeconds": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only."
                      }
                    },
                    "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create."
                  },
                  "apiVersion": {
                    "type": "string",
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
                  }
                },
                "description": "Namespace provides a scope for Names. Use of multiple namespaces is optional.",
                "x-kubernetes-group-version-kind": [
                  {
                    "kind": "Namespace",
                    "group": "",
                    "version": "v1"
                  }
                ]
              },
              "description": "Items is the list of Namespace objects in the list. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/"
            },
            "metadata": {
              "type": "object",
              "properties": {
                "continue": {
                  "type": "string",
                  "description": "continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message."
                },
                "selfLink": {
                  "type": "string",
                  "description": "selfLink is a URL representing this object. Populated by the system. Read-only.\n\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release."
                },
                "resourceVersion": {
                  "type": "string",
                  "description": "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency"
                },
                "remainingItemCount": {
                  "type": "integer",
                  "format": "int64",
                  "description": "remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact."
                }
              },
              "description": "ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}."
            },
            "apiVersion": {
              "type": "string",
              "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
            }
          },
          "description": "NamespaceList is a list of Namespaces.",
          "x-kubernetes-group-version-kind": [
            {
              "kind": "NamespaceList",
              "group": "",
              "version": "v1"
            }
          ]
        }
      ]
  listCoreV1Node:
    description: |-
      list or watch objects of kind Node
    versions:
      from: 1.0.0
    link: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.19/#list-node-v1-core
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "object",
          "required": [
            "items"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
            },
            "items": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "kind": {
                    "type": "string",
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
                  },
                  "spec": {
                    "type": "object",
                    "properties": {
                      "taints": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": [
                            "key",
                            "effect"
                          ],
                          "properties": {
                            "key": {
                              "type": "string",
                              "description": "Required. The taint key to be applied to a node."
                            },
                            "value": {
                              "type": "string",
                              "description": "The taint value corresponding to the taint key."
                            },
                            "effect": {
                              "type": "string",
                              "description": "Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute."
                            },
                            "timeAdded": {
                              "type": "string",
                              "format": "date-time",
                              "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers."
                            }
                          },
                          "description": "The node this Taint is attached to has the \"effect\" on any pod that does not tolerate the Taint."
                        },
                        "description": "If specified, the node's taints."
                      },
                      "podCIDR": {
                        "type": "string",
                        "description": "PodCIDR represents the pod IP range assigned to the node."
                      },
                      "podCIDRs": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "podCIDRs represents the IP ranges assigned to the node for usage by Pods on that node. If this field is specified, the 0th entry must match the podCIDR field. It may contain at most 1 value for each of IPv4 and IPv6.",
                        "x-kubernetes-patch-strategy": "merge"
                      },
                      "externalID": {
                        "type": "string",
                        "description": "Deprecated. Not all kubelets will set this field. Remove field after 1.13. see: https://issues.k8s.io/61966"
                      },
                      "providerID": {
                        "type": "string",
                        "description": "ID of the node assigned by the cloud provider in the format: <ProviderName>://<ProviderSpecificNodeID>"
                      },
                      "configSource": {
                        "type": "object",
                        "properties": {
                          "configMap": {
                            "type": "object",
                            "required": [
                              "namespace",
                              "name",
                              "kubeletConfigKey"
                            ],
                            "properties": {
                              "uid": {
                                "type": "string",
                                "description": "UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status."
                              },
                              "name": {
                                "type": "string",
                                "description": "Name is the metadata.name of the referenced ConfigMap. This field is required in all cases."
                              },
                              "namespace": {
                                "type": "string",
                                "description": "Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases."
                              },
                              "resourceVersion": {
                                "type": "string",
                                "description": "ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status."
                              },
                              "kubeletConfigKey": {
                                "type": "string",
                                "description": "KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases."
                              }
                            },
                            "description": "ConfigMap is a reference to a Node's ConfigMap"
                          }
                        },
                        "description": "If specified, the source to get node configuration from The DynamicKubeletConfig feature gate must be enabled for the Kubelet to use this field"
                      },
                      "unschedulable": {
                        "type": "boolean",
                        "description": "Unschedulable controls node schedulability of new pods. By default, node is schedulable. More info: https://kubernetes.io/docs/concepts/nodes/node/#manual-node-administration"
                      }
                    },
                    "description": "Spec defines the behavior of a node. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status"
                  },
                  "status": {
                    "type": "object",
                    "properties": {
                      "phase": {
                        "type": "string",
                        "description": "NodePhase is the recently observed lifecycle phase of the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#phase The field is never populated, and now is deprecated."
                      },
                      "config": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string",
                            "description": "Error describes any problems reconciling the Spec.ConfigSource to the Active config. Errors may occur, for example, attempting to checkpoint Spec.ConfigSource to the local Assigned record, attempting to checkpoint the payload associated with Spec.ConfigSource, attempting to load or validate the Assigned config, etc. Errors may occur at different points while syncing config. Earlier errors (e.g. download or checkpointing errors) will not result in a rollback to LastKnownGood, and may resolve across Kubelet retries. Later errors (e.g. loading or validating a checkpointed config) will result in a rollback to LastKnownGood. In the latter case, it is usually possible to resolve the error by fixing the config assigned in Spec.ConfigSource. You can find additional information for debugging by searching the error message in the Kubelet log. Error is a human-readable description of the error state; machines can check whether or not Error is empty, but should not rely on the stability of the Error text across Kubelet versions."
                          },
                          "active": {
                            "type": "object",
                            "properties": {
                              "configMap": {
                                "type": "object",
                                "required": [
                                  "namespace",
                                  "name",
                                  "kubeletConfigKey"
                                ],
                                "properties": {
                                  "uid": {
                                    "type": "string",
                                    "description": "UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status."
                                  },
                                  "name": {
                                    "type": "string",
                                    "description": "Name is the metadata.name of the referenced ConfigMap. This field is required in all cases."
                                  },
                                  "namespace": {
                                    "type": "string",
                                    "description": "Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases."
                                  },
                                  "resourceVersion": {
                                    "type": "string",
                                    "description": "ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status."
                                  },
                                  "kubeletConfigKey": {
                                    "type": "string",
                                    "description": "KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases."
                                  }
                                },
                                "description": "ConfigMap is a reference to a Node's ConfigMap"
                              }
                            },
                            "description": "Active reports the checkpointed config the node is actively using. Active will represent either the current version of the Assigned config, or the current LastKnownGood config, depending on whether attempting to use the Assigned config results in an error."
                          },
                          "assigned": {
                            "type": "object",
                            "properties": {
                              "configMap": {
                                "type": "object",
                                "required": [
                                  "namespace",
                                  "name",
                                  "kubeletConfigKey"
                                ],
                                "properties": {
                                  "uid": {
                                    "type": "string",
                                    "description": "UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status."
                                  },
                                  "name": {
                                    "type": "string",
                                    "description": "Name is the metadata.name of the referenced ConfigMap. This field is required in all cases."
                                  },
                                  "namespace": {
                                    "type": "string",
                                    "description": "Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases."
                                  },
                                  "resourceVersion": {
                                    "type": "string",
                                    "description": "ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status."
                                  },
                                  "kubeletConfigKey": {
                                    "type": "string",
                                    "description": "KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases."
                                  }
                                },
                                "description": "ConfigMap is a reference to a Node's ConfigMap"
                              }
                            },
                            "description": "Assigned reports the checkpointed config the node will try to use. When Node.Spec.ConfigSource is updated, the node checkpoints the associated config payload to local disk, along with a record indicating intended config. The node refers to this record to choose its config checkpoint, and reports this record in Assigned. Assigned only updates in the status after the record has been checkpointed to disk. When the Kubelet is restarted, it tries to make the Assigned config the Active config by loading and validating the checkpointed payload identified by Assigned."
                          },
                          "lastKnownGood": {
                            "type": "object",
                            "properties": {
                              "configMap": {
                                "type": "object",
                                "required": [
                                  "namespace",
                                  "name",
                                  "kubeletConfigKey"
                                ],
                                "properties": {
                                  "uid": {
                                    "type": "string",
                                    "description": "UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status."
                                  },
                                  "name": {
                                    "type": "string",
                                    "description": "Name is the metadata.name of the referenced ConfigMap. This field is required in all cases."
                                  },
                                  "namespace": {
                                    "type": "string",
                                    "description": "Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases."
                                  },
                                  "resourceVersion": {
                                    "type": "string",
                                    "description": "ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status."
                                  },
                                  "kubeletConfigKey": {
                                    "type": "string",
                                    "description": "KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases."
                                  }
                                },
                                "description": "ConfigMap is a reference to a Node's ConfigMap"
                              }
                            },
                            "description": "LastKnownGood reports the checkpointed config the node will fall back to when it encounters an error attempting to use the Assigned config. The Assigned config becomes the LastKnownGood config when the node determines that the Assigned config is stable and correct. This is currently implemented as a 10-minute soak period starting when the local record of Assigned config is updated. If the Assigned config is Active at the end of this period, it becomes the LastKnownGood. Note that if Spec.ConfigSource is reset to nil (use local defaults), the LastKnownGood is also immediately reset to nil, because the local default config is always assumed good. You should not make assumptions about the node's method of determining config stability and correctness, as this may change or become configurable in the future."
                          }
                        },
                        "description": "Status of the config assigned to the node via the dynamic Kubelet config feature."
                      },
                      "images": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "names": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "description": "Names by which this image is known. e.g. [\"k8s.gcr.io/hyperkube:v1.0.7\", \"dockerhub.io/google_containers/hyperkube:v1.0.7\"]"
                            },
                            "sizeBytes": {
                              "type": "integer",
                              "format": "int64",
                              "description": "The size of the image in bytes."
                            }
                          },
                          "description": "Describe a container image"
                        },
                        "description": "List of container images on this node"
                      },
                      "capacity": {
                        "type": "object",
                        "description": "Capacity represents the total resources of a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity",
                        "additionalProperties": {
                          "type": "string",
                          "description": "Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.\n\nThe serialization format is:\n\n<quantity>        ::= <signedNumber><suffix>\n  (Note that <suffix> may be empty, from the \"\" case in <decimalSI>.)\n<digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= \"+\" | \"-\" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei\n  (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)\n<decimalSI>       ::= m | \"\" | k | M | G | T | P | E\n  (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)\n<decimalExponent> ::= \"e\" <signedNumber> | \"E\" <signedNumber>\n\nNo matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.\n\nWhen a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.\n\nBefore serializing, Quantity will be put in \"canonical form\". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:\n  a. No precision is lost\n  b. No fractional digits will be emitted\n  c. The exponent (or suffix) is as large as possible.\nThe sign will be omitted unless the number is negative.\n\nExamples:\n  1.5 will be serialized as \"1500m\"\n  1.5Gi will be serialized as \"1536Mi\"\n\nNote that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.\n\nNon-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)\n\nThis format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation."
                        }
                      },
                      "nodeInfo": {
                        "type": "object",
                        "required": [
                          "machineID",
                          "systemUUID",
                          "bootID",
                          "kernelVersion",
                          "osImage",
                          "containerRuntimeVersion",
                          "kubeletVersion",
                          "kubeProxyVersion",
                          "operatingSystem",
                          "architecture"
                        ],
                        "properties": {
                          "bootID": {
                            "type": "string",
                            "description": "Boot ID reported by the node."
                          },
                          "osImage": {
                            "type": "string",
                            "description": "OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy))."
                          },
                          "machineID": {
                            "type": "string",
                            "description": "MachineID reported by the node. For unique machine identification in the cluster this field is preferred. Learn more from man(5) machine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html"
                          },
                          "systemUUID": {
                            "type": "string",
                            "description": "SystemUUID reported by the node. For unique machine identification MachineID is preferred. This field is specific to Red Hat hosts https://access.redhat.com/documentation/en-us/red_hat_subscription_management/1/html/rhsm/uuid"
                          },
                          "architecture": {
                            "type": "string",
                            "description": "The Architecture reported by the node"
                          },
                          "kernelVersion": {
                            "type": "string",
                            "description": "Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64)."
                          },
                          "kubeletVersion": {
                            "type": "string",
                            "description": "Kubelet Version reported by the node."
                          },
                          "operatingSystem": {
                            "type": "string",
                            "description": "The Operating System reported by the node"
                          },
                          "kubeProxyVersion": {
                            "type": "string",
                            "description": "KubeProxy Version reported by the node."
                          },
                          "containerRuntimeVersion": {
                            "type": "string",
                            "description": "ContainerRuntime Version reported by the node through runtime remote API (e.g. docker://1.5.0)."
                          }
                        },
                        "description": "Set of ids/uuids to uniquely identify the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#info"
                      },
                      "addresses": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": [
                            "type",
                            "address"
                          ],
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "Node address type, one of Hostname, ExternalIP or InternalIP."
                            },
                            "address": {
                              "type": "string",
                              "description": "The node address."
                            }
                          },
                          "description": "NodeAddress contains information for the node's address."
                        },
                        "description": "List of addresses reachable to the node. Queried from cloud provider, if available. More info: https://kubernetes.io/docs/concepts/nodes/node/#addresses Note: This field is declared as mergeable, but the merge key is not sufficiently unique, which can cause data corruption when it is merged. Callers should instead use a full-replacement patch. See http://pr.k8s.io/79391 for an example.",
                        "x-kubernetes-patch-strategy": "merge",
                        "x-kubernetes-patch-merge-key": "type"
                      },
                      "conditions": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": [
                            "type",
                            "status"
                          ],
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "Type of node condition."
                            },
                            "reason": {
                              "type": "string",
                              "description": "(brief) reason for the condition's last transition."
                            },
                            "status": {
                              "type": "string",
                              "description": "Status of the condition, one of True, False, Unknown."
                            },
                            "message": {
                              "type": "string",
                              "description": "Human readable message indicating details about last transition."
                            },
                            "lastHeartbeatTime": {
                              "type": "string",
                              "format": "date-time",
                              "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers."
                            },
                            "lastTransitionTime": {
                              "type": "string",
                              "format": "date-time",
                              "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers."
                            }
                          },
                          "description": "NodeCondition contains condition information for a node."
                        },
                        "description": "Conditions is an array of current observed node conditions. More info: https://kubernetes.io/docs/concepts/nodes/node/#condition",
                        "x-kubernetes-patch-strategy": "merge",
                        "x-kubernetes-patch-merge-key": "type"
                      },
                      "allocatable": {
                        "type": "object",
                        "description": "Allocatable represents the resources of a node that are available for scheduling. Defaults to Capacity.",
                        "additionalProperties": {
                          "type": "string",
                          "description": "Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.\n\nThe serialization format is:\n\n<quantity>        ::= <signedNumber><suffix>\n  (Note that <suffix> may be empty, from the \"\" case in <decimalSI>.)\n<digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= \"+\" | \"-\" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei\n  (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)\n<decimalSI>       ::= m | \"\" | k | M | G | T | P | E\n  (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)\n<decimalExponent> ::= \"e\" <signedNumber> | \"E\" <signedNumber>\n\nNo matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.\n\nWhen a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.\n\nBefore serializing, Quantity will be put in \"canonical form\". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:\n  a. No precision is lost\n  b. No fractional digits will be emitted\n  c. The exponent (or suffix) is as large as possible.\nThe sign will be omitted unless the number is negative.\n\nExamples:\n  1.5 will be serialized as \"1500m\"\n  1.5Gi will be serialized as \"1536Mi\"\n\nNote that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.\n\nNon-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)\n\nThis format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation."
                        }
                      },
                      "volumesInUse": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "List of attachable volumes in use (mounted) by the node."
                      },
                      "daemonEndpoints": {
                        "type": "object",
                        "properties": {
                          "kubeletEndpoint": {
                            "type": "object",
                            "required": [
                              "Port"
                            ],
                            "properties": {
                              "Port": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Port number of the given endpoint."
                              }
                            },
                            "description": "Endpoint on which Kubelet is listening."
                          }
                        },
                        "description": "Endpoints of daemons running on the Node."
                      },
                      "volumesAttached": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": [
                            "name",
                            "devicePath"
                          ],
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "Name of the attached volume"
                            },
                            "devicePath": {
                              "type": "string",
                              "description": "DevicePath represents the device path where the volume should be available"
                            }
                          },
                          "description": "AttachedVolume describes a volume attached to a node"
                        },
                        "description": "List of volumes that are attached to the node."
                      }
                    },
                    "description": "Most recently observed status of the node. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status"
                  },
                  "metadata": {
                    "type": "object",
                    "properties": {
                      "uid": {
                        "type": "string",
                        "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
                      },
                      "name": {
                        "type": "string",
                        "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
                      },
                      "labels": {
                        "type": "object",
                        "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "selfLink": {
                        "type": "string",
                        "description": "SelfLink is a URL representing this object. Populated by the system. Read-only.\n\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release."
                      },
                      "namespace": {
                        "type": "string",
                        "description": "Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces"
                      },
                      "finalizers": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.",
                        "x-kubernetes-patch-strategy": "merge"
                      },
                      "generation": {
                        "type": "integer",
                        "format": "int64",
                        "description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only."
                      },
                      "annotations": {
                        "type": "object",
                        "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "clusterName": {
                        "type": "string",
                        "description": "The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request."
                      },
                      "generateName": {
                        "type": "string",
                        "description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency"
                      },
                      "managedFields": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "time": {
                              "type": "string",
                              "format": "date-time",
                              "description": "Time is timestamp of when these fields were set. It should always be empty if Operation is 'Apply'"
                            },
                            "manager": {
                              "type": "string",
                              "description": "Manager is an identifier of the workflow managing these fields."
                            },
                            "fieldsV1": {
                              "type": "object",
                              "description": "FieldsV1 holds the first JSON version format as described in the \"FieldsV1\" type."
                            },
                            "operation": {
                              "type": "string",
                              "description": "Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'."
                            },
                            "apiVersion": {
                              "type": "string",
                              "description": "APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted."
                            },
                            "fieldsType": {
                              "type": "string",
                              "description": "FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\""
                            },
                            "subresource": {
                              "type": "string",
                              "description": "Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource."
                            }
                          },
                          "description": "ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to."
                        },
                        "description": "ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object."
                      },
                      "ownerReferences": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": [
                            "apiVersion",
                            "kind",
                            "name",
                            "uid"
                          ],
                          "properties": {
                            "uid": {
                              "type": "string",
                              "description": "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
                            },
                            "kind": {
                              "type": "string",
                              "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
                            },
                            "name": {
                              "type": "string",
                              "description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
                            },
                            "apiVersion": {
                              "type": "string",
                              "description": "API version of the referent."
                            },
                            "controller": {
                              "type": "boolean",
                              "description": "If true, this reference points to the managing controller."
                            },
                            "blockOwnerDeletion": {
                              "type": "boolean",
                              "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned."
                            }
                          },
                          "description": "OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.",
                          "x-kubernetes-map-type": "atomic"
                        },
                        "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
                        "x-kubernetes-patch-strategy": "merge",
                        "x-kubernetes-patch-merge-key": "uid"
                      },
                      "resourceVersion": {
                        "type": "string",
                        "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency"
                      },
                      "creationTimestamp": {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
                      },
                      "deletionTimestamp": {
                        "type": "string",
                        "format": "date-time",
                        "description": "DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.\n\nPopulated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
                      },
                      "deletionGracePeriodSeconds": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only."
                      }
                    },
                    "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create."
                  },
                  "apiVersion": {
                    "type": "string",
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
                  }
                },
                "description": "Node is a worker node in Kubernetes. Each node will have a unique identifier in the cache (i.e. in etcd).",
                "x-kubernetes-group-version-kind": [
                  {
                    "kind": "Node",
                    "group": "",
                    "version": "v1"
                  }
                ]
              },
              "description": "List of nodes"
            },
            "metadata": {
              "type": "object",
              "properties": {
                "continue": {
                  "type": "string",
                  "description": "continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message."
                },
                "selfLink": {
                  "type": "string",
                  "description": "selfLink is a URL representing this object. Populated by the system. Read-only.\n\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release."
                },
                "resourceVersion": {
                  "type": "string",
                  "description": "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency"
                },
                "remainingItemCount": {
                  "type": "integer",
                  "format": "int64",
                  "description": "remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact."
                }
              },
              "description": "ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}."
            },
            "apiVersion": {
              "type": "string",
              "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
            }
          },
          "description": "NodeList is the whole list of all Nodes which have been registered with master.",
          "x-kubernetes-group-version-kind": [
            {
              "kind": "NodeList",
              "group": "",
              "version": "v1"
            }
          ]
        }
      ]
  listCoreV1NamespacedPod:
    description: |-
      list or watch objects of kind Pod
    versions:
      from: 1.0.0
    link: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.19/#list-pod-v1-core
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  listAppsV1NamespacedReplicaSet:
    description: |-
      list or watch objects of kind ReplicaSet
    versions:
      from: 1.0.0
    link: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.19/#list-replicaset-v1-apps
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  listCoreV1NamespacedService:
    description: |-
      list or watch objects of kind Service
    versions:
      from: 1.0.0
    link: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.19/#list-service-v1-core
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "object",
          "required": [
            "items"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
            },
            "items": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "kind": {
                    "type": "string",
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
                  },
                  "spec": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. \"ClusterIP\" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object or EndpointSlice objects. If clusterIP is \"None\", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a virtual IP. \"NodePort\" builds on ClusterIP and allocates a port on every node which routes to the same endpoints as the clusterIP. \"LoadBalancer\" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the same endpoints as the clusterIP. \"ExternalName\" aliases this service to the specified externalName. Several other fields do not apply to ExternalName services. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types"
                      },
                      "ports": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": [
                            "port"
                          ],
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service."
                            },
                            "port": {
                              "type": "integer",
                              "format": "int32",
                              "description": "The port that will be exposed by this service."
                            },
                            "nodePort": {
                              "type": "integer",
                              "format": "int32",
                              "description": "The port on each node on which this service is exposed when type is NodePort or LoadBalancer.  Usually assigned by the system. If a value is specified, in-range, and not in use it will be used, otherwise the operation will fail.  If not specified, a port will be allocated if this Service requires one.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type from NodePort to ClusterIP). More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport"
                            },
                            "protocol": {
                              "type": "string",
                              "description": "The IP protocol for this port. Supports \"TCP\", \"UDP\", and \"SCTP\". Default is TCP."
                            },
                            "targetPort": {
                              "type": "string",
                              "format": "int-or-string",
                              "description": "Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service"
                            },
                            "appProtocol": {
                              "type": "string",
                              "description": "The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and http://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol. This is a beta field that is guarded by the ServiceAppProtocol feature gate and enabled by default."
                            }
                          },
                          "description": "ServicePort contains information on service's port."
                        },
                        "description": "The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies",
                        "x-kubernetes-list-type": "map",
                        "x-kubernetes-list-map-keys": [
                          "port",
                          "protocol"
                        ],
                        "x-kubernetes-patch-strategy": "merge",
                        "x-kubernetes-patch-merge-key": "port"
                      },
                      "selector": {
                        "type": "object",
                        "description": "Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "x-kubernetes-map-type": "atomic"
                      },
                      "clusterIP": {
                        "type": "string",
                        "description": "clusterIP is the IP address of the service and is usually assigned randomly. If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be blank) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are \"None\", empty string (\"\"), or a valid IP address. Setting this to \"None\" makes a \"headless service\" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies"
                      },
                      "clusterIPs": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "ClusterIPs is a list of IP addresses assigned to this service, and are usually assigned randomly.  If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be empty) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are \"None\", empty string (\"\"), or a valid IP address.  Setting this to \"None\" makes a \"headless service\" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName.  If this field is not specified, it will be initialized from the clusterIP field.  If this field is specified, clients must ensure that clusterIPs[0] and clusterIP have the same value.\n\nUnless the \"IPv6DualStack\" feature gate is enabled, this field is limited to one value, which must be the same as the clusterIP field.  If the feature gate is enabled, this field may hold a maximum of two entries (dual-stack IPs, in either order).  These IPs must correspond to the values of the ipFamilies field. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies",
                        "x-kubernetes-list-type": "atomic"
                      },
                      "ipFamilies": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this service, and is gated by the \"IPv6DualStack\" feature gate.  This field is usually assigned automatically based on cluster configuration and the ipFamilyPolicy field. If this field is specified manually, the requested family is available in the cluster, and ipFamilyPolicy allows it, it will be used; otherwise creation of the service will fail.  This field is conditionally mutable: it allows for adding or removing a secondary IP family, but it does not allow changing the primary IP family of the Service.  Valid values are \"IPv4\" and \"IPv6\".  This field only applies to Services of types ClusterIP, NodePort, and LoadBalancer, and does apply to \"headless\" services.  This field will be wiped when updating a Service to type ExternalName.\n\nThis field may hold a maximum of two entries (dual-stack families, in either order).  These families must correspond to the values of the clusterIPs field, if specified. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.",
                        "x-kubernetes-list-type": "atomic"
                      },
                      "externalIPs": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system."
                      },
                      "externalName": {
                        "type": "string",
                        "description": "externalName is the external reference that discovery mechanisms will return as an alias for this service (e.g. a DNS CNAME record). No proxying will be involved.  Must be a lowercase RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires `type` to be \"ExternalName\"."
                      },
                      "topologyKeys": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "topologyKeys is a preference-order list of topology keys which implementations of services should use to preferentially sort endpoints when accessing this Service, it can not be used at the same time as externalTrafficPolicy=Local. Topology keys must be valid label keys and at most 16 keys may be specified. Endpoints are chosen based on the first topology key with available backends. If this field is specified and all entries have no backends that match the topology of the client, the service has no backends for that client and connections should fail. The special value \"*\" may be used to mean \"any topology\". This catch-all value, if used, only makes sense as the last value in the list. If this is not specified or empty, no topology constraints will be applied. This field is alpha-level and is only honored by servers that enable the ServiceTopology feature. This field is deprecated and will be removed in a future version."
                      },
                      "ipFamilyPolicy": {
                        "type": "string",
                        "description": "IPFamilyPolicy represents the dual-stack-ness requested or required by this Service, and is gated by the \"IPv6DualStack\" feature gate.  If there is no value provided, then this field will be set to SingleStack. Services can be \"SingleStack\" (a single IP family), \"PreferDualStack\" (two IP families on dual-stack configured clusters or a single IP family on single-stack clusters), or \"RequireDualStack\" (two IP families on dual-stack configured clusters, otherwise fail). The ipFamilies and clusterIPs fields depend on the value of this field.  This field will be wiped when updating a service to type ExternalName."
                      },
                      "loadBalancerIP": {
                        "type": "string",
                        "description": "Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature."
                      },
                      "sessionAffinity": {
                        "type": "string",
                        "description": "Supports \"ClientIP\" and \"None\". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies"
                      },
                      "loadBalancerClass": {
                        "type": "string",
                        "description": "loadBalancerClass is the class of the load balancer implementation this Service belongs to. If specified, the value of this field must be a label-style identifier, with an optional prefix, e.g. \"internal-vip\" or \"example.com/internal-vip\". Unprefixed names are reserved for end-users. This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load balancer implementation is used, today this is typically done through the cloud provider integration, but should apply for any default implementation. If set, it is assumed that a load balancer implementation is watching for Services with a matching class. Any default load balancer implementation (e.g. cloud providers) should ignore Services that set this field. This field can only be set when creating or updating a Service to type 'LoadBalancer'. Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type."
                      },
                      "healthCheckNodePort": {
                        "type": "integer",
                        "format": "int32",
                        "description": "healthCheckNodePort specifies the healthcheck nodePort for the service. This only applies when type is set to LoadBalancer and externalTrafficPolicy is set to Local. If a value is specified, is in-range, and is not in use, it will be used.  If not specified, a value will be automatically allocated.  External systems (e.g. load-balancers) can use this port to determine if a given node holds endpoints for this service or not.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type)."
                      },
                      "externalTrafficPolicy": {
                        "type": "string",
                        "description": "externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. \"Local\" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. \"Cluster\" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading."
                      },
                      "internalTrafficPolicy": {
                        "type": "string",
                        "description": "InternalTrafficPolicy specifies if the cluster internal traffic should be routed to all endpoints or node-local endpoints only. \"Cluster\" routes internal traffic to a Service to all endpoints. \"Local\" routes traffic to node-local endpoints only, traffic is dropped if no node-local endpoints are ready. The default value is \"Cluster\"."
                      },
                      "sessionAffinityConfig": {
                        "type": "object",
                        "properties": {
                          "clientIP": {
                            "type": "object",
                            "properties": {
                              "timeoutSeconds": {
                                "type": "integer",
                                "format": "int32",
                                "description": "timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == \"ClientIP\". Default value is 10800(for 3 hours)."
                              }
                            },
                            "description": "clientIP contains the configurations of Client IP based session affinity."
                          }
                        },
                        "description": "sessionAffinityConfig contains the configurations of session affinity."
                      },
                      "loadBalancerSourceRanges": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature.\" More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/"
                      },
                      "publishNotReadyAddresses": {
                        "type": "boolean",
                        "description": "publishNotReadyAddresses indicates that any agent which deals with endpoints for this Service should disregard any indications of ready/not-ready. The primary use case for setting this field is for a StatefulSet's Headless Service to propagate SRV DNS records for its Pods for the purpose of peer discovery. The Kubernetes controllers that generate Endpoints and EndpointSlice resources for Services interpret this to mean that all endpoints are considered \"ready\" even if the Pods themselves are not. Agents which consume only Kubernetes generated endpoints through the Endpoints or EndpointSlice resources can safely assume this behavior."
                      },
                      "allocateLoadBalancerNodePorts": {
                        "type": "boolean",
                        "description": "allocateLoadBalancerNodePorts defines if NodePorts will be automatically allocated for services with type LoadBalancer.  Default is \"true\". It may be set to \"false\" if the cluster load-balancer does not rely on NodePorts. allocateLoadBalancerNodePorts may only be set for services with type LoadBalancer and will be cleared if the type is changed to any other type. This field is alpha-level and is only honored by servers that enable the ServiceLBNodePortControl feature."
                      }
                    },
                    "description": "Spec defines the behavior of a service. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status"
                  },
                  "status": {
                    "type": "object",
                    "properties": {
                      "conditions": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": [
                            "type",
                            "status",
                            "lastTransitionTime",
                            "reason",
                            "message"
                          ],
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "type of condition in CamelCase or in foo.example.com/CamelCase."
                            },
                            "reason": {
                              "type": "string",
                              "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty."
                            },
                            "status": {
                              "type": "string",
                              "description": "status of the condition, one of True, False, Unknown."
                            },
                            "message": {
                              "type": "string",
                              "description": "message is a human readable message indicating details about the transition. This may be an empty string."
                            },
                            "lastTransitionTime": {
                              "type": "string",
                              "format": "date-time",
                              "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers."
                            },
                            "observedGeneration": {
                              "type": "integer",
                              "format": "int64",
                              "description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance."
                            }
                          },
                          "description": "Condition contains details for one aspect of the current state of this API Resource."
                        },
                        "description": "Current service state",
                        "x-kubernetes-list-type": "map",
                        "x-kubernetes-list-map-keys": [
                          "type"
                        ],
                        "x-kubernetes-patch-strategy": "merge",
                        "x-kubernetes-patch-merge-key": "type"
                      },
                      "loadBalancer": {
                        "type": "object",
                        "properties": {
                          "ingress": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "ip": {
                                  "type": "string",
                                  "description": "IP is set for load-balancer ingress points that are IP based (typically GCE or OpenStack load-balancers)"
                                },
                                "ports": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "port",
                                      "protocol"
                                    ],
                                    "properties": {
                                      "port": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "Port is the port number of the service port of which status is recorded here"
                                      },
                                      "error": {
                                        "type": "string",
                                        "description": "Error is to record the problem with the service port The format of the error shall comply with the following rules: - built-in error values shall be specified in this file and those shall use\n  CamelCase names\n- cloud provider specific error values must have names that comply with the\n  format foo.example.com/CamelCase."
                                      },
                                      "protocol": {
                                        "type": "string",
                                        "description": "Protocol is the protocol of the service port of which status is recorded here The supported values are: \"TCP\", \"UDP\", \"SCTP\""
                                      }
                                    }
                                  },
                                  "description": "Ports is a list of records of service ports If used, every port defined in the service should have an entry in it",
                                  "x-kubernetes-list-type": "atomic"
                                },
                                "hostname": {
                                  "type": "string",
                                  "description": "Hostname is set for load-balancer ingress points that are DNS based (typically AWS load-balancers)"
                                }
                              },
                              "description": "LoadBalancerIngress represents the status of a load-balancer ingress point: traffic intended for the service should be sent to an ingress point."
                            },
                            "description": "Ingress is a list containing ingress points for the load-balancer. Traffic intended for the service should be sent to these ingress points."
                          }
                        },
                        "description": "LoadBalancer contains the current status of the load-balancer, if one is present."
                      }
                    },
                    "description": "Most recently observed status of the service. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status"
                  },
                  "metadata": {
                    "type": "object",
                    "properties": {
                      "uid": {
                        "type": "string",
                        "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
                      },
                      "name": {
                        "type": "string",
                        "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
                      },
                      "labels": {
                        "type": "object",
                        "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "selfLink": {
                        "type": "string",
                        "description": "SelfLink is a URL representing this object. Populated by the system. Read-only.\n\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release."
                      },
                      "namespace": {
                        "type": "string",
                        "description": "Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces"
                      },
                      "finalizers": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.",
                        "x-kubernetes-patch-strategy": "merge"
                      },
                      "generation": {
                        "type": "integer",
                        "format": "int64",
                        "description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only."
                      },
                      "annotations": {
                        "type": "object",
                        "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "clusterName": {
                        "type": "string",
                        "description": "The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request."
                      },
                      "generateName": {
                        "type": "string",
                        "description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency"
                      },
                      "managedFields": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "time": {
                              "type": "string",
                              "format": "date-time",
                              "description": "Time is timestamp of when these fields were set. It should always be empty if Operation is 'Apply'"
                            },
                            "manager": {
                              "type": "string",
                              "description": "Manager is an identifier of the workflow managing these fields."
                            },
                            "fieldsV1": {
                              "type": "object",
                              "description": "FieldsV1 holds the first JSON version format as described in the \"FieldsV1\" type."
                            },
                            "operation": {
                              "type": "string",
                              "description": "Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'."
                            },
                            "apiVersion": {
                              "type": "string",
                              "description": "APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted."
                            },
                            "fieldsType": {
                              "type": "string",
                              "description": "FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\""
                            },
                            "subresource": {
                              "type": "string",
                              "description": "Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource."
                            }
                          },
                          "description": "ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to."
                        },
                        "description": "ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object."
                      },
                      "ownerReferences": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": [
                            "apiVersion",
                            "kind",
                            "name",
                            "uid"
                          ],
                          "properties": {
                            "uid": {
                              "type": "string",
                              "description": "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
                            },
                            "kind": {
                              "type": "string",
                              "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
                            },
                            "name": {
                              "type": "string",
                              "description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
                            },
                            "apiVersion": {
                              "type": "string",
                              "description": "API version of the referent."
                            },
                            "controller": {
                              "type": "boolean",
                              "description": "If true, this reference points to the managing controller."
                            },
                            "blockOwnerDeletion": {
                              "type": "boolean",
                              "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned."
                            }
                          },
                          "description": "OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.",
                          "x-kubernetes-map-type": "atomic"
                        },
                        "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
                        "x-kubernetes-patch-strategy": "merge",
                        "x-kubernetes-patch-merge-key": "uid"
                      },
                      "resourceVersion": {
                        "type": "string",
                        "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency"
                      },
                      "creationTimestamp": {
                        "type": "string",
                        "format": "date-time",
                        "description": "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
                      },
                      "deletionTimestamp": {
                        "type": "string",
                        "format": "date-time",
                        "description": "DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.\n\nPopulated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
                      },
                      "deletionGracePeriodSeconds": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only."
                      }
                    },
                    "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create."
                  },
                  "apiVersion": {
                    "type": "string",
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
                  }
                },
                "description": "Service is a named abstraction of software service (for example, mysql) consisting of local port (for example 3306) that the proxy listens on, and the selector that determines which pods will answer requests sent through the proxy.",
                "x-kubernetes-group-version-kind": [
                  {
                    "kind": "Service",
                    "group": "",
                    "version": "v1"
                  }
                ]
              },
              "description": "List of services"
            },
            "metadata": {
              "type": "object",
              "properties": {
                "continue": {
                  "type": "string",
                  "description": "continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message."
                },
                "selfLink": {
                  "type": "string",
                  "description": "selfLink is a URL representing this object. Populated by the system. Read-only.\n\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release."
                },
                "resourceVersion": {
                  "type": "string",
                  "description": "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency"
                },
                "remainingItemCount": {
                  "type": "integer",
                  "format": "int64",
                  "description": "remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact."
                }
              },
              "description": "ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}."
            },
            "apiVersion": {
              "type": "string",
              "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
            }
          },
          "description": "ServiceList holds a list of services.",
          "x-kubernetes-group-version-kind": [
            {
              "kind": "ServiceList",
              "group": "",
              "version": "v1"
            }
          ]
        }
      ]
  readAppsV1NamespacedDeployment:
    description: |-
      read the specified Deployment
    versions:
      from: 1.0.0
    link: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.19/#read-deployment-v1-apps
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  readCoreV1Namespace:
    description: |-
      read the specified Namespace
    versions:
      from: 1.0.0
    link: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.19/#read-namespace-v1-core
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "object",
          "properties": {
            "kind": {
              "type": "string",
              "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
            },
            "spec": {
              "type": "object",
              "properties": {
                "finalizers": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Finalizers is an opaque list of values that must be empty to permanently remove object from storage. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/"
                }
              },
              "description": "Spec defines the behavior of the Namespace. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status"
            },
            "status": {
              "type": "object",
              "properties": {
                "phase": {
                  "type": "string",
                  "description": "Phase is the current lifecycle phase of the namespace. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/"
                },
                "conditions": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "type",
                      "status"
                    ],
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "Type of namespace controller condition."
                      },
                      "reason": {
                        "type": "string"
                      },
                      "status": {
                        "type": "string",
                        "description": "Status of the condition, one of True, False, Unknown."
                      },
                      "message": {
                        "type": "string"
                      },
                      "lastTransitionTime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers."
                      }
                    },
                    "description": "NamespaceCondition contains details about state of namespace."
                  },
                  "description": "Represents the latest available observations of a namespace's current state.",
                  "x-kubernetes-patch-strategy": "merge",
                  "x-kubernetes-patch-merge-key": "type"
                }
              },
              "description": "Status describes the current status of a Namespace. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status"
            },
            "metadata": {
              "type": "object",
              "properties": {
                "uid": {
                  "type": "string",
                  "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
                },
                "name": {
                  "type": "string",
                  "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
                },
                "labels": {
                  "type": "object",
                  "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "selfLink": {
                  "type": "string",
                  "description": "SelfLink is a URL representing this object. Populated by the system. Read-only.\n\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release."
                },
                "namespace": {
                  "type": "string",
                  "description": "Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces"
                },
                "finalizers": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.",
                  "x-kubernetes-patch-strategy": "merge"
                },
                "generation": {
                  "type": "integer",
                  "format": "int64",
                  "description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only."
                },
                "annotations": {
                  "type": "object",
                  "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "clusterName": {
                  "type": "string",
                  "description": "The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request."
                },
                "generateName": {
                  "type": "string",
                  "description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency"
                },
                "managedFields": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "time": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Time is timestamp of when these fields were set. It should always be empty if Operation is 'Apply'"
                      },
                      "manager": {
                        "type": "string",
                        "description": "Manager is an identifier of the workflow managing these fields."
                      },
                      "fieldsV1": {
                        "type": "object",
                        "description": "FieldsV1 holds the first JSON version format as described in the \"FieldsV1\" type."
                      },
                      "operation": {
                        "type": "string",
                        "description": "Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'."
                      },
                      "apiVersion": {
                        "type": "string",
                        "description": "APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted."
                      },
                      "fieldsType": {
                        "type": "string",
                        "description": "FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\""
                      },
                      "subresource": {
                        "type": "string",
                        "description": "Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource."
                      }
                    },
                    "description": "ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to."
                  },
                  "description": "ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object."
                },
                "ownerReferences": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "apiVersion",
                      "kind",
                      "name",
                      "uid"
                    ],
                    "properties": {
                      "uid": {
                        "type": "string",
                        "description": "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
                      },
                      "kind": {
                        "type": "string",
                        "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
                      },
                      "name": {
                        "type": "string",
                        "description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
                      },
                      "apiVersion": {
                        "type": "string",
                        "description": "API version of the referent."
                      },
                      "controller": {
                        "type": "boolean",
                        "description": "If true, this reference points to the managing controller."
                      },
                      "blockOwnerDeletion": {
                        "type": "boolean",
                        "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned."
                      }
                    },
                    "description": "OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.",
                    "x-kubernetes-map-type": "atomic"
                  },
                  "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
                  "x-kubernetes-patch-strategy": "merge",
                  "x-kubernetes-patch-merge-key": "uid"
                },
                "resourceVersion": {
                  "type": "string",
                  "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency"
                },
                "creationTimestamp": {
                  "type": "string",
                  "format": "date-time",
                  "description": "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
                },
                "deletionTimestamp": {
                  "type": "string",
                  "format": "date-time",
                  "description": "DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.\n\nPopulated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
                },
                "deletionGracePeriodSeconds": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only."
                }
              },
              "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create."
            },
            "apiVersion": {
              "type": "string",
              "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
            }
          },
          "description": "Namespace provides a scope for Names. Use of multiple namespaces is optional.",
          "x-kubernetes-group-version-kind": [
            {
              "kind": "Namespace",
              "group": "",
              "version": "v1"
            }
          ]
        }
      ]
  readCoreV1Node:
    description: |-
      read the specified Node
    versions:
      from: 1.0.0
    link: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.19/#read-node-v1-core
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "object",
          "properties": {
            "kind": {
              "type": "string",
              "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
            },
            "spec": {
              "type": "object",
              "properties": {
                "taints": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "key",
                      "effect"
                    ],
                    "properties": {
                      "key": {
                        "type": "string",
                        "description": "Required. The taint key to be applied to a node."
                      },
                      "value": {
                        "type": "string",
                        "description": "The taint value corresponding to the taint key."
                      },
                      "effect": {
                        "type": "string",
                        "description": "Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute."
                      },
                      "timeAdded": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers."
                      }
                    },
                    "description": "The node this Taint is attached to has the \"effect\" on any pod that does not tolerate the Taint."
                  },
                  "description": "If specified, the node's taints."
                },
                "podCIDR": {
                  "type": "string",
                  "description": "PodCIDR represents the pod IP range assigned to the node."
                },
                "podCIDRs": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "podCIDRs represents the IP ranges assigned to the node for usage by Pods on that node. If this field is specified, the 0th entry must match the podCIDR field. It may contain at most 1 value for each of IPv4 and IPv6.",
                  "x-kubernetes-patch-strategy": "merge"
                },
                "externalID": {
                  "type": "string",
                  "description": "Deprecated. Not all kubelets will set this field. Remove field after 1.13. see: https://issues.k8s.io/61966"
                },
                "providerID": {
                  "type": "string",
                  "description": "ID of the node assigned by the cloud provider in the format: <ProviderName>://<ProviderSpecificNodeID>"
                },
                "configSource": {
                  "type": "object",
                  "properties": {
                    "configMap": {
                      "type": "object",
                      "required": [
                        "namespace",
                        "name",
                        "kubeletConfigKey"
                      ],
                      "properties": {
                        "uid": {
                          "type": "string",
                          "description": "UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status."
                        },
                        "name": {
                          "type": "string",
                          "description": "Name is the metadata.name of the referenced ConfigMap. This field is required in all cases."
                        },
                        "namespace": {
                          "type": "string",
                          "description": "Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases."
                        },
                        "resourceVersion": {
                          "type": "string",
                          "description": "ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status."
                        },
                        "kubeletConfigKey": {
                          "type": "string",
                          "description": "KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases."
                        }
                      },
                      "description": "ConfigMap is a reference to a Node's ConfigMap"
                    }
                  },
                  "description": "If specified, the source to get node configuration from The DynamicKubeletConfig feature gate must be enabled for the Kubelet to use this field"
                },
                "unschedulable": {
                  "type": "boolean",
                  "description": "Unschedulable controls node schedulability of new pods. By default, node is schedulable. More info: https://kubernetes.io/docs/concepts/nodes/node/#manual-node-administration"
                }
              },
              "description": "Spec defines the behavior of a node. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status"
            },
            "status": {
              "type": "object",
              "properties": {
                "phase": {
                  "type": "string",
                  "description": "NodePhase is the recently observed lifecycle phase of the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#phase The field is never populated, and now is deprecated."
                },
                "config": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error describes any problems reconciling the Spec.ConfigSource to the Active config. Errors may occur, for example, attempting to checkpoint Spec.ConfigSource to the local Assigned record, attempting to checkpoint the payload associated with Spec.ConfigSource, attempting to load or validate the Assigned config, etc. Errors may occur at different points while syncing config. Earlier errors (e.g. download or checkpointing errors) will not result in a rollback to LastKnownGood, and may resolve across Kubelet retries. Later errors (e.g. loading or validating a checkpointed config) will result in a rollback to LastKnownGood. In the latter case, it is usually possible to resolve the error by fixing the config assigned in Spec.ConfigSource. You can find additional information for debugging by searching the error message in the Kubelet log. Error is a human-readable description of the error state; machines can check whether or not Error is empty, but should not rely on the stability of the Error text across Kubelet versions."
                    },
                    "active": {
                      "type": "object",
                      "properties": {
                        "configMap": {
                          "type": "object",
                          "required": [
                            "namespace",
                            "name",
                            "kubeletConfigKey"
                          ],
                          "properties": {
                            "uid": {
                              "type": "string",
                              "description": "UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status."
                            },
                            "name": {
                              "type": "string",
                              "description": "Name is the metadata.name of the referenced ConfigMap. This field is required in all cases."
                            },
                            "namespace": {
                              "type": "string",
                              "description": "Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases."
                            },
                            "resourceVersion": {
                              "type": "string",
                              "description": "ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status."
                            },
                            "kubeletConfigKey": {
                              "type": "string",
                              "description": "KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases."
                            }
                          },
                          "description": "ConfigMap is a reference to a Node's ConfigMap"
                        }
                      },
                      "description": "Active reports the checkpointed config the node is actively using. Active will represent either the current version of the Assigned config, or the current LastKnownGood config, depending on whether attempting to use the Assigned config results in an error."
                    },
                    "assigned": {
                      "type": "object",
                      "properties": {
                        "configMap": {
                          "type": "object",
                          "required": [
                            "namespace",
                            "name",
                            "kubeletConfigKey"
                          ],
                          "properties": {
                            "uid": {
                              "type": "string",
                              "description": "UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status."
                            },
                            "name": {
                              "type": "string",
                              "description": "Name is the metadata.name of the referenced ConfigMap. This field is required in all cases."
                            },
                            "namespace": {
                              "type": "string",
                              "description": "Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases."
                            },
                            "resourceVersion": {
                              "type": "string",
                              "description": "ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status."
                            },
                            "kubeletConfigKey": {
                              "type": "string",
                              "description": "KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases."
                            }
                          },
                          "description": "ConfigMap is a reference to a Node's ConfigMap"
                        }
                      },
                      "description": "Assigned reports the checkpointed config the node will try to use. When Node.Spec.ConfigSource is updated, the node checkpoints the associated config payload to local disk, along with a record indicating intended config. The node refers to this record to choose its config checkpoint, and reports this record in Assigned. Assigned only updates in the status after the record has been checkpointed to disk. When the Kubelet is restarted, it tries to make the Assigned config the Active config by loading and validating the checkpointed payload identified by Assigned."
                    },
                    "lastKnownGood": {
                      "type": "object",
                      "properties": {
                        "configMap": {
                          "type": "object",
                          "required": [
                            "namespace",
                            "name",
                            "kubeletConfigKey"
                          ],
                          "properties": {
                            "uid": {
                              "type": "string",
                              "description": "UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status."
                            },
                            "name": {
                              "type": "string",
                              "description": "Name is the metadata.name of the referenced ConfigMap. This field is required in all cases."
                            },
                            "namespace": {
                              "type": "string",
                              "description": "Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases."
                            },
                            "resourceVersion": {
                              "type": "string",
                              "description": "ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status."
                            },
                            "kubeletConfigKey": {
                              "type": "string",
                              "description": "KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases."
                            }
                          },
                          "description": "ConfigMap is a reference to a Node's ConfigMap"
                        }
                      },
                      "description": "LastKnownGood reports the checkpointed config the node will fall back to when it encounters an error attempting to use the Assigned config. The Assigned config becomes the LastKnownGood config when the node determines that the Assigned config is stable and correct. This is currently implemented as a 10-minute soak period starting when the local record of Assigned config is updated. If the Assigned config is Active at the end of this period, it becomes the LastKnownGood. Note that if Spec.ConfigSource is reset to nil (use local defaults), the LastKnownGood is also immediately reset to nil, because the local default config is always assumed good. You should not make assumptions about the node's method of determining config stability and correctness, as this may change or become configurable in the future."
                    }
                  },
                  "description": "Status of the config assigned to the node via the dynamic Kubelet config feature."
                },
                "images": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "names": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Names by which this image is known. e.g. [\"k8s.gcr.io/hyperkube:v1.0.7\", \"dockerhub.io/google_containers/hyperkube:v1.0.7\"]"
                      },
                      "sizeBytes": {
                        "type": "integer",
                        "format": "int64",
                        "description": "The size of the image in bytes."
                      }
                    },
                    "description": "Describe a container image"
                  },
                  "description": "List of container images on this node"
                },
                "capacity": {
                  "type": "object",
                  "description": "Capacity represents the total resources of a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity",
                  "additionalProperties": {
                    "type": "string",
                    "description": "Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.\n\nThe serialization format is:\n\n<quantity>        ::= <signedNumber><suffix>\n  (Note that <suffix> may be empty, from the \"\" case in <decimalSI>.)\n<digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= \"+\" | \"-\" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei\n  (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)\n<decimalSI>       ::= m | \"\" | k | M | G | T | P | E\n  (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)\n<decimalExponent> ::= \"e\" <signedNumber> | \"E\" <signedNumber>\n\nNo matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.\n\nWhen a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.\n\nBefore serializing, Quantity will be put in \"canonical form\". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:\n  a. No precision is lost\n  b. No fractional digits will be emitted\n  c. The exponent (or suffix) is as large as possible.\nThe sign will be omitted unless the number is negative.\n\nExamples:\n  1.5 will be serialized as \"1500m\"\n  1.5Gi will be serialized as \"1536Mi\"\n\nNote that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.\n\nNon-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)\n\nThis format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation."
                  }
                },
                "nodeInfo": {
                  "type": "object",
                  "required": [
                    "machineID",
                    "systemUUID",
                    "bootID",
                    "kernelVersion",
                    "osImage",
                    "containerRuntimeVersion",
                    "kubeletVersion",
                    "kubeProxyVersion",
                    "operatingSystem",
                    "architecture"
                  ],
                  "properties": {
                    "bootID": {
                      "type": "string",
                      "description": "Boot ID reported by the node."
                    },
                    "osImage": {
                      "type": "string",
                      "description": "OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy))."
                    },
                    "machineID": {
                      "type": "string",
                      "description": "MachineID reported by the node. For unique machine identification in the cluster this field is preferred. Learn more from man(5) machine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html"
                    },
                    "systemUUID": {
                      "type": "string",
                      "description": "SystemUUID reported by the node. For unique machine identification MachineID is preferred. This field is specific to Red Hat hosts https://access.redhat.com/documentation/en-us/red_hat_subscription_management/1/html/rhsm/uuid"
                    },
                    "architecture": {
                      "type": "string",
                      "description": "The Architecture reported by the node"
                    },
                    "kernelVersion": {
                      "type": "string",
                      "description": "Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64)."
                    },
                    "kubeletVersion": {
                      "type": "string",
                      "description": "Kubelet Version reported by the node."
                    },
                    "operatingSystem": {
                      "type": "string",
                      "description": "The Operating System reported by the node"
                    },
                    "kubeProxyVersion": {
                      "type": "string",
                      "description": "KubeProxy Version reported by the node."
                    },
                    "containerRuntimeVersion": {
                      "type": "string",
                      "description": "ContainerRuntime Version reported by the node through runtime remote API (e.g. docker://1.5.0)."
                    }
                  },
                  "description": "Set of ids/uuids to uniquely identify the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#info"
                },
                "addresses": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "type",
                      "address"
                    ],
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "Node address type, one of Hostname, ExternalIP or InternalIP."
                      },
                      "address": {
                        "type": "string",
                        "description": "The node address."
                      }
                    },
                    "description": "NodeAddress contains information for the node's address."
                  },
                  "description": "List of addresses reachable to the node. Queried from cloud provider, if available. More info: https://kubernetes.io/docs/concepts/nodes/node/#addresses Note: This field is declared as mergeable, but the merge key is not sufficiently unique, which can cause data corruption when it is merged. Callers should instead use a full-replacement patch. See http://pr.k8s.io/79391 for an example.",
                  "x-kubernetes-patch-strategy": "merge",
                  "x-kubernetes-patch-merge-key": "type"
                },
                "conditions": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "type",
                      "status"
                    ],
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "Type of node condition."
                      },
                      "reason": {
                        "type": "string",
                        "description": "(brief) reason for the condition's last transition."
                      },
                      "status": {
                        "type": "string",
                        "description": "Status of the condition, one of True, False, Unknown."
                      },
                      "message": {
                        "type": "string",
                        "description": "Human readable message indicating details about last transition."
                      },
                      "lastHeartbeatTime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers."
                      },
                      "lastTransitionTime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers."
                      }
                    },
                    "description": "NodeCondition contains condition information for a node."
                  },
                  "description": "Conditions is an array of current observed node conditions. More info: https://kubernetes.io/docs/concepts/nodes/node/#condition",
                  "x-kubernetes-patch-strategy": "merge",
                  "x-kubernetes-patch-merge-key": "type"
                },
                "allocatable": {
                  "type": "object",
                  "description": "Allocatable represents the resources of a node that are available for scheduling. Defaults to Capacity.",
                  "additionalProperties": {
                    "type": "string",
                    "description": "Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.\n\nThe serialization format is:\n\n<quantity>        ::= <signedNumber><suffix>\n  (Note that <suffix> may be empty, from the \"\" case in <decimalSI>.)\n<digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= \"+\" | \"-\" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei\n  (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)\n<decimalSI>       ::= m | \"\" | k | M | G | T | P | E\n  (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)\n<decimalExponent> ::= \"e\" <signedNumber> | \"E\" <signedNumber>\n\nNo matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.\n\nWhen a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.\n\nBefore serializing, Quantity will be put in \"canonical form\". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:\n  a. No precision is lost\n  b. No fractional digits will be emitted\n  c. The exponent (or suffix) is as large as possible.\nThe sign will be omitted unless the number is negative.\n\nExamples:\n  1.5 will be serialized as \"1500m\"\n  1.5Gi will be serialized as \"1536Mi\"\n\nNote that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.\n\nNon-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)\n\nThis format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation."
                  }
                },
                "volumesInUse": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "List of attachable volumes in use (mounted) by the node."
                },
                "daemonEndpoints": {
                  "type": "object",
                  "properties": {
                    "kubeletEndpoint": {
                      "type": "object",
                      "required": [
                        "Port"
                      ],
                      "properties": {
                        "Port": {
                          "type": "integer",
                          "format": "int32",
                          "description": "Port number of the given endpoint."
                        }
                      },
                      "description": "Endpoint on which Kubelet is listening."
                    }
                  },
                  "description": "Endpoints of daemons running on the Node."
                },
                "volumesAttached": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "name",
                      "devicePath"
                    ],
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Name of the attached volume"
                      },
                      "devicePath": {
                        "type": "string",
                        "description": "DevicePath represents the device path where the volume should be available"
                      }
                    },
                    "description": "AttachedVolume describes a volume attached to a node"
                  },
                  "description": "List of volumes that are attached to the node."
                }
              },
              "description": "Most recently observed status of the node. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status"
            },
            "metadata": {
              "type": "object",
              "properties": {
                "uid": {
                  "type": "string",
                  "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
                },
                "name": {
                  "type": "string",
                  "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
                },
                "labels": {
                  "type": "object",
                  "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "selfLink": {
                  "type": "string",
                  "description": "SelfLink is a URL representing this object. Populated by the system. Read-only.\n\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release."
                },
                "namespace": {
                  "type": "string",
                  "description": "Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces"
                },
                "finalizers": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.",
                  "x-kubernetes-patch-strategy": "merge"
                },
                "generation": {
                  "type": "integer",
                  "format": "int64",
                  "description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only."
                },
                "annotations": {
                  "type": "object",
                  "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "clusterName": {
                  "type": "string",
                  "description": "The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request."
                },
                "generateName": {
                  "type": "string",
                  "description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency"
                },
                "managedFields": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "time": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Time is timestamp of when these fields were set. It should always be empty if Operation is 'Apply'"
                      },
                      "manager": {
                        "type": "string",
                        "description": "Manager is an identifier of the workflow managing these fields."
                      },
                      "fieldsV1": {
                        "type": "object",
                        "description": "FieldsV1 holds the first JSON version format as described in the \"FieldsV1\" type."
                      },
                      "operation": {
                        "type": "string",
                        "description": "Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'."
                      },
                      "apiVersion": {
                        "type": "string",
                        "description": "APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted."
                      },
                      "fieldsType": {
                        "type": "string",
                        "description": "FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\""
                      },
                      "subresource": {
                        "type": "string",
                        "description": "Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource."
                      }
                    },
                    "description": "ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to."
                  },
                  "description": "ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object."
                },
                "ownerReferences": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "apiVersion",
                      "kind",
                      "name",
                      "uid"
                    ],
                    "properties": {
                      "uid": {
                        "type": "string",
                        "description": "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
                      },
                      "kind": {
                        "type": "string",
                        "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
                      },
                      "name": {
                        "type": "string",
                        "description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
                      },
                      "apiVersion": {
                        "type": "string",
                        "description": "API version of the referent."
                      },
                      "controller": {
                        "type": "boolean",
                        "description": "If true, this reference points to the managing controller."
                      },
                      "blockOwnerDeletion": {
                        "type": "boolean",
                        "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned."
                      }
                    },
                    "description": "OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.",
                    "x-kubernetes-map-type": "atomic"
                  },
                  "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
                  "x-kubernetes-patch-strategy": "merge",
                  "x-kubernetes-patch-merge-key": "uid"
                },
                "resourceVersion": {
                  "type": "string",
                  "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency"
                },
                "creationTimestamp": {
                  "type": "string",
                  "format": "date-time",
                  "description": "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
                },
                "deletionTimestamp": {
                  "type": "string",
                  "format": "date-time",
                  "description": "DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.\n\nPopulated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
                },
                "deletionGracePeriodSeconds": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only."
                }
              },
              "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create."
            },
            "apiVersion": {
              "type": "string",
              "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
            }
          },
          "description": "Node is a worker node in Kubernetes. Each node will have a unique identifier in the cache (i.e. in etcd).",
          "x-kubernetes-group-version-kind": [
            {
              "kind": "Node",
              "group": "",
              "version": "v1"
            }
          ]
        }
      ]
  readCoreV1NamespacedPod:
    description: |-
      read the specified Pod
    versions:
      from: 1.0.0
    link: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.19/#read-pod-v1-core
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  readAppsV1NamespacedReplicaSet:
    description: |-
      read the specified ReplicaSet
    versions:
      from: 1.0.0
    link: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.19/#read-replicaset-v1-apps
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  readCoreV1NamespacedService:
    description: |-
      read the specified Service
    versions:
      from: 1.0.0
    link: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.19/#read-service-v1-core
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "type": "object",
          "properties": {
            "kind": {
              "type": "string",
              "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
            },
            "spec": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. \"ClusterIP\" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object or EndpointSlice objects. If clusterIP is \"None\", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a virtual IP. \"NodePort\" builds on ClusterIP and allocates a port on every node which routes to the same endpoints as the clusterIP. \"LoadBalancer\" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the same endpoints as the clusterIP. \"ExternalName\" aliases this service to the specified externalName. Several other fields do not apply to ExternalName services. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types"
                },
                "ports": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "port"
                    ],
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service."
                      },
                      "port": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The port that will be exposed by this service."
                      },
                      "nodePort": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The port on each node on which this service is exposed when type is NodePort or LoadBalancer.  Usually assigned by the system. If a value is specified, in-range, and not in use it will be used, otherwise the operation will fail.  If not specified, a port will be allocated if this Service requires one.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type from NodePort to ClusterIP). More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport"
                      },
                      "protocol": {
                        "type": "string",
                        "description": "The IP protocol for this port. Supports \"TCP\", \"UDP\", and \"SCTP\". Default is TCP."
                      },
                      "targetPort": {
                        "type": "string",
                        "format": "int-or-string",
                        "description": "Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service"
                      },
                      "appProtocol": {
                        "type": "string",
                        "description": "The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and http://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol. This is a beta field that is guarded by the ServiceAppProtocol feature gate and enabled by default."
                      }
                    },
                    "description": "ServicePort contains information on service's port."
                  },
                  "description": "The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies",
                  "x-kubernetes-list-type": "map",
                  "x-kubernetes-list-map-keys": [
                    "port",
                    "protocol"
                  ],
                  "x-kubernetes-patch-strategy": "merge",
                  "x-kubernetes-patch-merge-key": "port"
                },
                "selector": {
                  "type": "object",
                  "description": "Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-kubernetes-map-type": "atomic"
                },
                "clusterIP": {
                  "type": "string",
                  "description": "clusterIP is the IP address of the service and is usually assigned randomly. If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be blank) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are \"None\", empty string (\"\"), or a valid IP address. Setting this to \"None\" makes a \"headless service\" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies"
                },
                "clusterIPs": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "ClusterIPs is a list of IP addresses assigned to this service, and are usually assigned randomly.  If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be empty) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are \"None\", empty string (\"\"), or a valid IP address.  Setting this to \"None\" makes a \"headless service\" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName.  If this field is not specified, it will be initialized from the clusterIP field.  If this field is specified, clients must ensure that clusterIPs[0] and clusterIP have the same value.\n\nUnless the \"IPv6DualStack\" feature gate is enabled, this field is limited to one value, which must be the same as the clusterIP field.  If the feature gate is enabled, this field may hold a maximum of two entries (dual-stack IPs, in either order).  These IPs must correspond to the values of the ipFamilies field. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies",
                  "x-kubernetes-list-type": "atomic"
                },
                "ipFamilies": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this service, and is gated by the \"IPv6DualStack\" feature gate.  This field is usually assigned automatically based on cluster configuration and the ipFamilyPolicy field. If this field is specified manually, the requested family is available in the cluster, and ipFamilyPolicy allows it, it will be used; otherwise creation of the service will fail.  This field is conditionally mutable: it allows for adding or removing a secondary IP family, but it does not allow changing the primary IP family of the Service.  Valid values are \"IPv4\" and \"IPv6\".  This field only applies to Services of types ClusterIP, NodePort, and LoadBalancer, and does apply to \"headless\" services.  This field will be wiped when updating a Service to type ExternalName.\n\nThis field may hold a maximum of two entries (dual-stack families, in either order).  These families must correspond to the values of the clusterIPs field, if specified. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.",
                  "x-kubernetes-list-type": "atomic"
                },
                "externalIPs": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system."
                },
                "externalName": {
                  "type": "string",
                  "description": "externalName is the external reference that discovery mechanisms will return as an alias for this service (e.g. a DNS CNAME record). No proxying will be involved.  Must be a lowercase RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires `type` to be \"ExternalName\"."
                },
                "topologyKeys": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "topologyKeys is a preference-order list of topology keys which implementations of services should use to preferentially sort endpoints when accessing this Service, it can not be used at the same time as externalTrafficPolicy=Local. Topology keys must be valid label keys and at most 16 keys may be specified. Endpoints are chosen based on the first topology key with available backends. If this field is specified and all entries have no backends that match the topology of the client, the service has no backends for that client and connections should fail. The special value \"*\" may be used to mean \"any topology\". This catch-all value, if used, only makes sense as the last value in the list. If this is not specified or empty, no topology constraints will be applied. This field is alpha-level and is only honored by servers that enable the ServiceTopology feature. This field is deprecated and will be removed in a future version."
                },
                "ipFamilyPolicy": {
                  "type": "string",
                  "description": "IPFamilyPolicy represents the dual-stack-ness requested or required by this Service, and is gated by the \"IPv6DualStack\" feature gate.  If there is no value provided, then this field will be set to SingleStack. Services can be \"SingleStack\" (a single IP family), \"PreferDualStack\" (two IP families on dual-stack configured clusters or a single IP family on single-stack clusters), or \"RequireDualStack\" (two IP families on dual-stack configured clusters, otherwise fail). The ipFamilies and clusterIPs fields depend on the value of this field.  This field will be wiped when updating a service to type ExternalName."
                },
                "loadBalancerIP": {
                  "type": "string",
                  "description": "Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature."
                },
                "sessionAffinity": {
                  "type": "string",
                  "description": "Supports \"ClientIP\" and \"None\". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies"
                },
                "loadBalancerClass": {
                  "type": "string",
                  "description": "loadBalancerClass is the class of the load balancer implementation this Service belongs to. If specified, the value of this field must be a label-style identifier, with an optional prefix, e.g. \"internal-vip\" or \"example.com/internal-vip\". Unprefixed names are reserved for end-users. This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load balancer implementation is used, today this is typically done through the cloud provider integration, but should apply for any default implementation. If set, it is assumed that a load balancer implementation is watching for Services with a matching class. Any default load balancer implementation (e.g. cloud providers) should ignore Services that set this field. This field can only be set when creating or updating a Service to type 'LoadBalancer'. Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type."
                },
                "healthCheckNodePort": {
                  "type": "integer",
                  "format": "int32",
                  "description": "healthCheckNodePort specifies the healthcheck nodePort for the service. This only applies when type is set to LoadBalancer and externalTrafficPolicy is set to Local. If a value is specified, is in-range, and is not in use, it will be used.  If not specified, a value will be automatically allocated.  External systems (e.g. load-balancers) can use this port to determine if a given node holds endpoints for this service or not.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type)."
                },
                "externalTrafficPolicy": {
                  "type": "string",
                  "description": "externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. \"Local\" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. \"Cluster\" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading."
                },
                "internalTrafficPolicy": {
                  "type": "string",
                  "description": "InternalTrafficPolicy specifies if the cluster internal traffic should be routed to all endpoints or node-local endpoints only. \"Cluster\" routes internal traffic to a Service to all endpoints. \"Local\" routes traffic to node-local endpoints only, traffic is dropped if no node-local endpoints are ready. The default value is \"Cluster\"."
                },
                "sessionAffinityConfig": {
                  "type": "object",
                  "properties": {
                    "clientIP": {
                      "type": "object",
                      "properties": {
                        "timeoutSeconds": {
                          "type": "integer",
                          "format": "int32",
                          "description": "timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == \"ClientIP\". Default value is 10800(for 3 hours)."
                        }
                      },
                      "description": "clientIP contains the configurations of Client IP based session affinity."
                    }
                  },
                  "description": "sessionAffinityConfig contains the configurations of session affinity."
                },
                "loadBalancerSourceRanges": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature.\" More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/"
                },
                "publishNotReadyAddresses": {
                  "type": "boolean",
                  "description": "publishNotReadyAddresses indicates that any agent which deals with endpoints for this Service should disregard any indications of ready/not-ready. The primary use case for setting this field is for a StatefulSet's Headless Service to propagate SRV DNS records for its Pods for the purpose of peer discovery. The Kubernetes controllers that generate Endpoints and EndpointSlice resources for Services interpret this to mean that all endpoints are considered \"ready\" even if the Pods themselves are not. Agents which consume only Kubernetes generated endpoints through the Endpoints or EndpointSlice resources can safely assume this behavior."
                },
                "allocateLoadBalancerNodePorts": {
                  "type": "boolean",
                  "description": "allocateLoadBalancerNodePorts defines if NodePorts will be automatically allocated for services with type LoadBalancer.  Default is \"true\". It may be set to \"false\" if the cluster load-balancer does not rely on NodePorts. allocateLoadBalancerNodePorts may only be set for services with type LoadBalancer and will be cleared if the type is changed to any other type. This field is alpha-level and is only honored by servers that enable the ServiceLBNodePortControl feature."
                }
              },
              "description": "Spec defines the behavior of a service. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status"
            },
            "status": {
              "type": "object",
              "properties": {
                "conditions": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "type",
                      "status",
                      "lastTransitionTime",
                      "reason",
                      "message"
                    ],
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "type of condition in CamelCase or in foo.example.com/CamelCase."
                      },
                      "reason": {
                        "type": "string",
                        "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty."
                      },
                      "status": {
                        "type": "string",
                        "description": "status of the condition, one of True, False, Unknown."
                      },
                      "message": {
                        "type": "string",
                        "description": "message is a human readable message indicating details about the transition. This may be an empty string."
                      },
                      "lastTransitionTime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers."
                      },
                      "observedGeneration": {
                        "type": "integer",
                        "format": "int64",
                        "description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance."
                      }
                    },
                    "description": "Condition contains details for one aspect of the current state of this API Resource."
                  },
                  "description": "Current service state",
                  "x-kubernetes-list-type": "map",
                  "x-kubernetes-list-map-keys": [
                    "type"
                  ],
                  "x-kubernetes-patch-strategy": "merge",
                  "x-kubernetes-patch-merge-key": "type"
                },
                "loadBalancer": {
                  "type": "object",
                  "properties": {
                    "ingress": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "ip": {
                            "type": "string",
                            "description": "IP is set for load-balancer ingress points that are IP based (typically GCE or OpenStack load-balancers)"
                          },
                          "ports": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "port",
                                "protocol"
                              ],
                              "properties": {
                                "port": {
                                  "type": "integer",
                                  "format": "int32",
                                  "description": "Port is the port number of the service port of which status is recorded here"
                                },
                                "error": {
                                  "type": "string",
                                  "description": "Error is to record the problem with the service port The format of the error shall comply with the following rules: - built-in error values shall be specified in this file and those shall use\n  CamelCase names\n- cloud provider specific error values must have names that comply with the\n  format foo.example.com/CamelCase."
                                },
                                "protocol": {
                                  "type": "string",
                                  "description": "Protocol is the protocol of the service port of which status is recorded here The supported values are: \"TCP\", \"UDP\", \"SCTP\""
                                }
                              }
                            },
                            "description": "Ports is a list of records of service ports If used, every port defined in the service should have an entry in it",
                            "x-kubernetes-list-type": "atomic"
                          },
                          "hostname": {
                            "type": "string",
                            "description": "Hostname is set for load-balancer ingress points that are DNS based (typically AWS load-balancers)"
                          }
                        },
                        "description": "LoadBalancerIngress represents the status of a load-balancer ingress point: traffic intended for the service should be sent to an ingress point."
                      },
                      "description": "Ingress is a list containing ingress points for the load-balancer. Traffic intended for the service should be sent to these ingress points."
                    }
                  },
                  "description": "LoadBalancer contains the current status of the load-balancer, if one is present."
                }
              },
              "description": "Most recently observed status of the service. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status"
            },
            "metadata": {
              "type": "object",
              "properties": {
                "uid": {
                  "type": "string",
                  "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
                },
                "name": {
                  "type": "string",
                  "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
                },
                "labels": {
                  "type": "object",
                  "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "selfLink": {
                  "type": "string",
                  "description": "SelfLink is a URL representing this object. Populated by the system. Read-only.\n\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release."
                },
                "namespace": {
                  "type": "string",
                  "description": "Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces"
                },
                "finalizers": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.",
                  "x-kubernetes-patch-strategy": "merge"
                },
                "generation": {
                  "type": "integer",
                  "format": "int64",
                  "description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only."
                },
                "annotations": {
                  "type": "object",
                  "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "clusterName": {
                  "type": "string",
                  "description": "The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request."
                },
                "generateName": {
                  "type": "string",
                  "description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency"
                },
                "managedFields": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "time": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Time is timestamp of when these fields were set. It should always be empty if Operation is 'Apply'"
                      },
                      "manager": {
                        "type": "string",
                        "description": "Manager is an identifier of the workflow managing these fields."
                      },
                      "fieldsV1": {
                        "type": "object",
                        "description": "FieldsV1 holds the first JSON version format as described in the \"FieldsV1\" type."
                      },
                      "operation": {
                        "type": "string",
                        "description": "Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'."
                      },
                      "apiVersion": {
                        "type": "string",
                        "description": "APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted."
                      },
                      "fieldsType": {
                        "type": "string",
                        "description": "FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\""
                      },
                      "subresource": {
                        "type": "string",
                        "description": "Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource."
                      }
                    },
                    "description": "ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to."
                  },
                  "description": "ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object."
                },
                "ownerReferences": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "apiVersion",
                      "kind",
                      "name",
                      "uid"
                    ],
                    "properties": {
                      "uid": {
                        "type": "string",
                        "description": "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
                      },
                      "kind": {
                        "type": "string",
                        "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
                      },
                      "name": {
                        "type": "string",
                        "description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
                      },
                      "apiVersion": {
                        "type": "string",
                        "description": "API version of the referent."
                      },
                      "controller": {
                        "type": "boolean",
                        "description": "If true, this reference points to the managing controller."
                      },
                      "blockOwnerDeletion": {
                        "type": "boolean",
                        "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned."
                      }
                    },
                    "description": "OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.",
                    "x-kubernetes-map-type": "atomic"
                  },
                  "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
                  "x-kubernetes-patch-strategy": "merge",
                  "x-kubernetes-patch-merge-key": "uid"
                },
                "resourceVersion": {
                  "type": "string",
                  "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency"
                },
                "creationTimestamp": {
                  "type": "string",
                  "format": "date-time",
                  "description": "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
                },
                "deletionTimestamp": {
                  "type": "string",
                  "format": "date-time",
                  "description": "DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.\n\nPopulated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
                },
                "deletionGracePeriodSeconds": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only."
                }
              },
              "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create."
            },
            "apiVersion": {
              "type": "string",
              "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
            }
          },
          "description": "Service is a named abstraction of software service (for example, mysql) consisting of local port (for example 3306) that the proxy listens on, and the selector that determines which pods will answer requests sent through the proxy.",
          "x-kubernetes-group-version-kind": [
            {
              "kind": "Service",
              "group": "",
              "version": "v1"
            }
          ]
        }
      ]