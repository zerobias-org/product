Product:
  name: Azure Virtual Networks
  versions: [2018.10.1,2018.11.1,2020.11.1]
  package: microsoft.azure.virtualnetworks
  description: |-
    VirtualNetworks
  link: https://docs.microsoft.com/en-us/azure/virtual-network/
  contentType: json
Operations:
  ApplicationSecurityGroups.CreateOrUpdate:
    description: |-
      Creates or updates an application security group.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/applicationsecuritygroups/createorupdate
    example:
      inputs: [
        {
          "location": "westus",
          "properties": {}
        }
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationSecurityGroups/test-asg",
          "name": "test-asg",
          "type": "Microsoft.Network/applicationSecurityGroups",
          "location": "westus",
          "properties": {
            "resourceGuid": "00000000-0000-0000-0000-000000000000",
            "provisioningState": "Succeeded"
          }
        }
      ]
  ApplicationSecurityGroups.Delete:
    description: |-
      Deletes the specified application security group.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/applicationsecuritygroups/delete
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  ApplicationSecurityGroups.Get:
    description: |-
      Gets information about the specified application security group.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/applicationsecuritygroups/get
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationSecurityGroups/test-asg",
          "name": "test-asg",
          "type": "Microsoft.Network/applicationSecurityGroups",
          "location": "westus",
          "properties": {
            "resourceGuid": "00000000-0000-0000-0000-000000000000",
            "provisioningState": "Succeeded"
          }
        }
      ]
  ApplicationSecurityGroups.List:
    description: |-
      Gets all the application security groups in a resource group.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/applicationsecuritygroups/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationSecurityGroups/asg1",
              "name": "asg1",
              "type": "Microsoft.Network/applicationSecurityGroups",
              "location": "westus",
              "properties": {
                "resourceGuid": "00000000-0000-0000-0000-000000000000",
                "provisioningState": "Succeeded"
              }
            },
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationSecurityGroups/asg2",
              "name": "asg2",
              "type": "Microsoft.Network/applicationSecurityGroups",
              "location": "westus",
              "properties": {
                "resourceGuid": "00000000-0000-0000-0000-000000000000",
                "provisioningState": "Succeeded"
              }
            }
          ]
        }
      ]
  ApplicationSecurityGroups.ListAll:
    description: |-
      Gets all application security groups in a subscription.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/applicationsecuritygroups/listall
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationSecurityGroups/asg1",
              "name": "asg1",
              "type": "Microsoft.Network/applicationSecurityGroups",
              "location": "westus",
              "properties": {
                "resourceGuid": "00000000-0000-0000-0000-000000000000",
                "provisioningState": "Succeeded"
              }
            },
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationSecurityGroups/asg2",
              "name": "asg2",
              "type": "Microsoft.Network/applicationSecurityGroups",
              "location": "westus",
              "properties": {
                "resourceGuid": "00000000-0000-0000-0000-000000000000",
                "provisioningState": "Succeeded"
              }
            }
          ]
        }
      ]
  ApplicationSecurityGroups.UpdateTags:
    description: |-
      Updates an application security group's tags.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/applicationsecuritygroups/updatetags
    example:
      inputs: [
        {
          "tags": {
            "tag1": "value1",
            "tag2": "value2"
          }
        }
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/applicationSecurityGroups/test-asg",
          "name": "test-asg",
          "tags": {
            "tag1": "value1",
            "tag2": "value2"
          },
          "type": "Microsoft.Network/applicationSecurityGroups",
          "location": "westus",
          "properties": {
            "resourceGuid": "00000000-0000-0000-0000-000000000000",
            "provisioningState": "Succeeded"
          }
        }
      ]
  AvailableDelegations.List:
    description: |-
      Gets all of the available subnet delegations for this subscription in this region.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/availabledelegations/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subId/providers/Microsoft.Network/availableDelegations/Microsoft.Provider.resourceType",
              "name": "Microsoft.Provider.resourceType",
              "type": "Microsoft.Network/availableDelegations",
              "actions": [
                "Microsoft.Network/resource/action"
              ],
              "serviceName": "Microsoft.Provider/resourceType"
            }
          ]
        }
      ]
  AvailableEndpointServices.List:
    description: |-
      List what values of endpoint services are available for use.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/availableendpointservices/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subid/providers/Microsoft.Network/virtualNetworkEndpointServices/Microsoft.Storage",
              "name": "Microsoft.Storage",
              "type": "Microsoft.Network/virtualNetworkEndpointServices"
            },
            {
              "id": "/subscriptions/subid/providers/Microsoft.Network/virtualNetworkEndpointServices/Microsoft.Sql",
              "name": "Microsoft.Sql",
              "type": "Microsoft.Network/virtualNetworkEndpointServices"
            },
            {
              "id": "/subscriptions/subid/providers/Microsoft.Network/virtualNetworkEndpointServices/Microsoft.AzureActiveDirectory",
              "name": "Microsoft.AzureActiveDirectory",
              "type": "Microsoft.Network/virtualNetworkEndpointServices"
            }
          ]
        }
      ]
  AvailablePrivateEndpointTypes.List:
    description: |-
      Returns all of the resource types that can be linked to a Private Endpoint in this subscription in this region.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/availableprivateendpointtypes/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subId/providers/Microsoft.Network/availablePrivateEndpointTypes/Microsoft.Provider.resourceType",
              "type": "Microsoft.Network/availablePrivateEndpointTypes",
              "resourceName": "Microsoft.Provider/resourceType"
            }
          ]
        }
      ]
  AvailablePrivateEndpointTypes.ListByResourceGroup:
    description: |-
      Returns all of the resource types that can be linked to a Private Endpoint in this subscription in this region.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/availableprivateendpointtypes/listbyresourcegroup
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/availablePrivateEndpointTypes/Microsoft.Provider.resourceType",
              "type": "Microsoft.Network/availablePrivateEndpointTypes",
              "resourceName": "Microsoft.Provider/resourceType"
            }
          ]
        }
      ]
  AvailableResourceGroupDelegations.List:
    description: |-
      Gets all of the available subnet delegations for this resource group in this region.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/availableresourcegroupdelegations/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/availableDelegations/Microsoft.Provider.resourceType",
              "name": "Microsoft.Provider.resourceType",
              "type": "Microsoft.Network/availableDelegations",
              "actions": [
                "Microsoft.Network/resource/action"
              ],
              "serviceName": "Microsoft.Provider/resourceType"
            }
          ]
        }
      ]
  AvailableServiceAliases.List:
    description: |-
      Gets all available service aliases for this subscription in this region.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/availableservicealiases/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subId/providers/Microsoft.Network/AvailableServiceAliases/servicesAzure",
              "name": "servicesAzure",
              "type": "Microsoft.Network/AvailableServiceAliases",
              "resourceName": "/services/Azure"
            },
            {
              "id": "/subscriptions/subId/providers/Microsoft.Network/AvailableServiceAliases/servicesAzureManagedInstance",
              "name": "servicesAzureManagedInstance",
              "type": "Microsoft.Network/AvailableServiceAliases",
              "resourceName": "/services/Azure/ManagedInstance"
            }
          ]
        }
      ]
  AvailableServiceAliases.ListByResourceGroup:
    description: |-
      Gets all available service aliases for this resource group in this region.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/availableservicealiases/listbyresourcegroup
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subId/providers/Microsoft.Network/AvailableServiceAliases/servicesAzure",
              "name": "servicesAzure",
              "type": "Microsoft.Network/AvailableServiceAliases",
              "resourceName": "/services/Azure"
            },
            {
              "id": "/subscriptions/subId/providers/Microsoft.Network/AvailableServiceAliases/servicesAzureManagedInstance",
              "name": "servicesAzureManagedInstance",
              "type": "Microsoft.Network/AvailableServiceAliases",
              "resourceName": "/services/Azure/ManagedInstance"
            }
          ]
        }
      ]
  BastionHosts.CreateOrUpdate:
    description: |-
      Creates or updates the specified Bastion Host.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/bastionhosts/createorupdate
    example:
      inputs: [
        {
          "properties": {
            "ipConfigurations": [
              {
                "name": "bastionHostIpConfiguration",
                "properties": {
                  "subnet": {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/BastionHostSubnet"
                  },
                  "publicIPAddress": {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName"
                  }
                }
              }
            ]
          }
        }
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/bastionHosts/bastionhosttenant'",
          "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
          "name": "bastionhost'",
          "type": "Microsoft.Network/bastionHosts",
          "location": "West US",
          "properties": {
            "dnsName": "bst-9d89d361-100e-4c01-b92d-466548c476dc.bastion.azure.com",
            "ipConfigurations": [
              {
                "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/bastionHosts/bastionhosttenant/bastionHostIpConfigurations/bastionHostIpConfiguration",
                "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
                "name": "bastionHostIpConfiguration",
                "type": "Microsoft.Network/bastionHosts/bastionHostIpConfigurations",
                "properties": {
                  "subnet": {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/BastionHostSubnet"
                  },
                  "publicIPAddress": {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName"
                  },
                  "provisioningState": "Succeeded",
                  "privateIPAllocationMethod": "Dynamic"
                }
              }
            ],
            "provisioningState": "Succeeded"
          }
        }
      ]
  BastionHosts.Delete:
    description: |-
      Deletes the specified Bastion Host.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/bastionhosts/delete
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  BastionHosts.Get:
    description: |-
      Gets the specified Bastion Host.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/bastionhosts/get
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/bastionHosts/bastionhosttenant'",
          "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
          "name": "bastionhost'",
          "tags": {
            "key1": "value1"
          },
          "type": "Microsoft.Network/bastionHosts",
          "location": "West US",
          "properties": {
            "dnsName": "bst-9d89d361-100e-4c01-b92d-466548c476dc.bastion.azure.com",
            "ipConfigurations": [
              {
                "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/bastionHosts/bastionhosttenant/bastionHostIpConfigurations/bastionHostIpConfiguration",
                "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
                "name": "bastionHostIpConfiguration",
                "type": "Microsoft.Network/bastionHosts/bastionHostIpConfigurations",
                "properties": {
                  "subnet": {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/BastionHostSubnet"
                  },
                  "publicIPAddress": {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName"
                  },
                  "provisioningState": "Succeeded",
                  "privateIPAllocationMethod": "Dynamic"
                }
              }
            ],
            "provisioningState": "Succeeded"
          }
        }
      ]
  BastionHosts.List:
    description: |-
      Lists all Bastion Hosts in a subscription.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/bastionhosts/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/bastionHosts/bastionhosttenant'",
              "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
              "name": "bastionhost'",
              "type": "Microsoft.Network/bastionHosts",
              "location": "West US",
              "properties": {
                "dnsName": "bst-9d89d361-100e-4c01-b92d-466548c476dc.bastion.azure.com",
                "ipConfigurations": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/bastionHosts/bastionhosttenant/bastionHostIpConfigurations/bastionHostIpConfiguration",
                    "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
                    "name": "bastionHostIpConfiguration",
                    "type": "Microsoft.Network/bastionHosts/bastionHostIpConfigurations",
                    "properties": {
                      "subnet": {
                        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/BastionHostSubnet"
                      },
                      "publicIPAddress": {
                        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName"
                      },
                      "provisioningState": "Succeeded",
                      "privateIPAllocationMethod": "Dynamic"
                    }
                  }
                ],
                "provisioningState": "Succeeded"
              }
            }
          ]
        }
      ]
  BastionHosts.ListByResourceGroup:
    description: |-
      Lists all Bastion Hosts in a resource group.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/bastionhosts/listbyresourcegroup
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/bastionHosts/bastionhosttenant'",
              "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
              "name": "bastionhost'",
              "type": "Microsoft.Network/bastionHosts",
              "location": "West US",
              "properties": {
                "dnsName": "bst-9d89d361-100e-4c01-b92d-466548c476dc.bastion.azure.com",
                "ipConfigurations": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/bastionHosts/bastionhosttenant/bastionHostIpConfigurations/bastionHostIpConfiguration",
                    "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
                    "name": "bastionHostIpConfiguration",
                    "type": "Microsoft.Network/bastionHosts/bastionHostIpConfigurations",
                    "properties": {
                      "subnet": {
                        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2/subnets/BastionHostSubnet"
                      },
                      "publicIPAddress": {
                        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/pipName"
                      },
                      "provisioningState": "Succeeded",
                      "privateIPAllocationMethod": "Dynamic"
                    }
                  }
                ],
                "provisioningState": "Succeeded"
              }
            }
          ]
        }
      ]
  CheckDnsNameAvailability.CheckDnsNameAvailability:
    description: |-
      Checks whether a domain name in the cloudapp.azure.com zone is available for use.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/checkdnsnameavailability/checkdnsnameavailability
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "available": false
        }
      ]
  CustomIpPrefixes.CreateOrUpdate:
    description: |-
      Creates or updates a custom IP prefix.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/customipprefixes/createorupdate
    example:
      inputs: [
        {
          "location": "westus",
          "properties": {
            "cidr": "0.0.0.0/24"
          }
        }
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/customIpPrefixes/test-customipprefix",
          "etag": "W/\"00000000-0000-0000-0000-00000000\"",
          "name": "test-customipprefix",
          "type": "Microsoft.Network/customIpPrefixes",
          "zones": [
            "1"
          ],
          "location": "westus",
          "properties": {
            "cidr": "192.168.254.2/24",
            "resourceGuid": "00000000-0000-0000-0000-00000000",
            "publicIpPrefixes": [],
            "commissionedState": "Provisioning",
            "provisioningState": "Succeeded"
          }
        }
      ]
  CustomIpPrefixes.Delete:
    description: |-
      Deletes the specified custom IP prefix.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/customipprefixes/delete
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  CustomIpPrefixes.Get:
    description: |-
      Gets the specified custom IP prefix in a specified resource group.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/customipprefixes/get
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/customIpPrefixes/test-customipprefix",
          "etag": "W/\"00000000-0000-0000-0000-00000000\"",
          "name": "test-customipprefix",
          "type": "Microsoft.Network/customIpPrefixes",
          "location": "westus",
          "properties": {
            "cidr": "0.0.0.0/24",
            "resourceGuid": "00000000-0000-0000-0000-00000000",
            "publicIpPrefixes": [],
            "commissionedState": "Commissioned",
            "provisioningState": "Succeeded"
          }
        }
      ]
  CustomIpPrefixes.List:
    description: |-
      Gets all custom IP prefixes in a resource group.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/customipprefixes/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/customIpPrefixes/test-customipprefix",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "name": "test-customipprefix",
              "type": "Microsoft.Network/customIpPrefixes",
              "location": "westus",
              "properties": {
                "cidr": "0.0.0.0/24",
                "resourceGuid": "00000000-0000-0000-0000-00000000",
                "publicIpPrefixes": [],
                "commissionedState": "Commissioned",
                "provisioningState": "Succeeded"
              }
            },
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/customIpPrefixes/test-customipprefix2",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "name": "test-customipprefix2",
              "type": "Microsoft.Network/customIpPrefixes",
              "location": "westus",
              "properties": {
                "cidr": "0.0.1.0/30",
                "resourceGuid": "00000000-0000-0000-0000-00000000",
                "publicIpPrefixes": [],
                "commissionedState": "Commissioned",
                "provisioningState": "Succeeded"
              }
            }
          ]
        }
      ]
  CustomIpPrefixes.ListAll:
    description: |-
      Gets all the custom IP prefixes in a subscription.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/customipprefixes/listall
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/customIpPrefixes/test-customipprefix",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "name": "test-customipprefix",
              "type": "Microsoft.Network/customIpPrefixes",
              "location": "westus",
              "properties": {
                "cidr": "0.0.0.0/24",
                "resourceGuid": "00000000-0000-0000-0000-00000000",
                "publicIpPrefixes": [],
                "commissionedState": "Commissioned",
                "provisioningState": "Succeeded"
              }
            },
            {
              "id": "/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/customIpPrefixes/test-customipprefix2",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "name": "test-customipprefix2",
              "type": "Microsoft.Network/customIpPrefixes",
              "location": "westus",
              "properties": {
                "cidr": "0.0.1.0/30",
                "resourceGuid": "00000000-0000-0000-0000-00000000",
                "publicIpPrefixes": [],
                "commissionedState": "Commissioned",
                "provisioningState": "Succeeded"
              }
            },
            {
              "id": "/subscriptions/subid/resourceGroups/rg3/providers/Microsoft.Network/customIpPrefixes/test-customipprefix2",
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "name": "test-customipprefix2",
              "type": "Microsoft.Network/customIpPrefixes",
              "location": "eastus",
              "properties": {
                "cidr": "0.0.1.0/22",
                "resourceGuid": "00000000-0000-0000-0000-00000000",
                "publicIpPrefixes": [],
                "commissionedState": "Provisioning",
                "provisioningState": "Succeeded"
              }
            }
          ]
        }
      ]
  CustomIpPrefixes.UpdateTags:
    description: |-
      Updates custom IP prefix tags.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/customipprefixes/updatetags
    example:
      inputs: [
        {
          "tags": {
            "tag1": "value1",
            "tag2": "value2"
          }
        }
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/customIpPrefixes/test-customipprefix",
          "etag": "W/\"00000000-0000-0000-0000-00000000\"",
          "name": "test-customipprefix",
          "tags": {
            "tag1": "value1",
            "tag2": "value2"
          },
          "type": "Microsoft.Network/customIpPrefixes",
          "zones": [
            "1"
          ],
          "location": "westus",
          "properties": {
            "cidr": "192.168.254.2/24",
            "resourceGuid": "00000000-0000-0000-0000-00000000",
            "publicIpPrefixes": [],
            "commissionedState": "Provisioning",
            "provisioningState": "Succeeded"
          }
        }
      ]
  DdosProtectionPlans.CreateOrUpdate:
    description: |-
      Creates or updates a DDoS protection plan.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/ddosprotectionplans/createorupdate
    example:
      inputs: [
        {
          "location": "westus",
          "properties": {}
        }
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/ddosProtectionPlans/test-plan",
          "name": "test-plan",
          "type": "Microsoft.Network/ddosProtectionPlans",
          "location": "westus",
          "properties": {
            "resourceGuid": "00000000-0000-0000-0000-000000000000",
            "virtualNetworks": [],
            "provisioningState": "Succeeded"
          }
        }
      ]
  DdosProtectionPlans.Delete:
    description: |-
      Deletes the specified DDoS protection plan.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/ddosprotectionplans/delete
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  DdosProtectionPlans.Get:
    description: |-
      Gets information about the specified DDoS protection plan.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/ddosprotectionplans/get
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/ddosProtectionPlans/test-plan",
          "name": "test-plan",
          "type": "Microsoft.Network/ddosProtectionPlans",
          "location": "westus",
          "properties": {
            "resourceGuid": "00000000-0000-0000-0000-000000000000",
            "virtualNetworks": [
              {
                "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet"
              }
            ],
            "provisioningState": "Succeeded"
          }
        }
      ]
  DdosProtectionPlans.List:
    description: |-
      Gets all DDoS protection plans in a subscription.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/ddosprotectionplans/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/ddosProtectionPlans/plan1",
              "name": "plan1",
              "type": "Microsoft.Network/ddosProtectionPlans",
              "location": "westus",
              "properties": {
                "resourceGuid": "00000000-0000-0000-0000-000000000000",
                "virtualNetworks": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet1"
                  }
                ],
                "provisioningState": "Succeeded"
              }
            },
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/ddosProtectionPlans/plan2",
              "name": "plan2",
              "type": "Microsoft.Network/ddosProtectionPlans",
              "location": "westus",
              "properties": {
                "resourceGuid": "00000000-0000-0000-0000-000000000000",
                "virtualNetworks": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet2"
                  },
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet3"
                  }
                ],
                "provisioningState": "Succeeded"
              }
            }
          ]
        }
      ]
  DdosProtectionPlans.ListByResourceGroup:
    description: |-
      Gets all the DDoS protection plans in a resource group.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/ddosprotectionplans/listbyresourcegroup
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/ddosProtectionPlans/plan1",
              "name": "plan1",
              "type": "Microsoft.Network/ddosProtectionPlans",
              "location": "westus",
              "properties": {
                "resourceGuid": "00000000-0000-0000-0000-000000000000",
                "virtualNetworks": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet"
                  }
                ],
                "provisioningState": "Succeeded"
              }
            },
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/ddosProtectionPlans/plan2",
              "name": "plan2",
              "type": "Microsoft.Network/ddosProtectionPlans",
              "location": "westus",
              "properties": {
                "resourceGuid": "00000000-0000-0000-0000-000000000000",
                "virtualNetworks": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet"
                  }
                ],
                "provisioningState": "Succeeded"
              }
            }
          ]
        }
      ]
  DdosProtectionPlans.UpdateTags:
    description: |-
      Update a DDoS protection plan tags.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/ddosprotectionplans/updatetags
    example:
      inputs: [
        {
          "tags": {
            "tag1": "value1",
            "tag2": "value2"
          }
        }
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/ddosProtectionPlans/test-plan",
          "name": "test-plan",
          "tags": {
            "tag1": "value1",
            "tag2": "value2"
          },
          "type": "Microsoft.Network/ddosProtectionPlans",
          "location": "westus",
          "properties": {
            "resourceGuid": "00000000-0000-0000-0000-000000000000",
            "virtualNetworks": [],
            "provisioningState": "Succeeded"
          }
        }
      ]
  DefaultSecurityRules.Get:
    description: |-
      Get the specified default network security rule.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/defaultsecurityrules/get
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/networkSecurityGroups/nsg1/defaultSecurityRules/AllowVnetInBound",
          "name": "AllowVnetInBound",
          "properties": {
            "access": "Allow",
            "priority": 65000,
            "protocol": "*",
            "direction": "Inbound",
            "description": "Allow inbound traffic from all VMs in VNET",
            "sourcePortRange": "*",
            "sourcePortRanges": [],
            "provisioningState": "Succeeded",
            "sourceAddressPrefix": "VirtualNetwork",
            "destinationPortRange": "*",
            "destinationPortRanges": [],
            "sourceAddressPrefixes": [],
            "destinationAddressPrefix": "VirtualNetwork",
            "destinationAddressPrefixes": []
          }
        }
      ]
  DefaultSecurityRules.List:
    description: |-
      Gets all default security rules in a network security group.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/defaultsecurityrules/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/networkSecurityGroups/nsg1/defaultSecurityRules/AllowVnetInBound",
              "name": "AllowVnetInBound",
              "properties": {
                "access": "Allow",
                "priority": 65000,
                "protocol": "*",
                "direction": "Inbound",
                "description": "Allow inbound traffic from all VMs in VNET",
                "sourcePortRange": "*",
                "sourcePortRanges": [],
                "provisioningState": "Succeeded",
                "sourceAddressPrefix": "VirtualNetwork",
                "destinationPortRange": "*",
                "destinationPortRanges": [],
                "sourceAddressPrefixes": [],
                "destinationAddressPrefix": "VirtualNetwork",
                "destinationAddressPrefixes": []
              }
            },
            {
              "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/networkSecurityGroups/nsg1/defaultSecurityRules/AllowAzureLoadBalancerInBound",
              "name": "AllowAzureLoadBalancerInBound",
              "properties": {
                "access": "Allow",
                "priority": 65001,
                "protocol": "*",
                "direction": "Inbound",
                "description": "Allow inbound traffic from azure load balancer",
                "sourcePortRange": "*",
                "sourcePortRanges": [],
                "provisioningState": "Succeeded",
                "sourceAddressPrefix": "AzureLoadBalancer",
                "destinationPortRange": "*",
                "destinationPortRanges": [],
                "sourceAddressPrefixes": [],
                "destinationAddressPrefix": "*",
                "destinationAddressPrefixes": []
              }
            },
            {
              "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/networkSecurityGroups/nsg1/defaultSecurityRules/DenyAllInBound",
              "name": "DenyAllInBound",
              "properties": {
                "access": "Deny",
                "priority": 65500,
                "protocol": "*",
                "direction": "Inbound",
                "description": "Deny all inbound traffic",
                "sourcePortRange": "*",
                "sourcePortRanges": [],
                "provisioningState": "Succeeded",
                "sourceAddressPrefix": "*",
                "destinationPortRange": "*",
                "destinationPortRanges": [],
                "sourceAddressPrefixes": [],
                "destinationAddressPrefix": "*",
                "destinationAddressPrefixes": []
              }
            },
            {
              "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/networkSecurityGroups/nsg1/defaultSecurityRules/AllowVnetOutBound",
              "name": "AllowVnetOutBound",
              "properties": {
                "access": "Allow",
                "priority": 65000,
                "protocol": "*",
                "direction": "Outbound",
                "description": "Allow outbound traffic from all VMs to all VMs in VNET",
                "sourcePortRange": "*",
                "sourcePortRanges": [],
                "provisioningState": "Succeeded",
                "sourceAddressPrefix": "VirtualNetwork",
                "destinationPortRange": "*",
                "destinationPortRanges": [],
                "sourceAddressPrefixes": [],
                "destinationAddressPrefix": "VirtualNetwork",
                "destinationAddressPrefixes": []
              }
            },
            {
              "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/networkSecurityGroups/nsg1/defaultSecurityRules/AllowInternetOutBound",
              "name": "AllowInternetOutBound",
              "properties": {
                "access": "Allow",
                "priority": 65001,
                "protocol": "*",
                "direction": "Outbound",
                "description": "Allow outbound traffic from all VMs to Internet",
                "sourcePortRange": "*",
                "sourcePortRanges": [],
                "provisioningState": "Succeeded",
                "sourceAddressPrefix": "*",
                "destinationPortRange": "*",
                "destinationPortRanges": [],
                "sourceAddressPrefixes": [],
                "destinationAddressPrefix": "Internet",
                "destinationAddressPrefixes": []
              }
            },
            {
              "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/networkSecurityGroups/nsg1/defaultSecurityRules/DenyAllOutBound",
              "name": "DenyAllOutBound",
              "properties": {
                "access": "Deny",
                "priority": 65500,
                "protocol": "*",
                "direction": "Outbound",
                "description": "Deny all outbound traffic",
                "sourcePortRange": "*",
                "sourcePortRanges": [],
                "provisioningState": "Succeeded",
                "sourceAddressPrefix": "*",
                "destinationPortRange": "*",
                "destinationPortRanges": [],
                "sourceAddressPrefixes": [],
                "destinationAddressPrefix": "*",
                "destinationAddressPrefixes": []
              }
            }
          ]
        }
      ]
  DeleteBastionShareableLink.DeleteBastionShareableLink:
    description: |-
      Deletes the Bastion Shareable Links for all the VMs specified in the request.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/deletebastionshareablelink/deletebastionshareablelink
    example:
      inputs: [
        {
          "vms": [
            {
              "vm": {
                "id": "/subscriptions/subid/resourceGroups/rgx/providers/Microsoft.Compute/virtualMachines/vm1"
              }
            },
            {
              "vm": {
                "id": "/subscriptions/subid/resourceGroups/rgx/providers/Microsoft.Compute/virtualMachines/vm2"
              }
            }
          ]
        }
      ]
      outputs: [
        {}
      ]
  DisconnectActiveSessions.DisconnectActiveSessions:
    description: |-
      Returns the list of currently active sessions on the Bastion.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/disconnectactivesessions/disconnectactivesessions
    example:
      inputs: [
        [
          "session1",
          "session2",
          "session3"
        ]
      ]
      outputs: [
        {
          "value": [
            {
              "state": "Disconnected",
              "message": "session session1 invalidated!",
              "sessionId": "session1"
            },
            {
              "state": "Failed",
              "message": "session session2 could not be disconnected!",
              "sessionId": "session2"
            },
            {
              "state": "NotFound",
              "message": "session session3 not found!",
              "sessionId": "session3"
            }
          ]
        }
      ]
  DscpConfiguration.CreateOrUpdate:
    description: |-
      Creates or updates a DSCP Configuration.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/dscpconfiguration/createorupdate
    example:
      inputs: [
        {
          "location": "eastus",
          "properties": {
            "markings": [
              46,
              10
            ],
            "protocol": "Tcp",
            "sourceIpRanges": [
              {
                "endIP": "127.0.0.2",
                "startIP": "127.0.0.1"
              },
              {
                "endIP": "127.0.1.2",
                "startIP": "127.0.1.1"
              }
            ],
            "sourcePortRanges": [
              {
                "end": 11,
                "start": 10
              },
              {
                "end": 21,
                "start": 20
              }
            ],
            "destinationIpRanges": [
              {
                "endIP": "127.0.10.2",
                "startIP": "127.0.10.1"
              },
              {
                "endIP": "127.0.11.2",
                "startIP": "127.0.11.1"
              }
            ],
            "destinationPortRanges": [
              {
                "end": 15,
                "start": 15
              },
              {
                "end": 27,
                "start": 26
              }
            ]
          }
        }
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/dscpConfiguration/mydscpConfig",
          "name": "mydscpConfig",
          "type": "Microsoft.Network/dscpConfiguration",
          "location": "eastus",
          "properties": {
            "markings": [
              46,
              10
            ],
            "protocol": "Tcp",
            "sourceIpRanges": [
              {
                "endIP": "127.0.0.2",
                "startIP": "127.0.0.1"
              },
              {
                "endIP": "127.0.1.2",
                "startIP": "127.0.1.1"
              }
            ],
            "qosCollectionId": "0f8fad5b-d9cb-469f-a165-70867728950e",
            "sourcePortRanges": [
              {
                "end": 11,
                "start": 10
              },
              {
                "end": 21,
                "start": 20
              }
            ],
            "provisioningState": "Succeeded",
            "destinationIpRanges": [
              {
                "endIP": "127.0.10.2",
                "startIP": "127.0.10.1"
              },
              {
                "endIP": "127.0.11.2",
                "startIP": "127.0.11.1"
              }
            ],
            "destinationPortRanges": [
              {
                "end": 15,
                "start": 15
              },
              {
                "end": 27,
                "start": 26
              }
            ],
            "associatedNetworkInterfaces": []
          }
        }
      ]
  DscpConfiguration.Delete:
    description: |-
      Deletes a DSCP Configuration.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/dscpconfiguration/delete
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  DscpConfiguration.Get:
    description: |-
      Gets a DSCP Configuration.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/dscpconfiguration/get
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/dscpConfiguration/mydscpConfig",
          "name": "mydscpConfig",
          "type": "Microsoft.Network/dscpConfiguration",
          "location": "eastus",
          "properties": {
            "markings": [
              46,
              10
            ],
            "protocol": "Tcp",
            "sourceIpRanges": [
              {
                "endIP": "127.0.0.2",
                "startIP": "127.0.0.1"
              }
            ],
            "qosCollectionId": "0f8fad5b-d9cb-469f-a165-70867728950e",
            "sourcePortRanges": [
              {
                "end": 12,
                "start": 11
              }
            ],
            "provisioningState": "Succeeded",
            "destinationIpRanges": [
              {
                "endIP": "127.0.10.2",
                "startIP": "127.0.10.1"
              }
            ],
            "destinationPortRanges": [
              {
                "end": 62,
                "start": 61
              }
            ],
            "associatedNetworkInterfaces": [
              "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/test-nic1",
              "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/test-nic2"
            ]
          }
        }
      ]
  DscpConfiguration.List:
    description: |-
      Gets a DSCP Configuration.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/dscpconfiguration/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/dscpConfiguration/mydscpConfig",
              "name": "mydscpConfig",
              "type": "Microsoft.Network/dscpConfiguration",
              "location": "eastus",
              "properties": {
                "markings": [
                  46,
                  10
                ],
                "protocol": "Tcp",
                "sourceIpRanges": [
                  {
                    "endIP": "127.0.0.2",
                    "startIP": "127.0.0.1"
                  }
                ],
                "qosCollectionId": "0f8fad5b-d9cb-469f-a165-70867728950e",
                "sourcePortRanges": [
                  {
                    "end": 12,
                    "start": 11
                  }
                ],
                "provisioningState": "Succeeded",
                "destinationIpRanges": [
                  {
                    "endIP": "127.0.10.2",
                    "startIP": "127.0.10.1"
                  }
                ],
                "destinationPortRanges": [
                  {
                    "end": 62,
                    "start": 61
                  }
                ],
                "associatedNetworkInterfaces": [
                  "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/test-nic1",
                  "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/test-nic2"
                ]
              }
            },
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/dscpConfiguration/mydscpConfig2",
              "name": "mydscpConfig2",
              "type": "Microsoft.Network/dscpConfiguration",
              "location": "eastus",
              "properties": {
                "markings": [
                  46,
                  10
                ],
                "protocol": "Tcp",
                "sourceIpRanges": [
                  {
                    "endIP": "128.0.0.2",
                    "startIP": "128.0.0.1"
                  }
                ],
                "qosCollectionId": "9as24mf6-d9cb-7a7f-a165-70867728950e",
                "sourcePortRanges": [
                  {
                    "end": 12,
                    "start": 11
                  }
                ],
                "provisioningState": "Succeeded",
                "destinationIpRanges": [
                  {
                    "endIP": "128.0.10.2",
                    "startIP": "128.0.10.1"
                  }
                ],
                "destinationPortRanges": [
                  {
                    "end": 62,
                    "start": 61
                  }
                ],
                "associatedNetworkInterfaces": [
                  "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/test-nic3",
                  "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/test-nic4"
                ]
              }
            }
          ]
        }
      ]
  DscpConfiguration.ListAll:
    description: |-
      Gets all dscp configurations in a subscription.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/dscpconfiguration/listall
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/dscpConfiguration/mydscpConfig",
              "name": "mydscpConfig",
              "type": "Microsoft.Network/dscpConfiguration",
              "location": "eastus",
              "properties": {
                "markings": [
                  46,
                  10
                ],
                "protocol": "Tcp",
                "sourceIpRanges": [
                  {
                    "endIP": "127.0.0.2",
                    "startIP": "127.0.0.1"
                  }
                ],
                "qosCollectionId": "0f8fad5b-d9cb-469f-a165-70867728950e",
                "sourcePortRanges": [
                  {
                    "end": 12,
                    "start": 11
                  }
                ],
                "provisioningState": "Succeeded",
                "destinationIpRanges": [
                  {
                    "endIP": "127.0.10.2",
                    "startIP": "127.0.10.1"
                  }
                ],
                "destinationPortRanges": [
                  {
                    "end": 62,
                    "start": 61
                  }
                ],
                "associatedNetworkInterfaces": [
                  "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/test-nic1",
                  "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/test-nic2"
                ]
              }
            },
            {
              "id": "/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/dscpConfiguration/mydscpConfig2",
              "name": "mydscpConfig2",
              "type": "Microsoft.Network/dscpConfiguration",
              "location": "eastus",
              "properties": {
                "markings": [
                  46,
                  10
                ],
                "protocol": "Tcp",
                "sourceIpRanges": [
                  {
                    "endIP": "128.0.0.2",
                    "startIP": "128.0.0.1"
                  }
                ],
                "qosCollectionId": "9as24mf6-d9cb-7a7f-a165-70867728950e",
                "sourcePortRanges": [
                  {
                    "end": 12,
                    "start": 11
                  }
                ],
                "provisioningState": "Succeeded",
                "destinationIpRanges": [
                  {
                    "endIP": "128.0.10.2",
                    "startIP": "128.0.10.1"
                  }
                ],
                "destinationPortRanges": [
                  {
                    "end": 62,
                    "start": 61
                  }
                ],
                "associatedNetworkInterfaces": [
                  "/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/networkInterfaces/test-nic3",
                  "/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/networkInterfaces/test-nic4"
                ]
              }
            }
          ]
        }
      ]
  FirewallPolicies.CreateOrUpdate:
    description: |-
      Creates or updates the specified Firewall Policy.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/firewallpolicies/createorupdate
    example:
      inputs: [
        {
          "tags": {
            "key1": "value1"
          },
          "location": "West US",
          "properties": {
            "sku": {
              "tier": "Premium"
            },
            "snat": {
              "privateRanges": [
                "IANAPrivateRanges"
              ]
            },
            "insights": {
              "isEnabled": true,
              "retentionDays": 100,
              "logAnalyticsResources": {
                "workspaces": [
                  {
                    "region": "westus",
                    "workspaceId": {
                      "id": "/subscriptions/subid/resourcegroups/rg1/providers/microsoft.operationalinsights/workspaces/workspace1"
                    }
                  },
                  {
                    "region": "eastus",
                    "workspaceId": {
                      "id": "/subscriptions/subid/resourcegroups/rg1/providers/microsoft.operationalinsights/workspaces/workspace2"
                    }
                  }
                ],
                "defaultWorkspaceId": {
                  "id": "/subscriptions/subid/resourcegroups/rg1/providers/microsoft.operationalinsights/workspaces/defaultWorkspace"
                }
              }
            },
            "dnsSettings": {
              "servers": [
                "30.3.4.5"
              ],
              "enableProxy": true,
              "requireProxyForNetworkRules": false
            },
            "threatIntelMode": "Alert",
            "transportSecurity": {
              "certificateAuthority": {
                "name": "clientcert",
                "keyVaultSecretId": "https://kv/secret"
              }
            },
            "intrusionDetection": {
              "mode": "Alert",
              "configuration": {
                "signatureOverrides": [
                  {
                    "id": "2525004",
                    "mode": "Deny"
                  }
                ],
                "bypassTrafficSettings": [
                  {
                    "name": "bypassRule1",
                    "protocol": "TCP",
                    "description": "Rule 1",
                    "sourceAddresses": [
                      "1.2.3.4"
                    ],
                    "destinationPorts": [
                      "*"
                    ],
                    "destinationAddresses": [
                      "5.6.7.8"
                    ]
                  }
                ]
              }
            },
            "threatIntelWhitelist": {
              "fqdns": [
                "*.microsoft.com"
              ],
              "ipAddresses": [
                "20.3.4.5"
              ]
            }
          }
        }
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/firewallPolicies/firewallPolicy",
          "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
          "name": "firewallPolicy",
          "tags": {
            "key1": "value1"
          },
          "type": "Microsoft.Network/firewallPolicies",
          "location": "West US",
          "properties": {
            "sku": {
              "tier": "Premium"
            },
            "snat": {
              "privateRanges": [
                "IANAPrivateRanges"
              ]
            },
            "insights": {
              "isEnabled": true,
              "retentionDays": 100,
              "logAnalyticsResources": {
                "workspaces": [
                  {
                    "region": "westus",
                    "workspaceId": {
                      "id": "/subscriptions/subid/resourcegroups/rg1/providers/microsoft.operationalinsights/workspaces/workspace1"
                    }
                  },
                  {
                    "region": "eastus",
                    "workspaceId": {
                      "id": "/subscriptions/subid/resourcegroups/rg1/providers/microsoft.operationalinsights/workspaces/workspace2"
                    }
                  }
                ],
                "defaultWorkspaceId": {
                  "id": "/subscriptions/subid/resourcegroups/rg1/providers/microsoft.operationalinsights/workspaces/defaultWorkspace"
                }
              }
            },
            "firewalls": [],
            "dnsSettings": {
              "servers": [
                "30.3.4.5"
              ],
              "enableProxy": true,
              "requireProxyForNetworkRules": false
            },
            "threatIntelMode": "Alert",
            "provisioningState": "Succeeded",
            "transportSecurity": {
              "certificateAuthority": {
                "name": "clientcert",
                "keyVaultSecretId": "https://kv/secret"
              }
            },
            "intrusionDetection": {
              "mode": "Alert",
              "configuration": {
                "signatureOverrides": [
                  {
                    "id": "2525004",
                    "mode": "Deny"
                  }
                ],
                "bypassTrafficSettings": [
                  {
                    "name": "bypassRule1",
                    "protocol": "TCP",
                    "description": "Rule 1",
                    "sourceAddresses": [
                      "1.2.3.4"
                    ],
                    "destinationPorts": [
                      "*"
                    ],
                    "destinationAddresses": [
                      "5.6.7.8"
                    ]
                  }
                ]
              }
            },
            "ruleCollectionGroups": [
              {
                "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/firewallPolicies/firewallPolicy/ruleCollectionGroups/ruleCollectionGroup1"
              },
              {
                "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/firewallPolicies/firewallPolicy/ruleCollectionGroups/ruleCollectionGroup2"
              }
            ],
            "threatIntelWhitelist": {
              "fqdns": [
                "*.microsoft.com"
              ],
              "ipAddresses": [
                "20.3.4.5"
              ]
            }
          }
        }
      ]
  FirewallPolicies.Delete:
    description: |-
      Deletes the specified Firewall Policy.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/firewallpolicies/delete
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  FirewallPolicies.Get:
    description: |-
      Gets the specified Firewall Policy.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/firewallpolicies/get
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/firewallPolicies/firewallPolicy",
          "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
          "name": "firewallPolicy",
          "tags": {
            "key1": "value1"
          },
          "type": "Microsoft.Network/firewallPolicies",
          "location": "West US",
          "properties": {
            "sku": {
              "tier": "Premium"
            },
            "snat": {
              "privateRanges": [
                "IANAPrivateRanges"
              ]
            },
            "insights": {
              "isEnabled": true,
              "retentionDays": 100,
              "logAnalyticsResources": {
                "workspaces": [
                  {
                    "region": "westus",
                    "workspaceId": {
                      "id": "/subscriptions/subid/resourcegroups/rg1/providers/microsoft.operationalinsights/workspaces/workspace1"
                    }
                  },
                  {
                    "region": "eastus",
                    "workspaceId": {
                      "id": "/subscriptions/subid/resourcegroups/rg1/providers/microsoft.operationalinsights/workspaces/workspace2"
                    }
                  }
                ],
                "defaultWorkspaceId": {
                  "id": "/subscriptions/subid/resourcegroups/rg1/providers/microsoft.operationalinsights/workspaces/defaultWorkspace"
                }
              }
            },
            "firewalls": [],
            "dnsSettings": {
              "servers": [
                "30.3.4.5"
              ],
              "enableProxy": true,
              "requireProxyForNetworkRules": false
            },
            "threatIntelMode": "Alert",
            "provisioningState": "Succeeded",
            "transportSecurity": {
              "certificateAuthority": {
                "name": "clientcert",
                "keyVaultSecretId": "https://kv/secret"
              }
            },
            "intrusionDetection": {
              "mode": "Alert",
              "configuration": {
                "signatureOverrides": [
                  {
                    "id": "2525004",
                    "mode": "Deny"
                  }
                ],
                "bypassTrafficSettings": [
                  {
                    "name": "bypassRule1",
                    "protocol": "TCP",
                    "description": "Rule 1",
                    "sourceAddresses": [
                      "1.2.3.4"
                    ],
                    "destinationPorts": [
                      "*"
                    ],
                    "destinationAddresses": [
                      "5.6.7.8"
                    ]
                  }
                ]
              }
            },
            "ruleCollectionGroups": [
              {
                "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/firewallPolicies/firewallPolicy/ruleCollectionGroups/ruleCollectionGroup1"
              }
            ],
            "threatIntelWhitelist": {
              "fqdns": [
                "*.microsoft.com"
              ],
              "ipAddresses": [
                "20.3.4.5"
              ]
            }
          }
        }
      ]
  FirewallPolicies.List:
    description: |-
      Lists all Firewall Policies in a resource group.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/firewallpolicies/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/firewallPolicies/firewallPolicy",
              "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
              "name": "firewallPolicy",
              "tags": {
                "key1": "value1"
              },
              "type": "Microsoft.Network/firewallPolicies",
              "location": "West US",
              "properties": {
                "sku": {
                  "tier": "Standard"
                },
                "snat": {
                  "privateRanges": [
                    "IANAPrivateRanges"
                  ]
                },
                "firewalls": [],
                "dnsSettings": {
                  "servers": [
                    "30.3.4.5"
                  ],
                  "enableProxy": true,
                  "requireProxyForNetworkRules": false
                },
                "threatIntelMode": "Alert",
                "provisioningState": "Succeeded",
                "ruleCollectionGroups": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/firewallPolicies/firewallPolicy/ruleCollectionGroups/ruleCollectionGroup1"
                  }
                ]
              }
            }
          ]
        }
      ]
  FirewallPolicies.ListAll:
    description: |-
      Gets all the Firewall Policies in a subscription.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/firewallpolicies/listall
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/firewallPolicies/firewallPolicy",
              "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
              "name": "firewallPolicy",
              "tags": {
                "key1": "value1"
              },
              "type": "Microsoft.Network/firewallPolicies",
              "location": "West US",
              "properties": {
                "sku": {
                  "tier": "Standard"
                },
                "snat": {
                  "privateRanges": [
                    "IANAPrivateRanges"
                  ]
                },
                "firewalls": [],
                "dnsSettings": {
                  "servers": [
                    "30.3.4.5"
                  ],
                  "enableProxy": true,
                  "requireProxyForNetworkRules": false
                },
                "threatIntelMode": "Alert",
                "provisioningState": "Succeeded",
                "ruleCollectionGroups": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/firewallPolicies/firewallPolicy/ruleCollectionGroups/ruleCollectionGroup1"
                  }
                ]
              }
            }
          ]
        }
      ]
  FirewallPolicyRuleCollectionGroups.CreateOrUpdate:
    description: |-
      Creates or updates the specified FirewallPolicyRuleCollectionGroup.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/firewallpolicyrulecollectiongroups/createorupdate
    example:
      inputs: [
        {
          "properties": {
            "priority": 100,
            "ruleCollections": [
              {
                "name": "Example-Nat-Rule-Collection",
                "rules": [
                  {
                    "name": "nat-rule1",
                    "ruleType": "NatRule",
                    "ipProtocols": [
                      "TCP",
                      "UDP"
                    ],
                    "sourceIpGroups": [],
                    "translatedFqdn": "internalhttp.server.net",
                    "translatedPort": "8080",
                    "sourceAddresses": [
                      "2.2.2.2"
                    ],
                    "destinationPorts": [
                      "8080"
                    ],
                    "destinationAddresses": [
                      "152.23.32.23"
                    ]
                  }
                ],
                "action": {
                  "type": "DNAT"
                },
                "priority": 100,
                "ruleCollectionType": "FirewallPolicyNatRuleCollection"
              }
            ]
          }
        }
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/firewallPolicies/firewallPolicy/ruleCollectionGroups/ruleCollectionGroup1",
          "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
          "name": "ruleCollectionGroup1",
          "properties": {
            "priority": 100,
            "ruleCollections": [
              {
                "name": "Example-Nat-Rule-Collection",
                "rules": [
                  {
                    "name": "nat-rule1",
                    "ruleType": "NatRule",
                    "ipProtocols": [
                      "TCP",
                      "UDP"
                    ],
                    "sourceIpGroups": [],
                    "translatedFqdn": "internalhttp.server.net",
                    "translatedPort": "8080",
                    "sourceAddresses": [
                      "2.2.2.2"
                    ],
                    "destinationPorts": [
                      "8080"
                    ],
                    "destinationAddresses": [
                      "152.23.32.23"
                    ]
                  }
                ],
                "action": {
                  "type": "DNAT"
                },
                "priority": 100,
                "ruleCollectionType": "FirewallPolicyNatRuleCollection"
              }
            ],
            "provisioningState": "Succeeded"
          }
        }
      ]
  FirewallPolicyRuleCollectionGroups.Delete:
    description: |-
      Deletes the specified FirewallPolicyRuleCollectionGroup.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/firewallpolicyrulecollectiongroups/delete
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  FirewallPolicyRuleCollectionGroups.Get:
    description: |-
      Gets the specified FirewallPolicyRuleCollectionGroup.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/firewallpolicyrulecollectiongroups/get
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/firewallPolicies/firewallPolicy/ruleCollectionGroups/ruleCollectionGroup1",
          "etag": "W/\"72090554-7e3b-43f2-80ad-99a9020dcb11\"",
          "name": "ruleCollectionGroup1",
          "properties": {
            "priority": 100,
            "ruleCollections": [
              {
                "name": "NatRC",
                "rules": [
                  {
                    "name": "NatRule1",
                    "ruleType": "NatRule",
                    "ipProtocols": [
                      "TCP",
                      "UDP"
                    ],
                    "sourceIpGroups": [],
                    "translatedFqdn": "internalhttpserver",
                    "translatedPort": "8080",
                    "sourceAddresses": [
                      "2.2.2.2"
                    ],
                    "destinationPorts": [
                      "8080"
                    ],
                    "destinationAddresses": [
                      "152.23.32.23"
                    ]
                  }
                ],
                "action": {
                  "type": "DNAT"
                },
                "priority": 100,
                "ruleCollectionType": "FirewallPolicyNatRuleCollection"
              }
            ],
            "provisioningState": "Succeeded"
          }
        }
      ]
  FirewallPolicyRuleCollectionGroups.List:
    description: |-
      Lists all FirewallPolicyRuleCollectionGroups in a FirewallPolicy resource.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/firewallpolicyrulecollectiongroups/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/e747cc13-97d4-4a79-b463-42d7f4e558f2/resourceGroups/rg1/providers/Microsoft.Network/firewallPolicies/firewallPolicy/ruleCollectionGroups/ruleCollectionGroup1",
              "etag": "W/\"72090554-7e3b-43f2-80ad-99a9020dcb11\"",
              "name": "ruleCollectionGroup1",
              "properties": {
                "priority": 110,
                "ruleCollections": [
                  {
                    "name": "Example-Filter-Rule-Collection",
                    "rules": [
                      {
                        "name": "rule1",
                        "ruleType": "ApplicationRule",
                        "protocols": [
                          {
                            "port": 443,
                            "protocolType": "Https"
                          }
                        ],
                        "description": "Deny inbound rule",
                        "webCategories": [
                          "Hacking"
                        ],
                        "sourceAddresses": [
                          "216.58.216.164",
                          "10.0.0.0/24"
                        ]
                      }
                    ],
                    "action": {
                      "type": "Deny"
                    },
                    "priority": 120,
                    "ruleCollectionType": "FirewallPolicyFilterRuleCollection"
                  }
                ],
                "provisioningState": "Succeeded"
              }
            }
          ]
        }
      ]
  GetActiveSessions.GetActiveSessions:
    description: |-
      Returns the list of currently active sessions on the Bastion.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/getactivesessions/getactivesessions
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "protocol": "SSH",
              "userName": "user",
              "sessionId": "sessionId",
              "startTime": "2019-1-1T12:00:00.0000Z",
              "resourceType": "VM",
              "targetHostName": "vm01",
              "targetIpAddress": "1.1.1.1",
              "targetResourceId": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachines/vm01",
              "targetResourceGroup": "rg1",
              "targetSubscriptionId": "subid",
              "sessionDurationInMins": 0
            }
          ]
        }
      ]
  GetBastionShareableLink.GetBastionShareableLink:
    description: |-
      Return the Bastion Shareable Links for all the VMs specified in the request.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/getbastionshareablelink/getbastionshareablelink
    example:
      inputs: [
        {
          "vms": [
            {
              "vm": {
                "id": "/subscriptions/subid/resourceGroups/rgx/providers/Microsoft.Compute/virtualMachines/vm1"
              }
            },
            {
              "vm": {
                "id": "/subscriptions/subid/resourceGroups/rgx/providers/Microsoft.Compute/virtualMachines/vm2"
              }
            }
          ]
        }
      ]
      outputs: [
        {
          "value": [
            {
              "vm": {
                "id": "/subscriptions/subid/resourceGroups/rgx/providers/Microsoft.Compute/virtualMachines/vm1"
              },
              "bsl": "http://bst-bastionhostid.bastion.com/api/shareable-url/tokenvm1",
              "createdAt": "2019-10-18T12:00:00.0000Z"
            },
            {
              "vm": {
                "id": "/subscriptions/subid/resourceGroups/rgx/providers/Microsoft.Compute/virtualMachines/vm2"
              },
              "bsl": "http://bst-bastionhostid.bastion.com/api/shareable-url/tokenvm2",
              "createdAt": "2019-10-17T12:00:00.0000Z"
            }
          ]
        }
      ]
  InboundSecurityRule.CreateOrUpdate:
    description: |-
      Creates or updates the specified Network Virtual Appliance Inbound Security Rules.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/inboundsecurityrule/createorupdate
    example:
      inputs: [
        {
          "properties": {
            "rules": [
              {
                "protocol": "TCP",
                "sourceAddressPrefix": "50.20.121.5/32",
                "destinationPortRange": 22
              }
            ]
          }
        }
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkVirtualAppliances/nva/InboundSecurityRules/rule1",
          "etag": "W/\"72090554-7e3b-43f2-80ad-99a9020dcb11\"",
          "name": "rule1",
          "properties": {
            "rules": [
              {
                "protocol": "TCP",
                "sourceAddressPrefix": "50.20.121.5/32",
                "destinationPortRange": 22
              }
            ],
            "provisioningState": "Succeeded"
          }
        }
      ]
  InterfaceEndpoints.CreateOrUpdate:
    description: |-
      Creates or updates an interface endpoint in the specified resource group.
    versions:
      from: 2018.11.1
      to: 2018.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/interfaceendpoints/createorupdate
    example:
      inputs: [
        {
          "properties": {
            "fqdn": "uniqueIdentifier.fqdn.windows.net",
            "subnet": {
              "id": "/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/myVnet/subnets/mySubnet"
            },
            "endpointService": {
              "id": "/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Provider/resourceType/resourceName"
            }
          }
        }
      ]
      outputs: [
        {
          "id": "/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/interfaceEndpoints/testIe",
          "name": "testIe",
          "location": "eastus",
          "properties": {
            "fqdn": "uniqueIdentifier.fqdn.windows.net",
            "owner": "User",
            "subnet": {
              "id": "/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/myVnet/subnets/mySubnet"
            },
            "endpointService": {
              "id": "/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Provider/resourceType/resourceName"
            },
            "networkInterfaces": [
              {
                "id": "/subscriptions/subId/resourceGroups/rg1/provders/Microsoft.Network/networkInterfaces/testIe.nic.abcd1234"
              }
            ],
            "provisioningState": "Succeded"
          }
        }
      ]
  InterfaceEndpoints.Delete:
    description: |-
      Deletes the specified interface endpoint.
    versions:
      from: 2018.11.1
      to: 2018.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/interfaceendpoints/delete
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  InterfaceEndpoints.Get:
    description: |-
      Gets the specified interface endpoint by resource group.
    versions:
      from: 2018.11.1
      to: 2018.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/interfaceendpoints/get
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/interfaceEndpoints/testIe",
          "name": "testIe",
          "type": "Microsoft.Network/interfaceEndpoints",
          "location": "eastus",
          "properties": {
            "fqdn": "uniqueIdentifier.fqdn.windows.net",
            "owner": "User",
            "subnet": {
              "id": "/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/myVnet/subnets/mySubnet"
            },
            "endpointService": {
              "id": "/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Provider/resourceType/resourceName"
            },
            "networkInterfaces": [
              {
                "id": "/subscriptions/subId/resourceGroups/rg1/provders/Microsoft.Network/networkInterfaces/testIe.nic.abcd1234"
              }
            ],
            "provisioningState": "Succeeded"
          }
        }
      ]
  InterfaceEndpoints.List:
    description: |-
      Gets all interface endpoints in a resource group.
    versions:
      from: 2018.11.1
      to: 2018.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/interfaceendpoints/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/interfaceEndpoints/ie1",
              "name": "ie1",
              "type": "Microsoft.Network/interfaceEndpoints",
              "location": "eastus",
              "properties": {
                "fqdn": "uniqueIdentifier.fqdn.windows.net",
                "owner": "User",
                "subnet": {
                  "id": "/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/myVnet/subnets/mySubnet"
                },
                "endpointService": {
                  "id": "/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Provider/resourceType/resourceName"
                },
                "networkInterfaces": [
                  {
                    "id": "/subscriptions/subId/resourceGroups/rg1/provders/Microsoft.Network/networkInterfaces/ie1.nic.abcd1234"
                  }
                ],
                "provisioningState": "Succeeded"
              }
            },
            {
              "id": "/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/interfaceEndpoints/ie2",
              "name": "ie2",
              "type": "Microsoft.Network/interfaceEndpoints",
              "location": "eastus",
              "properties": {
                "fqdn": "alsoUnique.fqdn.windows.net",
                "owner": "User",
                "subnet": {
                  "id": "/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/myVnet/subnets/mySubnet"
                },
                "endpointService": {
                  "id": "/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Provider/resourceType/otherResourceName"
                },
                "networkInterfaces": [
                  {
                    "id": "/subscriptions/subId/resourceGroups/rg1/provders/Microsoft.Network/networkInterfaces/ie2.nic.zyxw9876"
                  }
                ],
                "provisioningState": "Succeeded"
              }
            }
          ]
        }
      ]
  InterfaceEndpoints.ListBySubscription:
    description: |-
      Gets all interface endpoints in a subscription.
    versions:
      from: 2018.11.1
      to: 2018.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/interfaceendpoints/listbysubscription
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/interfaceEndpoints/ie1",
              "name": "ie1",
              "type": "Microsoft.Network/interfaceEndpoints",
              "location": "eastus",
              "properties": {
                "fqdn": "uniqueIdentifier.fqdn.windows.net",
                "owner": "User",
                "subnet": {
                  "id": "/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/myVnet/subnets/mySubnet"
                },
                "endpointService": {
                  "id": "/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Provider/resourceType/resourceName"
                },
                "networkInterfaces": [
                  {
                    "id": "/subscriptions/subId/resourceGroups/rg1/provders/Microsoft.Network/networkInterfaces/ie1.nic.abcd1234"
                  }
                ],
                "provisioningState": "Succeeded"
              }
            },
            {
              "id": "/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/interfaceEndpoints/ie2",
              "name": "ie2",
              "type": "Microsoft.Network/interfaceEndpoints",
              "location": "eastus",
              "properties": {
                "fqdn": "alsoUnique.fqdn.windows.net",
                "owner": "User",
                "subnet": {
                  "id": "/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/myVnet/subnets/mySubnet"
                },
                "endpointService": {
                  "id": "/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Provider/resourceType/otherResourceName"
                },
                "networkInterfaces": [
                  {
                    "id": "/subscriptions/subId/resourceGroups/rg1/provders/Microsoft.Network/networkInterfaces/ie2.nic.zyxw9876"
                  }
                ],
                "provisioningState": "Succeeded"
              }
            },
            {
              "id": "/subscriptions/subId/resourceGroups/rg2/providers/Microsoft.Network/interfaceEndpoints/ie1",
              "name": "ie1",
              "type": "Microsoft.Network/interfaceEndpoints",
              "location": "eastus",
              "properties": {
                "fqdn": "stillVeryUnique.fqdn.windows.net",
                "owner": "User",
                "subnet": {
                  "id": "/subscriptions/subId/resourceGroups/rg2/providers/Microsoft.Network/virtualNetworks/myVnet/subnets/mySubnet"
                },
                "endpointService": {
                  "id": "/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Provider/resourceType/resourceName"
                },
                "networkInterfaces": [
                  {
                    "id": "/subscriptions/subId/resourceGroups/rg2/provders/Microsoft.Network/networkInterfaces/ie1.nic.efgh5463"
                  }
                ],
                "provisioningState": "Succeeded"
              }
            }
          ]
        }
      ]
  IpAllocations.CreateOrUpdate:
    description: |-
      Creates or updates an IpAllocation in the specified resource group.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/ipallocations/createorupdate
    example:
      inputs: [
        {
          "location": "centraluseuap",
          "properties": {
            "type": "Hypernet",
            "prefix": "3.2.5.0/24",
            "allocationTags": {
              "VNetID": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/HypernetVnet1"
            }
          }
        }
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/IpAllocations/test-ipallocation",
          "name": "test-ipallocation",
          "type": "Microsoft.Network/IpAllocations",
          "location": "centraluseuap",
          "properties": {
            "type": "Hypernet",
            "prefix": "3.2.5.0/24",
            "allocationTags": {
              "VNetID": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/HypernetVnet1"
            },
            "ipamAllocationId": "916d3b28-663f-448b-9abc-1bea9d5fed8f"
          }
        }
      ]
  IpAllocations.Delete:
    description: |-
      Deletes the specified IpAllocation.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/ipallocations/delete
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  IpAllocations.Get:
    description: |-
      Gets the specified IpAllocation by resource group.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/ipallocations/get
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/IpAllocations/test-ipallocation",
          "name": "test-ipallocation",
          "type": "Microsoft.Network/IpAllocations",
          "location": "centraluseuap",
          "properties": {
            "type": "Hypernet",
            "prefix": "3.2.5.0/24",
            "allocationTags": {
              "VNetID": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/HypernetVnet1"
            },
            "ipamAllocationId": "916d3b28-663f-448b-9abc-1bea9d5fed8f"
          }
        }
      ]
  IpAllocations.List:
    description: |-
      Gets all IpAllocations in a subscription.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/ipallocations/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/IpAllocations/test-ipallocation1",
              "name": "test-ipallocation1",
              "type": "Microsoft.Network/IpAllocations",
              "location": "centraluseuap",
              "properties": {
                "type": "Hypernet",
                "prefix": "3.2.5.0/24",
                "allocationTags": {
                  "VNetID": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/HypernetVnet1"
                },
                "ipamAllocationId": "916d3b28-663f-448b-9abc-1bea9d5fed8f"
              }
            },
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/IpAllocations/test-ipallocation2",
              "name": "test-ipallocation2",
              "type": "Microsoft.Network/IpAllocations",
              "location": "centraluseuap",
              "properties": {
                "type": "Hypernet",
                "prefix": "3.2.6.0/24",
                "allocationTags": {
                  "VNetID": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/HypernetVnet2"
                },
                "ipamAllocationId": "57dc7256-2ff7-43f2-b9c8-85a70b5c6408"
              }
            }
          ]
        }
      ]
  IpAllocations.ListByResourceGroup:
    description: |-
      Gets all IpAllocations in a resource group.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/ipallocations/listbyresourcegroup
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/IpAllocations/test-ipallocation1",
              "name": "test-ipallocation1",
              "type": "Microsoft.Network/IpAllocations",
              "location": "centraluseuap",
              "properties": {
                "type": "Hypernet",
                "prefix": "3.2.5.0/24",
                "allocationTags": {
                  "VNetID": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/HypernetVnet1"
                },
                "ipamAllocationId": "916d3b28-663f-448b-9abc-1bea9d5fed8f"
              }
            },
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/IpAllocations/test-ipallocation2",
              "name": "test-ipallocation2",
              "type": "Microsoft.Network/IpAllocations",
              "location": "centraluseuap",
              "properties": {
                "type": "Hypernet",
                "prefix": "3.2.6.0/24",
                "allocationTags": {
                  "VNetID": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/HypernetVnet2"
                },
                "ipamAllocationId": "57dc7256-2ff7-43f2-b9c8-85a70b5c6408"
              }
            }
          ]
        }
      ]
  IpAllocations.UpdateTags:
    description: |-
      Updates a IpAllocation tags.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/ipallocations/updatetags
    example:
      inputs: [
        {
          "tags": {
            "tag1": "value1",
            "tag2": "value2"
          }
        }
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/IpAllocations/test-ipallocation",
          "name": "test-ipallocation",
          "tags": {
            "tag1": "value1",
            "tag2": "value2"
          },
          "type": "Microsoft.Network/IpAllocations",
          "location": "centraluseuap",
          "properties": {
            "type": "Hypernet",
            "prefix": "3.2.5.0/24",
            "allocationTags": {
              "VNetID": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/HypernetVnet1"
            },
            "ipamAllocationId": "916d3b28-663f-448b-9abc-1bea9d5fed8f"
          }
        }
      ]
  IpGroups.CreateOrUpdate:
    description: |-
      Creates or updates an ipGroups in a specified resource group.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/ipgroups/createorupdate
    example:
      inputs: [
        {
          "tags": {
            "key1": "value1"
          },
          "location": "West US",
          "properties": {
            "ipAddresses": [
              "13.64.39.16/32",
              "40.74.146.80/31",
              "40.74.147.32/28"
            ]
          }
        }
      ]
      outputs: [
        {
          "id": "/subscriptions/subId/providers/Microsoft.Network/resourceGroup/myResourceGroup/ipGroups/ipGroups1",
          "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
          "name": "ipGroups1",
          "type": "Microsoft.Network/ipGroups",
          "location": "westcentralus",
          "properties": {
            "firewalls": [
              {
                "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azurefirewall"
              }
            ],
            "ipAddresses": [
              "13.64.39.16/32",
              "40.74.146.80/31",
              "40.74.147.32/28"
            ],
            "firewallPolicies": [],
            "provisioningState": "Succeeded"
          }
        }
      ]
  IpGroups.Delete:
    description: |-
      Deletes the specified ipGroups.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/ipgroups/delete
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  IpGroups.Get:
    description: |-
      Gets the specified ipGroups.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/ipgroups/get
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "/subscriptions/subId/providers/Microsoft.Network/resourceGroup/myResourceGroup/ipGroups/ipGroups1",
          "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
          "name": "ipGroups1",
          "type": "Microsoft.Network/ipGroups",
          "location": "westcentralus",
          "properties": {
            "firewalls": [
              {
                "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azurefirewall"
              }
            ],
            "ipAddresses": [
              "13.64.39.16/32",
              "40.74.146.80/31",
              "40.74.147.32/28"
            ],
            "firewallPolicies": [],
            "provisioningState": "Succeeded"
          }
        }
      ]
  IpGroups.List:
    description: |-
      Gets all IpGroups in a subscription.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/ipgroups/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subId/providers/Microsoft.Network/resourceGroup/myResourceGroup1/ipGroups",
              "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
              "name": "iptag1",
              "type": "Microsoft.Network/ipGroups",
              "location": "westcentralus",
              "properties": {
                "firewalls": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azurefirewall"
                  }
                ],
                "ipAddresses": [
                  "13.64.39.16/32",
                  "40.74.146.80/31",
                  "40.74.147.32/28"
                ],
                "firewallPolicies": [],
                "provisioningState": "Succeeded"
              }
            },
            {
              "id": "/subscriptions/subId/providers/Microsoft.Network/resourceGroup/myResourceGroup2/ipGroups",
              "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
              "name": "iptag2",
              "type": "Microsoft.Network/ipGroups",
              "location": "centralus",
              "properties": {
                "firewalls": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azurefirewall"
                  }
                ],
                "ipAddresses": [
                  "14.64.39.16/32",
                  "41.74.146.80/31",
                  "42.74.147.32/28"
                ],
                "firewallPolicies": [],
                "provisioningState": "Succeeded"
              }
            }
          ]
        }
      ]
  IpGroups.ListByResourceGroup:
    description: |-
      Gets all IpGroups in a resource group.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/ipgroups/listbyresourcegroup
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subId/providers/Microsoft.Network/resourceGroup/myResourceGroup/ipGroups",
              "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
              "name": "ipGroups1",
              "type": "Microsoft.Network/ipGroups",
              "location": "westcentralus",
              "properties": {
                "firewalls": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azurefirewall"
                  }
                ],
                "ipAddresses": [
                  "13.64.39.16/32",
                  "40.74.146.80/31",
                  "40.74.147.32/28"
                ],
                "firewallPolicies": [],
                "provisioningState": "Succeeded"
              }
            },
            {
              "id": "/subscriptions/subId/providers/Microsoft.Network/resourceGroup/myResourceGroup/ipGroups",
              "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
              "name": "ipGroups2",
              "type": "Microsoft.Network/ipGroups",
              "location": "centralus",
              "properties": {
                "firewalls": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azurefirewall"
                  }
                ],
                "ipAddresses": [
                  "14.64.39.16/32",
                  "41.74.146.80/31",
                  "42.74.147.32/28"
                ],
                "firewallPolicies": [],
                "provisioningState": "Succeeded"
              }
            }
          ]
        }
      ]
  IpGroups.UpdateGroups:
    description: |-
      Updates tags of an IpGroups resource.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/ipgroups/updategroups
    example:
      inputs: [
        {
          "tags": {
            "key1": "value1",
            "key2": "value2"
          }
        }
      ]
      outputs: [
        {
          "id": "/subscriptions/subId/providers/Microsoft.Network/resourceGroup/myResourceGroup/ipGroups/ipGroups1",
          "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
          "name": "ipGroups1",
          "tags": {
            "key1": "value1",
            "key2": "value2"
          },
          "type": "Microsoft.Network/ipGroups",
          "location": "westcentralus",
          "properties": {
            "firewalls": [
              {
                "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/azureFirewalls/azurefirewall"
              }
            ],
            "ipAddresses": [
              "13.64.39.16/32",
              "40.74.146.80/31",
              "40.74.147.32/28"
            ],
            "firewallPolicies": [],
            "provisioningState": "Succeeded"
          }
        }
      ]
  NatGateways.CreateOrUpdate:
    description: |-
      Creates or updates a nat gateway.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/natgateways/createorupdate
    example:
      inputs: [
        {
          "sku": {
            "name": "Standard"
          },
          "location": "westus",
          "properties": {
            "publicIpPrefixes": [
              {
                "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPPrefixes/PublicIpPrefix1"
              }
            ],
            "publicIpAddresses": [
              {
                "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/PublicIpAddress1"
              }
            ]
          }
        }
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/natGateways/test-natGateway",
          "sku": {
            "name": "Standard"
          },
          "name": "test-natGateway",
          "type": "Microsoft.Network/natGateways",
          "location": "westus",
          "properties": {
            "subnets": [
              {
                "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/subnet1"
              }
            ],
            "publicIpPrefixes": [
              {
                "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPPrefixes/PublicIpPrefix1"
              }
            ],
            "provisioningState": "Succeeded",
            "publicIpAddresses": [
              {
                "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/PublicIpAddress1"
              }
            ],
            "idleTimeoutInMinutes": 5
          }
        }
      ]
  NatGateways.Delete:
    description: |-
      Deletes the specified nat gateway.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/natgateways/delete
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  NatGateways.Get:
    description: |-
      Gets the specified nat gateway in a specified resource group.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/natgateways/get
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/natGateways/test-natGateway",
          "sku": {
            "name": "Standard"
          },
          "name": "test-natGateway",
          "type": "Microsoft.Network/natGateways",
          "location": "westus",
          "properties": {
            "subnets": [
              {
                "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/subnet1"
              }
            ],
            "publicIpPrefixes": [
              {
                "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPPrefixes/PublicIpPrefix1"
              }
            ],
            "provisioningState": "Succeeded",
            "publicIpAddresses": [
              {
                "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/PublicIpAddress1"
              }
            ],
            "idleTimeoutInMinutes": 5
          }
        }
      ]
  NatGateways.List:
    description: |-
      Gets all nat gateways in a resource group.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/natgateways/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/natGateway/test-natGateway",
              "sku": {
                "name": "Standard"
              },
              "name": "test-natGateway",
              "type": "Microsoft.Network/natGateways",
              "location": "westus",
              "properties": {
                "subnets": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/subnet1"
                  }
                ],
                "publicIpPrefixes": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPPrefixes/PublicIpPrefix1"
                  }
                ],
                "provisioningState": "Succeeded",
                "publicIpAddresses": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/PublicIpAddress1"
                  }
                ],
                "idleTimeoutInMinutes": 5
              }
            },
            {
              "id": "/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/natGateway/test-natGateway2",
              "sku": {
                "name": "Standard"
              },
              "name": "test-natGateway2",
              "type": "Microsoft.Network/natGateways",
              "location": "westus",
              "properties": {
                "subnets": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/subnet1"
                  }
                ],
                "publicIpPrefixes": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/publicIPPrefixes/PublicIpPrefix1"
                  }
                ],
                "provisioningState": "Succeeded",
                "publicIpAddresses": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/publicIPAddresses/PublicIpAddress1"
                  }
                ],
                "idleTimeoutInMinutes": 5
              }
            }
          ]
        }
      ]
  NatGateways.ListAll:
    description: |-
      Gets all the Nat Gateways in a subscription.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/natgateways/listall
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/natGateways/test-natGateway",
              "sku": {
                "name": "Standard"
              },
              "name": "test-natGateway",
              "type": "Microsoft.Network/natGateways",
              "location": "westus",
              "properties": {
                "subnets": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/subnet1"
                  }
                ],
                "publicIpPrefixes": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPPrefixes/PublicIpPrefix1"
                  }
                ],
                "provisioningState": "Succeeded",
                "publicIpAddresses": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/PublicIpAddress1"
                  }
                ],
                "idleTimeoutInMinutes": 5
              }
            },
            {
              "id": "/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/natGatewayes/test-natGateway2",
              "sku": {
                "name": "Standard"
              },
              "name": "test-natGateway2",
              "type": "Microsoft.Network/natGateways",
              "location": "westus",
              "properties": {
                "subnets": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/subnet1"
                  }
                ],
                "publicIpPrefixes": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/publicIPPrefixes/PublicIpPrefix1"
                  }
                ],
                "provisioningState": "Succeeded",
                "publicIpAddresses": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/publicIPAddresses/PublicIpAddress1"
                  }
                ],
                "idleTimeoutInMinutes": 5
              }
            }
          ]
        }
      ]
  NatGateways.UpdateTags:
    description: |-
      Updates nat gateway tags.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/natgateways/updatetags
    example:
      inputs: [
        {
          "tags": {
            "tag1": "value1",
            "tag2": "value2"
          }
        }
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/natGateways/test-natGateway",
          "sku": {
            "name": "Standard"
          },
          "name": "test-natGateway",
          "tags": {
            "tag1": "value1",
            "tag2": "value2"
          },
          "type": "Microsoft.Network/natGateways",
          "location": "westus",
          "properties": {
            "subnets": [
              {
                "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/subnet1"
              }
            ],
            "publicIpPrefixes": [
              {
                "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPPrefixes/PublicIpPrefix1"
              }
            ],
            "provisioningState": "Succeeded",
            "publicIpAddresses": [
              {
                "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/PublicIpAddress1"
              }
            ],
            "idleTimeoutInMinutes": 5
          }
        }
      ]
  NetworkInterfaceInVmss.GetVirtualMachineScaleSetIpConfiguration:
    description: |-
      Get the specified network interface ip configuration in a virtual machine scale set.
    versions:
      from: 2018.10.1
      to: 2018.10.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/networkinterface%20in%20vmss/getvirtualmachinescalesetipconfiguration
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachineScaleSets/vmss1/virtualMachines/2/networkInterfaces/nic1/ipConfigurations/ip1",
          "name": "ip1",
          "properties": {
            "subnet": {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"
            },
            "primary": true,
            "privateIPAddress": "10.0.0.6",
            "provisioningState": "Succeeded",
            "privateIPAddressVersion": "IPv4",
            "privateIPAllocationMethod": "Dynamic",
            "loadBalancerInboundNatRules": [
              {
                "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb1/inboundNatRules/natPool1.2"
              }
            ],
            "loadBalancerBackendAddressPools": [
              {
                "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb1/backendAddressPools/addressPool1"
              }
            ]
          }
        }
      ]
  NetworkInterfaceInVmss.GetVirtualMachineScaleSetNetworkInterface:
    description: |-
      Get the specified network interface in a virtual machine scale set.
    versions:
      from: 2018.10.1
      to: 2018.10.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/networkinterface%20in%20vmss/getvirtualmachinescalesetnetworkinterface
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachineScaleSets/vmss1/virtualMachines/1/networkInterfaces/nic1",
          "name": "nic1",
          "properties": {
            "primary": true,
            "macAddress": "00-00-00-00-00-00",
            "dnsSettings": {
              "dnsServers": [],
              "appliedDnsServers": [],
              "internalDomainNameSuffix": "dns.cdmx.internal.cloudapp.net"
            },
            "virtualMachine": {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachineScaleSets/vmss1/virtualMachines/1"
            },
            "ipConfigurations": [
              {
                "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachineScaleSets/vmss1/virtualMachines/1/networkInterfaces/nic1/ipConfigurations/ip1",
                "name": "ip1",
                "properties": {
                  "subnet": {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"
                  },
                  "primary": true,
                  "publicIPAddress": {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachineScaleSets/vmss1/virtualMachines/1/networkInterfaces/nic1/ipConfigurations/ip1/publicIPAddresses/pub1"
                  },
                  "privateIPAddress": "10.0.0.5",
                  "provisioningState": "Succeeded",
                  "privateIPAddressVersion": "IPv4",
                  "privateIPAllocationMethod": "Dynamic",
                  "loadBalancerInboundNatRules": [
                    {
                      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb1/inboundNatRules/natPool1.1"
                    }
                  ],
                  "loadBalancerBackendAddressPools": [
                    {
                      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb1/backendAddressPools/addressPool1"
                    }
                  ]
                }
              }
            ],
            "provisioningState": "Succeeded",
            "enableIPForwarding": false,
            "networkSecurityGroup": {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nsg1"
            },
            "enableAcceleratedNetworking": false
          }
        }
      ]
  NetworkInterfaceInVmss.ListVirtualMachineScaleSetIpConfigurations:
    description: |-
      Get the specified network interface ip configuration in a virtual machine scale set.
    versions:
      from: 2018.10.1
      to: 2018.10.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/networkinterface%20in%20vmss/listvirtualmachinescalesetipconfigurations
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachineScaleSets/vmss1/virtualMachines/2/networkInterfaces/nic1/ipConfigurations/ip1",
              "name": "ip1",
              "properties": {
                "subnet": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"
                },
                "primary": true,
                "privateIPAddress": "10.0.0.6",
                "provisioningState": "Succeeded",
                "privateIPAddressVersion": "IPv4",
                "privateIPAllocationMethod": "Dynamic",
                "loadBalancerInboundNatRules": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb1/inboundNatRules/natPool1.2"
                  }
                ],
                "loadBalancerBackendAddressPools": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb1/backendAddressPools/addressPool1"
                  }
                ]
              }
            }
          ]
        }
      ]
  NetworkInterfaceInVmss.ListVirtualMachineScaleSetNetworkInterfaces:
    description: |-
      Gets all network interfaces in a virtual machine scale set.
    versions:
      from: 2018.10.1
      to: 2018.10.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/networkinterface%20in%20vmss/listvirtualmachinescalesetnetworkinterfaces
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachineScaleSets/vmss1/virtualMachines/0/networkInterfaces/nic1",
              "name": "nic1",
              "properties": {
                "primary": true,
                "macAddress": "00-00-00-00-00-00",
                "dnsSettings": {
                  "dnsServers": [],
                  "appliedDnsServers": [],
                  "internalDomainNameSuffix": "ruw4wz3grewudjsyzrxj44pxod.cdmx.internal.cloudapp.net"
                },
                "virtualMachine": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachineScaleSets/vmss1/virtualMachines/0"
                },
                "ipConfigurations": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachineScaleSets/vmss1/virtualMachines/0/networkInterfaces/nic1/ipConfigurations/ip1",
                    "name": "ip1",
                    "properties": {
                      "subnet": {
                        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"
                      },
                      "primary": true,
                      "publicIPAddress": {
                        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachineScaleSets/vmss1/virtualMachines/0/networkInterfaces/nic1/ipConfigurations/ip1/publicIPAddresses/pub1"
                      },
                      "privateIPAddress": "10.0.0.4",
                      "provisioningState": "Succeeded",
                      "privateIPAddressVersion": "IPv4",
                      "privateIPAllocationMethod": "Dynamic",
                      "loadBalancerInboundNatRules": [
                        {
                          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb1/inboundNatRules/natPool1.0"
                        }
                      ],
                      "loadBalancerBackendAddressPools": [
                        {
                          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb1/backendAddressPools/addressPool1"
                        }
                      ]
                    }
                  }
                ],
                "provisioningState": "Succeeded",
                "enableIPForwarding": false,
                "networkSecurityGroup": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nsg1"
                },
                "enableAcceleratedNetworking": false
              }
            },
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachineScaleSets/vmss1/virtualMachines/1/networkInterfaces/nic1",
              "name": "nic1",
              "properties": {
                "primary": true,
                "macAddress": "00-00-00-00-00-00",
                "dnsSettings": {
                  "dnsServers": [],
                  "appliedDnsServers": [],
                  "internalDomainNameSuffix": "ruw4wz3grewudjsyzrxj44pxod.cdmx.internal.cloudapp.net"
                },
                "virtualMachine": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachineScaleSets/vmss1/virtualMachines/1"
                },
                "ipConfigurations": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachineScaleSets/vmss1/virtualMachines/1/networkInterfaces/nic1/ipConfigurations/ip1",
                    "name": "ip1",
                    "properties": {
                      "subnet": {
                        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"
                      },
                      "primary": true,
                      "publicIPAddress": {
                        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachineScaleSets/vmss1/virtualMachines/1/networkInterfaces/nic1/ipConfigurations/ip1/publicIPAddresses/pub1"
                      },
                      "privateIPAddress": "10.0.0.5",
                      "provisioningState": "Succeeded",
                      "privateIPAddressVersion": "IPv4",
                      "privateIPAllocationMethod": "Dynamic",
                      "loadBalancerInboundNatRules": [
                        {
                          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb1/inboundNatRules/natPool1.1"
                        }
                      ],
                      "loadBalancerBackendAddressPools": [
                        {
                          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb1/backendAddressPools/addressPool1"
                        }
                      ]
                    }
                  }
                ],
                "provisioningState": "Succeeded",
                "enableIPForwarding": false,
                "networkSecurityGroup": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nsg1"
                },
                "enableAcceleratedNetworking": false
              }
            }
          ]
        }
      ]
  NetworkInterfaceInVmss.ListVirtualMachineScaleSetVmNetworkInterfaces:
    description: |-
      Gets information about all network interfaces in a virtual machine in a virtual machine scale set.
    versions:
      from: 2018.10.1
      to: 2018.10.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/networkinterface%20in%20vmss/listvirtualmachinescalesetvmnetworkinterfaces
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachineScaleSets/vmss1/virtualMachines/1/networkInterfaces/nic1",
              "name": "nic1",
              "properties": {
                "primary": true,
                "macAddress": "00-00-00-00-00-00",
                "dnsSettings": {
                  "dnsServers": [],
                  "appliedDnsServers": [],
                  "internalDomainNameSuffix": "ruw4wz3grewudjsyzrxj44pxod.cdmx.internal.cloudapp.net"
                },
                "virtualMachine": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachineScaleSets/vmss1/virtualMachines/1"
                },
                "ipConfigurations": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachineScaleSets/vmss1/virtualMachines/1/networkInterfaces/nic1/ipConfigurations/ip1",
                    "name": "ip1",
                    "properties": {
                      "subnet": {
                        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"
                      },
                      "primary": true,
                      "publicIPAddress": {
                        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachineScaleSets/vmss1/virtualMachines/1/networkInterfaces/nic1/ipConfigurations/ip1/publicIPAddresses/pub1"
                      },
                      "privateIPAddress": "10.0.0.5",
                      "provisioningState": "Succeeded",
                      "privateIPAddressVersion": "IPv4",
                      "privateIPAllocationMethod": "Dynamic",
                      "loadBalancerInboundNatRules": [
                        {
                          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb1/inboundNatRules/natPool1.1"
                        }
                      ],
                      "loadBalancerBackendAddressPools": [
                        {
                          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb1/backendAddressPools/addressPool1"
                        }
                      ]
                    }
                  }
                ],
                "provisioningState": "Succeeded",
                "enableIPForwarding": false,
                "networkSecurityGroup": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nsg1"
                },
                "enableAcceleratedNetworking": false
              }
            }
          ]
        }
      ]
  NetworkInterfaceIpConfigurations.Get:
    description: |-
      Gets the specified network interface ip configuration.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/networkinterfaceipconfigurations/get
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/networkInterfaces/mynic/ipConfigurations/ipconfig1",
          "etag": "W/\\\"00000000-0000-0000-0000-000000000000\\\"",
          "name": "ipconfig1",
          "properties": {
            "subnet": {
              "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/virtualNetworks/myVirtualNetwork/subnets/frontendSubnet"
            },
            "privateIPAddress": "10.0.1.4",
            "provisioningState": "Succeeded",
            "virtualNetworkTaps": [
              {
                "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/virtualNetworkTaps/vTAP1"
              },
              {
                "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/virtualNetworkTaps/vTAP2"
              }
            ],
            "privateIPAddressVersion": "IPv4",
            "privateIPAllocationMethod": "Dynamic",
            "loadBalancerInboundNatRules": [
              {
                "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lbname1/inboundNatRules/inbound1"
              }
            ],
            "loadBalancerBackendAddressPools": [
              {
                "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lbname1/backendAddressPools/bepool1"
              }
            ]
          }
        }
      ]
  NetworkInterfaceIpConfigurations.List:
    description: |-
      Get all ip configurations in a network interface.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/networkinterfaceipconfigurations/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/networkInterfaces/nic1/ipConfigurations/ipconfig1",
              "etag": "W/\\\"00000000-0000-0000-0000-000000000000\\\"",
              "name": "ipconfig1",
              "properties": {
                "subnet": {
                  "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/virtualNetworks/vnet12/subnets/subnet12"
                },
                "primary": true,
                "privateIPAddress": "10.0.0.4",
                "provisioningState": "Succeeded",
                "privateIPAddressVersion": "IPv4",
                "privateIPAllocationMethod": "Dynamic"
              }
            }
          ]
        }
      ]
  NetworkInterfaceLoadBalancers.List:
    description: |-
      List all load balancers in a network interface.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/networkinterfaceloadbalancers/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lbname1",
              "etag": "W/\\\"00000000-0000-0000-0000-000000000000\\\"",
              "name": "lbname1",
              "type": "Microsoft.Network/loadBalancers",
              "location": "westus",
              "properties": {
                "probes": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lbname1/probes/probe1",
                    "etag": "W/\\\"00000000-0000-0000-0000-000000000000\\\"",
                    "name": "probe1",
                    "properties": {
                      "port": 80,
                      "protocol": "Http",
                      "requestPath": "healthcheck.aspx",
                      "numberOfProbes": 2,
                      "intervalInSeconds": 15,
                      "provisioningState": "Succeeded",
                      "loadBalancingRules": [
                        {
                          "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lbname1/loadBalancingRules/rule1"
                        }
                      ]
                    }
                  }
                ],
                "resourceGuid": "00000000-0000-0000-0000-000000000000",
                "outboundRules": [],
                "inboundNatPools": [],
                "inboundNatRules": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lbname1/inboundNatRules/inbound1",
                    "etag": "W/\\\"00000000-0000-0000-0000-000000000000\\\"",
                    "name": "inbound1",
                    "properties": {
                      "protocol": "Tcp",
                      "backendPort": 3389,
                      "frontendPort": 3389,
                      "enableFloatingIP": false,
                      "provisioningState": "Succeeded",
                      "idleTimeoutInMinutes": 15,
                      "backendIPConfiguration": {
                        "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/networkInterfaces/nic1/ipConfigurations/ipconfig1"
                      },
                      "frontendIPConfiguration": {
                        "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lbname1/frontendIPConfigurations/lbfrontend"
                      }
                    }
                  }
                ],
                "provisioningState": "Succeeded",
                "loadBalancingRules": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lbname1/loadBalancingRules/rule1",
                    "etag": "W/\\\"00000000-0000-0000-0000-000000000000\\\"",
                    "name": "rule1",
                    "properties": {
                      "probe": {
                        "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lbname1/probes/probe1"
                      },
                      "protocol": "Tcp",
                      "backendPort": 80,
                      "frontendPort": 80,
                      "enableFloatingIP": false,
                      "loadDistribution": "Default",
                      "provisioningState": "Succeeded",
                      "backendAddressPool": {
                        "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lbname1/backendAddressPools/bepool1"
                      },
                      "idleTimeoutInMinutes": 15,
                      "frontendIPConfiguration": {
                        "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lbname1/frontendIPConfigurations/lbfrontend"
                      }
                    }
                  }
                ],
                "backendAddressPools": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lbname1/backendAddressPools/bepool1",
                    "etag": "W/\\\"00000000-0000-0000-0000-000000000000\\\"",
                    "name": "bepool1",
                    "properties": {
                      "provisioningState": "Succeeded",
                      "loadBalancingRules": [
                        {
                          "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lbname1/loadBalancingRules/rule1"
                        }
                      ],
                      "backendIPConfigurations": [
                        {
                          "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/networkInterfaces/nic1/ipConfigurations/ipconfig1"
                        }
                      ]
                    }
                  }
                ],
                "frontendIPConfigurations": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lbname1/frontendIPConfigurations/lbfrontend",
                    "etag": "W/\\\"00000000-0000-0000-0000-000000000000\\\"",
                    "name": "lbfrontend",
                    "properties": {
                      "inboundNatRules": [
                        {
                          "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lbname1/inboundNatRules/inbound1"
                        }
                      ],
                      "publicIPAddress": {
                        "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/publicIPAddresses/myDynamicPublicIP"
                      },
                      "provisioningState": "Succeeded",
                      "loadBalancingRules": [
                        {
                          "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/loadBalancers/lbname1/loadBalancingRules/rule1"
                        }
                      ],
                      "privateIPAllocationMethod": "Dynamic"
                    }
                  }
                ]
              }
            }
          ]
        }
      ]
  NetworkInterfacesInCloudService.GetCloudServiceNetworkInterface:
    description: |-
      Get the specified network interface in a cloud service.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/networkinterfaces%20in%20cloudservice/getcloudservicenetworkinterface
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/cloudServices/cs1/roleInstances/TestVMRole_IN_0/networkInterfaces/nic1",
          "name": "nic1",
          "properties": {
            "primary": true,
            "macAddress": "00-00-00-00-00-00",
            "dnsSettings": {
              "dnsServers": [],
              "appliedDnsServers": [],
              "internalDomainNameSuffix": "dns.cdmx.internal.cloudapp.net"
            },
            "roleInstance": {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/cloudServices/cs1/roleInstances/TestVMRole_IN_0"
            },
            "ipConfigurations": [
              {
                "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/cloudServices/cs1/roleInstances/TestVMRole_IN_0/networkInterfaces/nic1/ipConfigurations/ip1",
                "name": "ip1",
                "properties": {
                  "subnet": {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"
                  },
                  "primary": true,
                  "publicIPAddress": {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/cloudServices/cs1/roleInstances/TestVMRole_IN_0/networkInterfaces/nic1/ipConfigurations/ip1/publicIPAddresses/pub1"
                  },
                  "privateIPAddress": "10.0.0.5",
                  "provisioningState": "Succeeded",
                  "privateIPAddressVersion": "IPv4",
                  "privateIPAllocationMethod": "Dynamic",
                  "loadBalancerInboundNatRules": [
                    {
                      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb1/inboundNatRules/natPool1.1"
                    }
                  ],
                  "loadBalancerBackendAddressPools": [
                    {
                      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb1/backendAddressPools/addressPool1"
                    }
                  ]
                }
              }
            ],
            "provisioningState": "Succeeded",
            "enableIPForwarding": false,
            "networkSecurityGroup": {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nsg1"
            },
            "enableAcceleratedNetworking": false
          }
        }
      ]
  NetworkInterfacesInCloudService.ListCloudServiceNetworkInterfaces:
    description: |-
      Gets all network interfaces in a cloud service.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/networkinterfaces%20in%20cloudservice/listcloudservicenetworkinterfaces
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/cloudServices/cs1/roleInstances/TestVMRole_IN_0/networkInterfaces/nic1",
              "name": "nic1",
              "properties": {
                "primary": true,
                "macAddress": "00-00-00-00-00-00",
                "dnsSettings": {
                  "dnsServers": [],
                  "appliedDnsServers": [],
                  "internalDomainNameSuffix": "ruw4wz3grewudjsyzrxj44pxod.cdmx.internal.cloudapp.net"
                },
                "roleInstance": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/cloudServices/cs1/roleInstances/TestVMRole_IN_0"
                },
                "ipConfigurations": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/cloudServices/cs1/roleInstances/TestVMRole_IN_0/networkInterfaces/nic1/ipConfigurations/ip1",
                    "name": "ip1",
                    "properties": {
                      "subnet": {
                        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"
                      },
                      "primary": true,
                      "publicIPAddress": {
                        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/cloudServices/cs1/roleInstances/TestVMRole_IN_0/networkInterfaces/nic1/ipConfigurations/ip1/publicIPAddresses/pub1"
                      },
                      "privateIPAddress": "10.0.0.4",
                      "provisioningState": "Succeeded",
                      "privateIPAddressVersion": "IPv4",
                      "privateIPAllocationMethod": "Dynamic",
                      "loadBalancerInboundNatRules": [
                        {
                          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb1/inboundNatRules/natPool1.0"
                        }
                      ],
                      "loadBalancerBackendAddressPools": [
                        {
                          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb1/backendAddressPools/addressPool1"
                        }
                      ]
                    }
                  }
                ],
                "provisioningState": "Succeeded",
                "enableIPForwarding": false,
                "networkSecurityGroup": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nsg1"
                },
                "enableAcceleratedNetworking": false
              }
            },
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/cloudServices/cs1/roleInstances/TestVMRole_IN_1/networkInterfaces/nic1",
              "name": "nic1",
              "properties": {
                "primary": true,
                "macAddress": "00-00-00-00-00-00",
                "dnsSettings": {
                  "dnsServers": [],
                  "appliedDnsServers": [],
                  "internalDomainNameSuffix": "ruw4wz3grewudjsyzrxj44pxod.cdmx.internal.cloudapp.net"
                },
                "roleInstance": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/cloudServices/cs1/roleInstances/TestVMRole_IN_1"
                },
                "ipConfigurations": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/cloudServices/cs1/roleInstances/TestVMRole_IN_1/networkInterfaces/nic1/ipConfigurations/ip1",
                    "name": "ip1",
                    "properties": {
                      "subnet": {
                        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"
                      },
                      "primary": true,
                      "publicIPAddress": {
                        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/cloudServices/cs1/roleInstances/TestVMRole_IN_1/networkInterfaces/nic1/ipConfigurations/ip1/publicIPAddresses/pub1"
                      },
                      "privateIPAddress": "10.0.0.5",
                      "provisioningState": "Succeeded",
                      "privateIPAddressVersion": "IPv4",
                      "privateIPAllocationMethod": "Dynamic",
                      "loadBalancerInboundNatRules": [
                        {
                          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb1/inboundNatRules/natPool1.1"
                        }
                      ],
                      "loadBalancerBackendAddressPools": [
                        {
                          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb1/backendAddressPools/addressPool1"
                        }
                      ]
                    }
                  }
                ],
                "provisioningState": "Succeeded",
                "enableIPForwarding": false,
                "networkSecurityGroup": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nsg1"
                },
                "enableAcceleratedNetworking": false
              }
            }
          ]
        }
      ]
  NetworkInterfacesInCloudService.ListCloudServiceRoleInstanceNetworkInterfaces:
    description: |-
      Gets information about all network interfaces in a role instance in a cloud service.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/networkinterfaces%20in%20cloudservice/listcloudserviceroleinstancenetworkinterfaces
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/cloudServices/cs1/roleInstances/TestVMRole_IN_0/networkInterfaces/nic1",
              "name": "nic1",
              "properties": {
                "primary": true,
                "macAddress": "00-00-00-00-00-00",
                "dnsSettings": {
                  "dnsServers": [],
                  "appliedDnsServers": [],
                  "internalDomainNameSuffix": "ruw4wz3grewudjsyzrxj44pxod.cdmx.internal.cloudapp.net"
                },
                "roleInstance": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/cloudServices/cs1/roleInstances/TestVMRole_IN_0"
                },
                "ipConfigurations": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/cloudServices/cs1/roleInstances/TestVMRole_IN_0/networkInterfaces/nic1/ipConfigurations/ip1",
                    "name": "ip1",
                    "properties": {
                      "subnet": {
                        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"
                      },
                      "primary": true,
                      "publicIPAddress": {
                        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/cloudServices/cs1/roleInstances/TestVMRole_IN_0/networkInterfaces/nic1/ipConfigurations/ip1/publicIPAddresses/pub1"
                      },
                      "privateIPAddress": "10.0.0.5",
                      "provisioningState": "Succeeded",
                      "privateIPAddressVersion": "IPv4",
                      "privateIPAllocationMethod": "Dynamic",
                      "loadBalancerInboundNatRules": [
                        {
                          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb1/inboundNatRules/natPool1.1"
                        }
                      ],
                      "loadBalancerBackendAddressPools": [
                        {
                          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb1/backendAddressPools/addressPool1"
                        }
                      ]
                    }
                  }
                ],
                "provisioningState": "Succeeded",
                "enableIPForwarding": false,
                "networkSecurityGroup": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nsg1"
                },
                "enableAcceleratedNetworking": false
              }
            }
          ]
        }
      ]
  NetworkInterfaces.CreateOrUpdate:
    description: |-
      Creates or updates a network interface.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/networkinterfaces/createorupdate
    example:
      inputs: [
        {
          "location": "eastus",
          "properties": {
            "ipConfigurations": [
              {
                "name": "ipconfig1",
                "properties": {
                  "subnet": {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/rg1-vnet/subnets/default"
                  },
                  "publicIPAddress": {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/test-ip"
                  }
                }
              }
            ],
            "enableAcceleratedNetworking": true
          }
        }
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/test-nic",
          "name": "test-nic",
          "type": "Microsoft.Network/networkInterfaces",
          "location": "eastus",
          "properties": {
            "dnsSettings": {
              "dnsServers": [],
              "appliedDnsServers": []
            },
            "ipConfigurations": [
              {
                "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/test-nic/ipConfigurations/ipconfig1",
                "name": "ipconfig1",
                "properties": {
                  "subnet": {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/rg1-vnet/subnets/default"
                  },
                  "primary": true,
                  "publicIPAddress": {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/test-ip"
                  },
                  "privateIPAddress": "172.20.2.4",
                  "provisioningState": "Succeeded",
                  "privateIPAddressVersion": "IPv4",
                  "privateIPAllocationMethod": "Dynamic"
                }
              }
            ],
            "provisioningState": "Succeeded",
            "enableIPForwarding": false,
            "enableAcceleratedNetworking": true
          }
        }
      ]
  NetworkInterfaces.Delete:
    description: |-
      Deletes the specified network interface.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/networkinterfaces/delete
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  NetworkInterfaces.Get:
    description: |-
      Gets information about the specified network interface.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/networkinterfaces/get
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/test-nic",
          "name": "test-nic",
          "type": "Microsoft.Network/networkInterfaces",
          "location": "eastus",
          "properties": {
            "primary": true,
            "macAddress": "00-0D-3A-1B-C7-21",
            "dnsSettings": {
              "dnsServers": [],
              "appliedDnsServers": [],
              "internalDomainNameSuffix": "test.bx.internal.cloudapp.net"
            },
            "virtualMachine": {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachines/vm1"
            },
            "ipConfigurations": [
              {
                "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/test-nic/ipConfigurations/ipconfig1",
                "name": "ipconfig1",
                "properties": {
                  "subnet": {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/rg1-vnet/subnets/default"
                  },
                  "primary": true,
                  "publicIPAddress": {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/test-ip"
                  },
                  "privateIPAddress": "172.20.2.4",
                  "provisioningState": "Succeeded",
                  "privateIPAddressVersion": "IPv4",
                  "privateIPAllocationMethod": "Dynamic"
                }
              }
            ],
            "dscpConfiguration": {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/dscpConfiguration/mydscpconfiguration"
            },
            "provisioningState": "Succeeded",
            "enableIPForwarding": false,
            "networkSecurityGroup": {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nsg"
            },
            "enableAcceleratedNetworking": true
          }
        }
      ]
  NetworkInterfaces.GetEffectiveRouteTable:
    description: |-
      Gets all route tables applied to a network interface.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/networkinterfaces/geteffectiveroutetable
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "state": "Active",
              "source": "Default",
              "nextHopType": "VnetLocal",
              "addressPrefix": [
                "172.20.2.0/24"
              ],
              "nextHopIpAddress": []
            },
            {
              "state": "Active",
              "source": "Default",
              "nextHopType": "Internet",
              "addressPrefix": [
                "0.0.0.0/0"
              ],
              "nextHopIpAddress": []
            },
            {
              "state": "Active",
              "source": "Default",
              "nextHopType": "None",
              "addressPrefix": [
                "10.0.0.0/8"
              ],
              "nextHopIpAddress": []
            },
            {
              "state": "Active",
              "source": "Default",
              "nextHopType": "None",
              "addressPrefix": [
                "100.64.0.0/10"
              ],
              "nextHopIpAddress": []
            },
            {
              "state": "Active",
              "source": "Default",
              "nextHopType": "None",
              "addressPrefix": [
                "172.16.0.0/12"
              ],
              "nextHopIpAddress": []
            },
            {
              "state": "Active",
              "source": "Default",
              "nextHopType": "None",
              "addressPrefix": [
                "192.168.0.0/16"
              ],
              "nextHopIpAddress": []
            }
          ]
        }
      ]
  NetworkInterfaces.List:
    description: |-
      Gets all network interfaces in a resource group.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/networkinterfaces/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/test-nic",
              "name": "test-nic",
              "type": "Microsoft.Network/networkInterfaces",
              "location": "eastus",
              "properties": {
                "primary": true,
                "macAddress": "00-0D-3A-1B-C7-21",
                "dnsSettings": {
                  "dnsServers": [],
                  "appliedDnsServers": [],
                  "internalDomainNameSuffix": "test.bx.internal.cloudapp.net"
                },
                "virtualMachine": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachines/vm1"
                },
                "ipConfigurations": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/test-nic/ipConfigurations/ipconfig1",
                    "name": "ipconfig1",
                    "properties": {
                      "subnet": {
                        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/rg1-vnet/subnets/default"
                      },
                      "primary": true,
                      "publicIPAddress": {
                        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/test-ip"
                      },
                      "privateIPAddress": "172.20.2.4",
                      "provisioningState": "Succeeded",
                      "privateIPAddressVersion": "IPv4",
                      "privateIPAllocationMethod": "Dynamic"
                    }
                  }
                ],
                "provisioningState": "Succeeded",
                "enableIPForwarding": false,
                "networkSecurityGroup": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nsg"
                },
                "enableAcceleratedNetworking": true
              }
            },
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/test-nic2",
              "name": "test-nic2",
              "type": "Microsoft.Network/networkInterfaces",
              "location": "eastus",
              "properties": {
                "dnsSettings": {
                  "dnsServers": [],
                  "appliedDnsServers": []
                },
                "ipConfigurations": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/test-nic2/ipConfigurations/ipconfig1",
                    "name": "ipconfig1",
                    "properties": {
                      "subnet": {
                        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/rg1-vnet2/subnets/default"
                      },
                      "primary": true,
                      "publicIPAddress": {
                        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/test-ip2"
                      },
                      "privateIPAddress": "172.20.2.4",
                      "provisioningState": "Succeeded",
                      "privateIPAddressVersion": "IPv4",
                      "privateIPAllocationMethod": "Dynamic"
                    }
                  }
                ],
                "provisioningState": "Succeeded",
                "enableIPForwarding": false,
                "enableAcceleratedNetworking": true
              }
            }
          ]
        }
      ]
  NetworkInterfaces.ListAll:
    description: |-
      Gets all network interfaces in a subscription.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/networkinterfaces/listall
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/test-nic",
              "name": "test-nic",
              "type": "Microsoft.Network/networkInterfaces",
              "location": "eastus",
              "properties": {
                "primary": true,
                "macAddress": "00-0D-3A-1B-C7-21",
                "dnsSettings": {
                  "dnsServers": [],
                  "appliedDnsServers": [],
                  "internalDomainNameSuffix": "test.bx.internal.cloudapp.net"
                },
                "virtualMachine": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachines/vm1"
                },
                "ipConfigurations": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/test-nic/ipConfigurations/ipconfig1",
                    "name": "ipconfig1",
                    "properties": {
                      "subnet": {
                        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/rg1-vnet/subnets/default"
                      },
                      "primary": true,
                      "publicIPAddress": {
                        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/test-ip"
                      },
                      "privateIPAddress": "172.20.2.4",
                      "provisioningState": "Succeeded",
                      "privateIPAddressVersion": "IPv4",
                      "privateIPAllocationMethod": "Dynamic"
                    }
                  }
                ],
                "provisioningState": "Succeeded",
                "enableIPForwarding": false,
                "networkSecurityGroup": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nsg"
                },
                "enableAcceleratedNetworking": true
              }
            },
            {
              "id": "/subscriptions/subid/resourceGroups/rgnew/providers/Microsoft.Network/networkInterfaces/test-nic2",
              "name": "test-nic2",
              "type": "Microsoft.Network/networkInterfaces",
              "location": "eastus",
              "properties": {
                "dnsSettings": {
                  "dnsServers": [],
                  "appliedDnsServers": []
                },
                "ipConfigurations": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rgnew/providers/Microsoft.Network/networkInterfaces/test-nic2/ipConfigurations/ipconfig1",
                    "name": "ipconfig1",
                    "properties": {
                      "subnet": {
                        "id": "/subscriptions/subid/resourceGroups/rgnew/providers/Microsoft.Network/virtualNetworks/rgnew-vnet2/subnets/default"
                      },
                      "primary": true,
                      "publicIPAddress": {
                        "id": "/subscriptions/subid/resourceGroups/rgnew/providers/Microsoft.Network/publicIPAddresses/test-ip2"
                      },
                      "privateIPAddress": "172.20.2.4",
                      "provisioningState": "Succeeded",
                      "privateIPAddressVersion": "IPv4",
                      "privateIPAllocationMethod": "Dynamic"
                    }
                  }
                ],
                "provisioningState": "Succeeded",
                "enableIPForwarding": false,
                "enableAcceleratedNetworking": true
              }
            }
          ]
        }
      ]
  NetworkInterfaces.ListEffectiveNetworkSecurityGroups:
    description: |-
      Gets all network security groups applied to a network interface.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/networkinterfaces/listeffectivenetworksecuritygroups
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "association": {
                "subnet": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/rg1-vnet/subnets/default"
                },
                "networkInterface": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/nic1"
                }
              },
              "networkSecurityGroup": {
                "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/test-nsg"
              },
              "effectiveSecurityRules": [
                {
                  "name": "securityRules/rule1",
                  "access": "Allow",
                  "priority": 234,
                  "protocol": "Tcp",
                  "direction": "Inbound",
                  "sourcePortRange": "456-456",
                  "sourceAddressPrefix": "0.0.0.0/32",
                  "destinationPortRange": "6579-6579",
                  "destinationAddressPrefix": "0.0.0.0/32"
                },
                {
                  "name": "securityRules/default-allow-rdp",
                  "access": "Allow",
                  "priority": 1000,
                  "protocol": "Tcp",
                  "direction": "Inbound",
                  "sourcePortRange": "0-65535",
                  "sourceAddressPrefix": "1.1.1.1/32",
                  "destinationPortRange": "3389-3389",
                  "destinationAddressPrefix": "0.0.0.0/0"
                },
                {
                  "name": "defaultSecurityRules/AllowInternetOutBound",
                  "access": "Allow",
                  "priority": 65001,
                  "protocol": "All",
                  "direction": "Outbound",
                  "sourcePortRange": "0-65535",
                  "sourceAddressPrefix": "0.0.0.0/0",
                  "destinationPortRange": "0-65535",
                  "destinationAddressPrefix": "Internet",
                  "expandedDestinationAddressPrefix": [
                    "32.0.0.0/3",
                    "4.0.0.0/6",
                    "2.0.0.0/7",
                    "1.0.0.0/8"
                  ]
                }
              ]
            }
          ]
        }
      ]
  NetworkInterfaces.UpdateTags:
    description: |-
      Updates a network interface tags.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/networkinterfaces/updatetags
    example:
      inputs: [
        {
          "tags": {
            "tag1": "value1",
            "tag2": "value2"
          }
        }
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/test-nic",
          "name": "test-nic",
          "tags": {
            "tag1": "value1",
            "tag2": "value2"
          },
          "type": "Microsoft.Network/networkInterfaces",
          "location": "eastus",
          "properties": {
            "dnsSettings": {
              "dnsServers": [],
              "appliedDnsServers": []
            },
            "ipConfigurations": [
              {
                "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/test-nic/ipConfigurations/ipconfig1",
                "name": "ipconfig1",
                "properties": {
                  "subnet": {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/rg1-vnet/subnets/default"
                  },
                  "primary": true,
                  "publicIPAddress": {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/test-ip"
                  },
                  "privateIPAddress": "172.20.2.4",
                  "provisioningState": "Succeeded",
                  "privateIPAddressVersion": "IPv4",
                  "privateIPAllocationMethod": "Dynamic"
                }
              }
            ],
            "provisioningState": "Succeeded",
            "enableIPForwarding": false,
            "enableAcceleratedNetworking": true
          }
        }
      ]
  NetworkInterfaceTapConfigurations.CreateOrUpdate:
    description: |-
      Creates or updates a Tap configuration in the specified NetworkInterface.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/networkinterfacetapconfigurations/createorupdate
    example:
      inputs: [
        {
          "properties": {
            "virtualNetworkTap": {
              "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/virtualNetworkTaps/testvtap"
            }
          }
        }
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/networkInterfaces/mynic/tapConfigurations/tapConfiguration1",
          "etag": "etag",
          "name": "tapConfiguration1",
          "type": "Microsoft.Network/networkInterfaces/tapConfigurations",
          "properties": {
            "provisioningState": "Succeded",
            "virtualNetworkTap": {
              "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/virtualNetworkTaps/testvtap"
            }
          }
        }
      ]
  NetworkInterfaceTapConfigurations.Delete:
    description: |-
      Deletes the specified tap configuration from the NetworkInterface.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/networkinterfacetapconfigurations/delete
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  NetworkInterfaceTapConfigurations.Get:
    description: |-
      Get the specified tap configuration on a network interface.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/networkinterfacetapconfigurations/get
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/networkInterfaces/mynic/tapConfigurations/tapConfiguration1",
          "etag": "etag",
          "name": "tapConfiguration1",
          "type": "Microsoft.Network/networkInterfaces/tapConfigurations",
          "properties": {
            "provisioningState": "Succeded",
            "virtualNetworkTap": {
              "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/virtualNetworkTaps/testvtap"
            }
          }
        }
      ]
  NetworkInterfaceTapConfigurations.List:
    description: |-
      Get all Tap configurations in a network interface.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/networkinterfacetapconfigurations/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/networkInterfaces/mynic/tapConfigurations/tapConfiguration1",
              "etag": "etag",
              "name": "tapConfiguration1",
              "type": "Microsoft.Network/networkInterfaces/tapConfigurations",
              "properties": {
                "provisioningState": "Succeded",
                "virtualNetworkTap": {
                  "id": "/subscriptions/subid/resourceGroups/testrg/providers/Microsoft.Network/virtualNetworkTaps/testvtap"
                }
              }
            }
          ]
        }
      ]
  NetworkProfiles.CreateOrUpdate:
    description: |-
      Creates or updates a network profile.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/networkprofiles/createorupdate
    example:
      inputs: [
        {
          "location": "westus",
          "properties": {
            "containerNetworkInterfaceConfigurations": [
              {
                "name": "eth1",
                "properties": {
                  "ipConfigurations": [
                    {
                      "name": "ipconfig1",
                      "properties": {
                        "subnet": {
                          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/networkProfileVnet/subnets/networkProfileSubnet1"
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkProfiles/networkProfile1",
          "etag": "W/\"4d705a71-752f-4e0a-8057-c02b125b1c08\"",
          "name": "networkProfile1",
          "type": "Microsoft.Network/networkProfiles",
          "location": "westus",
          "properties": {
            "resourceGuid": "1570d8b6-ab8a-4ad2-81d6-d2799b429cbf",
            "provisioningState": "Succeeded",
            "containerNetworkInterfaces": [],
            "containerNetworkInterfaceConfigurations": [
              {
                "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkProfiles/networkProfile1/containerNetworkInterfaceConfigurations/eth1",
                "etag": "W/\"4d705a71-752f-4e0a-8057-c02b125b1c08\"",
                "name": "eth1",
                "type": "Microsoft.Network/networkProfiles/containerNetworkInterfaceConfigurations",
                "properties": {
                  "ipConfigurations": [
                    {
                      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkProfiles/networkProfile1/containerNetworkInterfaceConfigurations/eth1/ipConfigurations/ipconfig1",
                      "etag": "W/\"4d705a71-752f-4e0a-8057-c02b125b1c08\"",
                      "name": "ipconfig1",
                      "type": "Microsoft.Network/networkProfiles/containerNetworkInterfaceConfigurations/ipConfigurations",
                      "properties": {
                        "subnet": {
                          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/networkProfileVnet/subnets/networkProfileSubnet1"
                        },
                        "provisioningState": "Succeeded"
                      }
                    }
                  ],
                  "provisioningState": "Succeeded"
                }
              }
            ]
          }
        }
      ]
  NetworkProfiles.Delete:
    description: |-
      Deletes the specified network profile.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/networkprofiles/delete
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  NetworkProfiles.Get:
    description: |-
      Gets the specified network profile in a specified resource group.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/networkprofiles/get
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkProfiles/networkProfile1",
          "etag": "W/\"4d705a71-752f-4e0a-8057-c02b125b1c08\"",
          "name": "networkProfile1",
          "type": "Microsoft.Network/networkProfiles",
          "location": "centraluseuap",
          "properties": {
            "resourceGuid": "1570d8b6-ab8a-4ad2-81d6-d2799b429cbf",
            "provisioningState": "Succeeded",
            "containerNetworkInterfaces": [],
            "containerNetworkInterfaceConfigurations": [
              {
                "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkProfiles/networkProfile1/containerNetworkInterfaceConfigurations/eth0",
                "etag": "W/\"4d705a71-752f-4e0a-8057-c02b125b1c08\"",
                "name": "eth0",
                "type": "Microsoft.Network/networkProfiles/containerNetworkInterfaceConfigurations",
                "properties": {
                  "ipConfigurations": [
                    {
                      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkProfiles/networkProfile1/containerNetworkInterfaceConfigurations/eth0/ipConfigurations/ipconfigprofile1",
                      "etag": "W/\"4d705a71-752f-4e0a-8057-c02b125b1c08\"",
                      "name": "ipconfigprofile1",
                      "type": "Microsoft.Network/networkProfiles/containerNetworkInterfaceConfigurations/ipConfigurations",
                      "properties": {
                        "subnet": {
                          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/networkProfileVnet/subnets/networkProfileSubnet1"
                        },
                        "provisioningState": "Succeeded"
                      }
                    },
                    {
                      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkProfiles/networkProfile1/containerNetworkInterfaceConfigurations/eth0/ipConfigurations/ipconfigprofile2",
                      "etag": "W/\"4d705a71-752f-4e0a-8057-c02b125b1c08\"",
                      "name": "ipconfigprofile2",
                      "type": "Microsoft.Network/networkProfiles/containerNetworkInterfaceConfigurations/ipConfigurations",
                      "properties": {
                        "subnet": {
                          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/networkProfileVnet/subnets/networkProfileSubnet1"
                        },
                        "provisioningState": "Succeeded"
                      }
                    }
                  ],
                  "provisioningState": "Succeeded"
                }
              },
              {
                "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkProfiles/networkProfile1/containerNetworkInterfaceConfigurations/eth1",
                "etag": "W/\"4d705a71-752f-4e0a-8057-c02b125b1c08\"",
                "name": "eth1",
                "type": "Microsoft.Network/networkProfiles/containerNetworkInterfaceConfigurations",
                "properties": {
                  "ipConfigurations": [
                    {
                      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkProfiles/networkProfile1/containerNetworkInterfaceConfigurations/eth1/ipConfigurations/ipconfigprofile3",
                      "etag": "W/\"4d705a71-752f-4e0a-8057-c02b125b1c08\"",
                      "name": "ipconfigprofile3",
                      "type": "Microsoft.Network/networkProfiles/containerNetworkInterfaceConfigurations/ipConfigurations",
                      "properties": {
                        "subnet": {
                          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/networkProfileVnet/subnets/networkProfileSubnet1"
                        },
                        "provisioningState": "Succeeded"
                      }
                    }
                  ],
                  "provisioningState": "Succeeded"
                }
              }
            ]
          }
        }
      ]
  NetworkProfiles.List:
    description: |-
      Gets all network profiles in a resource group.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/networkprofiles/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkProfiles/networkProfile1",
              "name": "networkProfile1",
              "type": "Microsoft.Network/networkProfiles",
              "location": "centraluseuap",
              "properties": {
                "resourceGuid": "1570d8b6-ab8a-4ad2-81d6-d2799b429cbf",
                "provisioningState": "Succeeded",
                "containerNetworkInterfaces": [],
                "containerNetworkInterfaceConfigurations": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkProfiles/networkProfile1/containerNetworkInterfaceConfigurations/eth0",
                    "etag": "W/\"4d705a71-752f-4e0a-8057-c02b125b1c08\"",
                    "name": "eth0",
                    "type": "Microsoft.Network/networkProfiles/containerNetworkInterfaceConfigurations",
                    "properties": {
                      "ipConfigurations": [
                        {
                          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkProfiles/networkProfile1/containerNetworkInterfaceConfigurations/eth0/ipConfigurations/ipconfigprofile1",
                          "etag": "W/\"4d705a71-752f-4e0a-8057-c02b125b1c08\"",
                          "name": "ipconfigprofile1",
                          "type": "Microsoft.Network/networkProfiles/containerNetworkInterfaceConfigurations/ipConfigurations",
                          "properties": {
                            "subnet": {
                              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/networkProfileVnet/subnets/networkProfileSubnet1"
                            },
                            "provisioningState": "Succeeded"
                          }
                        },
                        {
                          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkProfiles/networkProfile1/containerNetworkInterfaceConfigurations/eth0/ipConfigurations/ipconfigprofile2",
                          "etag": "W/\"4d705a71-752f-4e0a-8057-c02b125b1c08\"",
                          "name": "ipconfigprofile2",
                          "type": "Microsoft.Network/networkProfiles/containerNetworkInterfaceConfigurations/ipConfigurations",
                          "properties": {
                            "subnet": {
                              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/networkProfileVnet/subnets/networkProfileSubnet1"
                            },
                            "provisioningState": "Succeeded"
                          }
                        }
                      ],
                      "provisioningState": "Succeeded"
                    }
                  }
                ]
              }
            },
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkProfiles/networkProfile2",
              "name": "networkProfile2",
              "type": "Microsoft.Network/networkProfiles",
              "location": "centraluseuap",
              "properties": {
                "containerNetworkInterfaces": [],
                "containerNetworkInterfaceConfigurations": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkProfiles/networkProfile1/containerNetworkInterfaceConfigurations/eth1",
                    "etag": "W/\"4d705a71-752f-4e0a-8057-c02b125b1c08\"",
                    "name": "eth1",
                    "type": "Microsoft.Network/networkProfiles/containerNetworkInterfaceConfigurations",
                    "properties": {
                      "ipConfigurations": [
                        {
                          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkProfiles/networkProfile1/containerNetworkInterfaceConfigurations/eth1/ipConfigurations/ipconfigprofile3",
                          "etag": "W/\"4d705a71-752f-4e0a-8057-c02b125b1c08\"",
                          "name": "ipconfigprofile3",
                          "type": "Microsoft.Network/networkProfiles/containerNetworkInterfaceConfigurations/ipConfigurations",
                          "properties": {
                            "subnet": {
                              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/networkProfileVnet/subnets/networkProfileSubnet1"
                            },
                            "provisioningState": "Succeeded"
                          }
                        }
                      ],
                      "provisioningState": "Succeeded"
                    }
                  }
                ]
              }
            }
          ]
        }
      ]
  NetworkProfiles.ListAll:
    description: |-
      Gets all the network profiles in a subscription.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/networkprofiles/listall
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkProfiles/networkProfile1",
              "name": "networkProfile1",
              "type": "Microsoft.Network/networkProfiles",
              "location": "centraluseuap",
              "properties": {
                "resourceGuid": "1570d8b6-ab8a-4ad2-81d6-d2799b429cbf",
                "provisioningState": "Succeeded",
                "containerNetworkInterfaces": [],
                "containerNetworkInterfaceConfigurations": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkProfiles/networkProfile1/containerNetworkInterfaceConfigurations/eth0",
                    "etag": "W/\"4d705a71-752f-4e0a-8057-c02b125b1c08\"",
                    "name": "eth0",
                    "type": "Microsoft.Network/networkProfiles/containerNetworkInterfaceConfigurations",
                    "properties": {
                      "ipConfigurations": [
                        {
                          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkProfiles/networkProfile1/containerNetworkInterfaceConfigurations/eth0/ipConfigurations/ipconfigprofile1",
                          "etag": "W/\"4d705a71-752f-4e0a-8057-c02b125b1c08\"",
                          "name": "ipconfigprofile1",
                          "type": "Microsoft.Network/networkProfiles/containerNetworkInterfaceConfigurations/ipConfigurations",
                          "properties": {
                            "subnet": {
                              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/networkProfileVnet/subnets/networkProfileSubnet1"
                            },
                            "provisioningState": "Succeeded"
                          }
                        }
                      ],
                      "provisioningState": "Succeeded"
                    }
                  }
                ]
              }
            },
            {
              "id": "/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/networkProfiles/networkProfile2",
              "name": "networkProfile2",
              "type": "Microsoft.Network/networkProfiles",
              "location": "centraluseuap",
              "properties": {
                "containerNetworkInterfaces": [],
                "containerNetworkInterfaceConfigurations": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/networkProfiles/networkProfile1/containerNetworkInterfaceConfigurations/eth1",
                    "etag": "W/\"4d705a71-752f-4e0a-8057-c02b125b1c08\"",
                    "name": "eth1",
                    "type": "Microsoft.Network/networkProfiles/containerNetworkInterfaceConfigurations",
                    "properties": {
                      "ipConfigurations": [
                        {
                          "id": "/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/networkProfiles/networkProfile1/containerNetworkInterfaceConfigurations/eth1/ipConfigurations/ipconfigprofile3",
                          "etag": "W/\"4d705a71-752f-4e0a-8057-c02b125b1c08\"",
                          "name": "ipconfigprofile3",
                          "type": "Microsoft.Network/networkProfiles/containerNetworkInterfaceConfigurations/ipConfigurations",
                          "properties": {
                            "subnet": {
                              "id": "/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/virtualNetworks/networkProfileVnet/subnets/networkProfileSubnet1"
                            },
                            "provisioningState": "Succeeded"
                          }
                        }
                      ],
                      "provisioningState": "Succeeded"
                    }
                  }
                ]
              }
            }
          ]
        }
      ]
  NetworkProfiles.UpdateTags:
    description: |-
      Updates network profile tags.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/networkprofiles/updatetags
    example:
      inputs: [
        {
          "tags": {
            "tag1": "value1",
            "tag2": "value2"
          }
        }
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/test-np",
          "name": "test-np",
          "tags": {
            "tag1": "value1",
            "tag2": "value2"
          },
          "type": "Microsoft.Network/networkProfiles",
          "location": "centraluseuap",
          "properties": {
            "resourceGuid": "1570d8b6-ab8a-4ad2-81d6-d2799b429cbf",
            "provisioningState": "Succeeded",
            "containerNetworkInterfaces": [],
            "containerNetworkInterfaceConfigurations": [
              {
                "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkProfiles/networkProfile1/containerNetworkInterfaceConfigurations/eth0",
                "etag": "W/\"4d705a71-752f-4e0a-8057-c02b125b1c08\"",
                "name": "eth0",
                "type": "Microsoft.Network/networkProfiles/containerNetworkInterfaceConfigurations",
                "properties": {
                  "ipConfigurations": [
                    {
                      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkProfiles/networkProfile1/containerNetworkInterfaceConfigurations/eth0/ipConfigurations/ipconfigprofile1",
                      "etag": "W/\"4d705a71-752f-4e0a-8057-c02b125b1c08\"",
                      "name": "ipconfigprofile1",
                      "type": "Microsoft.Network/networkProfiles/containerNetworkInterfaceConfigurations/ipConfigurations",
                      "properties": {
                        "subnet": {
                          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/networkProfileVnet/subnets/networkProfileSubnet1"
                        },
                        "provisioningState": "Succeeded"
                      }
                    }
                  ],
                  "provisioningState": "Succeeded"
                }
              }
            ]
          }
        }
      ]
  NetworkSecurityGroups.CreateOrUpdate:
    description: |-
      Creates or updates a network security group in the specified resource group.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/networksecuritygroups/createorupdate
    example:
      inputs: [
        {
          "location": "eastus"
        }
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg",
          "name": "testnsg",
          "type": "Microsoft.Network/networkSecurityGroups",
          "location": "eastus",
          "properties": {
            "securityRules": [],
            "provisioningState": "Succeeded",
            "defaultSecurityRules": [
              {
                "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/AllowVnetInBound",
                "name": "AllowVnetInBound",
                "properties": {
                  "access": "Allow",
                  "priority": 65000,
                  "protocol": "*",
                  "direction": "Inbound",
                  "description": "Allow inbound traffic from all VMs in VNET",
                  "sourcePortRange": "*",
                  "provisioningState": "Succeeded",
                  "sourceAddressPrefix": "VirtualNetwork",
                  "destinationPortRange": "*",
                  "destinationAddressPrefix": "VirtualNetwork"
                }
              },
              {
                "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/AllowAzureLoadBalancerInBound",
                "name": "AllowAzureLoadBalancerInBound",
                "properties": {
                  "access": "Allow",
                  "priority": 65001,
                  "protocol": "*",
                  "direction": "Inbound",
                  "description": "Allow inbound traffic from azure load balancer",
                  "sourcePortRange": "*",
                  "provisioningState": "Succeeded",
                  "sourceAddressPrefix": "AzureLoadBalancer",
                  "destinationPortRange": "*",
                  "destinationAddressPrefix": "*"
                }
              },
              {
                "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/DenyAllInBound",
                "name": "DenyAllInBound",
                "properties": {
                  "access": "Deny",
                  "priority": 65500,
                  "protocol": "*",
                  "direction": "Inbound",
                  "description": "Deny all inbound traffic",
                  "sourcePortRange": "*",
                  "provisioningState": "Succeeded",
                  "sourceAddressPrefix": "*",
                  "destinationPortRange": "*",
                  "destinationAddressPrefix": "*"
                }
              },
              {
                "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/AllowVnetOutBound",
                "name": "AllowVnetOutBound",
                "properties": {
                  "access": "Allow",
                  "priority": 65000,
                  "protocol": "*",
                  "direction": "Outbound",
                  "description": "Allow outbound traffic from all VMs to all VMs in VNET",
                  "sourcePortRange": "*",
                  "provisioningState": "Succeeded",
                  "sourceAddressPrefix": "VirtualNetwork",
                  "destinationPortRange": "*",
                  "destinationAddressPrefix": "VirtualNetwork"
                }
              },
              {
                "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/AllowInternetOutBound",
                "name": "AllowInternetOutBound",
                "properties": {
                  "access": "Allow",
                  "priority": 65001,
                  "protocol": "*",
                  "direction": "Outbound",
                  "description": "Allow outbound traffic from all VMs to Internet",
                  "sourcePortRange": "*",
                  "provisioningState": "Succeeded",
                  "sourceAddressPrefix": "*",
                  "destinationPortRange": "*",
                  "destinationAddressPrefix": "Internet"
                }
              },
              {
                "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/DenyAllOutBound",
                "name": "DenyAllOutBound",
                "properties": {
                  "access": "Deny",
                  "priority": 65500,
                  "protocol": "*",
                  "direction": "Outbound",
                  "description": "Deny all outbound traffic",
                  "sourcePortRange": "*",
                  "provisioningState": "Succeeded",
                  "sourceAddressPrefix": "*",
                  "destinationPortRange": "*",
                  "destinationAddressPrefix": "*"
                }
              }
            ]
          }
        }
      ]
  NetworkSecurityGroups.Delete:
    description: |-
      Deletes the specified network security group.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/networksecuritygroups/delete
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  NetworkSecurityGroups.Get:
    description: |-
      Gets the specified network security group.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/networksecuritygroups/get
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg",
          "name": "testnsg",
          "type": "Microsoft.Network/networkSecurityGroups",
          "location": "westus",
          "properties": {
            "securityRules": [
              {
                "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/securityRules/rule1",
                "name": "rule1",
                "properties": {
                  "access": "Allow",
                  "priority": 130,
                  "protocol": "*",
                  "direction": "Inbound",
                  "sourcePortRange": "*",
                  "provisioningState": "Succeeded",
                  "sourceAddressPrefix": "*",
                  "destinationPortRange": "80",
                  "destinationAddressPrefix": "*"
                }
              }
            ],
            "provisioningState": "Succeeded",
            "defaultSecurityRules": [
              {
                "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/AllowVnetInBound",
                "name": "AllowVnetInBound",
                "properties": {
                  "access": "Allow",
                  "priority": 65000,
                  "protocol": "*",
                  "direction": "Inbound",
                  "description": "Allow inbound traffic from all VMs in VNET",
                  "sourcePortRange": "*",
                  "provisioningState": "Succeeded",
                  "sourceAddressPrefix": "VirtualNetwork",
                  "destinationPortRange": "*",
                  "destinationAddressPrefix": "VirtualNetwork"
                }
              },
              {
                "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/AllowAzureLoadBalancerInBound",
                "name": "AllowAzureLoadBalancerInBound",
                "properties": {
                  "access": "Allow",
                  "priority": 65001,
                  "protocol": "*",
                  "direction": "Inbound",
                  "description": "Allow inbound traffic from azure load balancer",
                  "sourcePortRange": "*",
                  "provisioningState": "Succeeded",
                  "sourceAddressPrefix": "AzureLoadBalancer",
                  "destinationPortRange": "*",
                  "destinationAddressPrefix": "*"
                }
              },
              {
                "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/DenyAllInBound",
                "name": "DenyAllInBound",
                "properties": {
                  "access": "Deny",
                  "priority": 65500,
                  "protocol": "*",
                  "direction": "Inbound",
                  "description": "Deny all inbound traffic",
                  "sourcePortRange": "*",
                  "provisioningState": "Succeeded",
                  "sourceAddressPrefix": "*",
                  "destinationPortRange": "*",
                  "destinationAddressPrefix": "*"
                }
              },
              {
                "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/AllowVnetOutBound",
                "name": "AllowVnetOutBound",
                "properties": {
                  "access": "Allow",
                  "priority": 65000,
                  "protocol": "*",
                  "direction": "Outbound",
                  "description": "Allow outbound traffic from all VMs to all VMs in VNET",
                  "sourcePortRange": "*",
                  "provisioningState": "Succeeded",
                  "sourceAddressPrefix": "VirtualNetwork",
                  "destinationPortRange": "*",
                  "destinationAddressPrefix": "VirtualNetwork"
                }
              },
              {
                "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/AllowInternetOutBound",
                "name": "AllowInternetOutBound",
                "properties": {
                  "access": "Allow",
                  "priority": 65001,
                  "protocol": "*",
                  "direction": "Outbound",
                  "description": "Allow outbound traffic from all VMs to Internet",
                  "sourcePortRange": "*",
                  "provisioningState": "Succeeded",
                  "sourceAddressPrefix": "*",
                  "destinationPortRange": "*",
                  "destinationAddressPrefix": "Internet"
                }
              },
              {
                "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/DenyAllOutBound",
                "name": "DenyAllOutBound",
                "properties": {
                  "access": "Deny",
                  "priority": 65500,
                  "protocol": "*",
                  "direction": "Outbound",
                  "description": "Deny all outbound traffic",
                  "sourcePortRange": "*",
                  "provisioningState": "Succeeded",
                  "sourceAddressPrefix": "*",
                  "destinationPortRange": "*",
                  "destinationAddressPrefix": "*"
                }
              }
            ]
          }
        }
      ]
  NetworkSecurityGroups.List:
    description: |-
      Gets all network security groups in a resource group.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/networksecuritygroups/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nsg1",
              "name": "nsg1",
              "type": "Microsoft.Network/networkSecurityGroups",
              "location": "westus",
              "properties": {
                "securityRules": [],
                "provisioningState": "Succeeded",
                "defaultSecurityRules": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nsg1/defaultSecurityRules/AllowVnetInBound",
                    "name": "AllowVnetInBound",
                    "properties": {
                      "access": "Allow",
                      "priority": 65000,
                      "protocol": "*",
                      "direction": "Inbound",
                      "description": "Allow inbound traffic from all VMs in VNET",
                      "sourcePortRange": "*",
                      "provisioningState": "Succeeded",
                      "sourceAddressPrefix": "VirtualNetwork",
                      "destinationPortRange": "*",
                      "destinationAddressPrefix": "VirtualNetwork"
                    }
                  },
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nsg1/defaultSecurityRules/AllowAzureLoadBalancerInBound",
                    "name": "AllowAzureLoadBalancerInBound",
                    "properties": {
                      "access": "Allow",
                      "priority": 65001,
                      "protocol": "*",
                      "direction": "Inbound",
                      "description": "Allow inbound traffic from azure load balancer",
                      "sourcePortRange": "*",
                      "provisioningState": "Succeeded",
                      "sourceAddressPrefix": "AzureLoadBalancer",
                      "destinationPortRange": "*",
                      "destinationAddressPrefix": "*"
                    }
                  },
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nsg1/defaultSecurityRules/DenyAllInBound",
                    "name": "DenyAllInBound",
                    "properties": {
                      "access": "Deny",
                      "priority": 65500,
                      "protocol": "*",
                      "direction": "Inbound",
                      "description": "Deny all inbound traffic",
                      "sourcePortRange": "*",
                      "provisioningState": "Succeeded",
                      "sourceAddressPrefix": "*",
                      "destinationPortRange": "*",
                      "destinationAddressPrefix": "*"
                    }
                  },
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nsg1/defaultSecurityRules/AllowVnetOutBound",
                    "name": "AllowVnetOutBound",
                    "properties": {
                      "access": "Allow",
                      "priority": 65000,
                      "protocol": "*",
                      "direction": "Outbound",
                      "description": "Allow outbound traffic from all VMs to all VMs in VNET",
                      "sourcePortRange": "*",
                      "provisioningState": "Succeeded",
                      "sourceAddressPrefix": "VirtualNetwork",
                      "destinationPortRange": "*",
                      "destinationAddressPrefix": "VirtualNetwork"
                    }
                  },
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nsg1/defaultSecurityRules/AllowInternetOutBound",
                    "name": "AllowInternetOutBound",
                    "properties": {
                      "access": "Allow",
                      "priority": 65001,
                      "protocol": "*",
                      "direction": "Outbound",
                      "description": "Allow outbound traffic from all VMs to Internet",
                      "sourcePortRange": "*",
                      "provisioningState": "Succeeded",
                      "sourceAddressPrefix": "*",
                      "destinationPortRange": "*",
                      "destinationAddressPrefix": "Internet"
                    }
                  },
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nsg1/defaultSecurityRules/DenyAllOutBound",
                    "name": "DenyAllOutBound",
                    "properties": {
                      "access": "Deny",
                      "priority": 65500,
                      "protocol": "*",
                      "direction": "Outbound",
                      "description": "Deny all outbound traffic",
                      "sourcePortRange": "*",
                      "provisioningState": "Succeeded",
                      "sourceAddressPrefix": "*",
                      "destinationPortRange": "*",
                      "destinationAddressPrefix": "*"
                    }
                  }
                ]
              }
            },
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nsg3",
              "name": "nsg3",
              "type": "Microsoft.Network/networkSecurityGroups",
              "location": "westus",
              "properties": {
                "securityRules": [],
                "provisioningState": "Succeeded",
                "defaultSecurityRules": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nsg3/defaultSecurityRules/AllowVnetInBound",
                    "name": "AllowVnetInBound",
                    "properties": {
                      "access": "Allow",
                      "priority": 65000,
                      "protocol": "*",
                      "direction": "Inbound",
                      "description": "Allow inbound traffic from all VMs in VNET",
                      "sourcePortRange": "*",
                      "provisioningState": "Succeeded",
                      "sourceAddressPrefix": "VirtualNetwork",
                      "destinationPortRange": "*",
                      "destinationAddressPrefix": "VirtualNetwork"
                    }
                  },
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nsg3/defaultSecurityRules/AllowAzureLoadBalancerInBound",
                    "name": "AllowAzureLoadBalancerInBound",
                    "properties": {
                      "access": "Allow",
                      "priority": 65001,
                      "protocol": "*",
                      "direction": "Inbound",
                      "description": "Allow inbound traffic from azure load balancer",
                      "sourcePortRange": "*",
                      "provisioningState": "Succeeded",
                      "sourceAddressPrefix": "AzureLoadBalancer",
                      "destinationPortRange": "*",
                      "destinationAddressPrefix": "*"
                    }
                  },
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nsg3/defaultSecurityRules/DenyAllInBound",
                    "name": "DenyAllInBound",
                    "properties": {
                      "access": "Deny",
                      "priority": 65500,
                      "protocol": "*",
                      "direction": "Inbound",
                      "description": "Deny all inbound traffic",
                      "sourcePortRange": "*",
                      "provisioningState": "Succeeded",
                      "sourceAddressPrefix": "*",
                      "destinationPortRange": "*",
                      "destinationAddressPrefix": "*"
                    }
                  },
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nsg3/defaultSecurityRules/AllowVnetOutBound",
                    "name": "AllowVnetOutBound",
                    "properties": {
                      "access": "Allow",
                      "priority": 65000,
                      "protocol": "*",
                      "direction": "Outbound",
                      "description": "Allow outbound traffic from all VMs to all VMs in VNET",
                      "sourcePortRange": "*",
                      "provisioningState": "Succeeded",
                      "sourceAddressPrefix": "VirtualNetwork",
                      "destinationPortRange": "*",
                      "destinationAddressPrefix": "VirtualNetwork"
                    }
                  },
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nsg3/defaultSecurityRules/AllowInternetOutBound",
                    "name": "AllowInternetOutBound",
                    "properties": {
                      "access": "Allow",
                      "priority": 65001,
                      "protocol": "*",
                      "direction": "Outbound",
                      "description": "Allow outbound traffic from all VMs to Internet",
                      "sourcePortRange": "*",
                      "provisioningState": "Succeeded",
                      "sourceAddressPrefix": "*",
                      "destinationPortRange": "*",
                      "destinationAddressPrefix": "Internet"
                    }
                  },
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nsg3/defaultSecurityRules/DenyAllOutBound",
                    "name": "DenyAllOutBound",
                    "properties": {
                      "access": "Deny",
                      "priority": 65500,
                      "protocol": "*",
                      "direction": "Outbound",
                      "description": "Deny all outbound traffic",
                      "sourcePortRange": "*",
                      "provisioningState": "Succeeded",
                      "sourceAddressPrefix": "*",
                      "destinationPortRange": "*",
                      "destinationAddressPrefix": "*"
                    }
                  }
                ]
              }
            }
          ]
        }
      ]
  NetworkSecurityGroups.ListAll:
    description: |-
      Gets all network security groups in a subscription.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/networksecuritygroups/listall
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nsg1",
              "name": "nsg1",
              "type": "Microsoft.Network/networkSecurityGroups",
              "location": "westus",
              "properties": {
                "securityRules": [],
                "provisioningState": "Succeeded",
                "defaultSecurityRules": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nsg1/defaultSecurityRules/AllowVnetInBound",
                    "name": "AllowVnetInBound",
                    "properties": {
                      "access": "Allow",
                      "priority": 65000,
                      "protocol": "*",
                      "direction": "Inbound",
                      "description": "Allow inbound traffic from all VMs in VNET",
                      "sourcePortRange": "*",
                      "provisioningState": "Succeeded",
                      "sourceAddressPrefix": "VirtualNetwork",
                      "destinationPortRange": "*",
                      "destinationAddressPrefix": "VirtualNetwork"
                    }
                  },
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nsg1/defaultSecurityRules/AllowAzureLoadBalancerInBound",
                    "name": "AllowAzureLoadBalancerInBound",
                    "properties": {
                      "access": "Allow",
                      "priority": 65001,
                      "protocol": "*",
                      "direction": "Inbound",
                      "description": "Allow inbound traffic from azure load balancer",
                      "sourcePortRange": "*",
                      "provisioningState": "Succeeded",
                      "sourceAddressPrefix": "AzureLoadBalancer",
                      "destinationPortRange": "*",
                      "destinationAddressPrefix": "*"
                    }
                  },
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nsg1/defaultSecurityRules/DenyAllInBound",
                    "name": "DenyAllInBound",
                    "properties": {
                      "access": "Deny",
                      "priority": 65500,
                      "protocol": "*",
                      "direction": "Inbound",
                      "description": "Deny all inbound traffic",
                      "sourcePortRange": "*",
                      "provisioningState": "Succeeded",
                      "sourceAddressPrefix": "*",
                      "destinationPortRange": "*",
                      "destinationAddressPrefix": "*"
                    }
                  },
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nsg1/defaultSecurityRules/AllowVnetOutBound",
                    "name": "AllowVnetOutBound",
                    "properties": {
                      "access": "Allow",
                      "priority": 65000,
                      "protocol": "*",
                      "direction": "Outbound",
                      "description": "Allow outbound traffic from all VMs to all VMs in VNET",
                      "sourcePortRange": "*",
                      "provisioningState": "Succeeded",
                      "sourceAddressPrefix": "VirtualNetwork",
                      "destinationPortRange": "*",
                      "destinationAddressPrefix": "VirtualNetwork"
                    }
                  },
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nsg1/defaultSecurityRules/AllowInternetOutBound",
                    "name": "AllowInternetOutBound",
                    "properties": {
                      "access": "Allow",
                      "priority": 65001,
                      "protocol": "*",
                      "direction": "Outbound",
                      "description": "Allow outbound traffic from all VMs to Internet",
                      "sourcePortRange": "*",
                      "provisioningState": "Succeeded",
                      "sourceAddressPrefix": "*",
                      "destinationPortRange": "*",
                      "destinationAddressPrefix": "Internet"
                    }
                  },
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nsg1/defaultSecurityRules/DenyAllOutBound",
                    "name": "DenyAllOutBound",
                    "properties": {
                      "access": "Deny",
                      "priority": 65500,
                      "protocol": "*",
                      "direction": "Outbound",
                      "description": "Deny all outbound traffic",
                      "sourcePortRange": "*",
                      "provisioningState": "Succeeded",
                      "sourceAddressPrefix": "*",
                      "destinationPortRange": "*",
                      "destinationAddressPrefix": "*"
                    }
                  }
                ]
              }
            },
            {
              "id": "/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/networkSecurityGroups/nsg3",
              "name": "nsg3",
              "type": "Microsoft.Network/networkSecurityGroups",
              "location": "westus",
              "properties": {
                "securityRules": [],
                "provisioningState": "Succeeded",
                "defaultSecurityRules": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/networkSecurityGroups/nsg3/defaultSecurityRules/AllowVnetInBound",
                    "name": "AllowVnetInBound",
                    "properties": {
                      "access": "Allow",
                      "priority": 65000,
                      "protocol": "*",
                      "direction": "Inbound",
                      "description": "Allow inbound traffic from all VMs in VNET",
                      "sourcePortRange": "*",
                      "provisioningState": "Succeeded",
                      "sourceAddressPrefix": "VirtualNetwork",
                      "destinationPortRange": "*",
                      "destinationAddressPrefix": "VirtualNetwork"
                    }
                  },
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/networkSecurityGroups/nsg3/defaultSecurityRules/AllowAzureLoadBalancerInBound",
                    "name": "AllowAzureLoadBalancerInBound",
                    "properties": {
                      "access": "Allow",
                      "priority": 65001,
                      "protocol": "*",
                      "direction": "Inbound",
                      "description": "Allow inbound traffic from azure load balancer",
                      "sourcePortRange": "*",
                      "provisioningState": "Succeeded",
                      "sourceAddressPrefix": "AzureLoadBalancer",
                      "destinationPortRange": "*",
                      "destinationAddressPrefix": "*"
                    }
                  },
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/networkSecurityGroups/nsg3/defaultSecurityRules/DenyAllInBound",
                    "name": "DenyAllInBound",
                    "properties": {
                      "access": "Deny",
                      "priority": 65500,
                      "protocol": "*",
                      "direction": "Inbound",
                      "description": "Deny all inbound traffic",
                      "sourcePortRange": "*",
                      "provisioningState": "Succeeded",
                      "sourceAddressPrefix": "*",
                      "destinationPortRange": "*",
                      "destinationAddressPrefix": "*"
                    }
                  },
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/networkSecurityGroups/nsg3/defaultSecurityRules/AllowVnetOutBound",
                    "name": "AllowVnetOutBound",
                    "properties": {
                      "access": "Allow",
                      "priority": 65000,
                      "protocol": "*",
                      "direction": "Outbound",
                      "description": "Allow outbound traffic from all VMs to all VMs in VNET",
                      "sourcePortRange": "*",
                      "provisioningState": "Succeeded",
                      "sourceAddressPrefix": "VirtualNetwork",
                      "destinationPortRange": "*",
                      "destinationAddressPrefix": "VirtualNetwork"
                    }
                  },
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/networkSecurityGroups/nsg3/defaultSecurityRules/AllowInternetOutBound",
                    "name": "AllowInternetOutBound",
                    "properties": {
                      "access": "Allow",
                      "priority": 65001,
                      "protocol": "*",
                      "direction": "Outbound",
                      "description": "Allow outbound traffic from all VMs to Internet",
                      "sourcePortRange": "*",
                      "provisioningState": "Succeeded",
                      "sourceAddressPrefix": "*",
                      "destinationPortRange": "*",
                      "destinationAddressPrefix": "Internet"
                    }
                  },
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/networkSecurityGroups/nsg3/defaultSecurityRules/DenyAllOutBound",
                    "name": "DenyAllOutBound",
                    "properties": {
                      "access": "Deny",
                      "priority": 65500,
                      "protocol": "*",
                      "direction": "Outbound",
                      "description": "Deny all outbound traffic",
                      "sourcePortRange": "*",
                      "provisioningState": "Succeeded",
                      "sourceAddressPrefix": "*",
                      "destinationPortRange": "*",
                      "destinationAddressPrefix": "*"
                    }
                  }
                ]
              }
            }
          ]
        }
      ]
  NetworkSecurityGroups.UpdateTags:
    description: |-
      Updates a network security group tags.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/networksecuritygroups/updatetags
    example:
      inputs: [
        {
          "tags": {
            "tag1": "value1",
            "tag2": "value2"
          }
        }
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg",
          "name": "testnsg",
          "tags": {
            "tag1": "value1",
            "tag2": "value2"
          },
          "type": "Microsoft.Network/networkSecurityGroups",
          "location": "westus",
          "properties": {
            "securityRules": [],
            "provisioningState": "Succeeded",
            "defaultSecurityRules": [
              {
                "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/AllowVnetInBound",
                "name": "AllowVnetInBound",
                "properties": {
                  "access": "Allow",
                  "priority": 65000,
                  "protocol": "*",
                  "direction": "Inbound",
                  "description": "Allow inbound traffic from all VMs in VNET",
                  "sourcePortRange": "*",
                  "provisioningState": "Succeeded",
                  "sourceAddressPrefix": "VirtualNetwork",
                  "destinationPortRange": "*",
                  "destinationAddressPrefix": "VirtualNetwork"
                }
              },
              {
                "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/AllowAzureLoadBalancerInBound",
                "name": "AllowAzureLoadBalancerInBound",
                "properties": {
                  "access": "Allow",
                  "priority": 65001,
                  "protocol": "*",
                  "direction": "Inbound",
                  "description": "Allow inbound traffic from azure load balancer",
                  "sourcePortRange": "*",
                  "provisioningState": "Succeeded",
                  "sourceAddressPrefix": "AzureLoadBalancer",
                  "destinationPortRange": "*",
                  "destinationAddressPrefix": "*"
                }
              },
              {
                "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/DenyAllInBound",
                "name": "DenyAllInBound",
                "properties": {
                  "access": "Deny",
                  "priority": 65500,
                  "protocol": "*",
                  "direction": "Inbound",
                  "description": "Deny all inbound traffic",
                  "sourcePortRange": "*",
                  "provisioningState": "Succeeded",
                  "sourceAddressPrefix": "*",
                  "destinationPortRange": "*",
                  "destinationAddressPrefix": "*"
                }
              },
              {
                "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/AllowVnetOutBound",
                "name": "AllowVnetOutBound",
                "properties": {
                  "access": "Allow",
                  "priority": 65000,
                  "protocol": "*",
                  "direction": "Outbound",
                  "description": "Allow outbound traffic from all VMs to all VMs in VNET",
                  "sourcePortRange": "*",
                  "provisioningState": "Succeeded",
                  "sourceAddressPrefix": "VirtualNetwork",
                  "destinationPortRange": "*",
                  "destinationAddressPrefix": "VirtualNetwork"
                }
              },
              {
                "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/AllowInternetOutBound",
                "name": "AllowInternetOutBound",
                "properties": {
                  "access": "Allow",
                  "priority": 65001,
                  "protocol": "*",
                  "direction": "Outbound",
                  "description": "Allow outbound traffic from all VMs to Internet",
                  "sourcePortRange": "*",
                  "provisioningState": "Succeeded",
                  "sourceAddressPrefix": "*",
                  "destinationPortRange": "*",
                  "destinationAddressPrefix": "Internet"
                }
              },
              {
                "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/defaultSecurityRules/DenyAllOutBound",
                "name": "DenyAllOutBound",
                "properties": {
                  "access": "Deny",
                  "priority": 65500,
                  "protocol": "*",
                  "direction": "Outbound",
                  "description": "Deny all outbound traffic",
                  "sourcePortRange": "*",
                  "provisioningState": "Succeeded",
                  "sourceAddressPrefix": "*",
                  "destinationPortRange": "*",
                  "destinationAddressPrefix": "*"
                }
              }
            ]
          }
        }
      ]
  NetworkVirtualAppliances.CreateOrUpdate:
    description: |-
      Creates or updates the specified Network Virtual Appliance.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/networkvirtualappliances/createorupdate
    example:
      inputs: [
        {
          "tags": {
            "key1": "value1"
          },
          "identity": {
            "type": "UserAssigned",
            "userAssignedIdentities": {
              "/subscriptions/subid/resourcegroups/rg1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity1": {}
            }
          },
          "location": "West US",
          "properties": {
            "nvaSku": {
              "vendor": "Cisco SDWAN",
              "bundledScaleUnit": "1",
              "marketPlaceVersion": "12.1"
            },
            "virtualHub": {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/hub1"
            },
            "virtualApplianceAsn": 10000,
            "bootStrapConfigurationBlobs": [
              "https://csrncvhdstorage1.blob.core.windows.net/csrncvhdstoragecont/csrbootstrapconfig"
            ],
            "cloudInitConfigurationBlobs": [
              "https://csrncvhdstorage1.blob.core.windows.net/csrncvhdstoragecont/csrcloudinitconfig"
            ]
          }
        }
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkVirtualAppliances/nva",
          "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
          "name": "nva",
          "tags": {
            "key1": "value1"
          },
          "type": "Microsoft.Network/networkVirtualAppliances",
          "identity": {
            "type": "UserAssigned",
            "userAssignedIdentities": {
              "/subscriptions/subid/resourcegroups/rg1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity1": {}
            }
          },
          "location": "West US",
          "properties": {
            "nvaSku": {
              "vendor": "Cisco SDWAN",
              "bundledScaleUnit": "1",
              "marketPlaceVersion": "12.1"
            },
            "virtualHub": {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/hub1"
            },
            "addressPrefix": "192.168.1.0/16",
            "provisioningState": "Succeeded",
            "virtualApplianceAsn": 10000,
            "inboundSecurityRules": [
              {
                "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkVirtualAppliances/nva/InboundSecurityRules/rule1"
              }
            ],
            "virtualApplianceNics": [
              {
                "name": "managementNic",
                "publicIpAddress": "40.30.2.2",
                "privateIpAddress": "192.168.12.1"
              },
              {
                "name": "privateNic-1",
                "privateIpAddress": "192.168.12.2"
              }
            ],
            "virtualApplianceSites": [
              {
                "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networtkVirtualAppliances/nva/virtualApplianceSites/site1"
              }
            ],
            "bootStrapConfigurationBlobs": [
              "https://csrncvhdstorage1.blob.core.windows.net/csrncvhdstoragecont/csrbootstrapconfig"
            ],
            "cloudInitConfigurationBlobs": [
              "https://csrncvhdstorage1.blob.core.windows.net/csrncvhdstoragecont/csrcloudinitconfig"
            ]
          }
        }
      ]
  NetworkVirtualAppliances.Delete:
    description: |-
      Deletes the specified Network Virtual Appliance.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/networkvirtualappliances/delete
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  NetworkVirtualAppliances.Get:
    description: |-
      Gets the specified Network Virtual Appliance.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/networkvirtualappliances/get
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkVirtualAppliances/nva",
          "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
          "name": "nva",
          "tags": {
            "key1": "value1"
          },
          "type": "Microsoft.Network/networkVirtualAppliances",
          "identity": {
            "type": "UserAssigned",
            "userAssignedIdentities": {
              "/subscriptions/subid/resourcegroups/rg1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity1": {}
            }
          },
          "location": "West US",
          "properties": {
            "nvaSku": {
              "vendor": "Cisco SDWAN",
              "bundledScaleUnit": "1",
              "marketPlaceVersion": "12.1"
            },
            "virtualHub": {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/hub1"
            },
            "addressPrefix": "192.168.1.0/16",
            "provisioningState": "Succeeded",
            "virtualApplianceAsn": 10000,
            "inboundSecurityRules": [
              {
                "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkVirtualAppliances/nva/InboundSecurityRules/rule1"
              }
            ],
            "virtualApplianceNics": [
              {
                "name": "managementNic",
                "publicIpAddress": "40.30.2.2",
                "privateIpAddress": "192.168.12.1"
              },
              {
                "name": "privateNic-1",
                "privateIpAddress": "192.168.12.2"
              }
            ],
            "virtualApplianceSites": [
              {
                "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networtkVirtualAppliances/nva/virtualApplianceSites/site1"
              }
            ],
            "bootStrapConfigurationBlobs": [
              "https://csrncvhdstorage1.blob.core.windows.net/csrncvhdstoragecont/csrbootstrapconfig"
            ],
            "cloudInitConfigurationBlobs": [
              "https://csrncvhdstorage1.blob.core.windows.net/csrncvhdstoragecont/csrcloudinitconfig"
            ]
          }
        }
      ]
  NetworkVirtualAppliances.List:
    description: |-
      Gets all Network Virtual Appliances in a subscription.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/networkvirtualappliances/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkVirtualAppliances/nva",
              "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
              "name": "nva",
              "tags": {
                "key1": "value1"
              },
              "type": "Microsoft.Network/networkVirtualAppliances",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "/subscriptions/subid/resourcegroups/rg1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity1": {}
                }
              },
              "location": "West US",
              "properties": {
                "nvaSku": {
                  "vendor": "Cisco SDWAN",
                  "bundledScaleUnit": "1",
                  "marketPlaceVersion": "12.1"
                },
                "virtualHub": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/hub1"
                },
                "addressPrefix": "192.168.1.0/16",
                "provisioningState": "Succeeded",
                "virtualApplianceAsn": 10000,
                "inboundSecurityRules": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkVirtualAppliances/nva/InboundSecurityRules/rule1"
                  }
                ],
                "virtualApplianceNics": [
                  {
                    "name": "managementNic",
                    "publicIpAddress": "40.30.2.2",
                    "privateIpAddress": "192.168.12.1"
                  },
                  {
                    "name": "privateNic-1",
                    "privateIpAddress": "192.168.12.2"
                  }
                ],
                "virtualApplianceSites": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networtkVirtualAppliances/nva/virtualApplianceSites/site1"
                  }
                ],
                "bootStrapConfigurationBlobs": [
                  "https://csrncvhdstorage1.blob.core.windows.net/csrncvhdstoragecont/csrbootstrapconfig"
                ],
                "cloudInitConfigurationBlobs": [
                  "https://csrncvhdstorage1.blob.core.windows.net/csrncvhdstoragecont/csrcloudinitconfig"
                ]
              }
            }
          ]
        }
      ]
  NetworkVirtualAppliances.ListByResourceGroup:
    description: |-
      Lists all Network Virtual Appliances in a resource group.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/networkvirtualappliances/listbyresourcegroup
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkVirtualAppliances/nva",
              "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
              "name": "nva",
              "tags": {
                "key1": "value1"
              },
              "type": "Microsoft.Network/networkVirtualAppliances",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "/subscriptions/subid/resourcegroups/rg1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity1": {}
                }
              },
              "location": "West US",
              "properties": {
                "nvaSku": {
                  "vendor": "Cisco SDWAN",
                  "bundledScaleUnit": "1",
                  "marketPlaceVersion": "12.1"
                },
                "virtualHub": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/hub1"
                },
                "addressPrefix": "192.168.1.0/16",
                "provisioningState": "Succeeded",
                "virtualApplianceAsn": 10000,
                "inboundSecurityRules": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkVirtualAppliances/nva/InboundSecurityRules/rule1"
                  }
                ],
                "virtualApplianceNics": [
                  {
                    "name": "managementNic",
                    "publicIpAddress": "40.30.2.2",
                    "privateIpAddress": "192.168.12.1"
                  },
                  {
                    "name": "privateNic-1",
                    "privateIpAddress": "192.168.12.2"
                  }
                ],
                "virtualApplianceSites": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networtkVirtualAppliances/nva/virtualApplianceSites/site1"
                  }
                ],
                "bootStrapConfigurationBlobs": [
                  "https://csrncvhdstorage1.blob.core.windows.net/csrncvhdstoragecont/csrbootstrapconfig"
                ],
                "cloudInitConfigurationBlobs": [
                  "https://csrncvhdstorage1.blob.core.windows.net/csrncvhdstoragecont/csrcloudinitconfig"
                ]
              }
            }
          ]
        }
      ]
  NetworkVirtualAppliances.UpdateTags:
    description: |-
      Updates a Network Virtual Appliance.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/networkvirtualappliances/updatetags
    example:
      inputs: [
        {
          "tags": {
            "key1": "value1",
            "key2": "value2"
          }
        }
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkVirtualAppliances/nva",
          "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
          "name": "nva",
          "tags": {
            "key1": "value1",
            "key2": "value2"
          },
          "type": "Microsoft.Network/networkVirtualAppliances",
          "identity": {
            "type": "UserAssigned",
            "userAssignedIdentities": {
              "/subscriptions/subid/resourcegroups/rg1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity1": {}
            }
          },
          "location": "West US",
          "properties": {
            "nvaSku": {
              "vendor": "Cisco SDWAN",
              "bundledScaleUnit": "1",
              "marketPlaceVersion": "12.1"
            },
            "virtualHub": {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/hub1"
            },
            "addressPrefix": "192.168.1.0/16",
            "provisioningState": "Succeeded",
            "virtualApplianceAsn": 10000,
            "virtualApplianceNics": [
              {
                "name": "managementNic",
                "publicIpAddress": "40.30.2.2",
                "privateIpAddress": "192.168.12.1"
              },
              {
                "name": "privateNic-1",
                "privateIpAddress": "192.168.12.2"
              }
            ],
            "virtualApplianceSites": [
              {
                "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networtkVirtualAppliances/nva/virtualApplianceSites/site1"
              }
            ],
            "bootStrapConfigurationBlobs": [
              "https://csrncvhdstorage1.blob.core.windows.net/csrncvhdstoragecont/csrbootstrapconfig"
            ],
            "cloudInitConfigurationBlobs": [
              "https://csrncvhdstorage1.blob.core.windows.net/csrncvhdstoragecont/csrcloudinitconfig"
            ]
          }
        }
      ]
  PrivateDnsZoneGroups.CreateOrUpdate:
    description: |-
      Creates or updates a private dns zone group in the specified private endpoint.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/privatednszonegroups/createorupdate
    example:
      inputs: [
        {
          "properties": {
            "privateDnsZoneConfigs": [
              {
                "properties": {
                  "privateDnsZoneId": "/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateDnsZones/zone1.com"
                }
              }
            ]
          }
        }
      ]
      outputs: [
        {
          "id": "/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateLinkServices/testPe/privateDnsZoneGroups/testPdnsgroup",
          "name": "testPdnsgroup",
          "properties": {
            "provisioningState": "Succeeded",
            "privateDnsZoneConfigs": [
              {
                "properties": {
                  "recordSets": [
                    {
                      "fqdn": "abc.zone1.com",
                      "recordType": "A",
                      "ipAddresses": [
                        "10.0.0.4"
                      ],
                      "recordSetName": "abc"
                    },
                    {
                      "fqdn": "abc2.zone1.com",
                      "recordType": "A",
                      "ipAddresses": [
                        "10.0.0.5"
                      ],
                      "recordSetName": "abc2"
                    }
                  ],
                  "privateDnsZoneId": "/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateDnsZones/zone1.com"
                }
              }
            ]
          }
        }
      ]
  PrivateDnsZoneGroups.Delete:
    description: |-
      Deletes the specified private dns zone group.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/privatednszonegroups/delete
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  PrivateDnsZoneGroups.Get:
    description: |-
      Gets the private dns zone group resource by specified private dns zone group name.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/privatednszonegroups/get
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateLinkServices/testPe/privateDnsZoneGroups/testPdnsgroup",
          "name": "testPdnsgroup",
          "properties": {
            "provisioningState": "Succeeded",
            "privateDnsZoneConfigs": [
              {
                "properties": {
                  "recordSets": [
                    {
                      "fqdn": "abc.zone1.com",
                      "recordType": "A",
                      "ipAddresses": [
                        "10.0.0.4"
                      ],
                      "recordSetName": "abc"
                    },
                    {
                      "fqdn": "abc2.zone1.com",
                      "recordType": "A",
                      "ipAddresses": [
                        "10.0.0.5"
                      ],
                      "recordSetName": "abc2"
                    }
                  ],
                  "privateDnsZoneId": "/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateDnsZones/zone1.com"
                }
              },
              {
                "properties": {
                  "recordSets": [
                    {
                      "fqdn": "abc.zone2.com",
                      "recordType": "A",
                      "ipAddresses": [
                        "10.0.0.6"
                      ],
                      "recordSetName": "abc"
                    },
                    {
                      "fqdn": "abc2.zone2.com",
                      "recordType": "A",
                      "ipAddresses": [
                        "10.0.0.7"
                      ],
                      "recordSetName": "abc2"
                    }
                  ],
                  "privateDnsZoneId": "/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateDnsZones/zone2.com"
                }
              }
            ]
          }
        }
      ]
  PrivateDnsZoneGroups.List:
    description: |-
      Gets all private dns zone groups in a private endpoint.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/privatednszonegroups/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateLinkServices/testPe/privateDnsZoneGroups/testPdnsgroup1",
              "name": "testPdnsgroup1",
              "properties": {
                "provisioningState": "Succeeded",
                "privateDnsZoneConfigs": [
                  {
                    "properties": {
                      "recordSets": [
                        {
                          "fqdn": "abc.zone1.com",
                          "recordType": "A",
                          "ipAddresses": [
                            "10.0.0.4"
                          ],
                          "recordSetName": "abc"
                        },
                        {
                          "fqdn": "abc2.zone1.com",
                          "recordType": "A",
                          "ipAddresses": [
                            "10.0.0.5"
                          ],
                          "recordSetName": "abc2"
                        }
                      ],
                      "privateDnsZoneId": "/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateDnsZones/zone1.com"
                    }
                  }
                ]
              }
            },
            {
              "id": "/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateLinkServices/testPe/privateDnsZoneGroups/testPdnsgroup2",
              "name": "testPdnsgroup2",
              "properties": {
                "provisioningState": "Succeeded",
                "privateDnsZoneConfigs": [
                  {
                    "properties": {
                      "recordSets": [
                        {
                          "fqdn": "abc3.zone2.com",
                          "recordType": "A",
                          "ipAddresses": [
                            "10.0.0.6"
                          ],
                          "recordSetName": "abc3"
                        },
                        {
                          "fqdn": "abc4.zone2.com",
                          "recordType": "A",
                          "ipAddresses": [
                            "10.0.0.7"
                          ],
                          "recordSetName": "abc4"
                        }
                      ],
                      "privateDnsZoneId": "/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateDnsZones/zone2.com"
                    }
                  }
                ]
              }
            }
          ]
        }
      ]
  PrivateEndpoints.CreateOrUpdate:
    description: |-
      Creates or updates an private endpoint in the specified resource group.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/privateendpoints/createorupdate
    example:
      inputs: [
        {
          "location": "eastus2euap",
          "properties": {
            "subnet": {
              "id": "/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/myVnet/subnets/mySubnet"
            },
            "privateLinkServiceConnections": [
              {
                "properties": {
                  "groupIds": [
                    "groupIdFromResource"
                  ],
                  "requestMessage": "Please approve my connection.",
                  "privateLinkServiceId": "/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateLinkServices/testPls"
                }
              }
            ]
          }
        }
      ]
      outputs: [
        {
          "id": "/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateEndpoints/testPe",
          "name": "testPe",
          "location": "eastus2euap",
          "properties": {
            "subnet": {
              "id": "/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/myVnet/subnets/mySubnet"
            },
            "customDnsConfigs": [
              {
                "fqdn": "abc.cosmos.com",
                "ipAddresses": [
                  "192.168.0.4"
                ]
              },
              {
                "fqdn": "abc2.cosmos.com",
                "ipAddresses": [
                  "192.168.0.5"
                ]
              }
            ],
            "networkInterfaces": [
              {
                "id": "/subscriptions/subId/resourceGroups/rg1/provders/Microsoft.Network/networkInterfaces/testPe.nic.abcd1234"
              }
            ],
            "provisioningState": "Succeeded",
            "privateLinkServiceConnections": [
              {
                "properties": {
                  "groupIds": [
                    "groupIdFromResource"
                  ],
                  "requestMessage": "Please approve my connection.",
                  "privateLinkServiceId": "/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateLinkServices/testPls",
                  "privateLinkServiceConnectionState": {
                    "status": "Approved",
                    "description": "Auto-approved",
                    "actionsRequired": "None"
                  }
                }
              }
            ],
            "manualPrivateLinkServiceConnections": []
          }
        }
      ]
  PrivateEndpoints.Delete:
    description: |-
      Deletes the specified private endpoint.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/privateendpoints/delete
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  PrivateEndpoints.Get:
    description: |-
      Gets the specified private endpoint by resource group.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/privateendpoints/get
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateEndpoints/testPe",
          "name": "testPe",
          "type": "Microsoft.Network/privateEndpoints",
          "location": "eastus",
          "properties": {
            "subnet": {
              "id": "/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/myVnet/subnets/mySubnet"
            },
            "customDnsConfigs": [
              {
                "fqdn": "abc.cosmos.com",
                "ipAddresses": [
                  "192.168.0.4"
                ]
              },
              {
                "fqdn": "abc2.cosmos.com",
                "ipAddresses": [
                  "192.168.0.5"
                ]
              }
            ],
            "networkInterfaces": [
              {
                "id": "/subscriptions/subId/resourceGroups/rg1/provders/Microsoft.Network/networkInterfaces/testPe.nic.abcd1234"
              }
            ],
            "provisioningState": "Succeeded",
            "privateLinkServiceConnections": [
              {
                "properties": {
                  "groupIds": [
                    "groupIdFromResource"
                  ],
                  "requestMessage": "Please approve my connection.",
                  "privateLinkServiceId": "/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateLinkServices/testPls",
                  "privateLinkServiceConnectionState": {
                    "status": "Approved",
                    "description": "Auto-approved",
                    "actionsRequired": "None"
                  }
                }
              }
            ],
            "manualPrivateLinkServiceConnections": []
          }
        }
      ]
  PrivateEndpoints.List:
    description: |-
      Gets all private endpoints in a resource group.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/privateendpoints/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateEndpoints/pe1",
              "name": "pe1",
              "type": "Microsoft.Network/privateEndpoints",
              "location": "eastus",
              "properties": {
                "subnet": {
                  "id": "/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/myVnet/subnets/mySubnet"
                },
                "customDnsConfigs": [
                  {
                    "fqdn": "abc.cosmos.com",
                    "ipAddresses": [
                      "192.168.0.4"
                    ]
                  },
                  {
                    "fqdn": "abc2.cosmos.com",
                    "ipAddresses": [
                      "192.168.0.5"
                    ]
                  }
                ],
                "networkInterfaces": [
                  {
                    "id": "/subscriptions/subId/resourceGroups/rg1/provders/Microsoft.Network/networkInterfaces/pe1.nic.abcd1234"
                  }
                ],
                "provisioningState": "Succeeded",
                "privateLinkServiceConnections": [
                  {
                    "properties": {
                      "groupIds": [
                        "groupIdFromResource"
                      ],
                      "requestMessage": "Please approve my connection for pe1.",
                      "privateLinkServiceId": "/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateLinkServices/testPls1",
                      "privateLinkServiceConnectionState": {
                        "status": "Approved",
                        "description": "Auto-approved",
                        "actionsRequired": "None"
                      }
                    }
                  }
                ],
                "manualPrivateLinkServiceConnections": []
              }
            },
            {
              "id": "/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateEndpoints/pe2",
              "name": "pe2",
              "type": "Microsoft.Network/privateEndpoints",
              "location": "eastus",
              "properties": {
                "subnet": {
                  "id": "/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/myVnet/subnets/mySubnet2"
                },
                "customDnsConfigs": [
                  {
                    "fqdn": "abc3.cosmos1.com",
                    "ipAddresses": [
                      "192.168.0.6"
                    ]
                  },
                  {
                    "fqdn": "abc4.cosmos1.com",
                    "ipAddresses": [
                      "192.168.0.7"
                    ]
                  }
                ],
                "networkInterfaces": [
                  {
                    "id": "/subscriptions/subId/resourceGroups/rg1/provders/Microsoft.Network/networkInterfaces/pe2.nic.zyxw9876"
                  }
                ],
                "provisioningState": "Succeeded",
                "privateLinkServiceConnections": [],
                "manualPrivateLinkServiceConnections": [
                  {
                    "properties": {
                      "groupIds": [
                        "groupIdFromResource"
                      ],
                      "requestMessage": "Please manually approve my connection for pe2.",
                      "privateLinkServiceId": "/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateLinkServices/testPls2",
                      "privateLinkServiceConnectionState": {
                        "status": "Pending",
                        "description": "Awaiting approval",
                        "actionsRequired": "None"
                      }
                    }
                  }
                ]
              }
            }
          ]
        }
      ]
  PrivateEndpoints.ListBySubscription:
    description: |-
      Gets all private endpoints in a subscription.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/privateendpoints/listbysubscription
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateEndpoints/pe1",
              "name": "pe1",
              "type": "Microsoft.Network/privateEndpoints",
              "location": "eastus",
              "properties": {
                "subnet": {
                  "id": "/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/myVnet/subnets/mySubnet"
                },
                "customDnsConfigs": [
                  {
                    "fqdn": "abc.cosmos.com",
                    "ipAddresses": [
                      "192.168.0.4"
                    ]
                  },
                  {
                    "fqdn": "abc2.cosmos.com",
                    "ipAddresses": [
                      "192.168.0.5"
                    ]
                  }
                ],
                "networkInterfaces": [
                  {
                    "id": "/subscriptions/subId/resourceGroups/rg1/provders/Microsoft.Network/networkInterfaces/pe1.nic.abcd1234"
                  }
                ],
                "provisioningState": "Succeeded",
                "privateLinkServiceConnections": [
                  {
                    "properties": {
                      "groupIds": [
                        "groupIdFromResource"
                      ],
                      "requestMessage": "Please approve my connection for pe1.",
                      "privateLinkServiceId": "/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateLinkServices/testPls1",
                      "privateLinkServiceConnectionState": {
                        "status": "Approved",
                        "description": "Auto-approved",
                        "actionsRequired": "None"
                      }
                    }
                  }
                ]
              }
            },
            {
              "id": "/subscriptions/subId/resourceGroups/rg2/providers/Microsoft.Network/privateEndpoints/pe2",
              "name": "pe2",
              "type": "Microsoft.Network/privateEndpoints",
              "location": "eastus",
              "properties": {
                "subnet": {
                  "id": "/subscriptions/subId/resourceGroups/rg2/providers/Microsoft.Network/virtualNetworks/myVnet/subnets/mySubnet2"
                },
                "customDnsConfigs": [
                  {
                    "fqdn": "abc3.cosmos1.com",
                    "ipAddresses": [
                      "192.168.0.5"
                    ]
                  },
                  {
                    "fqdn": "abc4.cosmos1.com",
                    "ipAddresses": [
                      "192.168.0.6"
                    ]
                  }
                ],
                "networkInterfaces": [
                  {
                    "id": "/subscriptions/subId/resourceGroups/rg2/provders/Microsoft.Network/networkInterfaces/pe2.nic.zyxw9876"
                  }
                ],
                "provisioningState": "Succeeded",
                "privateLinkServiceConnections": [],
                "manualPrivateLinkServiceConnections": [
                  {
                    "properties": {
                      "groupIds": [
                        "groupIdFromResource"
                      ],
                      "requestMessage": "Please manually approve my connection for pe2.",
                      "privateLinkServiceId": "/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateLinkServices/testPls2",
                      "privateLinkServiceConnectionState": {
                        "status": "Pending",
                        "description": "Awaiting approval",
                        "actionsRequired": "None"
                      }
                    }
                  }
                ]
              }
            },
            {
              "id": "/subscriptions/subId/resourceGroups/rg3/providers/Microsoft.Network/privateEndpoints/pe3",
              "name": "pe3",
              "type": "Microsoft.Network/privateEndpoints",
              "location": "eastus",
              "properties": {
                "subnet": {
                  "id": "/subscriptions/subId/resourceGroups/rg3/providers/Microsoft.Network/virtualNetworks/myVnet/subnets/mySubnet3"
                },
                "customDnsConfigs": [
                  {
                    "fqdn": "abc5.cosmos2.com",
                    "ipAddresses": [
                      "192.168.0.7"
                    ]
                  },
                  {
                    "fqdn": "abc6.cosmos2.com",
                    "ipAddresses": [
                      "192.168.0.8"
                    ]
                  }
                ],
                "networkInterfaces": [
                  {
                    "id": "/subscriptions/subId/resourceGroups/rg3/provders/Microsoft.Network/networkInterfaces/pe3.nic.efgh5463"
                  }
                ],
                "provisioningState": "Succeeded",
                "privateLinkServiceConnections": [
                  {
                    "properties": {
                      "groupIds": [
                        "groupIdFromResource"
                      ],
                      "requestMessage": "Please approve my connection for pe3.",
                      "privateLinkServiceId": "/subscriptions/subId/resourceGroups/rg3/providers/Microsoft.Network/privateLinkServices/testPls3",
                      "privateLinkServiceConnectionState": {
                        "status": "Approved",
                        "description": "Auto-approved",
                        "actionsRequired": "None"
                      }
                    }
                  }
                ]
              }
            }
          ]
        }
      ]
  PrivateLinkServices.CheckPrivateLinkServiceVisibility:
    description: |-
      Checks whether the subscription is visible to private link service.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/privatelinkservices/checkprivatelinkservicevisibility
    example:
      inputs: [
        {
          "privateLinkServiceAlias": "mypls.00000000-0000-0000-0000-000000000000.azure.privatelinkservice"
        }
      ]
      outputs: [
        {
          "visible": true
        }
      ]
  PrivateLinkServices.CheckPrivateLinkServiceVisibilityByResourceGroup:
    description: |-
      Checks whether the subscription is visible to private link service in the specified resource group.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/privatelinkservices/checkprivatelinkservicevisibilitybyresourcegroup
    example:
      inputs: [
        {
          "privateLinkServiceAlias": "mypls.00000000-0000-0000-0000-000000000000.azure.privatelinkservice"
        }
      ]
      outputs: [
        {
          "visible": true
        }
      ]
  PrivateLinkServices.CreateOrUpdate:
    description: |-
      Creates or updates an private link service in the specified resource group.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/privatelinkservices/createorupdate
    example:
      inputs: [
        {
          "location": "eastus",
          "properties": {
            "fqdns": [
              "fqdn1",
              "fqdn2",
              "fqdn3"
            ],
            "visibility": {
              "subscriptions": [
                "subscription1",
                "subscription2",
                "subscription3"
              ]
            },
            "autoApproval": {
              "subscriptions": [
                "subscription1",
                "subscription2"
              ]
            },
            "ipConfigurations": [
              {
                "name": "fe-lb",
                "properties": {
                  "subnet": {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"
                  },
                  "privateIPAddress": "10.0.1.4",
                  "privateIPAddressVersion": "IPv4",
                  "privateIPAllocationMethod": "Static"
                }
              }
            ],
            "loadBalancerFrontendIpConfigurations": [
              {
                "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"
              }
            ]
          }
        }
      ]
      outputs: [
        {
          "id": "/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateLinkServices/testPls",
          "name": "testPls",
          "location": "eastus",
          "properties": {
            "alias": "ContosoService.{guid}.azure.privatelinkservice",
            "fqdns": [
              "fqdn1",
              "fqdn2",
              "fqdn3"
            ],
            "visibility": {
              "subscriptions": [
                "subscription1",
                "subscription2",
                "subscription3"
              ]
            },
            "autoApproval": {
              "subscriptions": [
                "subscription1",
                "subscription2"
              ]
            },
            "ipConfigurations": [
              {
                "name": "fe-lb",
                "properties": {
                  "subnet": {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"
                  },
                  "privateIPAddress": "10.0.1.4",
                  "privateIPAddressVersion": "IPv4",
                  "privateIPAllocationMethod": "Static"
                }
              }
            ],
            "networkInterfaces": [
              {
                "id": "/subscriptions/subId/resourceGroups/rg1/provders/Microsoft.Network/networkInterfaces/testPls.nic.abcd1234"
              }
            ],
            "provisioningState": "Succeeded",
            "loadBalancerFrontendIpConfigurations": [
              {
                "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"
              }
            ]
          }
        }
      ]
  PrivateLinkServices.Delete:
    description: |-
      Deletes the specified private link service.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/privatelinkservices/delete
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  PrivateLinkServices.DeletePrivateEndpointConnection:
    description: |-
      Delete private end point connection for a private link service in a subscription.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/privatelinkservices/deleteprivateendpointconnection
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  PrivateLinkServices.Get:
    description: |-
      Gets the specified private link service by resource group.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/privatelinkservices/get
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateLinkServices/testPls",
          "name": "testPls",
          "type": "Microsoft.Network/privateLinkServices",
          "location": "eastus",
          "properties": {
            "alias": "ContosoService.{guid}.azure.privatelinkservice",
            "fqdns": [
              "fqdn1",
              "fqdn2",
              "fqdn3"
            ],
            "visibility": {
              "subscriptions": [
                "subscription1",
                "subscription2",
                "subscription3"
              ]
            },
            "autoApproval": {
              "subscriptions": [
                "subscription1",
                "subscription2"
              ]
            },
            "ipConfigurations": [
              {
                "name": "fe-lb",
                "properties": {
                  "subnet": {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb"
                  },
                  "privateIPAddress": "10.0.1.4",
                  "privateIPAddressVersion": "IPv4",
                  "privateIPAllocationMethod": "Static"
                }
              }
            ],
            "networkInterfaces": [
              {
                "id": "/subscriptions/subId/resourceGroups/rg1/provders/Microsoft.Network/networkInterfaces/testPls.nic.abcd1234"
              }
            ],
            "provisioningState": "Succeeded",
            "privateEndpointConnections": [
              {
                "name": "privateEndpointConnection",
                "properties": {
                  "privateEndpoint": {
                    "id": "/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateEndpoints/testPe"
                  },
                  "privateLinkServiceConnectionState": {
                    "status": "Approved",
                    "description": "approved it for some reason."
                  }
                }
              }
            ],
            "loadBalancerFrontendIpConfigurations": [
              {
                "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb"
              }
            ]
          }
        }
      ]
  PrivateLinkServices.GetPrivateEndpointConnection:
    description: |-
      Get the specific private end point connection by specific private link service in the resource group.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/privatelinkservices/getprivateendpointconnection
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "name": "testPlePeConnection",
          "properties": {
            "privateEndpoint": {
              "id": "/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateEndpoints/testPe"
            },
            "privateLinkServiceConnectionState": {
              "status": "Approved",
              "description": "approved it for some reason."
            }
          }
        }
      ]
  PrivateLinkServices.List:
    description: |-
      Gets all private link services in a resource group.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/privatelinkservices/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateLinkServices/testPls1",
              "name": "testPls1",
              "type": "Microsoft.Network/privateLinkServices",
              "location": "eastus",
              "properties": {
                "alias": "ContosoService.{guid}.azure.privatelinkservice",
                "fqdns": [
                  "fqdn1",
                  "fqdn2"
                ],
                "visibility": {
                  "subscriptions": [
                    "subscription1"
                  ]
                },
                "autoApproval": {
                  "subscriptions": [
                    "subscription1"
                  ]
                },
                "ipConfigurations": [
                  {
                    "name": "fe-lb1",
                    "properties": {
                      "subnet": {
                        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb1"
                      },
                      "privateIPAddress": "10.0.1.4",
                      "privateIPAddressVersion": "IPv4",
                      "privateIPAllocationMethod": "Static"
                    }
                  }
                ],
                "networkInterfaces": [
                  {
                    "id": "/subscriptions/subId/resourceGroups/rg1/provders/Microsoft.Network/networkInterfaces/testPls1.nic.abcd1234"
                  }
                ],
                "provisioningState": "Succeeded",
                "privateEndpointConnections": [
                  {
                    "name": "pec1",
                    "properties": {
                      "privateEndpoint": {
                        "id": "/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateEndpoints/testPe1"
                      },
                      "privateLinkServiceConnectionState": {
                        "status": "Approved",
                        "description": "approved it for some reason."
                      }
                    }
                  }
                ],
                "loadBalancerFrontendIpConfigurations": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb1"
                  }
                ]
              }
            },
            {
              "id": "/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateLinkServices/testPls2",
              "name": "testPls2",
              "type": "Microsoft.Network/privateLinkServices",
              "location": "eastus",
              "properties": {
                "alias": "ContosoService.{guid}.azure.privatelinkservice",
                "fqdns": [
                  "fqdn1",
                  "fqdn2",
                  "fqdn3"
                ],
                "visibility": {
                  "subscriptions": [
                    "subscription1",
                    "subscription2",
                    "subscription3"
                  ]
                },
                "autoApproval": {
                  "subscriptions": [
                    "subscription1",
                    "subscription2"
                  ]
                },
                "ipConfigurations": [
                  {
                    "name": "fe-lb2",
                    "properties": {
                      "subnet": {
                        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb2"
                      },
                      "privateIPAddress": "10.0.1.5",
                      "privateIPAddressVersion": "IPv4",
                      "privateIPAllocationMethod": "Static"
                    }
                  }
                ],
                "networkInterfaces": [
                  {
                    "id": "/subscriptions/subId/resourceGroups/rg1/provders/Microsoft.Network/networkInterfaces/testPls2.nic.efgh5678"
                  }
                ],
                "provisioningState": "Succeeded",
                "privateEndpointConnections": [
                  {
                    "name": "pec2",
                    "properties": {
                      "privateEndpoint": {
                        "id": "/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateEndpoints/testPe2"
                      },
                      "privateLinkServiceConnectionState": {
                        "status": "Approved",
                        "description": "approved it for some reason."
                      }
                    }
                  }
                ],
                "loadBalancerFrontendIpConfigurations": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb2"
                  }
                ]
              }
            }
          ]
        }
      ]
  PrivateLinkServices.ListAutoApprovedPrivateLinkServices:
    description: |-
      Returns all of the private link service ids that can be linked to a Private Endpoint with auto approved in this subscription in this region.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/privatelinkservices/listautoapprovedprivatelinkservices
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "privateLinkService": "/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateLinkServices/testPls1"
            },
            {
              "privateLinkService": "/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateLinkServices/testPls2"
            },
            {
              "privateLinkService": "/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateLinkServices/testPls3"
            }
          ]
        }
      ]
  PrivateLinkServices.ListAutoApprovedPrivateLinkServicesByResourceGroup:
    description: |-
      Returns all of the private link service ids that can be linked to a Private Endpoint with auto approved in this subscription in this region.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/privatelinkservices/listautoapprovedprivatelinkservicesbyresourcegroup
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "privateLinkService": "/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateLinkServices/testPls1"
            },
            {
              "privateLinkService": "/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateLinkServices/testPls2"
            },
            {
              "privateLinkService": "/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateLinkServices/testPls3"
            }
          ]
        }
      ]
  PrivateLinkServices.ListBySubscription:
    description: |-
      Gets all private link service in a subscription.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/privatelinkservices/listbysubscription
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateLinkServices/testPls1",
              "name": "testPls1",
              "type": "Microsoft.Network/privateLinkServices",
              "location": "eastus",
              "properties": {
                "alias": "ContosoService.{guid}.azure.privatelinkservice",
                "fqdns": [
                  "fqdn1",
                  "fqdn2",
                  "fqdn3"
                ],
                "visibility": {
                  "subscriptions": [
                    "subscription1",
                    "subscription2",
                    "subscription3"
                  ]
                },
                "autoApproval": {
                  "subscriptions": [
                    "subscription1",
                    "subscription2"
                  ]
                },
                "ipConfigurations": [
                  {
                    "name": "fe-lb1",
                    "properties": {
                      "subnet": {
                        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb1"
                      },
                      "privateIPAddress": "10.0.1.4",
                      "privateIPAddressVersion": "IPv4",
                      "privateIPAllocationMethod": "Static"
                    }
                  }
                ],
                "networkInterfaces": [
                  {
                    "id": "/subscriptions/subId/resourceGroups/rg1/provders/Microsoft.Network/networkInterfaces/testPls1.nic.abcd1234"
                  }
                ],
                "provisioningState": "Succeeded",
                "privateEndpointConnections": [
                  {
                    "name": "pec1",
                    "properties": {
                      "privateEndpoint": {
                        "id": "/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateEndpoints/testPe1"
                      },
                      "privateLinkServiceConnectionState": {
                        "status": "Approved",
                        "description": "approved it for some reason."
                      }
                    }
                  }
                ],
                "loadBalancerFrontendIpConfigurations": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb1"
                  }
                ]
              }
            },
            {
              "id": "/subscriptions/subId/resourceGroups/rg2/providers/Microsoft.Network/privateLinkServices/testPls2",
              "name": "testPls2",
              "type": "Microsoft.Network/privateLinkServices",
              "location": "eastus",
              "properties": {
                "alias": "ContosoService.{guid}.azure.privatelinkservice",
                "fqdns": [
                  "fqdn1",
                  "fqdn2"
                ],
                "visibility": {
                  "subscriptions": [
                    "subscription1",
                    "subscription2"
                  ]
                },
                "autoApproval": {
                  "subscriptions": [
                    "subscription1",
                    "subscription2"
                  ]
                },
                "ipConfigurations": [
                  {
                    "name": "fe-lb2",
                    "properties": {
                      "subnet": {
                        "id": "/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/virtualNetworks/vnetlb/subnets/subnetlb2"
                      },
                      "privateIPAddress": "10.0.1.5",
                      "privateIPAddressVersion": "IPv4",
                      "privateIPAllocationMethod": "Static"
                    }
                  }
                ],
                "networkInterfaces": [
                  {
                    "id": "/subscriptions/subId/resourceGroups/rg2/provders/Microsoft.Network/networkInterfaces/testPls2.nic.efgh5678"
                  }
                ],
                "provisioningState": "Succeeded",
                "privateEndpointConnections": [
                  {
                    "name": "pec1",
                    "properties": {
                      "privateEndpoint": {
                        "id": "/subscriptions/subId/resourceGroups/rg2/providers/Microsoft.Network/privateEndpoints/testPe2"
                      },
                      "privateLinkServiceConnectionState": {
                        "status": "Approved",
                        "description": "approved it for some reason."
                      }
                    }
                  }
                ],
                "loadBalancerFrontendIpConfigurations": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe-lb2"
                  }
                ]
              }
            }
          ]
        }
      ]
  PrivateLinkServices.ListPrivateEndpointConnections:
    description: |-
      Gets all private end point connections for a specific private link service.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/privatelinkservices/listprivateendpointconnections
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "name": "testPlePeConnection1",
              "properties": {
                "privateEndpoint": {
                  "id": "/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateEndpoints/testPe1"
                },
                "privateLinkServiceConnectionState": {
                  "status": "Approved",
                  "description": "approved it for some reason."
                }
              }
            },
            {
              "name": "testPlePeConnection2",
              "properties": {
                "privateEndpoint": {
                  "id": "/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateEndpoints/testPe2"
                },
                "privateLinkServiceConnectionState": {
                  "status": "Rejected",
                  "description": "rejected by some reason."
                }
              }
            }
          ]
        }
      ]
  PrivateLinkServices.UpdatePrivateEndpointConnection:
    description: |-
      Approve or reject private end point connection for a private link service in a subscription.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/privatelinkservices/updateprivateendpointconnection
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "name": "testPlePeConnection",
          "properties": {
            "privateEndpoint": {
              "id": "/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateEndpoints/testPe"
            },
            "privateLinkServiceConnectionState": {
              "status": "Approved",
              "description": "approved it for some reason."
            }
          }
        }
      ]
  PublicIpAddressInCloudService.GetCloudServicePublicIpAddress:
    description: |-
      Get the specified public IP address in a cloud service.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/publicipaddress%20in%20cloudservice/getcloudservicepublicipaddress
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/cs-tester/providers/Microsoft.Compute/cloudServices/cs1/roleInstances/Test_VM_0/networkInterfaces/nic1/ipConfigurations/ip1/publicIPAddresses/pub1",
          "name": "pub1",
          "properties": {
            "ipAddress": "13.67.119.72",
            "dnsSettings": {
              "fqdn": "vm1.testvmssacc.southeastasia.cloudapp.azure.com",
              "domainNameLabel": "vm1.testvmssacc"
            },
            "ipConfiguration": {
              "id": "/subscriptions/subid/resourceGroups/cs-tester/providers/Microsoft.Compute/cloudServices/cs1/roleInstances/Test_VM_0/networkInterfaces/nic1/ipConfigurations/ip1"
            },
            "provisioningState": "Succeeded",
            "idleTimeoutInMinutes": 10,
            "publicIPAddressVersion": "IPv4",
            "publicIPAllocationMethod": "Dynamic"
          }
        }
      ]
  PublicIpAddressInCloudService.ListCloudServicePublicIpAddresses:
    description: |-
      Gets information about all public IP addresses on a cloud service level.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/publicipaddress%20in%20cloudservice/listcloudservicepublicipaddresses
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subid/resourceGroups/cs-tester/providers/Microsoft.Compute/cloudServices/cs1/roleInstances/Test_VM_0/networkInterfaces/nic1/ipConfigurations/ip1/publicIPAddresses/pub1",
              "name": "pub1",
              "properties": {
                "ipAddress": "13.67.119.72",
                "dnsSettings": {
                  "fqdn": "vm1.testvmssacc.southeastasia.cloudapp.azure.com",
                  "domainNameLabel": "vm1.testvmssacc"
                },
                "ipConfiguration": {
                  "id": "/subscriptions/subid/resourceGroups/cs-tester/providers/Microsoft.Compute/cloudServices/cs1/roleInstances/Test_VM_0/networkInterfaces/nic1/ipConfigurations/ip1"
                },
                "provisioningState": "Succeeded",
                "idleTimeoutInMinutes": 10,
                "publicIPAddressVersion": "IPv4",
                "publicIPAllocationMethod": "Dynamic"
              }
            },
            {
              "id": "/subscriptions/subid/resourceGroups/cs-tester/providers/Microsoft.Compute/cloudServices/cs1/roleInstances/Test_VM_3/networkInterfaces/nic1/ipConfigurations/ip1/publicIPAddresses/pub1",
              "name": "pub1",
              "properties": {
                "ipAddress": "13.67.118.216",
                "dnsSettings": {
                  "fqdn": "vm3.testvmssacc.southeastasia.cloudapp.azure.com",
                  "domainNameLabel": "vm3.testvmssacc"
                },
                "ipConfiguration": {
                  "id": "/subscriptions/subid/resourceGroups/cs-tester/providers/Microsoft.Compute/cloudServices/cs1/roleInstances/Test_VM_3/networkInterfaces/nic1/ipConfigurations/ip1"
                },
                "provisioningState": "Succeeded",
                "idleTimeoutInMinutes": 10,
                "publicIPAddressVersion": "IPv4",
                "publicIPAllocationMethod": "Dynamic"
              }
            }
          ]
        }
      ]
  PublicIpAddressInCloudService.ListCloudServiceRoleInstancePublicIpAddresses:
    description: |-
      Gets information about all public IP addresses in a role instance IP configuration in a cloud service.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/publicipaddress%20in%20cloudservice/listcloudserviceroleinstancepublicipaddresses
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subid/resourceGroups/cs-tester/providers/Microsoft.Compute/cloudServices/cs1/roleInstances/Test_VM_0/networkInterfaces/nic1/ipConfigurations/ip1/publicIPAddresses/pub1",
              "name": "pub1",
              "properties": {
                "ipAddress": "13.67.119.72",
                "dnsSettings": {
                  "fqdn": "vm1.testvmssacc.southeastasia.cloudapp.azure.com",
                  "domainNameLabel": "vm1.testvmssacc"
                },
                "ipConfiguration": {
                  "id": "/subscriptions/subid/resourceGroups/cs-tester/providers/Microsoft.Compute/cloudServices/cs1/roleInstances/Test_VM_0/networkInterfaces/nic1/ipConfigurations/ip1"
                },
                "provisioningState": "Succeeded",
                "idleTimeoutInMinutes": 10,
                "publicIPAddressVersion": "IPv4",
                "publicIPAllocationMethod": "Dynamic"
              }
            }
          ]
        }
      ]
  PublicIpAddressInVmss.GetVirtualMachineScaleSetPublicIpAddress:
    description: |-
      Get the specified public IP address in a virtual machine scale set.
    versions:
      from: 2018.10.1
      to: 2018.10.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/publicipaddress%20in%20vmss/getvirtualmachinescalesetpublicipaddress
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/vmss-tester/providers/Microsoft.Compute/virtualMachineScaleSets/vmss1/virtualMachines/1/networkInterfaces/nic1/ipConfigurations/ip1/publicIPAddresses/pub1",
          "name": "pub1",
          "properties": {
            "ipAddress": "13.67.119.72",
            "dnsSettings": {
              "fqdn": "vm1.testvmssacc.southeastasia.cloudapp.azure.com",
              "domainNameLabel": "vm1.testvmssacc"
            },
            "ipConfiguration": {
              "id": "/subscriptions/subid/resourceGroups/vmss-tester/providers/Microsoft.Compute/virtualMachineScaleSets/vmss1/virtualMachines/1/networkInterfaces/nic1/ipConfigurations/ip1"
            },
            "provisioningState": "Succeeded",
            "idleTimeoutInMinutes": 10,
            "publicIPAddressVersion": "IPv4",
            "publicIPAllocationMethod": "Dynamic"
          }
        }
      ]
  PublicIpAddressInVmss.ListVirtualMachineScaleSetPublicIpAddresses:
    description: |-
      Gets information about all public IP addresses on a virtual machine scale set level.
    versions:
      from: 2018.10.1
      to: 2018.10.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/publicipaddress%20in%20vmss/listvirtualmachinescalesetpublicipaddresses
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subid/resourceGroups/vmss-tester/providers/Microsoft.Compute/virtualMachineScaleSets/vmss1/virtualMachines/1/networkInterfaces/nic1/ipConfigurations/ip1/publicIPAddresses/pub1",
              "name": "pub1",
              "properties": {
                "ipAddress": "13.67.119.72",
                "dnsSettings": {
                  "fqdn": "vm1.testvmssacc.southeastasia.cloudapp.azure.com",
                  "domainNameLabel": "vm1.testvmssacc"
                },
                "ipConfiguration": {
                  "id": "/subscriptions/subid/resourceGroups/vmss-tester/providers/Microsoft.Compute/virtualMachineScaleSets/vmss1/virtualMachines/1/networkInterfaces/nic1/ipConfigurations/ip1"
                },
                "provisioningState": "Succeeded",
                "idleTimeoutInMinutes": 10,
                "publicIPAddressVersion": "IPv4",
                "publicIPAllocationMethod": "Dynamic"
              }
            },
            {
              "id": "/subscriptions/subid/resourceGroups/vmss-tester/providers/Microsoft.Compute/virtualMachineScaleSets/vmss1/virtualMachines/3/networkInterfaces/nic1/ipConfigurations/ip1/publicIPAddresses/pub1",
              "name": "pub1",
              "properties": {
                "ipAddress": "13.67.118.216",
                "dnsSettings": {
                  "fqdn": "vm3.testvmssacc.southeastasia.cloudapp.azure.com",
                  "domainNameLabel": "vm3.testvmssacc"
                },
                "ipConfiguration": {
                  "id": "/subscriptions/subid/resourceGroups/vmss-tester/providers/Microsoft.Compute/virtualMachineScaleSets/vmss1/virtualMachines/3/networkInterfaces/nic1/ipConfigurations/ip1"
                },
                "provisioningState": "Succeeded",
                "idleTimeoutInMinutes": 10,
                "publicIPAddressVersion": "IPv4",
                "publicIPAllocationMethod": "Dynamic"
              }
            }
          ]
        }
      ]
  PublicIpAddressInVmss.ListVirtualMachineScaleSetVmPublicIpAddresses:
    description: |-
      Gets information about all public IP addresses in a virtual machine IP configuration in a virtual machine scale set.
    versions:
      from: 2018.10.1
      to: 2018.10.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/publicipaddress%20in%20vmss/listvirtualmachinescalesetvmpublicipaddresses
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subid/resourceGroups/vmss-tester/providers/Microsoft.Compute/virtualMachineScaleSets/vmss1/virtualMachines/1/networkInterfaces/nic1/ipConfigurations/ip1/publicIPAddresses/pub1",
              "name": "pub1",
              "properties": {
                "ipAddress": "13.67.119.72",
                "dnsSettings": {
                  "fqdn": "vm1.testvmssacc.southeastasia.cloudapp.azure.com",
                  "domainNameLabel": "vm1.testvmssacc"
                },
                "ipConfiguration": {
                  "id": "/subscriptions/subid/resourceGroups/vmss-tester/providers/Microsoft.Compute/virtualMachineScaleSets/vmss1/virtualMachines/1/networkInterfaces/nic1/ipConfigurations/ip1"
                },
                "provisioningState": "Succeeded",
                "idleTimeoutInMinutes": 10,
                "publicIPAddressVersion": "IPv4",
                "publicIPAllocationMethod": "Dynamic"
              }
            }
          ]
        }
      ]
  PublicIpAddresses.CreateOrUpdate:
    description: |-
      Creates or updates a static or dynamic public IP address.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/publicipaddresses/createorupdate
    example:
      inputs: [
        {
          "sku": {
            "name": "Standard",
            "tier": "Global"
          },
          "location": "eastus",
          "properties": {
            "idleTimeoutInMinutes": 10,
            "publicIPAddressVersion": "IPv4",
            "publicIPAllocationMethod": "Static"
          }
        }
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/test-ip",
          "sku": {
            "name": "Standard",
            "tier": "Global"
          },
          "name": "testDNS-ip",
          "type": "Microsoft.Network/publicIPAddresses",
          "zones": [
            "1"
          ],
          "location": "eastus",
          "properties": {
            "ipConfiguration": {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/testDNS649/ipConfigurations/ipconfig1"
            },
            "provisioningState": "Succeeded",
            "idleTimeoutInMinutes": 10,
            "publicIPAddressVersion": "IPv4",
            "publicIPAllocationMethod": "Static"
          }
        }
      ]
  PublicIpAddresses.Delete:
    description: |-
      Deletes the specified public IP address.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/publicipaddresses/delete
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  PublicIpAddresses.Get:
    description: |-
      Gets the specified public IP address in a specified resource group.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/publicipaddresses/get
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/testDNS-ip",
          "name": "testDNS-ip",
          "type": "Microsoft.Network/publicIPAddresses",
          "location": "westus",
          "properties": {
            "ipTags": [
              {
                "tag": "SQL",
                "ipTagType": "FirstPartyUsage"
              },
              {
                "tag": "Storage",
                "ipTagType": "FirstPartyUsage"
              }
            ],
            "ipConfiguration": {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/testDNS649/ipConfigurations/ipconfig1"
            },
            "provisioningState": "Succeeded",
            "idleTimeoutInMinutes": 4,
            "publicIPAddressVersion": "IPv4",
            "publicIPAllocationMethod": "Dynamic"
          }
        }
      ]
  PublicIpAddresses.List:
    description: |-
      Gets all public IP addresses in a resource group.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/publicipaddresses/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/testDNS-ip",
              "name": "testDNS-ip",
              "type": "Microsoft.Network/publicIPAddresses",
              "location": "westus",
              "properties": {
                "ipTags": [
                  {
                    "tag": "SQL",
                    "ipTagType": "FirstPartyUsage"
                  },
                  {
                    "tag": "Storage",
                    "ipTagType": "FirstPartyUsage"
                  }
                ],
                "ipConfiguration": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/testDNS649/ipConfigurations/ipconfig1"
                },
                "provisioningState": "Succeeded",
                "idleTimeoutInMinutes": 4,
                "publicIPAddressVersion": "IPv4",
                "publicIPAllocationMethod": "Dynamic"
              }
            },
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/ip03",
              "name": "ip03",
              "type": "Microsoft.Network/publicIPAddresses",
              "location": "westus",
              "properties": {
                "ipAddress": "40.85.154.247",
                "dnsSettings": {
                  "fqdn": "testlbl.westus.cloudapp.azure.com",
                  "domainNameLabel": "testlbl"
                },
                "ipConfiguration": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/testLb/frontendIPConfigurations/LoadBalancerFrontEnd"
                },
                "provisioningState": "Succeeded",
                "idleTimeoutInMinutes": 4,
                "publicIPAddressVersion": "IPv4",
                "publicIPAllocationMethod": "Dynamic"
              }
            }
          ]
        }
      ]
  PublicIpAddresses.ListAll:
    description: |-
      Gets all the public IP addresses in a subscription.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/publicipaddresses/listall
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/testDNS-ip",
              "name": "testDNS-ip",
              "type": "Microsoft.Network/publicIPAddresses",
              "location": "westus",
              "properties": {
                "ipConfiguration": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/testDNS649/ipConfigurations/ipconfig1"
                },
                "provisioningState": "Succeeded",
                "idleTimeoutInMinutes": 4,
                "publicIPAddressVersion": "IPv4",
                "publicIPAllocationMethod": "Dynamic"
              }
            },
            {
              "id": "/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/publicIPAddresses/ip01",
              "name": "ip01",
              "type": "Microsoft.Network/publicIPAddresses",
              "location": "westus",
              "properties": {
                "ipAddress": "40.85.154.247",
                "dnsSettings": {
                  "fqdn": "testlbl.westus.cloudapp.azure.com",
                  "domainNameLabel": "testlbl"
                },
                "ipConfiguration": {
                  "id": "/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/loadBalancers/testLb/frontendIPConfigurations/LoadBalancerFrontEnd"
                },
                "provisioningState": "Succeeded",
                "idleTimeoutInMinutes": 4,
                "publicIPAddressVersion": "IPv4",
                "publicIPAllocationMethod": "Dynamic"
              }
            }
          ]
        }
      ]
  PublicIpAddresses.UpdateTags:
    description: |-
      Updates public IP address tags.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/publicipaddresses/updatetags
    example:
      inputs: [
        {
          "tags": {
            "tag1": "value1",
            "tag2": "value2"
          }
        }
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/test-ip",
          "name": "testDNS-ip",
          "tags": {
            "tag1": "value1",
            "tag2": "value2"
          },
          "type": "Microsoft.Network/publicIPAddresses",
          "location": "westus",
          "properties": {
            "ipConfiguration": {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkInterfaces/testDNS649/ipConfigurations/ipconfig1"
            },
            "provisioningState": "Succeeded",
            "idleTimeoutInMinutes": 10,
            "publicIPAddressVersion": "IPv4",
            "publicIPAllocationMethod": "Static"
          }
        }
      ]
  PublicIpPrefixes.CreateOrUpdate:
    description: |-
      Creates or updates a static or dynamic public IP prefix.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/publicipprefixes/createorupdate
    example:
      inputs: [
        {
          "sku": {
            "name": "Standard",
            "tier": "Regional"
          },
          "location": "westus",
          "properties": {
            "prefixLength": 30,
            "publicIPAddressVersion": "IPv4"
          }
        }
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPPrefixes/test-ipprefix",
          "sku": {
            "name": "Standard",
            "tier": "Regional"
          },
          "etag": "W/\"00000000-0000-0000-0000-00000000\"",
          "name": "test-ipprefix",
          "type": "Microsoft.Network/publicIPPrefixes",
          "zones": [
            "1"
          ],
          "location": "westus",
          "properties": {
            "ipTags": [],
            "ipPrefix": "192.168.254.2/30",
            "prefixLength": 30,
            "resourceGuid": "00000000-0000-0000-0000-00000000",
            "provisioningState": "Succeeded",
            "publicIPAddressVersion": "IPv4"
          }
        }
      ]
  PublicIpPrefixes.Delete:
    description: |-
      Deletes the specified public IP prefix.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/publicipprefixes/delete
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  PublicIpPrefixes.Get:
    description: |-
      Gets the specified public IP prefix in a specified resource group.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/publicipprefixes/get
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPPrefixes/test-ipprefix",
          "sku": {
            "name": "Standard"
          },
          "etag": "W/\"00000000-0000-0000-0000-00000000\"",
          "name": "test-ipprefix",
          "type": "Microsoft.Network/publicIPPrefixes",
          "location": "westus",
          "properties": {
            "ipTags": [],
            "ipPrefix": "192.168.254.2/30",
            "prefixLength": 30,
            "resourceGuid": "00000000-0000-0000-0000-00000000",
            "provisioningState": "Succeeded",
            "publicIPAddresses": [
              {
                "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/PublicIpAddress1"
              }
            ],
            "publicIPAddressVersion": "IPv4"
          }
        }
      ]
  PublicIpPrefixes.List:
    description: |-
      Gets all public IP prefixes in a resource group.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/publicipprefixes/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPPrefixes/test-ipprefix",
              "sku": {
                "name": "Standard"
              },
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "name": "test-ipprefix",
              "type": "Microsoft.Network/publicIPPrefixes",
              "location": "westus",
              "properties": {
                "ipTags": [
                  {
                    "tag": "SQL",
                    "ipTagType": "FirstPartyUsage"
                  }
                ],
                "ipPrefix": "40.85.154.2/30",
                "prefixLength": 30,
                "resourceGuid": "00000000-0000-0000-0000-00000000",
                "provisioningState": "Succeeded",
                "publicIPAddressVersion": "IPv4"
              }
            },
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPPrefixes/ipprefix03",
              "sku": {
                "name": "Standard"
              },
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "name": "ipprefix03",
              "type": "Microsoft.Network/publicIPPrefixes",
              "location": "westus",
              "properties": {
                "ipTags": [],
                "ipPrefix": "40.85.153.2/31",
                "prefixLength": 31,
                "resourceGuid": "00000000-0000-0000-0000-00000000",
                "provisioningState": "Succeeded",
                "publicIPAddressVersion": "IPv4"
              }
            }
          ]
        }
      ]
  PublicIpPrefixes.ListAll:
    description: |-
      Gets all the public IP prefixes in a subscription.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/publicipprefixes/listall
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPPrefixes/test-ipprefix",
              "sku": {
                "name": "Standard"
              },
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "name": "test-ipprefix",
              "type": "Microsoft.Network/publicIPPrefixes",
              "location": "westus",
              "properties": {
                "ipTags": [],
                "ipPrefix": "41.85.154.247/30",
                "prefixLength": 30,
                "resourceGuid": "00000000-0000-0000-0000-00000000",
                "provisioningState": "Succeeded",
                "publicIPAddresses": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPAddresses/PublicIpAddress1"
                  }
                ],
                "publicIPAddressVersion": "IPv4"
              }
            },
            {
              "id": "/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/publicIPPrefixes/ipprefix01",
              "sku": {
                "name": "Standard"
              },
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "name": "ipprefix01",
              "type": "Microsoft.Network/publicIPPrefixes",
              "location": "westus",
              "properties": {
                "ipTags": [],
                "ipPrefix": "40.85.154.247/30",
                "prefixLength": 30,
                "resourceGuid": "00000000-0000-0000-0000-00000000",
                "provisioningState": "Succeeded",
                "publicIPAddressVersion": "IPv4"
              }
            },
            {
              "id": "/subscriptions/subid/resourceGroups/rg3/providers/Microsoft.Network/publicIPPrefixes/pfx",
              "sku": {
                "name": "Standard"
              },
              "etag": "W/\"00000000-0000-0000-0000-00000000\"",
              "name": "pfx",
              "type": "Microsoft.Network/publicIPPrefixes",
              "location": "westus",
              "properties": {
                "ipTags": [],
                "ipPrefix": "25.101.84.16/30",
                "prefixLength": 30,
                "resourceGuid": "00000000-0000-0000-0000-00000000",
                "provisioningState": "Succeeded",
                "publicIPAddressVersion": "IPv4",
                "loadBalancerFrontendIpConfiguration": {
                  "id": "/subscriptions/subid/resourceGroups/rg3/providers/Microsoft.Network/loadBalancers/lb-pfx/frontendIPConfigurations/ipconfig1"
                }
              }
            }
          ]
        }
      ]
  PublicIpPrefixes.UpdateTags:
    description: |-
      Updates public IP prefix tags.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/publicipprefixes/updatetags
    example:
      inputs: [
        {
          "tags": {
            "tag1": "value1",
            "tag2": "value2"
          }
        }
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/publicIPPrefixes/test-ipprefix",
          "sku": {
            "name": "Standard"
          },
          "etag": "W/\"00000000-0000-0000-0000-00000000\"",
          "name": "test-ipprefix",
          "tags": {
            "tag1": "value1",
            "tag2": "value2"
          },
          "type": "Microsoft.Network/publicIPPrefixes",
          "location": "westus",
          "properties": {
            "ipTags": [],
            "ipPrefix": "40.85.154.247/30",
            "prefixLength": 30,
            "resourceGuid": "00000000-0000-0000-0000-00000000",
            "provisioningState": "Succeeded",
            "publicIPAddressVersion": "IPv4"
          }
        }
      ]
  PutBastionShareableLink.PutBastionShareableLink:
    description: |-
      Creates a Bastion Shareable Links for all the VMs specified in the request.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/putbastionshareablelink/putbastionshareablelink
    example:
      inputs: [
        {
          "vms": [
            {
              "vm": {
                "id": "/subscriptions/subid/resourceGroups/rgx/providers/Microsoft.Compute/virtualMachines/vm1"
              }
            },
            {
              "vm": {
                "id": "/subscriptions/subid/resourceGroups/rgx/providers/Microsoft.Compute/virtualMachines/vm2"
              }
            }
          ]
        }
      ]
      outputs: [
        {
          "value": [
            {
              "vm": {
                "id": "/subscriptions/subid/resourceGroups/rgx/providers/Microsoft.Compute/virtualMachines/vm1"
              },
              "bsl": "http://bst-bastionhostid.bastion.com/api/shareable-url/tokenvm1",
              "createdAt": "2019-10-18T12:00:00.0000Z"
            },
            {
              "vm": {
                "id": "/subscriptions/subid/resourceGroups/rgx/providers/Microsoft.Compute/virtualMachines/vm2"
              },
              "bsl": "http://bst-bastionhostid.bastion.com/api/shareable-url/tokenvm2",
              "createdAt": "2019-10-17T12:00:00.0000Z"
            }
          ]
        }
      ]
  ResourceNavigationLinks.List:
    description: |-
      Gets a list of resource navigation links for a subnet.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/resourcenavigationlinks/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet/subnets/subnet/resourceNavigationLinks/redisCache_redis-tester",
              "etag": "W/\"00000000-0000-0000-0000-000000000000\"",
              "name": "redisCache_redis-tester",
              "type": "Microsoft.Network/virtualNetworks/subnets/resourceNavigationLinks",
              "properties": {
                "link": "/subscriptions/subid/resourceGroups/another-rg/providers/Microsoft.Cache/Redis/redis-tester",
                "provisioningState": "Succeeded",
                "linkedResourceType": "Microsoft.Cache/redis"
              }
            }
          ]
        }
      ]
  Routes.CreateOrUpdate:
    description: |-
      Creates or updates a route in the specified route table.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/routes/createorupdate
    example:
      inputs: [
        {
          "properties": {
            "nextHopType": "VirtualNetworkGateway",
            "addressPrefix": "10.0.3.0/24"
          }
        }
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/routeTables/testrt/routes/route1",
          "name": "route1",
          "properties": {
            "nextHopType": "VirtualNetworkGateway",
            "addressPrefix": "10.0.3.0/24",
            "provisioningState": "Succeeded"
          }
        }
      ]
  Routes.Delete:
    description: |-
      Deletes the specified route from a route table.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/routes/delete
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  Routes.Get:
    description: |-
      Gets the specified route from a route table.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/routes/get
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/routeTables/testrt/routes/route1",
          "name": "route1",
          "properties": {
            "nextHopType": "Internet",
            "addressPrefix": "10.0.3.0/24",
            "provisioningState": "Succeeded"
          }
        }
      ]
  Routes.List:
    description: |-
      Gets all routes in a route table.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/routes/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/routeTables/testrt/routes/route1",
              "name": "route1",
              "properties": {
                "nextHopType": "Internet",
                "addressPrefix": "10.0.3.0/24",
                "provisioningState": "Succeeded"
              }
            },
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/routeTables/testrt/routes/route2",
              "name": "route2",
              "properties": {
                "nextHopType": "VirtualNetworkGateway",
                "addressPrefix": "10.0.2.0/24",
                "provisioningState": "Succeeded"
              }
            }
          ]
        }
      ]
  RouteTables.CreateOrUpdate:
    description: |-
      Create or updates a route table in a specified resource group.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/routetables/createorupdate
    example:
      inputs: [
        {
          "location": "westus"
        }
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/routeTables/testrt",
          "name": "testrt",
          "type": "Microsoft.Network/routeTables",
          "location": "westus",
          "properties": {
            "routes": [],
            "provisioningState": "Succeeded",
            "disableBgpRoutePropagation": true
          }
        }
      ]
  RouteTables.Delete:
    description: |-
      Deletes the specified route table.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/routetables/delete
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  RouteTables.Get:
    description: |-
      Gets the specified route table.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/routetables/get
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/routeTables/testrt",
          "name": "testrt",
          "type": "Microsoft.Network/routeTables",
          "location": "westus",
          "properties": {
            "routes": [
              {
                "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/routeTables/testrt/routes/route1",
                "name": "route1",
                "properties": {
                  "nextHopType": "VirtualNetworkGateway",
                  "addressPrefix": "10.0.3.0/24",
                  "provisioningState": "Succeeded"
                }
              }
            ],
            "provisioningState": "Succeeded",
            "disableBgpRoutePropagation": false
          }
        }
      ]
  RouteTables.List:
    description: |-
      Gets all route tables in a resource group.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/routetables/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/routeTables/testrt",
              "name": "testrt",
              "type": "Microsoft.Network/routeTables",
              "location": "westus",
              "properties": {
                "routes": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/routeTables/testrt/routes/route1",
                    "name": "route1",
                    "properties": {
                      "nextHopType": "VirtualNetworkGateway",
                      "addressPrefix": "10.0.3.0/24",
                      "provisioningState": "Succeeded"
                    }
                  }
                ],
                "provisioningState": "Succeeded",
                "disableBgpRoutePropagation": true
              }
            },
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/routeTables/testrt2",
              "name": "testrt2",
              "type": "Microsoft.Network/routeTables",
              "location": "westus",
              "properties": {
                "routes": [],
                "provisioningState": "Succeeded",
                "disableBgpRoutePropagation": true
              }
            }
          ]
        }
      ]
  RouteTables.ListAll:
    description: |-
      Gets all route tables in a subscription.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/routetables/listall
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/routeTables/testrt",
              "name": "testrt",
              "type": "Microsoft.Network/routeTables",
              "location": "westus",
              "properties": {
                "routes": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/routeTables/testrt/routes/route1",
                    "name": "route1",
                    "properties": {
                      "nextHopType": "VirtualNetworkGateway",
                      "addressPrefix": "10.0.3.0/24",
                      "provisioningState": "Succeeded"
                    }
                  }
                ],
                "provisioningState": "Succeeded"
              }
            },
            {
              "id": "/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/routeTables/testrt3",
              "name": "testrt3",
              "type": "Microsoft.Network/routeTables",
              "location": "westus",
              "properties": {
                "routes": [],
                "provisioningState": "Succeeded"
              }
            }
          ]
        }
      ]
  RouteTables.UpdateTags:
    description: |-
      Updates a route table tags.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/routetables/updatetags
    example:
      inputs: [
        {
          "tags": {
            "tag1": "value1",
            "tag2": "value2"
          }
        }
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/routeTables/testrt",
          "name": "testrt",
          "tags": {
            "tag1": "value1",
            "tag2": "value2"
          },
          "type": "Microsoft.Network/routeTables",
          "location": "westus",
          "properties": {
            "routes": [],
            "provisioningState": "Succeeded"
          }
        }
      ]
  SecurityPartnerProviders.CreateOrUpdate:
    description: |-
      Creates or updates the specified Security Partner Provider.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/securitypartnerproviders/createorupdate
    example:
      inputs: [
        {
          "tags": {
            "key1": "value1"
          },
          "location": "West US",
          "properties": {
            "virtualHub": {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/hub1"
            },
            "securityProviderName": "ZScaler"
          }
        }
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/securityPartnerProviders/securityPartnerProvider",
          "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
          "name": "securityPartnerProvider",
          "tags": {
            "key1": "value1"
          },
          "type": "Microsoft.Network/securityPartnerProviders",
          "location": "West US",
          "properties": {
            "virtualHub": {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/hub1"
            },
            "provisioningState": "Succeeded",
            "securityProviderName": "ZScaler"
          }
        }
      ]
  SecurityPartnerProviders.Delete:
    description: |-
      Deletes the specified Security Partner Provider.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/securitypartnerproviders/delete
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  SecurityPartnerProviders.Get:
    description: |-
      Gets the specified Security Partner Provider.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/securitypartnerproviders/get
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/securityPartnerProviders/securityPartnerProvider",
          "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
          "name": "securityPartnerProvider",
          "tags": {
            "key1": "value1"
          },
          "type": "Microsoft.Network/securityPartnerProviders",
          "location": "West US",
          "properties": {
            "virtualHub": {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/hub1"
            },
            "connectionStatus": "Unknown",
            "provisioningState": "Succeeded",
            "securityProviderName": "ZScaler"
          }
        }
      ]
  SecurityPartnerProviders.List:
    description: |-
      Gets all the Security Partner Providers in a subscription.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/securitypartnerproviders/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/securityPartnerProviders/securityPartnerProvider",
              "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
              "name": "securityPartnerProvider",
              "tags": {
                "key1": "value1"
              },
              "type": "Microsoft.Network/securityPartnerProviders",
              "location": "West US",
              "properties": {
                "virtualHub": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/hub1"
                },
                "connectionStatus": "Unknown",
                "provisioningState": "Succeeded",
                "securityProviderName": "ZScaler"
              }
            }
          ]
        }
      ]
  SecurityPartnerProviders.ListByResourceGroup:
    description: |-
      Lists all Security Partner Providers in a resource group.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/securitypartnerproviders/listbyresourcegroup
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/securityPartnerProviders/securityPartnerProvider",
              "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
              "name": "securityPartnerProvider",
              "tags": {
                "key1": "value1"
              },
              "type": "Microsoft.Network/securityPartnerProviders",
              "location": "West US",
              "properties": {
                "virtualHub": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualHubs/hub1"
                },
                "connectionStatus": "Unknown",
                "provisioningState": "Succeeded",
                "securityProviderName": "ZScaler"
              }
            }
          ]
        }
      ]
  SecurityPartnerProviders.UpdateTags:
    description: |-
      Updates tags of a Security Partner Provider resource.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/securitypartnerproviders/updatetags
    example:
      inputs: [
        {
          "tags": {
            "tag1": "value1",
            "tag2": "value2"
          }
        }
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/azfwtest/providers/Microsoft.Network/securityPartnerProviders/securityPartnerProvider",
          "name": "fw1",
          "tags": {
            "tag1": "value1",
            "tag2": "value2"
          },
          "type": "Microsoft.Network/securityPartnerProviders",
          "location": "brazilsouth",
          "properties": {
            "provisioningState": "Succeeded",
            "securityProviderName": "ZScaler"
          }
        }
      ]
  SecurityRules.CreateOrUpdate:
    description: |-
      Creates or updates a security rule in the specified network security group.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/securityrules/createorupdate
    example:
      inputs: [
        {
          "properties": {
            "access": "Deny",
            "priority": 100,
            "protocol": "*",
            "direction": "Outbound",
            "sourcePortRange": "*",
            "sourceAddressPrefix": "10.0.0.0/8",
            "destinationPortRange": "8080",
            "destinationAddressPrefix": "11.0.0.0/8"
          }
        }
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/securityRules/rule1",
          "name": "rule1",
          "properties": {
            "access": "Deny",
            "priority": 100,
            "protocol": "*",
            "direction": "Outbound",
            "sourcePortRange": "*",
            "provisioningState": "Succeeded",
            "sourceAddressPrefix": "10.0.0.0/8",
            "destinationPortRange": "8080",
            "destinationAddressPrefix": "11.0.0.0/8"
          }
        }
      ]
  SecurityRules.Delete:
    description: |-
      Deletes the specified network security rule.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/securityrules/delete
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  SecurityRules.Get:
    description: |-
      Get the specified network security rule.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/securityrules/get
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/securityRules/rule1",
          "name": "rule1",
          "properties": {
            "access": "Allow",
            "priority": 130,
            "protocol": "*",
            "direction": "Inbound",
            "sourcePortRange": "*",
            "provisioningState": "Succeeded",
            "sourceAddressPrefix": "*",
            "destinationPortRange": "80",
            "destinationAddressPrefix": "*"
          }
        }
      ]
  SecurityRules.List:
    description: |-
      Gets all security rules in a network security group.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/securityrules/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/testnsg/securityRules/rule1",
              "name": "rule1",
              "properties": {
                "access": "Allow",
                "priority": 130,
                "protocol": "*",
                "direction": "Inbound",
                "sourcePortRange": "*",
                "provisioningState": "Succeeded",
                "sourceAddressPrefix": "*",
                "destinationPortRange": "80",
                "destinationAddressPrefix": "*"
              }
            }
          ]
        }
      ]
  ServiceAssociationLinks.List:
    description: |-
      Gets a list of service association links for a subnet.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/serviceassociationlinks/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet/subnets/subnet/serviceAssociationLinks/acisal",
              "etag": "W/\"00000000-0000-0000-0000-000000000000\"",
              "name": "acisal",
              "type": "Microsoft.Network/virtualNetworks/subnets/serviceAssociationLinks",
              "properties": {
                "locations": [
                  "westus"
                ],
                "allowDelete": true,
                "provisioningState": "Succeeded",
                "linkedResourceType": "Microsoft.ContainerInstance/containerGroups"
              }
            }
          ]
        }
      ]
  ServiceTags.List:
    description: |-
      Gets a list of service tag information resources.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/servicetags/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "/subscriptions/subId/providers/Microsoft.Network/serviceTags/public",
          "name": "public",
          "type": "Microsoft.Network/serviceTags",
          "cloud": "Public",
          "values": [
            {
              "id": "ApiManagement",
              "name": "ApiManagement",
              "properties": {
                "region": "",
                "changeNumber": "7",
                "systemService": "AzureApiManagement",
                "addressPrefixes": [
                  "13.64.39.16/32",
                  "40.74.146.80/31",
                  "40.74.147.32/28"
                ]
              }
            },
            {
              "id": "ApiManagement.AustraliaCentral",
              "name": "ApiManagement.AustraliaCentral",
              "properties": {
                "region": "australiacentral",
                "changeNumber": "2",
                "systemService": "AzureApiManagement",
                "addressPrefixes": [
                  "20.36.106.68/31",
                  "20.36.107.176/28"
                ]
              }
            },
            {
              "id": "AppService",
              "name": "AppService",
              "properties": {
                "region": "",
                "changeNumber": "13",
                "systemService": "AzureAppService",
                "addressPrefixes": [
                  "13.64.73.110/32",
                  "191.235.208.12/32",
                  "191.235.215.184/32"
                ]
              }
            },
            {
              "id": "ServiceBus",
              "name": "ServiceBus",
              "properties": {
                "region": "",
                "changeNumber": "10",
                "systemService": "AzureServiceBus",
                "addressPrefixes": [
                  "23.98.82.96/29",
                  "40.68.127.68/32",
                  "40.70.146.64/29"
                ]
              }
            },
            {
              "id": "ServiceBus.EastUS2",
              "name": "ServiceBus.EastUS2",
              "properties": {
                "region": "eastus2",
                "changeNumber": "1",
                "systemService": "AzureServiceBus",
                "addressPrefixes": [
                  "13.68.110.36/32",
                  "40.70.146.64/29"
                ]
              }
            }
          ],
          "nextLink": "https://management.azure.com/subscriptions/subid/providers/Microsoft.Network/locations/centraluseuap/serviceTags?api-version=2020-06-01&changenumber=changenumber&$skipToken={skipToken}",
          "changeNumber": "63"
        }
      ]
  Subnets.CreateOrUpdate:
    description: |-
      Creates or updates a subnet in the specified virtual network.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/subnets/createorupdate
    example:
      inputs: [
        {
          "properties": {
            "addressPrefix": "10.0.0.0/16"
          }
        }
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/subnet-test/providers/Microsoft.Network/virtualNetworks/vnetname/subnets/subnet1",
          "name": "subnet1",
          "properties": {
            "addressPrefix": "10.0.0.0/16",
            "provisioningState": "Succeeded"
          }
        }
      ]
  Subnets.Delete:
    description: |-
      Deletes the specified subnet.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/subnets/delete
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  Subnets.Get:
    description: |-
      Gets the specified subnet by virtual network and resource group.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/subnets/get
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/subnet-test/providers/Microsoft.Network/virtualNetworks/vnetname/subnets/subnet1",
          "name": "subnet1",
          "properties": {
            "addressPrefix": "10.0.0.0/16",
            "provisioningState": "Succeeded"
          }
        }
      ]
  Subnets.List:
    description: |-
      Gets all subnets in a virtual network.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/subnets/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subid/resourceGroups/subnet-test/providers/Microsoft.Network/virtualNetworks/vnetname/subnets/subnet1",
              "name": "subnet1",
              "properties": {
                "addressPrefix": "10.0.0.0/16",
                "provisioningState": "Succeeded"
              }
            },
            {
              "id": "/subscriptions/subid/resourceGroups/subnet-test/providers/Microsoft.Network/virtualNetworks/vnetname/subnets/subnet2",
              "name": "subnet2",
              "properties": {
                "addressPrefix": "10.0.0.0/16",
                "provisioningState": "Succeeded"
              }
            }
          ]
        }
      ]
  Subnets.PrepareNetworkPolicies:
    description: |-
      Prepares a subnet by applying network intent policies.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/subnets/preparenetworkpolicies
    example:
      inputs: [
        {
          "serviceName": "Microsoft.Sql/managedInstances"
        }
      ]
      outputs: [
        {}
      ]
  Subnets.UnprepareNetworkPolicies:
    description: |-
      Unprepares a subnet by removing network intent policies.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/subnets/unpreparenetworkpolicies
    example:
      inputs: [
        {
          "serviceName": "Microsoft.Sql/managedInstances"
        }
      ]
      outputs: [
        {}
      ]
  Usages.List:
    description: |-
      List network usages for a subscription.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/usages/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subid/providers/Microsoft.Network/locations/westus/usages/VirtualNetworks",
              "name": {
                "value": "VirtualNetworks",
                "localizedValue": "Virtual Networks"
              },
              "unit": "Count",
              "limit": 50,
              "currentValue": 8
            },
            {
              "id": "/subscriptions/subid/providers/Microsoft.Network/locations/westus/usages/StaticPublicIPAddresses",
              "name": {
                "value": "StaticPublicIPAddresses",
                "localizedValue": "Static Public IP Addresses"
              },
              "unit": "Count",
              "limit": 20,
              "currentValue": 3
            },
            {
              "id": "/subscriptions/subid/providers/Microsoft.Network/locations/westus/usages/NetworkSecurityGroups",
              "name": {
                "value": "NetworkSecurityGroups",
                "localizedValue": "Network Security Groups"
              },
              "unit": "Count",
              "limit": 100,
              "currentValue": 1
            },
            {
              "id": "/subscriptions/subid/providers/Microsoft.Network/locations/westus/usages/PublicIPAddresses",
              "name": {
                "value": "PublicIPAddresses",
                "localizedValue": "Public IP Addresses"
              },
              "unit": "Count",
              "limit": 60,
              "currentValue": 8
            },
            {
              "id": "/subscriptions/subid/providers/Microsoft.Network/locations/westus/usages/NetworkInterfaces",
              "name": {
                "value": "NetworkInterfaces",
                "localizedValue": "Network Interfaces"
              },
              "unit": "Count",
              "limit": 350,
              "currentValue": 2
            },
            {
              "id": "/subscriptions/subid/providers/Microsoft.Network/locations/westus/usages/LoadBalancers",
              "name": {
                "value": "LoadBalancers",
                "localizedValue": "Load Balancers"
              },
              "unit": "Count",
              "limit": 100,
              "currentValue": 2
            },
            {
              "id": "/subscriptions/subid/providers/Microsoft.Network/locations/westus/usages/ApplicationGateways",
              "name": {
                "value": "ApplicationGateways",
                "localizedValue": "Application Gateways"
              },
              "unit": "Count",
              "limit": 50,
              "currentValue": 1
            },
            {
              "id": "/subscriptions/subid/providers/Microsoft.Network/locations/westus/usages/RouteTables",
              "name": {
                "value": "RouteTables",
                "localizedValue": "Route Tables"
              },
              "unit": "Count",
              "limit": 100,
              "currentValue": 0
            },
            {
              "id": "/subscriptions/subid/providers/Microsoft.Network/locations/westus/usages/RouteFilters",
              "name": {
                "value": "RouteFilters",
                "localizedValue": "Route Filters"
              },
              "unit": "Count",
              "limit": 1000,
              "currentValue": 0
            },
            {
              "id": "/subscriptions/subid/providers/Microsoft.Network/locations/westus/usages/NetworkWatchers",
              "name": {
                "value": "NetworkWatchers",
                "localizedValue": "Network Watchers"
              },
              "unit": "Count",
              "limit": 1,
              "currentValue": 0
            },
            {
              "id": "/subscriptions/subid/providers/Microsoft.Network/locations/westus/usages/PacketCaptures",
              "name": {
                "value": "PacketCaptures",
                "localizedValue": "Packet Captures"
              },
              "unit": "Count",
              "limit": 10,
              "currentValue": 0
            },
            {
              "id": "/subscriptions/subid/providers/Microsoft.Network/locations/westus/usages/DnsServersPerVirtualNetwork",
              "name": {
                "value": "DnsServersPerVirtualNetwork",
                "localizedValue": "DNS servers per Virtual Network"
              },
              "unit": "Count",
              "limit": 9,
              "currentValue": 0
            },
            {
              "id": "/subscriptions/subid/providers/Microsoft.Network/locations/westus/usages/SubnetsPerVirtualNetwork",
              "name": {
                "value": "SubnetsPerVirtualNetwork",
                "localizedValue": "Subnets per Virtual Network"
              },
              "unit": "Count",
              "limit": 1000,
              "currentValue": 0
            },
            {
              "id": "/subscriptions/subid/providers/Microsoft.Network/locations/westus/usages/IPConfigurationsPerVirtualNetwork",
              "name": {
                "value": "IPConfigurationsPerVirtualNetwork",
                "localizedValue": "IP Configurations per Virtual Network"
              },
              "unit": "Count",
              "limit": 4096,
              "currentValue": 0
            },
            {
              "id": "/subscriptions/subid/providers/Microsoft.Network/locations/westus/usages/PeeringsPerVirtualNetwork",
              "name": {
                "value": "PeeringsPerVirtualNetwork",
                "localizedValue": "Peerings per Virtual Network"
              },
              "unit": "Count",
              "limit": 10,
              "currentValue": 0
            },
            {
              "id": "/subscriptions/subid/providers/Microsoft.Network/locations/westus/usages/SecurityRulesPerNetworkSecurityGroup",
              "name": {
                "value": "SecurityRulesPerNetworkSecurityGroup",
                "localizedValue": "Security rules per Network Security Group"
              },
              "unit": "Count",
              "limit": 200,
              "currentValue": 0
            },
            {
              "id": "/subscriptions/subid/providers/Microsoft.Network/locations/westus/usages/SecurityRuleAddressesOrPortsPerNetworkSecurityGroup",
              "name": {
                "value": "SecurityRuleAddressesOrPortsPerNetworkSecurityGroup",
                "localizedValue": "Security rules addresses or ports per Network Security Group"
              },
              "unit": "Count",
              "limit": 2000,
              "currentValue": 0
            },
            {
              "id": "/subscriptions/subid/providers/Microsoft.Network/locations/westus/usages/InboundRulesPerLoadBalancer",
              "name": {
                "value": "InboundRulesPerLoadBalancer",
                "localizedValue": "Inbound Rules per Load Balancer"
              },
              "unit": "Count",
              "limit": 150,
              "currentValue": 0
            },
            {
              "id": "/subscriptions/subid/providers/Microsoft.Network/locations/westus/usages/FrontendIPConfigurationPerLoadBalancer",
              "name": {
                "value": "FrontendIPConfigurationPerLoadBalancer",
                "localizedValue": "Frontend IP Configurations per Load Balancer"
              },
              "unit": "Count",
              "limit": 10,
              "currentValue": 0
            },
            {
              "id": "/subscriptions/subid/providers/Microsoft.Network/locations/westus/usages/outboundRulesPerLoadBalancer",
              "name": {
                "value": "outboundRulesPerLoadBalancer",
                "localizedValue": "Outbound Rules per Load Balancer"
              },
              "unit": "Count",
              "limit": 5,
              "currentValue": 0
            },
            {
              "id": "/subscriptions/subid/providers/Microsoft.Network/locations/westus/usages/RoutesPerRouteTable",
              "name": {
                "value": "RoutesPerRouteTable",
                "localizedValue": "Routes per Route Table"
              },
              "unit": "Count",
              "limit": 100,
              "currentValue": 0
            },
            {
              "id": "/subscriptions/subid/providers/Microsoft.Network/locations/westus/usages/SecondaryIPConfigurationsPerNetworkInterface",
              "name": {
                "value": "SecondaryIPConfigurationsPerNetworkInterface",
                "localizedValue": "Secondary IP Configurations per Network Interface"
              },
              "unit": "Count",
              "limit": 256,
              "currentValue": 0
            },
            {
              "id": "/subscriptions/subid/providers/Microsoft.Network/locations/westus/usages/InboundRulesPerNetworkInterface",
              "name": {
                "value": "InboundRulesPerNetworkInterface",
                "localizedValue": "Inbound rules per Network Interface"
              },
              "unit": "Count",
              "limit": 500,
              "currentValue": 0
            },
            {
              "id": "/subscriptions/subid/providers/Microsoft.Network/locations/westus/usages/RouteFilterRulesPerRouteFilter",
              "name": {
                "value": "RouteFilterRulesPerRouteFilter",
                "localizedValue": "Route filter rules per Route Filter"
              },
              "unit": "Count",
              "limit": 1,
              "currentValue": 0
            },
            {
              "id": "/subscriptions/subid/providers/Microsoft.Network/locations/westus/usages/RouteFiltersPerExpressRouteBgpPeering",
              "name": {
                "value": "RouteFiltersPerExpressRouteBgpPeering",
                "localizedValue": "Route filters per Express route BGP Peering"
              },
              "unit": "Count",
              "limit": 1,
              "currentValue": 0
            }
          ]
        }
      ]
  VirtualApplianceSites.CreateOrUpdate:
    description: |-
      Creates or updates the specified Network Virtual Appliance Site.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/virtualappliancesites/createorupdate
    example:
      inputs: [
        {
          "properties": {
            "o365Policy": {
              "breakOutCategories": {
                "allow": true,
                "default": true,
                "optimize": true
              }
            },
            "addressPrefix": "192.168.1.0/24"
          }
        }
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkVirtualAppliances/nva/virtualApplianceSites/site1",
          "etag": "W/\"72090554-7e3b-43f2-80ad-99a9020dcb11\"",
          "name": "site1",
          "properties": {
            "o365Policy": {
              "breakOutCategories": {
                "allow": true,
                "default": true,
                "optimize": true
              }
            },
            "addressPrefix": "192.168.1.0/24",
            "provisioningState": "Succeeded"
          }
        }
      ]
  VirtualApplianceSites.Delete:
    description: |-
      Deletes the specified site from a Virtual Appliance.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/virtualappliancesites/delete
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  VirtualApplianceSites.Get:
    description: |-
      Gets the specified Virtual Appliance Site.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/virtualappliancesites/get
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkVirtualAppliances/nva/virtualApplianceSites/site1",
          "etag": "W/\"72090554-7e3b-43f2-80ad-99a9020dcb11\"",
          "name": "site1",
          "properties": {
            "o365Policy": {
              "breakOutCategories": {
                "allow": true,
                "default": true,
                "optimize": true
              }
            },
            "addressPrefix": "192.168.1.0/24",
            "provisioningState": "Succeeded"
          }
        }
      ]
  VirtualApplianceSites.List:
    description: |-
      Lists all Network Virtual Appliance Sites in a Network Virtual Appliance resource.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/virtualappliancesites/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkVirtualAppliances/nva/virtualApplianceSites/site1",
              "etag": "W/\"72090554-7e3b-43f2-80ad-99a9020dcb11\"",
              "name": "site1",
              "properties": {
                "o365Policy": {
                  "breakOutCategories": {
                    "allow": true,
                    "default": true,
                    "optimize": true
                  }
                },
                "addressPrefix": "192.168.1.0/24",
                "provisioningState": "Succeeded"
              }
            }
          ]
        }
      ]
  VirtualApplianceSkus.Get:
    description: |-
      Retrieves a single available sku for network virtual appliance.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/virtualapplianceskus/get
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkVirtualApplianceSkus/ciscoSdwan",
          "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
          "name": "ciscoSdwan",
          "type": "Microsoft.Network/networkVirtualApplianceSkus",
          "properties": {
            "vendor": "Cisco",
            "availableVersions": [
              "11.12"
            ],
            "availableScaleUnits": [
              {
                "scaleUnit": "1",
                "instanceCount": 2
              },
              {
                "scaleUnit": "2",
                "instanceCount": 2
              }
            ]
          }
        }
      ]
  VirtualApplianceSkus.List:
    description: |-
      List all SKUs available for a virtual appliance.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/virtualapplianceskus/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/networkVirtualApplianceSkus/ciscoSdwan",
              "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
              "name": "ciscoSdwan",
              "type": "Microsoft.Network/networkVirtualApplianceSkus",
              "properties": {
                "vendor": "Cisco",
                "availableVersions": [
                  "11.12"
                ],
                "availableScaleUnits": [
                  {
                    "scaleUnit": "1",
                    "instanceCount": 2
                  },
                  {
                    "scaleUnit": "2",
                    "instanceCount": 2
                  }
                ]
              }
            }
          ]
        }
      ]
  VirtualNetworkPeerings.CreateOrUpdate:
    description: |-
      Creates or updates a peering in the specified virtual network.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/virtualnetworkpeerings/createorupdate
    example:
      inputs: [
        {
          "properties": {
            "useRemoteGateways": false,
            "allowGatewayTransit": false,
            "remoteVirtualNetwork": {
              "id": "/subscriptions/subid/resourceGroups/peerTest/providers/Microsoft.Network/virtualNetworks/vnet2"
            },
            "allowForwardedTraffic": true,
            "allowVirtualNetworkAccess": true
          }
        }
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/peerTest/providers/Microsoft.Network/virtualNetworks/vnet1/virtualNetworkPeerings/peer",
          "name": "peer",
          "properties": {
            "peeringState": "Initiated",
            "provisioningState": "Succeeded",
            "useRemoteGateways": false,
            "remoteAddressSpace": {
              "addressPrefixes": [
                "12.0.0.0/8"
              ]
            },
            "allowGatewayTransit": false,
            "remoteBgpCommunities": {
              "regionalCommunity": "12076:50004",
              "virtualNetworkCommunity": "12076:20002"
            },
            "remoteVirtualNetwork": {
              "id": "/subscriptions/subid/resourceGroups/peerTest/providers/Microsoft.Network/virtualNetworks/vnet2"
            },
            "allowForwardedTraffic": true,
            "allowVirtualNetworkAccess": true
          }
        }
      ]
  VirtualNetworkPeerings.Delete:
    description: |-
      Deletes the specified virtual network peering.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/virtualnetworkpeerings/delete
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  VirtualNetworkPeerings.Get:
    description: |-
      Gets the specified virtual network peering.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/virtualnetworkpeerings/get
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/peerTest/providers/Microsoft.Network/virtualNetworks/vnet1/virtualNetworkPeerings/peer",
          "name": "peer",
          "properties": {
            "peeringState": "Initiated",
            "provisioningState": "Succeeded",
            "useRemoteGateways": false,
            "remoteAddressSpace": {
              "addressPrefixes": [
                "12.0.0.0/8"
              ]
            },
            "allowGatewayTransit": false,
            "remoteBgpCommunities": {
              "regionalCommunity": "12076:50004",
              "virtualNetworkCommunity": "12076:20002"
            },
            "remoteVirtualNetwork": {
              "id": "/subscriptions/subid/resourceGroups/peerTest/providers/Microsoft.Network/virtualNetworks/vnet2"
            },
            "allowForwardedTraffic": true,
            "allowVirtualNetworkAccess": true
          }
        }
      ]
  VirtualNetworkPeerings.List:
    description: |-
      Gets all virtual network peerings in a virtual network.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/virtualnetworkpeerings/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subid/resourceGroups/peerTest/providers/Microsoft.Network/virtualNetworks/vnet1/virtualNetworkPeerings/peer",
              "name": "peer",
              "properties": {
                "peeringState": "Initiated",
                "provisioningState": "Succeeded",
                "useRemoteGateways": false,
                "remoteAddressSpace": {
                  "addressPrefixes": [
                    "12.0.0.0/8"
                  ]
                },
                "allowGatewayTransit": false,
                "remoteBgpCommunities": {
                  "regionalCommunity": "12076:50004",
                  "virtualNetworkCommunity": "12076:20002"
                },
                "remoteVirtualNetwork": {
                  "id": "/subscriptions/subid/resourceGroups/peerTest/providers/Microsoft.Network/virtualNetworks/vnet2"
                },
                "allowForwardedTraffic": true,
                "allowVirtualNetworkAccess": true
              }
            },
            {
              "id": "/subscriptions/subid/resourceGroups/peerTest/providers/Microsoft.Network/virtualNetworks/vnet1/virtualNetworkPeerings/peer2",
              "name": "peer",
              "properties": {
                "peeringState": "Initiated",
                "provisioningState": "Succeeded",
                "useRemoteGateways": false,
                "remoteAddressSpace": {
                  "addressPrefixes": [
                    "13.0.0.0/8"
                  ]
                },
                "allowGatewayTransit": false,
                "remoteBgpCommunities": {
                  "regionalCommunity": "12076:50004",
                  "virtualNetworkCommunity": "12076:20003"
                },
                "remoteVirtualNetwork": {
                  "id": "/subscriptions/subid/resourceGroups/peerTest/providers/Microsoft.Network/virtualNetworks/vnet3"
                },
                "allowForwardedTraffic": false,
                "allowVirtualNetworkAccess": true
              }
            }
          ]
        }
      ]
  VirtualNetworks.CheckIpAddressAvailability:
    description: |-
      Checks whether a private IP address is available for use.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/virtualnetworks/checkipaddressavailability
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "available": false,
          "availableIPAddresses": [
            "10.0.1.5",
            "10.0.1.6",
            "10.0.1.7",
            "10.0.1.8",
            "10.0.1.9"
          ]
        }
      ]
  VirtualNetworks.CreateOrUpdate:
    description: |-
      Creates or updates a virtual network in the specified resource group.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/virtualnetworks/createorupdate
    example:
      inputs: [
        {
          "location": "eastus",
          "properties": {
            "addressSpace": {
              "addressPrefixes": [
                "10.0.0.0/16"
              ]
            }
          }
        }
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet",
          "name": "test-vnet",
          "type": "Microsoft.Network/virtualNetworks",
          "location": "eastus",
          "properties": {
            "subnets": [],
            "addressSpace": {
              "addressPrefixes": [
                "10.0.0.0/16"
              ]
            },
            "provisioningState": "Succeeded",
            "virtualNetworkPeerings": []
          }
        }
      ]
  VirtualNetworks.Delete:
    description: |-
      Deletes the specified virtual network.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/virtualnetworks/delete
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  VirtualNetworks.Get:
    description: |-
      Gets the specified virtual network by resource group.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/virtualnetworks/get
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet",
          "name": "test-vnet",
          "type": "Microsoft.Network/virtualNetworks",
          "location": "westus",
          "properties": {
            "subnets": [
              {
                "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/subnet1",
                "name": "subnet1",
                "properties": {
                  "addressPrefix": "10.0.1.0/24",
                  "ipConfigurations": [
                    {
                      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/loadBalancers/lb/frontendIPConfigurations/fe"
                    }
                  ],
                  "provisioningState": "Succeeded"
                }
              }
            ],
            "addressSpace": {
              "addressPrefixes": [
                "10.0.0.0/16"
              ]
            },
            "provisioningState": "Succeeded",
            "virtualNetworkPeerings": []
          }
        }
      ]
  VirtualNetworks.List:
    description: |-
      Gets all virtual networks in a resource group.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/virtualnetworks/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet1",
              "name": "vnet1",
              "type": "Microsoft.Network/virtualNetworks",
              "location": "westus",
              "properties": {
                "subnets": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/test-1",
                    "name": "test-1",
                    "properties": {
                      "addressPrefix": "10.0.0.0/24",
                      "provisioningState": "Succeeded"
                    }
                  }
                ],
                "dhcpOptions": {
                  "dnsServers": []
                },
                "addressSpace": {
                  "addressPrefixes": [
                    "10.0.0.0/8"
                  ]
                },
                "provisioningState": "Succeeded",
                "virtualNetworkPeerings": []
              }
            },
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet2",
              "name": "vnet2",
              "type": "Microsoft.Network/virtualNetworks",
              "location": "westus",
              "properties": {
                "subnets": [],
                "dhcpOptions": {
                  "dnsServers": [
                    "8.8.8.8"
                  ]
                },
                "addressSpace": {
                  "addressPrefixes": [
                    "10.0.0.0/16"
                  ]
                },
                "provisioningState": "Succeeded",
                "virtualNetworkPeerings": []
              }
            }
          ]
        }
      ]
  VirtualNetworks.ListAll:
    description: |-
      Gets all virtual networks in a subscription.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/virtualnetworks/listall
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet1",
              "name": "vnet1",
              "type": "Microsoft.Network/virtualNetworks",
              "location": "westus",
              "properties": {
                "subnets": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/test-1",
                    "name": "test-1",
                    "properties": {
                      "addressPrefix": "10.0.0.0/24",
                      "provisioningState": "Succeeded"
                    }
                  }
                ],
                "dhcpOptions": {
                  "dnsServers": []
                },
                "addressSpace": {
                  "addressPrefixes": [
                    "10.0.0.0/8"
                  ]
                },
                "provisioningState": "Succeeded",
                "virtualNetworkPeerings": []
              }
            },
            {
              "id": "/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/virtualNetworks/vnet2",
              "name": "vnet2",
              "type": "Microsoft.Network/virtualNetworks",
              "location": "westus",
              "properties": {
                "subnets": [],
                "dhcpOptions": {
                  "dnsServers": [
                    "8.8.8.8"
                  ]
                },
                "addressSpace": {
                  "addressPrefixes": [
                    "10.0.0.0/16"
                  ]
                },
                "provisioningState": "Succeeded",
                "virtualNetworkPeerings": []
              }
            }
          ]
        }
      ]
  VirtualNetworks.ListUsage:
    description: |-
      Lists usage stats.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/virtualnetworks/listusage
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetName/subnets/GatewaySubnet",
              "name": {
                "value": "SubnetSpace",
                "localizedValue": "Subnet size and usage"
              },
              "unit": "Count",
              "limit": -1,
              "currentValue": -1
            },
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnetName/subnets/newSubnet",
              "name": {
                "value": "SubnetSpace",
                "localizedValue": "Subnet size and usage"
              },
              "unit": "Count",
              "limit": 3,
              "currentValue": 2
            }
          ]
        }
      ]
  VirtualNetworks.UpdateTags:
    description: |-
      Updates a virtual network tags.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/virtualnetworks/updatetags
    example:
      inputs: [
        {
          "tags": {
            "tag1": "value1",
            "tag2": "value2"
          }
        }
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet",
          "name": "test-vnet",
          "tags": {
            "tag1": "value1",
            "tag2": "value2"
          },
          "type": "Microsoft.Network/virtualNetworks",
          "location": "westus",
          "properties": {
            "subnets": [],
            "addressSpace": {
              "addressPrefixes": [
                "10.0.0.0/16"
              ]
            },
            "provisioningState": "Succeeded",
            "virtualNetworkPeerings": []
          }
        }
      ]
  VirtualRouterPeerings.CreateOrUpdate:
    description: |-
      Creates or updates the specified Virtual Router Peering.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/virtualrouterpeerings/createorupdate
    example:
      inputs: [
        {
          "properties": {
            "peerIp": "192.168.1.5",
            "peerAsn": 20000
          }
        }
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualRouters/virtualRouter/peerings/peering1",
          "etag": "W/\"72090554-7e3b-43f2-80ad-99a9020dcb11\"",
          "name": "peering1",
          "properties": {
            "peerIp": "192.168.1.5",
            "peerAsn": 20000,
            "provisioningState": "Succeeded"
          }
        }
      ]
  VirtualRouterPeerings.Delete:
    description: |-
      Deletes the specified peering from a Virtual Router.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/virtualrouterpeerings/delete
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  VirtualRouterPeerings.Get:
    description: |-
      Gets the specified Virtual Router Peering.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/virtualrouterpeerings/get
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualRouters/virtualRouter/peerings/peering1",
          "etag": "W/\"72090554-7e3b-43f2-80ad-99a9020dcb11\"",
          "name": "peering1",
          "properties": {
            "peerIp": "192.168.1.5",
            "peerAsn": 20000,
            "provisioningState": "Succeeded"
          }
        }
      ]
  VirtualRouterPeerings.List:
    description: |-
      Lists all Virtual Router Peerings in a Virtual Router resource.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/virtualrouterpeerings/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualRouters/virtualRouter/peerings/peering1",
              "etag": "W/\"72090554-7e3b-43f2-80ad-99a9020dcb11\"",
              "name": "peering1",
              "properties": {
                "peerIp": "192.168.1.5",
                "peerAsn": 20000,
                "provisioningState": "Succeeded"
              }
            }
          ]
        }
      ]
  VirtualRouters.CreateOrUpdate:
    description: |-
      Creates or updates the specified Virtual Router.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/virtualrouters/createorupdate
    example:
      inputs: [
        {
          "tags": {
            "key1": "value1"
          },
          "location": "West US",
          "properties": {
            "hostedGateway": {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vnetGateway"
            }
          }
        }
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualRouters/virtualRouter",
          "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
          "name": "virtualRouter",
          "tags": {
            "key1": "value1"
          },
          "type": "Microsoft.Network/virtualRouters",
          "location": "West US",
          "properties": {
            "peerings": [
              {
                "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualRouters/virtualRouter/peerings/peering1"
              }
            ],
            "hostedGateway": {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vnetGateway"
            },
            "virtualRouterAsn": 10000,
            "virtualRouterIps": [
              "192.168.1.1",
              "192.168.1.2"
            ],
            "provisioningState": "Succeeded"
          }
        }
      ]
  VirtualRouters.Delete:
    description: |-
      Deletes the specified Virtual Router.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/virtualrouters/delete
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  VirtualRouters.Get:
    description: |-
      Gets the specified Virtual Router.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/virtualrouters/get
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualRouters/virtualRouter",
          "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
          "name": "virtualRouter",
          "tags": {
            "key1": "value1"
          },
          "type": "Microsoft.Network/virtualRouters",
          "location": "West US",
          "properties": {
            "peerings": [
              {
                "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualRouters/virtualRouter/peerings/peering1"
              }
            ],
            "hostedGateway": {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vnetGateway"
            },
            "virtualRouterAsn": 10000,
            "virtualRouterIps": [
              "192.168.1.1",
              "192.168.1.2"
            ],
            "provisioningState": "Succeeded"
          }
        }
      ]
  VirtualRouters.List:
    description: |-
      Gets all the Virtual Routers in a subscription.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/virtualrouters/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualRouters/virtualRouter",
              "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
              "name": "virtualRouter",
              "tags": {
                "key1": "value1"
              },
              "type": "Microsoft.Network/virtualRouters",
              "location": "West US",
              "properties": {
                "peerings": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualRouters/virtualRouter/peerings/peering1"
                  }
                ],
                "hostedGateway": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vnetGateway"
                },
                "virtualRouterAsn": 10000,
                "virtualRouterIps": [
                  "192.168.1.1",
                  "192.168.1.2"
                ],
                "provisioningState": "Succeeded"
              }
            }
          ]
        }
      ]
  VirtualRouters.ListByResourceGroup:
    description: |-
      Lists all Virtual Routers in a resource group.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/virtualrouters/listbyresourcegroup
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualRouters/virtualRouter",
              "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
              "name": "virtualRouter",
              "tags": {
                "key1": "value1"
              },
              "type": "Microsoft.Network/virtualRouters",
              "location": "West US",
              "properties": {
                "peerings": [
                  {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualRouters/virtualRouter/peerings/peering1"
                  }
                ],
                "hostedGateway": {
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworkGateways/vnetGateway"
                },
                "virtualRouterAsn": 10000,
                "virtualRouterIps": [
                  "192.168.1.1",
                  "192.168.1.2"
                ],
                "provisioningState": "Succeeded"
              }
            }
          ]
        }
      ]
  WebCategories.Get:
    description: |-
      Gets the specified Azure Web Category.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/webcategories/get
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "/subscriptions/4de8428a-4a92-4cea-90ff-b47128b8cab8/providers/Microsoft.Network/azureWebCategories/Arts",
          "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
          "name": "Arts",
          "type": "Microsoft.Network/azureWebCategories",
          "properties": {
            "group": "General"
          }
        }
      ]
  WebCategories.ListBySubscription:
    description: |-
      Gets all the Azure Web Categories in a subscription.
    versions:
      from: 2020.11.1
      to: 2020.11.1
    link: https://docs.microsoft.com/en-us/rest/api/virtualnetwork/webcategories/listbysubscription
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/4de8428a-4a92-4cea-90ff-b47128b8cab8/providers/Microsoft.Network/azureWebCategories/Arts",
              "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
              "name": "Arts",
              "type": "Microsoft.Network/azureWebCategories",
              "properties": {
                "group": "General"
              }
            }
          ]
        }
      ]