Product:
  name: Azure RedisCache
  versions: [2020.6.1,2021.3.1]
  package: microsoft.azure.rediscache
  description: |-
    RedisCache
  link: https://docs.microsoft.com/en-us/azure/azure-cache-for-redis/
  contentType: json
Operations:
  FirewallRules.CreateOrUpdate:
    description: |-
      Create or update a redis cache firewall rule
    versions:
      from: 2020.6.1
      to: 2020.6.1
    link: https://docs.microsoft.com/en-us/rest/api/redis/firewallrules/createorupdate
    example:
      inputs: [
        {
          "properties": {
            "endIP": "192.168.1.4",
            "startIP": "192.168.1.1"
          }
        }
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/Redis/cache1/firewallRules/rule1",
          "name": "cache1/rule1",
          "type": "Microsoft.Cache/Redis/firewallRules",
          "properties": {
            "endIP": "192.168.1.4",
            "startIP": "192.168.1.1"
          }
        }
      ]
  FirewallRules.Delete:
    description: |-
      Deletes a single firewall rule in a specified redis cache.
    versions:
      from: 2020.6.1
      to: 2020.6.1
    link: https://docs.microsoft.com/en-us/rest/api/redis/firewallrules/delete
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  FirewallRules.Get:
    description: |-
      Gets a single firewall rule in a specified redis cache.
    versions:
      from: 2020.6.1
      to: 2020.6.1
    link: https://docs.microsoft.com/en-us/rest/api/redis/firewallrules/get
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/Redis/cache1/firewallRules/rule1",
          "name": "cache1/rule1",
          "type": "Microsoft.Cache/Redis/firewallRules",
          "properties": {
            "endIP": "192.168.1.4",
            "startIP": "192.168.1.1"
          }
        }
      ]
  FirewallRules.List:
    description: |-
      Gets all firewall rules in the specified redis cache.
    versions:
      from: 2020.6.1
      to: 2020.6.1
    link: https://docs.microsoft.com/en-us/rest/api/redis/firewallrules/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/Redis/cache1/firewallRules/rule1",
              "name": "rule1",
              "type": "Microsoft.Cache/Redis/firewallRules",
              "properties": {
                "endIP": "192.168.1.4",
                "startIP": "192.168.1.1"
              }
            },
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/Redis/cache1/firewallRules/rule2",
              "name": "rule2",
              "type": "Microsoft.Cache/Redis/firewallRules",
              "properties": {
                "endIP": "192.169.1.255",
                "startIP": "192.169.1.0"
              }
            }
          ]
        }
      ]
  LinkedServer.Create:
    description: |-
      Adds a linked server to the Redis cache (requires Premium SKU).
    versions:
      from: 2020.6.1
      to: 2020.6.1
    link: https://docs.microsoft.com/en-us/rest/api/redis/linkedserver/create
    example:
      inputs: [
        {
          "properties": {
            "serverRole": "Secondary",
            "linkedRedisCacheId": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/Redis/cache2",
            "linkedRedisCacheLocation": "West US"
          }
        }
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/Redis/cache1/linkedServers/cache2",
          "name": "cache2",
          "type": "Microsoft.Cache/Redis/linkedServers",
          "properties": {
            "serverRole": "Secondary",
            "provisioningState": "Creating",
            "linkedRedisCacheId": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/Redis/cache2",
            "linkedRedisCacheLocation": "West US"
          }
        }
      ]
  LinkedServer.Delete:
    description: |-
      Deletes the linked server from a redis cache (requires Premium SKU).
    versions:
      from: 2020.6.1
      to: 2020.6.1
    link: https://docs.microsoft.com/en-us/rest/api/redis/linkedserver/delete
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  LinkedServer.Get:
    description: |-
      Gets the detailed information about a linked server of a redis cache (requires Premium SKU).
    versions:
      from: 2020.6.1
      to: 2020.6.1
    link: https://docs.microsoft.com/en-us/rest/api/redis/linkedserver/get
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/Redis/cache1/linkedServers/cache2",
          "name": "cache2",
          "type": "Microsoft.Cache/Redis/linkedServers",
          "properties": {
            "serverRole": "Secondary",
            "provisioningState": "Succeeded",
            "linkedRedisCacheId": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/Redis/cache2",
            "linkedRedisCacheLocation": "West US"
          }
        }
      ]
  LinkedServer.List:
    description: |-
      Gets the list of linked servers associated with this redis cache (requires Premium SKU).
    versions:
      from: 2020.6.1
      to: 2020.6.1
    link: https://docs.microsoft.com/en-us/rest/api/redis/linkedserver/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        [
          {
            "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/Redis/cache1/linkedServers/cache2",
            "name": "cache2",
            "type": "Microsoft.Cache/Redis/linkedServers",
            "properties": {
              "serverRole": "Secondary",
              "provisioningState": "Succeeded",
              "linkedRedisCacheId": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/Redis/cache2",
              "linkedRedisCacheLocation": "West US"
            }
          },
          {
            "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/Redis/cache1/linkedServers/cache3",
            "name": "cache3",
            "type": "Microsoft.Cache/Redis/linkedServers",
            "properties": {
              "serverRole": "Secondary",
              "provisioningState": "Succeeded",
              "linkedRedisCacheId": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/Redis/cache3",
              "linkedRedisCacheLocation": "West US"
            }
          }
        ]
      ]
  PatchSchedules.CreateOrUpdate:
    description: |-
      Create or replace the patching schedule for Redis cache.
    versions:
      from: 2020.6.1
      to: 2020.6.1
    link: https://docs.microsoft.com/en-us/rest/api/redis/patchschedules/createorupdate
    example:
      inputs: [
        {
          "properties": {
            "scheduleEntries": [
              {
                "dayOfWeek": "Monday",
                "startHourUtc": 12,
                "maintenanceWindow": "PT5H"
              },
              {
                "dayOfWeek": "Tuesday",
                "startHourUtc": 12
              }
            ]
          }
        }
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/Redis/cache1/patchSchedules/default",
          "name": "default",
          "type": "Microsoft.Cache/Redis/patchSchedules",
          "properties": {
            "scheduleEntries": [
              {
                "dayOfWeek": "Monday",
                "startHourUtc": 12,
                "maintenanceWindow": "PT5H"
              },
              {
                "dayOfWeek": "Tuesday",
                "startHourUtc": 12
              }
            ]
          }
        }
      ]
  PatchSchedules.Delete:
    description: |-
      Deletes the patching schedule of a redis cache.
    versions:
      from: 2020.6.1
      to: 2020.6.1
    link: https://docs.microsoft.com/en-us/rest/api/redis/patchschedules/delete
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  PatchSchedules.Get:
    description: |-
      Gets the patching schedule of a redis cache.
    versions:
      from: 2020.6.1
      to: 2020.6.1
    link: https://docs.microsoft.com/en-us/rest/api/redis/patchschedules/get
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/Redis/cache1/patchSchedules/default",
          "name": "default",
          "type": "Microsoft.Cache/Redis/patchSchedules",
          "properties": {
            "scheduleEntries": [
              {
                "dayOfWeek": "Monday",
                "startHourUtc": 12,
                "maintenanceWindow": "PT5H"
              },
              {
                "dayOfWeek": "Tuesday",
                "startHourUtc": 12
              }
            ]
          }
        }
      ]
  PatchSchedules.ListByRedisResource:
    description: |-
      Gets all patch schedules in the specified redis cache (there is only one).
    versions:
      from: 2020.6.1
      to: 2020.6.1
    link: https://docs.microsoft.com/en-us/rest/api/redis/patchschedules/listbyredisresource
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/Redis/cache1/patchSchedules/default",
              "name": "default",
              "type": "Microsoft.Cache/Redis/patchSchedules",
              "properties": {
                "scheduleEntries": [
                  {
                    "dayOfWeek": "Monday",
                    "startHourUtc": 12,
                    "maintenanceWindow": "PT5H"
                  },
                  {
                    "dayOfWeek": "Tuesday",
                    "startHourUtc": 12
                  }
                ]
              }
            }
          ]
        }
      ]
  PrivateEndpointConnections.Delete:
    description: |-
      Deletes the specified private endpoint connection associated with the redis cache.
    versions:
      from: 2020.6.1
      to: 2020.6.1
    link: https://docs.microsoft.com/en-us/rest/api/redis/privateendpointconnections/delete
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  PrivateEndpointConnections.Get:
    description: |-
      Gets the specified private endpoint connection associated with the redis cache.
    versions:
      from: 2020.6.1
      to: 2020.6.1
    link: https://docs.microsoft.com/en-us/rest/api/redis/privateendpointconnections/get
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "/subscriptions/{subscriptionId}/resourceGroups/rgtest01/providers/Microsoft.Cache/Redis/cachetest01/privateEndpointConnections/pectest01",
          "name": "pectest01",
          "type": "Microsoft.Cache/Redis/privateEndpointConnections",
          "properties": {
            "privateEndpoint": {
              "id": "/subscriptions/{subscriptionId}/resourceGroups/rgtest01/providers/Microsoft.Network/privateEndpoints/petest01"
            },
            "provisioningState": "Succeeded",
            "privateLinkServiceConnectionState": {
              "status": "Approved",
              "description": "Auto-Approved",
              "actionsRequired": "None"
            }
          }
        }
      ]
  PrivateEndpointConnections.List:
    description: |-
      List all the private endpoint connections associated with the redis cache.
    versions:
      from: 2020.6.1
      to: 2020.6.1
    link: https://docs.microsoft.com/en-us/rest/api/redis/privateendpointconnections/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        [
          {
            "id": "/subscriptions/{subscriptionId}/resourceGroups/rgtest01/providers/Microsoft.Cache/Redis/cachetest01/privateEndpointConnections/pectest01",
            "name": "pectest01",
            "type": "Microsoft.Cache/Redis/privateEndpointConnections",
            "properties": {
              "privateEndpoint": {
                "id": "/subscriptions/{subscriptionId}/resourceGroups/rgtest01/providers/Microsoft.Network/privateEndpoints/petest01"
              },
              "provisioningState": "Succeeded",
              "privateLinkServiceConnectionState": {
                "status": "Approved",
                "description": "Auto-Approved",
                "actionsRequired": "None"
              }
            }
          },
          {
            "id": "/subscriptions/{subscriptionId}/resourceGroups/rgtest01/providers/Microsoft.Cache/Redis/cachetest01/privateEndpointConnections/pectest01",
            "name": "pectest01",
            "type": "Microsoft.Cache/Redis/privateEndpointConnections",
            "properties": {
              "privateEndpoint": {
                "id": "/subscriptions/{subscriptionId}/resourceGroups/rgtest01/providers/Microsoft.Network/privateEndpoints/petest01"
              },
              "provisioningState": "Succeeded",
              "privateLinkServiceConnectionState": {
                "status": "Approved",
                "description": "Auto-Approved",
                "actionsRequired": "None"
              }
            }
          }
        ]
      ]
  PrivateEndpointConnections.Put:
    description: |-
      Update the state of specified private endpoint connection associated with the redis cache.
    versions:
      from: 2020.6.1
      to: 2020.6.1
    link: https://docs.microsoft.com/en-us/rest/api/redis/privateendpointconnections/put
    example:
      inputs: [
        {
          "properties": {
            "privateLinkServiceConnectionState": {
              "status": "Approved",
              "description": "Auto-Approved"
            }
          }
        }
      ]
      outputs: [
        {
          "id": "/subscriptions/{subscriptionId}/resourceGroups/rgtest01/providers/Microsoft.Cache/Redis/cachetest01/privateEndpointConnections/pectest01",
          "name": "pectest01",
          "type": "Microsoft.Cache/Redis/privateEndpointConnections",
          "properties": {
            "privateEndpoint": {
              "id": "/subscriptions/{subscriptionId}/resourceGroups/rgtest01/providers/Microsoft.Network/privateEndpoints/petest01"
            },
            "provisioningState": "Succeeded",
            "privateLinkServiceConnectionState": {
              "status": "Approved",
              "description": "Auto-Approved",
              "actionsRequired": "None"
            }
          }
        }
      ]
  PrivateLinkResources.ListByRedisCache:
    description: |-
      Gets the private link resources that need to be created for a redis cache.
    versions:
      from: 2020.6.1
      to: 2020.6.1
    link: https://docs.microsoft.com/en-us/rest/api/redis/privatelinkresources/listbyrediscache
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/{subscription-id}/resourceGroups/rgtest01/providers/Microsoft.Cache/Redis/cacheTest01/privateLinkResources/redisCache",
              "name": "redisCache",
              "type": "Microsoft.Cache/Redis/privateLinkResources",
              "properties": {
                "groupId": "redisCache",
                "requiredMembers": [
                  "redisCache"
                ],
                "requiredZoneNames": [
                  "privatelink.redis.cache.windows.net"
                ]
              }
            }
          ]
        }
      ]
  Redis.CheckNameAvailability:
    description: |-
      Checks that the redis cache name is valid and is not already in use.
    versions:
      from: 2020.6.1
      to: 2020.6.1
    link: https://docs.microsoft.com/en-us/rest/api/redis/redis/checknameavailability
    example:
      inputs: [
        {
          "name": "cacheName",
          "type": "Microsoft.Cache/Redis"
        }
      ]
      outputs: [
        {}
      ]
  Redis.Create:
    description: |-
      Create or replace (overwrite/recreate, with potential downtime) an existing Redis cache.
    versions:
      from: 2020.6.1
      to: 2020.6.1
    link: https://docs.microsoft.com/en-us/rest/api/redis/redis/create
    example:
      inputs: [
        {
          "zones": [
            "1"
          ],
          "location": "West US",
          "properties": {
            "sku": {
              "name": "Premium",
              "family": "P",
              "capacity": 1
            },
            "staticIP": "192.168.0.5",
            "subnetId": "/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/virtualNetworks/network1/subnets/subnet1",
            "shardCount": 2,
            "enableNonSslPort": true,
            "minimumTlsVersion": "1.2",
            "replicasPerMaster": 2,
            "redisConfiguration": {
              "maxmemory-policy": "allkeys-lru"
            }
          }
        }
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/Redis/cache1",
          "name": "cache1",
          "tags": {},
          "type": "Microsoft.Cache/Redis",
          "zones": [
            "1"
          ],
          "location": "West US",
          "properties": {
            "sku": {
              "name": "Premium",
              "family": "P",
              "capacity": 1
            },
            "port": 6379,
            "sslPort": 6380,
            "hostName": "cache1.redis.cache.windows.net",
            "instances": [
              {
                "zone": "1",
                "shardId": 0,
                "sslPort": 15000,
                "nonSslPort": 13000
              },
              {
                "zone": "1",
                "shardId": 0,
                "sslPort": 15001,
                "nonSslPort": 13001
              },
              {
                "zone": "1",
                "shardId": 0,
                "sslPort": 15002,
                "nonSslPort": 13002
              },
              {
                "zone": "1",
                "shardId": 1,
                "sslPort": 15003,
                "nonSslPort": 13003
              },
              {
                "zone": "1",
                "shardId": 1,
                "sslPort": 15004,
                "nonSslPort": 13004
              },
              {
                "zone": "1",
                "shardId": 1,
                "sslPort": 15005,
                "nonSslPort": 13005
              }
            ],
            "accessKeys": {
              "primaryKey": "<primaryKey>",
              "secondaryKey": "<secondaryKey>"
            },
            "redisVersion": "3.0",
            "enableNonSslPort": false,
            "minimumTlsVersion": "1.2",
            "provisioningState": "Succeeded",
            "replicasPerMaster": 2,
            "redisConfiguration": {
              "maxmemory-policy": "allkeys-lru"
            }
          }
        }
      ]
  Redis.Delete:
    description: |-
      Deletes a Redis cache.
    versions:
      from: 2020.6.1
      to: 2020.6.1
    link: https://docs.microsoft.com/en-us/rest/api/redis/redis/delete
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  RedisEnterpriseCache.Databases.Create:
    description: |-
      Creates a database
    versions:
      from: 2021.3.1
      to: 2021.3.1
    link: https://docs.microsoft.com/en-us/rest/api/redis/redisenterprisecache/databases/create
    example:
      inputs: [
        {
          "properties": {
            "port": 10000,
            "modules": [
              {
                "args": "ERROR_RATE 0.00 INITIAL_SIZE 400",
                "name": "RedisBloom"
              },
              {
                "args": "RETENTION_POLICY 20",
                "name": "RedisTimeSeries"
              },
              {
                "name": "RediSearch"
              }
            ],
            "persistence": {
              "aofEnabled": true,
              "aofFrequency": "1s"
            },
            "clientProtocol": "Encrypted",
            "evictionPolicy": "AllKeysLRU",
            "clusteringPolicy": "EnterpriseCluster"
          }
        }
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/redisEnterprise/cache1/databases/default",
          "name": "cache1/default",
          "type": "Microsoft.Cache/redisEnterprise/databases",
          "properties": {
            "port": 10000,
            "modules": [
              {
                "args": "ERROR_RATE 0.00 INITIAL_SIZE 400",
                "name": "RedisBloom",
                "version": "1.0.0"
              },
              {
                "args": "RETENTION_POLICY 20",
                "name": "RedisTimeSeries",
                "version": "1.0.0"
              },
              {
                "args": "",
                "name": "RediSearch",
                "version": "1.0.0"
              }
            ],
            "persistence": {
              "aofEnabled": true,
              "aofFrequency": "1s"
            },
            "resourceState": "Updating",
            "clientProtocol": "Encrypted",
            "evictionPolicy": "AllKeysLRU",
            "clusteringPolicy": "EnterpriseCluster",
            "provisioningState": "Updating"
          }
        }
      ]
  RedisEnterpriseCache.Databases.Delete:
    description: |-
      Deletes a single database
    versions:
      from: 2021.3.1
      to: 2021.3.1
    link: https://docs.microsoft.com/en-us/rest/api/redis/redisenterprisecache/databases/delete
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  RedisEnterpriseCache.Databases.Export:
    description: |-
      Exports a database file from target database.
    versions:
      from: 2021.3.1
      to: 2021.3.1
    link: https://docs.microsoft.com/en-us/rest/api/redis/redisenterprisecache/databases/export
    example:
      inputs: [
        {
          "sasUri": "https://contosostorage.blob.core.window.net/urlToBlobContainer?sasKeyParameters"
        }
      ]
      outputs: [
        {}
      ]
  RedisEnterpriseCache.Databases.Get:
    description: |-
      Gets information about a database in a RedisEnterprise cluster.
    versions:
      from: 2021.3.1
      to: 2021.3.1
    link: https://docs.microsoft.com/en-us/rest/api/redis/redisenterprisecache/databases/get
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/redisEnterprise/cache1/databases/default",
          "name": "cache1/default",
          "type": "Microsoft.Cache/redisEnterprise/databases",
          "properties": {
            "port": 10000,
            "modules": [
              {
                "args": "",
                "name": "RediSearch",
                "version": "1.0.0"
              }
            ],
            "persistence": {
              "rdbEnabled": true,
              "rdbFrequency": "12h"
            },
            "resourceState": "Running",
            "clientProtocol": "Encrypted",
            "evictionPolicy": "AllKeysLRU",
            "clusteringPolicy": "OSSCluster",
            "provisioningState": "Succeeded"
          }
        }
      ]
  RedisEnterpriseCache.Databases.Import:
    description: |-
      Imports a database file to target database.
    versions:
      from: 2021.3.1
      to: 2021.3.1
    link: https://docs.microsoft.com/en-us/rest/api/redis/redisenterprisecache/databases/import
    example:
      inputs: [
        {
          "sasUri": "https://contosostorage.blob.core.window.net/urltoBlobFile?sasKeyParameters"
        }
      ]
      outputs: [
        {}
      ]
  RedisEnterpriseCache.Databases.ListByCluster:
    description: |-
      Gets all databases in the specified RedisEnterprise cluster.
    versions:
      from: 2021.3.1
      to: 2021.3.1
    link: https://docs.microsoft.com/en-us/rest/api/redis/redisenterprisecache/databases/listbycluster
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/redisEnterprise/cache1/databases/default",
              "name": "cache1/default",
              "type": "Microsoft.Cache/redisEnterprise/databases",
              "properties": {
                "port": 10000,
                "modules": [
                  {
                    "args": "",
                    "name": "RediSearch",
                    "version": "1.0.0"
                  }
                ],
                "persistence": {
                  "rdbEnabled": true,
                  "rdbFrequency": "12h"
                },
                "resourceState": "Running",
                "clientProtocol": "Encrypted",
                "evictionPolicy": "AllKeysLRU",
                "clusteringPolicy": "OSSCluster",
                "provisioningState": "Succeeded"
              }
            }
          ]
        }
      ]
  RedisEnterpriseCache.Databases.ListKeys:
    description: |-
      Retrieves the access keys for the RedisEnterprise database.
    versions:
      from: 2021.3.1
      to: 2021.3.1
    link: https://docs.microsoft.com/en-us/rest/api/redis/redisenterprisecache/databases/listkeys
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "primaryKey": "<primaryKey>",
          "secondaryKey": "<secondaryKey>"
        }
      ]
  RedisEnterpriseCache.Databases.RegenerateKey:
    description: |-
      Regenerates the RedisEnterprise database's access keys.
    versions:
      from: 2021.3.1
      to: 2021.3.1
    link: https://docs.microsoft.com/en-us/rest/api/redis/redisenterprisecache/databases/regeneratekey
    example:
      inputs: [
        {
          "keyType": "Primary"
        }
      ]
      outputs: [
        {
          "primaryKey": "<primaryKey>",
          "secondaryKey": "<secondaryKey>"
        }
      ]
  RedisEnterpriseCache.Databases.Update:
    description: |-
      Updates a database
    versions:
      from: 2021.3.1
      to: 2021.3.1
    link: https://docs.microsoft.com/en-us/rest/api/redis/redisenterprisecache/databases/update
    example:
      inputs: [
        {
          "properties": {
            "persistence": {
              "rdbEnabled": true,
              "rdbFrequency": "12h"
            },
            "clientProtocol": "Encrypted",
            "evictionPolicy": "AllKeysLRU"
          }
        }
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/redisEnterprise/cache1/databases/default",
          "name": "cache1/default",
          "type": "Microsoft.Cache/redisEnterprise/databases",
          "properties": {
            "port": 10000,
            "modules": [
              {
                "args": "",
                "name": "RediSearch",
                "version": "1.0.0"
              }
            ],
            "persistence": {
              "rdbEnabled": true,
              "rdbFrequency": "12h"
            },
            "resourceState": "Updating",
            "clientProtocol": "Encrypted",
            "evictionPolicy": "AllKeysLRU",
            "clusteringPolicy": "OSSCluster",
            "provisioningState": "Updating"
          }
        }
      ]
  RedisEnterpriseCache.OperationsStatus.Get:
    description: |-
      Gets the status of operation.
    versions:
      from: 2021.3.1
      to: 2021.3.1
    link: https://docs.microsoft.com/en-us/rest/api/redis/redisenterprisecache/operationsstatus/get
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/providers/Microsoft.Cache/locations/westus/operationsStatus/testoperationid",
          "name": "testoperationid",
          "status": "Succeeded",
          "endTime": "2017-01-01T16:13:13.933Z",
          "startTime": "2017-01-01T13:13:13.933Z"
        }
      ]
  RedisEnterpriseCache.PrivateEndpointConnections.Delete:
    description: |-
      Deletes the specified private endpoint connection associated with the RedisEnterprise cluster.
    versions:
      from: 2021.3.1
      to: 2021.3.1
    link: https://docs.microsoft.com/en-us/rest/api/redis/redisenterprisecache/privateendpointconnections/delete
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  RedisEnterpriseCache.PrivateEndpointConnections.Get:
    description: |-
      Gets the specified private endpoint connection associated with the RedisEnterprise cluster.
    versions:
      from: 2021.3.1
      to: 2021.3.1
    link: https://docs.microsoft.com/en-us/rest/api/redis/redisenterprisecache/privateendpointconnections/get
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/redisEnterprise/cache1/privateEndpointConnections/pectest01",
          "name": "pectest01",
          "type": "Microsoft.Cache/redisEnterprise/privateEndpointConnections",
          "properties": {
            "privateEndpoint": {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/privateEndpoints/petest01"
            },
            "provisioningState": "Succeeded",
            "privateLinkServiceConnectionState": {
              "status": "Approved",
              "description": "Auto-Approved",
              "actionsRequired": "None"
            }
          }
        }
      ]
  RedisEnterpriseCache.PrivateEndpointConnections.List:
    description: |-
      Lists all the private endpoint connections associated with the RedisEnterprise cluster.
    versions:
      from: 2021.3.1
      to: 2021.3.1
    link: https://docs.microsoft.com/en-us/rest/api/redis/redisenterprisecache/privateendpointconnections/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        [
          {
            "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/redisEnterprise/cache1/privateEndpointConnections/pectest01",
            "name": "pectest01",
            "type": "Microsoft.Cache/redisEnterprise/privateEndpointConnections",
            "properties": {
              "privateEndpoint": {
                "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/privateEndpoints/petest01"
              },
              "provisioningState": "Succeeded",
              "privateLinkServiceConnectionState": {
                "status": "Approved",
                "description": "Auto-Approved",
                "actionsRequired": "None"
              }
            }
          },
          {
            "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/redisEnterprise/cache1/privateEndpointConnections/pectest01",
            "name": "pectest01",
            "type": "Microsoft.Cache/redisEnterprise/privateEndpointConnections",
            "properties": {
              "privateEndpoint": {
                "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/privateEndpoints/petest01"
              },
              "provisioningState": "Succeeded",
              "privateLinkServiceConnectionState": {
                "status": "Approved",
                "description": "Auto-Approved",
                "actionsRequired": "None"
              }
            }
          }
        ]
      ]
  RedisEnterpriseCache.PrivateEndpointConnections.Put:
    description: |-
      Updates the state of the specified private endpoint connection associated with the RedisEnterprise cluster.
    versions:
      from: 2021.3.1
      to: 2021.3.1
    link: https://docs.microsoft.com/en-us/rest/api/redis/redisenterprisecache/privateendpointconnections/put
    example:
      inputs: [
        {
          "properties": {
            "privateLinkServiceConnectionState": {
              "status": "Approved",
              "description": "Auto-Approved"
            }
          }
        }
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/redisEnterprise/cache1/privateEndpointConnections/pectest01",
          "name": "pectest01",
          "type": "Microsoft.Cache/redisEnterprise/privateEndpointConnections",
          "properties": {
            "privateEndpoint": {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/privateEndpoints/petest01"
            },
            "provisioningState": "Succeeded",
            "privateLinkServiceConnectionState": {
              "status": "Approved",
              "description": "Auto-Approved",
              "actionsRequired": "None"
            }
          }
        }
      ]
  RedisEnterpriseCache.PrivateLinkResources.ListByCluster:
    description: |-
      Gets the private link resources that need to be created for a RedisEnterprise cluster.
    versions:
      from: 2021.3.1
      to: 2021.3.1
    link: https://docs.microsoft.com/en-us/rest/api/redis/redisenterprisecache/privatelinkresources/listbycluster
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/redisEnterprise/cache1/privateLinkResources/redisEnterpriseCache",
              "name": "redisEnterpriseCache",
              "type": "Microsoft.Cache/redisEnterprise/privateLinkResources",
              "properties": {
                "groupId": "redisEnterpriseCache",
                "requiredMembers": [
                  "redisEnterpriseCache"
                ],
                "requiredZoneNames": [
                  "privatelink.redisenterprise.cache.windows.net"
                ]
              }
            }
          ]
        }
      ]
  RedisEnterpriseCache.RedisEnterprise.Create:
    description: |-
      Creates or updates an existing (overwrite/recreate, with potential downtime) cache cluster
    versions:
      from: 2021.3.1
      to: 2021.3.1
    link: https://docs.microsoft.com/en-us/rest/api/redis/redisenterprisecache/redisenterprise/create
    example:
      inputs: [
        {
          "sku": {
            "name": "EnterpriseFlash_F300",
            "capacity": 3
          },
          "tags": {
            "tag1": "value1"
          },
          "zones": [
            "1",
            "2",
            "3"
          ],
          "location": "West US",
          "properties": {
            "minimumTlsVersion": "1.2"
          }
        }
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/redisEnterprise/cache1",
          "sku": {
            "name": "EnterpriseFlash_F300",
            "capacity": 3
          },
          "name": "cache1",
          "tags": {
            "tag1": "value1"
          },
          "type": "Microsoft.Cache/redisEnterprise",
          "zones": [
            "1",
            "2",
            "3"
          ],
          "location": "West US",
          "properties": {
            "hostName": "cache1.westus.something.azure.net",
            "redisVersion": "5",
            "resourceState": "Creating",
            "minimumTlsVersion": "1.2",
            "provisioningState": "Creating"
          }
        }
      ]
  RedisEnterpriseCache.RedisEnterprise.Delete:
    description: |-
      Deletes a RedisEnterprise cache cluster.
    versions:
      from: 2021.3.1
      to: 2021.3.1
    link: https://docs.microsoft.com/en-us/rest/api/redis/redisenterprisecache/redisenterprise/delete
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  RedisEnterpriseCache.RedisEnterprise.Get:
    description: |-
      Gets information about a RedisEnterprise cluster
    versions:
      from: 2021.3.1
      to: 2021.3.1
    link: https://docs.microsoft.com/en-us/rest/api/redis/redisenterprisecache/redisenterprise/get
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/redisEnterprise/cache1",
          "sku": {
            "name": "EnterpriseFlash_F300",
            "capacity": 3
          },
          "name": "cache1",
          "tags": {},
          "type": "Microsoft.Cache/redisEnterprise",
          "zones": [
            "1",
            "2",
            "3"
          ],
          "location": "West US",
          "properties": {
            "hostName": "cache1.westus.something.azure.com",
            "redisVersion": "6",
            "resourceState": "Running",
            "minimumTlsVersion": "1.2",
            "provisioningState": "Succeeded",
            "privateEndpointConnections": [
              {
                "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/redisEnterprise/cache1/privateEndpointConnections/cachePec",
                "properties": {
                  "privateEndpoint": {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/privateEndpoints/cachePe"
                  },
                  "privateLinkServiceConnectionState": {
                    "status": "Approved",
                    "description": "Please approve my connection",
                    "actionsRequired": "None"
                  }
                }
              }
            ]
          }
        }
      ]
  RedisEnterpriseCache.RedisEnterprise.List:
    description: |-
      Gets all RedisEnterprise clusters in the specified subscription.
    versions:
      from: 2021.3.1
      to: 2021.3.1
    link: https://docs.microsoft.com/en-us/rest/api/redis/redisenterprisecache/redisenterprise/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/redisEnterprise/cache1",
              "sku": {
                "name": "EnterpriseFlash_F300",
                "capacity": 3
              },
              "name": "cache1",
              "tags": {},
              "type": "Microsoft.Cache/redisEnterprise",
              "location": "West US",
              "properties": {
                "hostName": "cache1.westus.something.azure.com",
                "redisVersion": "6",
                "resourceState": "Running",
                "minimumTlsVersion": "1.2",
                "provisioningState": "Succeeded"
              }
            }
          ],
          "nextLink": null
        }
      ]
  RedisEnterpriseCache.RedisEnterprise.ListByResourceGroup:
    description: |-
      Lists all RedisEnterprise clusters in a resource group.
    versions:
      from: 2021.3.1
      to: 2021.3.1
    link: https://docs.microsoft.com/en-us/rest/api/redis/redisenterprisecache/redisenterprise/listbyresourcegroup
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/redisEnterprise/cache1",
              "sku": {
                "name": "EnterpriseFlash_F300",
                "capacity": 3
              },
              "name": "cache1",
              "tags": {},
              "type": "Microsoft.Cache/redisEnterprise",
              "zones": [
                "1",
                "2",
                "3"
              ],
              "location": "West US",
              "properties": {
                "hostName": "cache1.westus.something.azure.com",
                "redisVersion": "5",
                "resourceState": "Running",
                "minimumTlsVersion": "1.2",
                "provisioningState": "Succeeded"
              }
            }
          ],
          "nextLink": null
        }
      ]
  RedisEnterpriseCache.RedisEnterprise.Update:
    description: |-
      Updates an existing RedisEnterprise cluster
    versions:
      from: 2021.3.1
      to: 2021.3.1
    link: https://docs.microsoft.com/en-us/rest/api/redis/redisenterprisecache/redisenterprise/update
    example:
      inputs: [
        {
          "sku": {
            "name": "EnterpriseFlash_F300",
            "capacity": 9
          },
          "tags": {
            "tag1": "value1"
          },
          "properties": {
            "minimumTlsVersion": "1.2"
          }
        }
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/redisEnterprise/cache1",
          "sku": {
            "name": "EnterpriseFlash_F300",
            "capacity": 9
          },
          "name": "cache1",
          "tags": {
            "tag1": "value1"
          },
          "type": "Microsoft.Cache/redisEnterprise",
          "zones": [
            "1",
            "2",
            "3"
          ],
          "location": "West US",
          "properties": {
            "hostName": "cache1.westus.something.azure.com",
            "redisVersion": "5",
            "resourceState": "Updating",
            "minimumTlsVersion": "1.2",
            "provisioningState": "Updating"
          }
        }
      ]
  Redis.ExportData:
    description: |-
      Export data from the redis cache to blobs in a container.
    versions:
      from: 2020.6.1
      to: 2020.6.1
    link: https://docs.microsoft.com/en-us/rest/api/redis/redis/exportdata
    example:
      inputs: [
        {
          "format": "RDB",
          "prefix": "datadump1",
          "container": "https://contosostorage.blob.core.window.net/urltoBlobContainer?sasKeyParameters"
        }
      ]
      outputs: [
        {}
      ]
  Redis.ForceReboot:
    description: |-
      Reboot specified Redis node(s). This operation requires write permission to the cache resource. There can be potential data loss.
    versions:
      from: 2020.6.1
      to: 2020.6.1
    link: https://docs.microsoft.com/en-us/rest/api/redis/redis/forcereboot
    example:
      inputs: [
        {
          "ports": [
            13000,
            15001
          ],
          "shardId": 0,
          "rebootType": "AllNodes"
        }
      ]
      outputs: [
        {
          "message": "reboot operation enqueued"
        }
      ]
  Redis.Get:
    description: |-
      Gets a Redis cache (resource description).
    versions:
      from: 2020.6.1
      to: 2020.6.1
    link: https://docs.microsoft.com/en-us/rest/api/redis/redis/get
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/Redis/cache1",
          "name": "cache1",
          "tags": {},
          "type": "Microsoft.Cache/Redis",
          "location": "West US",
          "properties": {
            "sku": {
              "name": "Premium",
              "family": "P",
              "capacity": 3
            },
            "port": 6379,
            "sslPort": 6380,
            "hostName": "cache1.redis.cache.windows.net",
            "instances": [
              {
                "sslPort": 15000,
                "isMaster": true,
                "nonSslPort": 13000
              },
              {
                "sslPort": 15001,
                "isMaster": false,
                "nonSslPort": 13001
              },
              {
                "sslPort": 15002,
                "isMaster": false,
                "nonSslPort": 13002
              }
            ],
            "redisVersion": "3.2",
            "linkedServers": [
              {
                "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/Redis/cache1/linkedServers/cache2"
              }
            ],
            "enableNonSslPort": true,
            "provisioningState": "Creating",
            "replicasPerMaster": 2,
            "redisConfiguration": {},
            "publicNetworkAccess": "Enabled",
            "privateEndpointConnections": [
              {
                "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/Redis/cache1/privateEndpointConnections/cachePec",
                "properties": {
                  "privateEndpoint": {
                    "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/privateEndpoints/cachePe"
                  },
                  "privateLinkServiceConnectionState": {
                    "status": "Approved",
                    "description": "Please approve my connection",
                    "actionsRequired": "None"
                  }
                }
              }
            ]
          }
        }
      ]
  Redis.ImportData:
    description: |-
      Import data into Redis cache.
    versions:
      from: 2020.6.1
      to: 2020.6.1
    link: https://docs.microsoft.com/en-us/rest/api/redis/redis/importdata
    example:
      inputs: [
        {
          "files": [
            "http://fileuris.contoso.com/pathtofile1"
          ],
          "format": "RDB"
        }
      ]
      outputs: [
        {}
      ]
  Redis.ListByResourceGroup:
    description: |-
      Lists all Redis caches in a resource group.
    versions:
      from: 2020.6.1
      to: 2020.6.1
    link: https://docs.microsoft.com/en-us/rest/api/redis/redis/listbyresourcegroup
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/Redis/cache1",
              "name": "cache1",
              "tags": {},
              "type": "Microsoft.Cache/Redis",
              "location": "West US",
              "properties": {
                "sku": {
                  "name": "Standard",
                  "family": "C",
                  "capacity": 6
                },
                "port": 6379,
                "sslPort": 6380,
                "hostName": "cache1.redis.cache.windows.net",
                "redisVersion": "3.2",
                "enableNonSslPort": true,
                "provisioningState": "Creating",
                "redisConfiguration": {}
              }
            }
          ]
        }
      ]
  Redis.ListBySubscription:
    description: |-
      Gets all Redis caches in the specified subscription.
    versions:
      from: 2020.6.1
      to: 2020.6.1
    link: https://docs.microsoft.com/en-us/rest/api/redis/redis/listbysubscription
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/Redis/cache1",
              "name": "cache1",
              "tags": {},
              "type": "Microsoft.Cache/Redis",
              "location": "West US",
              "properties": {
                "sku": {
                  "name": "Standard",
                  "family": "C",
                  "capacity": 6
                },
                "port": 6379,
                "sslPort": 6380,
                "hostName": "cache1.redis.cache.windows.net",
                "redisVersion": "3.2",
                "enableNonSslPort": true,
                "provisioningState": "Creating",
                "redisConfiguration": {}
              }
            }
          ]
        }
      ]
  Redis.ListKeys:
    description: |-
      Retrieve a Redis cache's access keys. This operation requires write permission to the cache resource.
    versions:
      from: 2020.6.1
      to: 2020.6.1
    link: https://docs.microsoft.com/en-us/rest/api/redis/redis/listkeys
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "primaryKey": "<primaryKey>",
          "secondaryKey": "<secondaryKey>"
        }
      ]
  Redis.ListUpgradeNotifications:
    description: |-
      Gets any upgrade notifications for a Redis cache.
    versions:
      from: 2020.6.1
      to: 2020.6.1
    link: https://docs.microsoft.com/en-us/rest/api/redis/redis/listupgradenotifications
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "value": [
            {
              "name": "notification1",
              "timestamp": "2017-02-16T23:20:50.52Z",
              "upsellNotification": {}
            }
          ]
        }
      ]
  Redis.RegenerateKey:
    description: |-
      Regenerate Redis cache's access keys. This operation requires write permission to the cache resource.
    versions:
      from: 2020.6.1
      to: 2020.6.1
    link: https://docs.microsoft.com/en-us/rest/api/redis/redis/regeneratekey
    example:
      inputs: [
        {
          "keyType": "Primary"
        }
      ]
      outputs: [
        {
          "primaryKey": "<primaryKey>",
          "secondaryKey": "<secondaryKey>"
        }
      ]
  Redis.Update:
    description: |-
      Update an existing Redis cache.
    versions:
      from: 2020.6.1
      to: 2020.6.1
    link: https://docs.microsoft.com/en-us/rest/api/redis/redis/update
    example:
      inputs: [
        {
          "properties": {
            "enableNonSslPort": true
          }
        }
      ]
      outputs: [
        {
          "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/Redis/cache1",
          "name": "cache1",
          "tags": {},
          "type": "Microsoft.Cache/Redis",
          "location": "West US",
          "properties": {
            "sku": {
              "name": "Premium",
              "family": "P",
              "capacity": 1
            },
            "port": 6379,
            "sslPort": 6380,
            "hostName": "cache1.redis.cache.windows.net",
            "instances": [
              {
                "sslPort": 15000,
                "nonSslPort": 13000
              },
              {
                "sslPort": 15001,
                "nonSslPort": 13001
              }
            ],
            "accessKeys": {
              "primaryKey": "<primaryKey>",
              "secondaryKey": "<secondaryKey>"
            },
            "redisVersion": "3.0",
            "enableNonSslPort": true,
            "provisioningState": "Succeeded",
            "redisConfiguration": {
              "maxclients": "1000",
              "maxmemory-delta": "50",
              "maxmemory-reserved": "50"
            }
          }
        }
      ]