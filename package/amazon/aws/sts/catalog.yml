Product:
  name: AWS Security Token Service
  versions: [2011.6.15]
  package: amazon.aws.sts
  description: |-
    AWS Security Token Service
  link: https://docs.aws.amazon.com/STS/latest/APIReference/welcome.html
  contentType: json
Operations:
  AssumeRole:
    description: |-
      Returns a set of temporary security credentials that you can use to access AWS resources that you might not normally have access to. These temporary credentials consist of an access key ID, a secret access key, and a security token. Typically, you use AssumeRole within your account or for cross-account access. For a comparison of AssumeRole with other API operations that produce temporary credentials, see Requesting Temporary Security Credentials and Comparing the AWS STS API operations in the IAM User Guide.
    versions:
      from: 2011.6.15
    link: https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html
    example:
      inputs: [
        {
          "Tags": [
            {
              "Key": "string",
              "Value": "string"
            }
          ],
          "Policy": "string",
          "RoleArn": "string",
          "TokenCode": "string",
          "ExternalId": "string",
          "PolicyArns": [
            {
              "arn": "string"
            }
          ],
          "SerialNumber": "string",
          "SourceIdentity": "string",
          "DurationSeconds": 1,
          "RoleSessionName": "string",
          "TransitiveTagKeys": [
            "string"
          ]
        }
      ]
      outputs: [
        {
          "Credentials": {
            "Expiration": 1481289211.615,
            "AccessKeyId": "string",
            "SessionToken": "string",
            "SecretAccessKey": "string"
          },
          "SourceIdentity": "string",
          "AssumedRoleUser": {
            "Arn": "string",
            "AssumedRoleId": "string"
          },
          "PackedPolicySize": 1
        }
      ]
  AssumeRoleWithSAML:
    description: |-
      Returns a set of temporary security credentials for users who have been authenticated via a SAML authentication response. This operation provides a mechanism for tying an enterprise identity store or directory to role-based AWS access without user-specific credentials or configuration. For a comparison of AssumeRoleWithSAML with the other API operations that produce temporary credentials, see Requesting Temporary Security Credentials and Comparing the AWS STS API operations in the IAM User Guide.
    versions:
      from: 2011.6.15
    link: https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRoleWithSAML.html
    example:
      inputs: [
        {
          "Policy": "string",
          "RoleArn": "string",
          "PolicyArns": [
            {
              "arn": "string"
            }
          ],
          "PrincipalArn": "string",
          "SAMLAssertion": "string",
          "DurationSeconds": 1
        }
      ]
      outputs: [
        {
          "Issuer": "string",
          "Subject": "string",
          "Audience": "string",
          "Credentials": {
            "Expiration": 1481289211.615,
            "AccessKeyId": "string",
            "SessionToken": "string",
            "SecretAccessKey": "string"
          },
          "SubjectType": "string",
          "NameQualifier": "string",
          "SourceIdentity": "string",
          "AssumedRoleUser": {
            "Arn": "string",
            "AssumedRoleId": "string"
          },
          "PackedPolicySize": 1
        }
      ]
  AssumeRoleWithWebIdentity:
    description: |-
      Returns a set of temporary security credentials for users who have been authenticated in a mobile or web application with a web identity provider. Example providers include Amazon Cognito, Login with Amazon, Facebook, Google, or any OpenID Connect-compatible identity provider.
    versions:
      from: 2011.6.15
    link: https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRoleWithWebIdentity.html
    example:
      inputs: [
        {
          "Policy": "string",
          "RoleArn": "string",
          "PolicyArns": [
            {
              "arn": "string"
            }
          ],
          "ProviderId": "string",
          "DurationSeconds": 1,
          "RoleSessionName": "string",
          "WebIdentityToken": "string"
        }
      ]
      outputs: [
        {
          "Audience": "string",
          "Provider": "string",
          "Credentials": {
            "Expiration": 1481289211.615,
            "AccessKeyId": "string",
            "SessionToken": "string",
            "SecretAccessKey": "string"
          },
          "SourceIdentity": "string",
          "AssumedRoleUser": {
            "Arn": "string",
            "AssumedRoleId": "string"
          },
          "PackedPolicySize": 1,
          "SubjectFromWebIdentityToken": "string"
        }
      ]
  DecodeAuthorizationMessage:
    description: |-
      Decodes additional information about the authorization status of a request from an encoded message returned in response to an AWS request.
    versions:
      from: 2011.6.15
    link: https://docs.aws.amazon.com/STS/latest/APIReference/API_DecodeAuthorizationMessage.html
    example:
      inputs: [
        {
          "EncodedMessage": "string"
        }
      ]
      outputs: [
        {
          "DecodedMessage": "string"
        }
      ]
  GetAccessKeyInfo:
    description: |-
      Returns the account identifier for the specified access key ID.
    versions:
      from: 2011.6.15
    link: https://docs.aws.amazon.com/STS/latest/APIReference/API_GetAccessKeyInfo.html
    example:
      inputs: [
        {
          "AccessKeyId": "string"
        }
      ]
      outputs: [
        {
          "Account": "string"
        }
      ]
  GetCallerIdentity:
    description: |-
      Returns details about the IAM user or role whose credentials are used to call the operation.
    versions:
      from: 2011.6.15
    link: https://docs.aws.amazon.com/STS/latest/APIReference/API_GetCallerIdentity.html
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "Arn": "string",
          "UserId": "string",
          "Account": "string"
        }
      ]
  GetFederationToken:
    description: |-
      Returns a set of temporary security credentials (consisting of an access key ID, a secret access key, and a security token) for a federated user. A typical use is in a proxy application that gets temporary security credentials on behalf of distributed applications inside a corporate network. You must call the GetFederationToken operation using the long-term security credentials of an IAM user. As a result, this call is appropriate in contexts where those credentials can be safely stored, usually in a server-based application. For a comparison of GetFederationToken with the other API operations that produce temporary credentials, see Requesting Temporary Security Credentials and Comparing the AWS STS API operations in the IAM User Guide.
    versions:
      from: 2011.6.15
    link: https://docs.aws.amazon.com/STS/latest/APIReference/API_GetFederationToken.html
    example:
      inputs: [
        {
          "Name": "string",
          "Tags": [
            {
              "Key": "string",
              "Value": "string"
            }
          ],
          "Policy": "string",
          "PolicyArns": [
            {
              "arn": "string"
            }
          ],
          "DurationSeconds": 1
        }
      ]
      outputs: [
        {
          "Credentials": {
            "Expiration": 1481289211.615,
            "AccessKeyId": "string",
            "SessionToken": "string",
            "SecretAccessKey": "string"
          },
          "FederatedUser": {
            "Arn": "string",
            "FederatedUserId": "string"
          },
          "PackedPolicySize": 1
        }
      ]
  GetSessionToken:
    description: |-
      Returns a set of temporary credentials for an AWS account or IAM user. The credentials consist of an access key ID, a secret access key, and a security token. Typically, you use GetSessionToken if you want to use MFA to protect programmatic calls to specific AWS API operations like Amazon EC2 StopInstances. MFA-enabled IAM users would need to call GetSessionToken and submit an MFA code that is associated with their MFA device. Using the temporary security credentials that are returned from the call, IAM users can then make programmatic calls to API operations that require MFA authentication. If you do not supply a correct MFA code, then the API returns an access denied error. For a comparison of GetSessionToken with the other API operations that produce temporary credentials, see Requesting Temporary Security Credentials and Comparing the AWS STS API operations in the IAM User Guide.
    versions:
      from: 2011.6.15
    link: https://docs.aws.amazon.com/STS/latest/APIReference/API_GetSessionToken.html
    example:
      inputs: [
        {
          "TokenCode": "string",
          "SerialNumber": "string",
          "DurationSeconds": 1
        }
      ]
      outputs: [
        {
          "Credentials": {
            "Expiration": 1481289211.615,
            "AccessKeyId": "string",
            "SessionToken": "string",
            "SecretAccessKey": "string"
          }
        }
      ]