Product:
  name: GCP Service Usage
  versions: [1.0.0]
  package: google.gcp.serviceusage
  description: |-
    Service Usage
  link: https://cloud.google.com/service-usage
  contentType: json
Operations:
  operations.cancel:
    description: |-
      Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/service-usage/docs/reference/rest/v1/operations/cancel
    example:
      inputs: [
        {
          "id": "CancelOperationRequest",
          "type": "object",
          "properties": {},
          "description": "The request message for Operations.CancelOperation."
        }
      ]
      outputs: [
        {
          "id": "Empty",
          "type": "object",
          "properties": {},
          "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`."
        }
      ]
  operations.delete:
    description: |-
      Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/service-usage/docs/reference/rest/v1/operations/delete
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "Empty",
          "type": "object",
          "properties": {},
          "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`."
        }
      ]
  operations.get:
    description: |-
      Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/service-usage/docs/reference/rest/v1/operations/get
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "Operation",
          "type": "object",
          "properties": {
            "done": {
              "type": "boolean",
              "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available."
            },
            "name": {
              "type": "string",
              "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`."
            },
            "error": {
              "id": "Status",
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The status code, which should be an enum value of google.rpc.Code."
                },
                "details": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  },
                  "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
                },
                "message": {
                  "type": "string",
                  "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                }
              },
              "description": "The error result of the operation in case of failure or cancellation."
            },
            "metadata": {
              "type": "object",
              "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
              "additionalProperties": {
                "type": "any",
                "description": "Properties of the object. Contains field @type with type URL."
              }
            },
            "response": {
              "type": "object",
              "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
              "additionalProperties": {
                "type": "any",
                "description": "Properties of the object. Contains field @type with type URL."
              }
            }
          },
          "description": "This resource represents a long-running operation that is the result of a network API call."
        }
      ]
  operations.list:
    description: |-
      Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `"/v1/{name=users/*}/operations"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/service-usage/docs/reference/rest/v1/operations/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "ListOperationsResponse",
          "type": "object",
          "properties": {
            "operations": {
              "type": "array",
              "items": {
                "id": "Operation",
                "type": "object",
                "properties": {
                  "done": {
                    "type": "boolean",
                    "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available."
                  },
                  "name": {
                    "type": "string",
                    "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`."
                  },
                  "error": {
                    "id": "Status",
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The status code, which should be an enum value of google.rpc.Code."
                      },
                      "details": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "any",
                            "description": "Properties of the object. Contains field @type with type URL."
                          }
                        },
                        "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
                      },
                      "message": {
                        "type": "string",
                        "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                      }
                    },
                    "description": "The error result of the operation in case of failure or cancellation."
                  },
                  "metadata": {
                    "type": "object",
                    "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  },
                  "response": {
                    "type": "object",
                    "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  }
                },
                "description": "This resource represents a long-running operation that is the result of a network API call."
              },
              "description": "A list of operations that matches the specified filter in the request."
            },
            "nextPageToken": {
              "type": "string",
              "description": "The standard List next-page token."
            }
          },
          "description": "The response message for Operations.ListOperations."
        }
      ]
  services.batchEnable:
    description: |-
      Enable multiple services on a project. The operation is atomic: if enabling any service fails, then the entire batch fails, and no state changes occur. To enable a single service, use the `EnableService` method instead.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/service-usage/docs/reference/rest/v1/services/batchEnable
    example:
      inputs: [
        {
          "id": "BatchEnableServicesRequest",
          "type": "object",
          "properties": {
            "serviceIds": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "The identifiers of the services to enable on the project. A valid identifier would be: serviceusage.googleapis.com Enabling services requires that each service is public or is shared with the user enabling the service. A single request can enable a maximum of 20 services at a time. If more than 20 services are specified, the request will fail, and no state changes will occur."
            }
          },
          "description": "Request message for the `BatchEnableServices` method."
        }
      ]
      outputs: [
        {
          "id": "Operation",
          "type": "object",
          "properties": {
            "done": {
              "type": "boolean",
              "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available."
            },
            "name": {
              "type": "string",
              "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`."
            },
            "error": {
              "id": "Status",
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The status code, which should be an enum value of google.rpc.Code."
                },
                "details": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  },
                  "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
                },
                "message": {
                  "type": "string",
                  "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                }
              },
              "description": "The error result of the operation in case of failure or cancellation."
            },
            "metadata": {
              "type": "object",
              "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
              "additionalProperties": {
                "type": "any",
                "description": "Properties of the object. Contains field @type with type URL."
              }
            },
            "response": {
              "type": "object",
              "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
              "additionalProperties": {
                "type": "any",
                "description": "Properties of the object. Contains field @type with type URL."
              }
            }
          },
          "description": "This resource represents a long-running operation that is the result of a network API call."
        }
      ]
  services.batchGet:
    description: |-
      Returns the service configurations and enabled states for a given list of services.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/service-usage/docs/reference/rest/v1/services/batchGet
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "BatchGetServicesResponse",
          "type": "object",
          "properties": {
            "services": {
              "type": "array",
              "items": {
                "id": "GoogleApiServiceusageV1Service",
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The resource name of the consumer and service. A valid name would be: - projects/123/services/serviceusage.googleapis.com"
                  },
                  "state": {
                    "enum": [
                      "STATE_UNSPECIFIED",
                      "DISABLED",
                      "ENABLED"
                    ],
                    "type": "string",
                    "description": "Whether or not the service has been enabled for use by the consumer.",
                    "enumDescriptions": [
                      "The default value, which indicates that the enabled state of the service is unspecified or not meaningful. Currently, all consumers other than projects (such as folders and organizations) are always in this state.",
                      "The service cannot be used by this consumer. It has either been explicitly disabled, or has never been enabled.",
                      "The service has been explicitly enabled for use by this consumer."
                    ]
                  },
                  "config": {
                    "id": "GoogleApiServiceusageV1ServiceConfig",
                    "type": "object",
                    "properties": {
                      "apis": {
                        "type": "array",
                        "items": {
                          "id": "Api",
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "The fully qualified name of this interface, including package name followed by the interface's simple name."
                            },
                            "mixins": {
                              "type": "array",
                              "items": {
                                "id": "Mixin",
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "description": "The fully qualified name of the interface which is included."
                                  },
                                  "root": {
                                    "type": "string",
                                    "description": "If non-empty specifies a path under which inherited HTTP paths are rooted."
                                  }
                                },
                                "description": "Declares an API Interface to be included in this interface. The including interface must redeclare all the methods from the included interface, but documentation and options are inherited as follows: - If after comment and whitespace stripping, the documentation string of the redeclared method is empty, it will be inherited from the original method. - Each annotation belonging to the service config (http, visibility) which is not set in the redeclared method will be inherited. - If an http annotation is inherited, the path pattern will be modified as follows. Any version prefix will be replaced by the version of the including interface plus the root path if specified. Example of a simple mixin: package google.acl.v1; service AccessControl { // Get the underlying ACL object. rpc GetAcl(GetAclRequest) returns (Acl) { option (google.api.http).get = \"/v1/{resource=**}:getAcl\"; } } package google.storage.v2; service Storage { // rpc GetAcl(GetAclRequest) returns (Acl); // Get a data record. rpc GetData(GetDataRequest) returns (Data) { option (google.api.http).get = \"/v2/{resource=**}\"; } } Example of a mixin configuration: apis: - name: google.storage.v2.Storage mixins: - name: google.acl.v1.AccessControl The mixin construct implies that all methods in `AccessControl` are also declared with same name and request/response types in `Storage`. A documentation generator or annotation processor will see the effective `Storage.GetAcl` method after inheriting documentation and annotations as follows: service Storage { // Get the underlying ACL object. rpc GetAcl(GetAclRequest) returns (Acl) { option (google.api.http).get = \"/v2/{resource=**}:getAcl\"; } ... } Note how the version in the path pattern changed from `v1` to `v2`. If the `root` field in the mixin is specified, it should be a relative path under which inherited HTTP paths are placed. Example: apis: - name: google.storage.v2.Storage mixins: - name: google.acl.v1.AccessControl root: acls This implies the following inherited HTTP annotation: service Storage { // Get the underlying ACL object. rpc GetAcl(GetAclRequest) returns (Acl) { option (google.api.http).get = \"/v2/acls/{resource=**}:getAcl\"; } ... }"
                              },
                              "description": "Included interfaces. See Mixin."
                            },
                            "syntax": {
                              "enum": [
                                "SYNTAX_PROTO2",
                                "SYNTAX_PROTO3"
                              ],
                              "type": "string",
                              "description": "The source syntax of the service.",
                              "enumDescriptions": [
                                "Syntax `proto2`.",
                                "Syntax `proto3`."
                              ]
                            },
                            "methods": {
                              "type": "array",
                              "items": {
                                "id": "Method",
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "description": "The simple name of this method."
                                  },
                                  "syntax": {
                                    "enum": [
                                      "SYNTAX_PROTO2",
                                      "SYNTAX_PROTO3"
                                    ],
                                    "type": "string",
                                    "description": "The source syntax of this method.",
                                    "enumDescriptions": [
                                      "Syntax `proto2`.",
                                      "Syntax `proto3`."
                                    ]
                                  },
                                  "options": {
                                    "type": "array",
                                    "items": {
                                      "id": "Option",
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "description": "The option's name. For protobuf built-in options (options defined in descriptor.proto), this is the short name. For example, `\"map_entry\"`. For custom options, it should be the fully-qualified name. For example, `\"google.api.http\"`."
                                        },
                                        "value": {
                                          "type": "object",
                                          "description": "The option's value packed in an Any message. If the value is a primitive, the corresponding wrapper type defined in google/protobuf/wrappers.proto should be used. If the value is an enum, it should be stored as an int32 value using the google.protobuf.Int32Value type.",
                                          "additionalProperties": {
                                            "type": "any",
                                            "description": "Properties of the object. Contains field @type with type URL."
                                          }
                                        }
                                      },
                                      "description": "A protocol buffer option, which can be attached to a message, field, enumeration, etc."
                                    },
                                    "description": "Any metadata attached to the method."
                                  },
                                  "requestTypeUrl": {
                                    "type": "string",
                                    "description": "A URL of the input message type."
                                  },
                                  "responseTypeUrl": {
                                    "type": "string",
                                    "description": "The URL of the output message type."
                                  },
                                  "requestStreaming": {
                                    "type": "boolean",
                                    "description": "If true, the request is streamed."
                                  },
                                  "responseStreaming": {
                                    "type": "boolean",
                                    "description": "If true, the response is streamed."
                                  }
                                },
                                "description": "Method represents a method of an API interface."
                              },
                              "description": "The methods of this interface, in unspecified order."
                            },
                            "options": {
                              "type": "array",
                              "items": {
                                "id": "Option",
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "description": "The option's name. For protobuf built-in options (options defined in descriptor.proto), this is the short name. For example, `\"map_entry\"`. For custom options, it should be the fully-qualified name. For example, `\"google.api.http\"`."
                                  },
                                  "value": {
                                    "type": "object",
                                    "description": "The option's value packed in an Any message. If the value is a primitive, the corresponding wrapper type defined in google/protobuf/wrappers.proto should be used. If the value is an enum, it should be stored as an int32 value using the google.protobuf.Int32Value type.",
                                    "additionalProperties": {
                                      "type": "any",
                                      "description": "Properties of the object. Contains field @type with type URL."
                                    }
                                  }
                                },
                                "description": "A protocol buffer option, which can be attached to a message, field, enumeration, etc."
                              },
                              "description": "Any metadata attached to the interface."
                            },
                            "version": {
                              "type": "string",
                              "description": "A version string for this interface. If specified, must have the form `major-version.minor-version`, as in `1.10`. If the minor version is omitted, it defaults to zero. If the entire version field is empty, the major version is derived from the package name, as outlined below. If the field is not empty, the version in the package name will be verified to be consistent with what is provided here. The versioning schema uses [semantic versioning](http://semver.org) where the major version number indicates a breaking change and the minor version an additive, non-breaking change. Both version numbers are signals to users what to expect from different versions, and should be carefully chosen based on the product plan. The major version is also reflected in the package name of the interface, which must end in `v`, as in `google.feature.v1`. For major versions 0 and 1, the suffix can be omitted. Zero major versions must only be used for experimental, non-GA interfaces. "
                            },
                            "sourceContext": {
                              "id": "SourceContext",
                              "type": "object",
                              "properties": {
                                "fileName": {
                                  "type": "string",
                                  "description": "The path-qualified name of the .proto file that contained the associated protobuf element. For example: `\"google/protobuf/source_context.proto\"`."
                                }
                              },
                              "description": "Source context for the protocol buffer service represented by this message."
                            }
                          },
                          "description": "Api is a light-weight descriptor for an API Interface. Interfaces are also described as \"protocol buffer services\" in some contexts, such as by the \"service\" keyword in a .proto file, but they are different from API Services, which represent a concrete implementation of an interface as opposed to simply a description of methods and bindings. They are also sometimes simply referred to as \"APIs\" in other contexts, such as the name of this message itself. See https://cloud.google.com/apis/design/glossary for detailed terminology."
                        },
                        "description": "A list of API interfaces exported by this service. Contains only the names, versions, and method names of the interfaces."
                      },
                      "name": {
                        "type": "string",
                        "description": "The DNS address at which this service is available. An example DNS address would be: `calendar.googleapis.com`."
                      },
                      "quota": {
                        "id": "Quota",
                        "type": "object",
                        "properties": {
                          "limits": {
                            "type": "array",
                            "items": {
                              "id": "QuotaLimit",
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "Name of the quota limit. The name must be provided, and it must be unique within the service. The name can only include alphanumeric characters as well as '-'. The maximum length of the limit name is 64 characters."
                                },
                                "unit": {
                                  "type": "string",
                                  "description": "Specify the unit of the quota limit. It uses the same syntax as Metric.unit. The supported unit kinds are determined by the quota backend system. Here are some examples: * \"1/min/{project}\" for quota per minute per project. Note: the order of unit components is insignificant. The \"1\" at the beginning is required to follow the metric unit syntax."
                                },
                                "metric": {
                                  "type": "string",
                                  "description": "The name of the metric this quota limit applies to. The quota limits with the same metric will be checked together during runtime. The metric must be defined within the service config."
                                },
                                "values": {
                                  "type": "object",
                                  "description": "Tiered limit values. You must specify this as a key:value pair, with an integer value that is the maximum number of requests allowed for the specified unit. Currently only STANDARD is supported.",
                                  "additionalProperties": {
                                    "type": "string",
                                    "format": "int64"
                                  }
                                },
                                "duration": {
                                  "type": "string",
                                  "description": "Duration of this limit in textual notation. Must be \"100s\" or \"1d\". Used by group-based quotas only."
                                },
                                "freeTier": {
                                  "type": "string",
                                  "format": "int64",
                                  "description": "Free tier value displayed in the Developers Console for this limit. The free tier is the number of tokens that will be subtracted from the billed amount when billing is enabled. This field can only be set on a limit with duration \"1d\", in a billable group; it is invalid on any other limit. If this field is not set, it defaults to 0, indicating that there is no free tier for this service. Used by group-based quotas only."
                                },
                                "maxLimit": {
                                  "type": "string",
                                  "format": "int64",
                                  "description": "Maximum number of tokens that can be consumed during the specified duration. Client application developers can override the default limit up to this maximum. If specified, this value cannot be set to a value less than the default limit. If not specified, it is set to the default limit. To allow clients to apply overrides with no upper bound, set this to -1, indicating unlimited maximum quota. Used by group-based quotas only."
                                },
                                "description": {
                                  "type": "string",
                                  "description": "Optional. User-visible, extended description for this quota limit. Should be used only when more context is needed to understand this limit than provided by the limit's display name (see: `display_name`)."
                                },
                                "displayName": {
                                  "type": "string",
                                  "description": "User-visible display name for this limit. Optional. If not set, the UI will provide a default display name based on the quota configuration. This field can be used to override the default display name generated from the configuration."
                                },
                                "defaultLimit": {
                                  "type": "string",
                                  "format": "int64",
                                  "description": "Default number of tokens that can be consumed during the specified duration. This is the number of tokens assigned when a client application developer activates the service for his/her project. Specifying a value of 0 will block all requests. This can be used if you are provisioning quota to selected consumers and blocking others. Similarly, a value of -1 will indicate an unlimited quota. No other negative values are allowed. Used by group-based quotas only."
                                }
                              },
                              "description": "`QuotaLimit` defines a specific limit that applies over a specified duration for a limit type. There can be at most one limit for a duration and limit type combination defined within a `QuotaGroup`."
                            },
                            "description": "List of `QuotaLimit` definitions for the service."
                          },
                          "metricRules": {
                            "type": "array",
                            "items": {
                              "id": "MetricRule",
                              "type": "object",
                              "properties": {
                                "selector": {
                                  "type": "string",
                                  "description": "Selects the methods to which this rule applies. Refer to selector for syntax details."
                                },
                                "metricCosts": {
                                  "type": "object",
                                  "description": "Metrics to update when the selected methods are called, and the associated cost applied to each metric. The key of the map is the metric name, and the values are the amount increased for the metric against which the quota limits are defined. The value must not be negative.",
                                  "additionalProperties": {
                                    "type": "string",
                                    "format": "int64"
                                  }
                                }
                              },
                              "description": "Bind API methods to metrics. Binding a method to a metric causes that metric's configured quota behaviors to apply to the method call."
                            },
                            "description": "List of `MetricRule` definitions, each one mapping a selected method to one or more metrics."
                          }
                        },
                        "description": "Quota configuration."
                      },
                      "title": {
                        "type": "string",
                        "description": "The product title for this service."
                      },
                      "usage": {
                        "id": "Usage",
                        "type": "object",
                        "properties": {
                          "rules": {
                            "type": "array",
                            "items": {
                              "id": "UsageRule",
                              "type": "object",
                              "properties": {
                                "selector": {
                                  "type": "string",
                                  "description": "Selects the methods to which this rule applies. Use '*' to indicate all methods in all APIs. Refer to selector for syntax details."
                                },
                                "skipServiceControl": {
                                  "type": "boolean",
                                  "description": "If true, the selected method should skip service control and the control plane features, such as quota and billing, will not be available. This flag is used by Google Cloud Endpoints to bypass checks for internal methods, such as service health check methods."
                                },
                                "allowUnregisteredCalls": {
                                  "type": "boolean",
                                  "description": "If true, the selected method allows unregistered calls, e.g. calls that don't identify any user or application."
                                }
                              },
                              "description": "Usage configuration rules for the service. NOTE: Under development. Use this rule to configure unregistered calls for the service. Unregistered calls are calls that do not contain consumer project identity. (Example: calls that do not contain an API key). By default, API methods do not allow unregistered calls, and each method call must be identified by a consumer project identity. Use this rule to allow/disallow unregistered calls. Example of an API that wants to allow unregistered calls for entire service. usage: rules: - selector: \"*\" allow_unregistered_calls: true Example of a method that wants to allow unregistered calls. usage: rules: - selector: \"google.example.library.v1.LibraryService.CreateBook\" allow_unregistered_calls: true"
                            },
                            "description": "A list of usage rules that apply to individual API methods. **NOTE:** All service configuration rules follow \"last one wins\" order."
                          },
                          "requirements": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "Requirements that must be satisfied before a consumer project can use the service. Each requirement is of the form /; for example 'serviceusage.googleapis.com/billing-enabled'. For Google APIs, a Terms of Service requirement must be included here. Google Cloud APIs must include \"serviceusage.googleapis.com/tos/cloud\". Other Google APIs should include \"serviceusage.googleapis.com/tos/universal\". Additional ToS can be included based on the business needs."
                          },
                          "producerNotificationChannel": {
                            "type": "string",
                            "description": "The full resource name of a channel used for sending notifications to the service producer. Google Service Management currently only supports [Google Cloud Pub/Sub](https://cloud.google.com/pubsub) as a notification channel. To use Google Cloud Pub/Sub as the channel, this must be the name of a Cloud Pub/Sub topic that uses the Cloud Pub/Sub topic name format documented in https://cloud.google.com/pubsub/docs/overview."
                          }
                        },
                        "description": "Configuration controlling usage of this service."
                      },
                      "endpoints": {
                        "type": "array",
                        "items": {
                          "id": "Endpoint",
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "The canonical name of this endpoint."
                            },
                            "target": {
                              "type": "string",
                              "description": "The specification of an Internet routable address of API frontend that will handle requests to this [API Endpoint](https://cloud.google.com/apis/design/glossary). It should be either a valid IPv4 address or a fully-qualified domain name. For example, \"8.8.8.8\" or \"myservice.appspot.com\"."
                            },
                            "allowCors": {
                              "type": "boolean",
                              "description": "Allowing [CORS](https://en.wikipedia.org/wiki/Cross-origin_resource_sharing), aka cross-domain traffic, would allow the backends served from this endpoint to receive and respond to HTTP OPTIONS requests. The response will be used by the browser to determine whether the subsequent cross-origin request is allowed to proceed."
                            }
                          },
                          "description": "`Endpoint` describes a network endpoint of a service that serves a set of APIs. It is commonly known as a service endpoint. A service may expose any number of service endpoints, and all service endpoints share the same service definition, such as quota limits and monitoring metrics. Example service configuration: name: library-example.googleapis.com endpoints: # Below entry makes 'google.example.library.v1.Library' # API be served from endpoint address library-example.googleapis.com. # It also allows HTTP OPTIONS calls to be passed to the backend, for # it to decide whether the subsequent cross-origin request is # allowed to proceed. - name: library-example.googleapis.com allow_cors: true"
                        },
                        "description": "Configuration for network endpoints. Contains only the names and aliases of the endpoints."
                      },
                      "monitoring": {
                        "id": "Monitoring",
                        "type": "object",
                        "properties": {
                          "consumerDestinations": {
                            "type": "array",
                            "items": {
                              "id": "MonitoringDestination",
                              "type": "object",
                              "properties": {
                                "metrics": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "description": "Types of the metrics to report to this monitoring destination. Each type must be defined in Service.metrics section."
                                },
                                "monitoredResource": {
                                  "type": "string",
                                  "description": "The monitored resource type. The type must be defined in Service.monitored_resources section."
                                }
                              },
                              "description": "Configuration of a specific monitoring destination (the producer project or the consumer project)."
                            },
                            "description": "Monitoring configurations for sending metrics to the consumer project. There can be multiple consumer destinations. A monitored resource type may appear in multiple monitoring destinations if different aggregations are needed for different sets of metrics associated with that monitored resource type. A monitored resource and metric pair may only be used once in the Monitoring configuration."
                          },
                          "producerDestinations": {
                            "type": "array",
                            "items": {
                              "id": "MonitoringDestination",
                              "type": "object",
                              "properties": {
                                "metrics": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "description": "Types of the metrics to report to this monitoring destination. Each type must be defined in Service.metrics section."
                                },
                                "monitoredResource": {
                                  "type": "string",
                                  "description": "The monitored resource type. The type must be defined in Service.monitored_resources section."
                                }
                              },
                              "description": "Configuration of a specific monitoring destination (the producer project or the consumer project)."
                            },
                            "description": "Monitoring configurations for sending metrics to the producer project. There can be multiple producer destinations. A monitored resource type may appear in multiple monitoring destinations if different aggregations are needed for different sets of metrics associated with that monitored resource type. A monitored resource and metric pair may only be used once in the Monitoring configuration."
                          }
                        },
                        "description": "Monitoring configuration. This should not include the 'producer_destinations' field."
                      },
                      "documentation": {
                        "id": "Documentation",
                        "type": "object",
                        "properties": {
                          "pages": {
                            "type": "array",
                            "items": {
                              "id": "Page",
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "The name of the page. It will be used as an identity of the page to generate URI of the page, text of the link to this page in navigation, etc. The full page name (start from the root page name to this page concatenated with `.`) can be used as reference to the page in your documentation. For example: pages: - name: Tutorial content: (== include tutorial.md ==) subpages: - name: Java content: (== include tutorial_java.md ==) You can reference `Java` page using Markdown reference link syntax: `Java`."
                                },
                                "content": {
                                  "type": "string",
                                  "description": "The Markdown content of the page. You can use (== include {path} ==) to include content from a Markdown file."
                                },
                                "subpages": {
                                  "type": "array",
                                  "items": {},
                                  "description": "Subpages of this page. The order of subpages specified here will be honored in the generated docset."
                                }
                              },
                              "description": "Represents a documentation page. A page can contain subpages to represent nested documentation set structure."
                            },
                            "description": "The top level pages for the documentation set."
                          },
                          "rules": {
                            "type": "array",
                            "items": {
                              "id": "DocumentationRule",
                              "type": "object",
                              "properties": {
                                "selector": {
                                  "type": "string",
                                  "description": "The selector is a comma-separated list of patterns. Each pattern is a qualified name of the element which may end in \"*\", indicating a wildcard. Wildcards are only allowed at the end and for a whole component of the qualified name, i.e. \"foo.*\" is ok, but not \"foo.b*\" or \"foo.*.bar\". A wildcard will match one or more components. To specify a default for all applicable elements, the whole pattern \"*\" is used."
                                },
                                "description": {
                                  "type": "string",
                                  "description": "Description of the selected API(s)."
                                },
                                "deprecationDescription": {
                                  "type": "string",
                                  "description": "Deprecation description of the selected element(s). It can be provided if an element is marked as `deprecated`."
                                }
                              },
                              "description": "A documentation rule provides information about individual API elements."
                            },
                            "description": "A list of documentation rules that apply to individual API elements. **NOTE:** All service configuration rules follow \"last one wins\" order."
                          },
                          "summary": {
                            "type": "string",
                            "description": "A short summary of what the service does. Can only be provided by plain text."
                          },
                          "overview": {
                            "type": "string",
                            "description": "Declares a single overview page. For example: documentation: summary: ... overview: (== include overview.md ==) This is a shortcut for the following declaration (using pages style): documentation: summary: ... pages: - name: Overview content: (== include overview.md ==) Note: you cannot specify both `overview` field and `pages` field."
                          },
                          "serviceRootUrl": {
                            "type": "string",
                            "description": "Specifies the service root url if the default one (the service name from the yaml file) is not suitable. This can be seen in any fully specified service urls as well as sections that show a base that other urls are relative to."
                          },
                          "documentationRootUrl": {
                            "type": "string",
                            "description": "The URL to the root of documentation."
                          }
                        },
                        "description": "Additional API documentation. Contains only the summary and the documentation URL."
                      },
                      "authentication": {
                        "id": "Authentication",
                        "type": "object",
                        "properties": {
                          "rules": {
                            "type": "array",
                            "items": {
                              "id": "AuthenticationRule",
                              "type": "object",
                              "properties": {
                                "oauth": {
                                  "id": "OAuthRequirements",
                                  "type": "object",
                                  "properties": {
                                    "canonicalScopes": {
                                      "type": "string",
                                      "description": "The list of publicly documented OAuth scopes that are allowed access. An OAuth token containing any of these scopes will be accepted. Example: canonical_scopes: https://www.googleapis.com/auth/calendar, https://www.googleapis.com/auth/calendar.read"
                                    }
                                  },
                                  "description": "The requirements for OAuth credentials."
                                },
                                "selector": {
                                  "type": "string",
                                  "description": "Selects the methods to which this rule applies. Refer to selector for syntax details."
                                },
                                "requirements": {
                                  "type": "array",
                                  "items": {
                                    "id": "AuthRequirement",
                                    "type": "object",
                                    "properties": {
                                      "audiences": {
                                        "type": "string",
                                        "description": "NOTE: This will be deprecated soon, once AuthProvider.audiences is implemented and accepted in all the runtime components. The list of JWT [audiences](https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32#section-4.1.3). that are allowed to access. A JWT containing any of these audiences will be accepted. When this setting is absent, only JWTs with audience \"https://Service_name/API_name\" will be accepted. For example, if no audiences are in the setting, LibraryService API will only accept JWTs with the following audience \"https://library-example.googleapis.com/google.example.library.v1.LibraryService\". Example: audiences: bookstore_android.apps.googleusercontent.com, bookstore_web.apps.googleusercontent.com"
                                      },
                                      "providerId": {
                                        "type": "string",
                                        "description": "id from authentication provider. Example: provider_id: bookstore_auth"
                                      }
                                    },
                                    "description": "User-defined authentication requirements, including support for [JSON Web Token (JWT)](https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32)."
                                  },
                                  "description": "Requirements for additional authentication providers."
                                },
                                "allowWithoutCredential": {
                                  "type": "boolean",
                                  "description": "If true, the service accepts API keys without any other credential. This flag only applies to HTTP and gRPC requests."
                                }
                              },
                              "description": "Authentication rules for the service. By default, if a method has any authentication requirements, every request must include a valid credential matching one of the requirements. It's an error to include more than one kind of credential in a single request. If a method doesn't have any auth requirements, request credentials will be ignored."
                            },
                            "description": "A list of authentication rules that apply to individual API methods. **NOTE:** All service configuration rules follow \"last one wins\" order."
                          },
                          "providers": {
                            "type": "array",
                            "items": {
                              "id": "AuthProvider",
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "description": "The unique identifier of the auth provider. It will be referred to by `AuthRequirement.provider_id`. Example: \"bookstore_auth\"."
                                },
                                "issuer": {
                                  "type": "string",
                                  "description": "Identifies the principal that issued the JWT. See https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32#section-4.1.1 Usually a URL or an email address. Example: https://securetoken.google.com Example: 1234567-compute@developer.gserviceaccount.com"
                                },
                                "jwksUri": {
                                  "type": "string",
                                  "description": "URL of the provider's public key set to validate signature of the JWT. See [OpenID Discovery](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata). Optional if the key set document: - can be retrieved from [OpenID Discovery](https://openid.net/specs/openid-connect-discovery-1_0.html) of the issuer. - can be inferred from the email domain of the issuer (e.g. a Google service account). Example: https://www.googleapis.com/oauth2/v1/certs"
                                },
                                "audiences": {
                                  "type": "string",
                                  "description": "The list of JWT [audiences](https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32#section-4.1.3). that are allowed to access. A JWT containing any of these audiences will be accepted. When this setting is absent, JWTs with audiences: - \"https://[service.name]/[google.protobuf.Api.name]\" - \"https://[service.name]/\" will be accepted. For example, if no audiences are in the setting, LibraryService API will accept JWTs with the following audiences: - https://library-example.googleapis.com/google.example.library.v1.LibraryService - https://library-example.googleapis.com/ Example: audiences: bookstore_android.apps.googleusercontent.com, bookstore_web.apps.googleusercontent.com"
                                },
                                "jwtLocations": {
                                  "type": "array",
                                  "items": {
                                    "id": "JwtLocation",
                                    "type": "object",
                                    "properties": {
                                      "query": {
                                        "type": "string",
                                        "description": "Specifies URL query parameter name to extract JWT token."
                                      },
                                      "header": {
                                        "type": "string",
                                        "description": "Specifies HTTP header name to extract JWT token."
                                      },
                                      "valuePrefix": {
                                        "type": "string",
                                        "description": "The value prefix. The value format is \"value_prefix{token}\" Only applies to \"in\" header type. Must be empty for \"in\" query type. If not empty, the header value has to match (case sensitive) this prefix. If not matched, JWT will not be extracted. If matched, JWT will be extracted after the prefix is removed. For example, for \"Authorization: Bearer {JWT}\", value_prefix=\"Bearer \" with a space at the end."
                                      }
                                    },
                                    "description": "Specifies a location to extract JWT from an API request."
                                  },
                                  "description": "Defines the locations to extract the JWT. JWT locations can be either from HTTP headers or URL query parameters. The rule is that the first match wins. The checking order is: checking all headers first, then URL query parameters. If not specified, default to use following 3 locations: 1) Authorization: Bearer 2) x-goog-iap-jwt-assertion 3) access_token query parameter Default locations can be specified as followings: jwt_locations: - header: Authorization value_prefix: \"Bearer \" - header: x-goog-iap-jwt-assertion - query: access_token"
                                },
                                "authorizationUrl": {
                                  "type": "string",
                                  "description": "Redirect URL if JWT token is required but not present or is expired. Implement authorizationUrl of securityDefinitions in OpenAPI spec."
                                }
                              },
                              "description": "Configuration for an authentication provider, including support for [JSON Web Token (JWT)](https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32)."
                            },
                            "description": "Defines a set of authentication providers that a service supports."
                          }
                        },
                        "description": "Auth configuration. Contains only the OAuth rules."
                      },
                      "monitoredResources": {
                        "type": "array",
                        "items": {
                          "id": "MonitoredResourceDescriptor",
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "Optional. The resource name of the monitored resource descriptor: `\"projects/{project_id}/monitoredResourceDescriptors/{type}\"` where {type} is the value of the `type` field in this object and {project_id} is a project ID that provides API-specific context for accessing the type. APIs that do not use project information can use the resource name format `\"monitoredResourceDescriptors/{type}\"`."
                            },
                            "type": {
                              "type": "string",
                              "description": "Required. The monitored resource type. For example, the type `\"cloudsql_database\"` represents databases in Google Cloud SQL."
                            },
                            "labels": {
                              "type": "array",
                              "items": {
                                "id": "LabelDescriptor",
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "The label key."
                                  },
                                  "valueType": {
                                    "enum": [
                                      "STRING",
                                      "BOOL",
                                      "INT64"
                                    ],
                                    "type": "string",
                                    "description": "The type of data that can be assigned to the label.",
                                    "enumDescriptions": [
                                      "A variable-length string. This is the default.",
                                      "Boolean; true or false.",
                                      "A 64-bit signed integer."
                                    ]
                                  },
                                  "description": {
                                    "type": "string",
                                    "description": "A human-readable description for the label."
                                  }
                                },
                                "description": "A description of a label."
                              },
                              "description": "Required. A set of labels used to describe instances of this monitored resource type. For example, an individual Google Cloud SQL database is identified by values for the labels `\"database_id\"` and `\"zone\"`."
                            },
                            "description": {
                              "type": "string",
                              "description": "Optional. A detailed description of the monitored resource type that might be used in documentation."
                            },
                            "displayName": {
                              "type": "string",
                              "description": "Optional. A concise name for the monitored resource type that might be displayed in user interfaces. It should be a Title Cased Noun Phrase, without any article or other determiners. For example, `\"Google Cloud SQL Database\"`."
                            },
                            "launchStage": {
                              "enum": [
                                "LAUNCH_STAGE_UNSPECIFIED",
                                "UNIMPLEMENTED",
                                "PRELAUNCH",
                                "EARLY_ACCESS",
                                "ALPHA",
                                "BETA",
                                "GA",
                                "DEPRECATED"
                              ],
                              "type": "string",
                              "description": "Optional. The launch stage of the monitored resource definition.",
                              "enumDescriptions": [
                                "Do not use this default value.",
                                "The feature is not yet implemented. Users can not use it.",
                                "Prelaunch features are hidden from users and are only visible internally.",
                                "Early Access features are limited to a closed group of testers. To use these features, you must sign up in advance and sign a Trusted Tester agreement (which includes confidentiality provisions). These features may be unstable, changed in backward-incompatible ways, and are not guaranteed to be released.",
                                "Alpha is a limited availability test for releases before they are cleared for widespread use. By Alpha, all significant design issues are resolved and we are in the process of verifying functionality. Alpha customers need to apply for access, agree to applicable terms, and have their projects allowlisted. Alpha releases don’t have to be feature complete, no SLAs are provided, and there are no technical support obligations, but they will be far enough along that customers can actually use them in test environments or for limited-use tests -- just like they would in normal production cases.",
                                "Beta is the point at which we are ready to open a release for any customer to use. There are no SLA or technical support obligations in a Beta release. Products will be complete from a feature perspective, but may have some open outstanding issues. Beta releases are suitable for limited production use cases.",
                                "GA features are open to all developers and are considered stable and fully qualified for production use.",
                                "Deprecated features are scheduled to be shut down and removed. For more information, see the “Deprecation Policy” section of our [Terms of Service](https://cloud.google.com/terms/) and the [Google Cloud Platform Subject to the Deprecation Policy](https://cloud.google.com/terms/deprecation) documentation."
                              ]
                            }
                          },
                          "description": "An object that describes the schema of a MonitoredResource object using a type name and a set of labels. For example, the monitored resource descriptor for Google Compute Engine VM instances has a type of `\"gce_instance\"` and specifies the use of the labels `\"instance_id\"` and `\"zone\"` to identify particular VM instances. Different APIs can support different monitored resource types. APIs generally provide a `list` method that returns the monitored resource descriptors used by the API. "
                        },
                        "description": "Defines the monitored resources used by this service. This is required by the Service.monitoring and Service.logging configurations."
                      }
                    },
                    "description": "The service configuration of the available service. Some fields may be filtered out of the configuration in responses to the `ListServices` method. These fields are present only in responses to the `GetService` method."
                  },
                  "parent": {
                    "type": "string",
                    "description": "The resource name of the consumer. A valid name would be: - projects/123"
                  }
                },
                "description": "A service that is available for use by the consumer."
              },
              "description": "The requested Service states."
            }
          },
          "description": "Response message for the `BatchGetServices` method."
        }
      ]
  services.disable:
    description: |-
      Disable a service so that it can no longer be used with a project. This prevents unintended usage that may cause unexpected billing charges or security leaks. It is not valid to call the disable method on a service that is not currently enabled. Callers will receive a `FAILED_PRECONDITION` status if the target service is not currently enabled.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/service-usage/docs/reference/rest/v1/services/disable
    example:
      inputs: [
        {
          "id": "DisableServiceRequest",
          "type": "object",
          "properties": {
            "checkIfServiceHasUsage": {
              "enum": [
                "CHECK_IF_SERVICE_HAS_USAGE_UNSPECIFIED",
                "SKIP",
                "CHECK"
              ],
              "type": "string",
              "description": "Defines the behavior for checking service usage when disabling a service.",
              "enumDescriptions": [
                "When unset, the default behavior is used, which is SKIP.",
                "If set, skip checking service usage when disabling a service.",
                "If set, service usage is checked when disabling the service. If a service, or its dependents, has usage in the last 30 days, the request returns a FAILED_PRECONDITION error."
              ]
            },
            "disableDependentServices": {
              "type": "boolean",
              "description": "Indicates if services that are enabled and which depend on this service should also be disabled. If not set, an error will be generated if any enabled services depend on the service to be disabled. When set, the service, and any enabled services that depend on it, will be disabled together."
            }
          },
          "description": "Request message for the `DisableService` method."
        }
      ]
      outputs: [
        {
          "id": "Operation",
          "type": "object",
          "properties": {
            "done": {
              "type": "boolean",
              "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available."
            },
            "name": {
              "type": "string",
              "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`."
            },
            "error": {
              "id": "Status",
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The status code, which should be an enum value of google.rpc.Code."
                },
                "details": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  },
                  "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
                },
                "message": {
                  "type": "string",
                  "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                }
              },
              "description": "The error result of the operation in case of failure or cancellation."
            },
            "metadata": {
              "type": "object",
              "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
              "additionalProperties": {
                "type": "any",
                "description": "Properties of the object. Contains field @type with type URL."
              }
            },
            "response": {
              "type": "object",
              "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
              "additionalProperties": {
                "type": "any",
                "description": "Properties of the object. Contains field @type with type URL."
              }
            }
          },
          "description": "This resource represents a long-running operation that is the result of a network API call."
        }
      ]
  services.enable:
    description: |-
      Enable a service so that it can be used with a project.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/service-usage/docs/reference/rest/v1/services/enable
    example:
      inputs: [
        {
          "id": "EnableServiceRequest",
          "type": "object",
          "properties": {},
          "description": "Request message for the `EnableService` method."
        }
      ]
      outputs: [
        {
          "id": "Operation",
          "type": "object",
          "properties": {
            "done": {
              "type": "boolean",
              "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available."
            },
            "name": {
              "type": "string",
              "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`."
            },
            "error": {
              "id": "Status",
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The status code, which should be an enum value of google.rpc.Code."
                },
                "details": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  },
                  "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
                },
                "message": {
                  "type": "string",
                  "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                }
              },
              "description": "The error result of the operation in case of failure or cancellation."
            },
            "metadata": {
              "type": "object",
              "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
              "additionalProperties": {
                "type": "any",
                "description": "Properties of the object. Contains field @type with type URL."
              }
            },
            "response": {
              "type": "object",
              "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
              "additionalProperties": {
                "type": "any",
                "description": "Properties of the object. Contains field @type with type URL."
              }
            }
          },
          "description": "This resource represents a long-running operation that is the result of a network API call."
        }
      ]
  services.get:
    description: |-
      Returns the service configuration and enabled state for a given service.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/service-usage/docs/reference/rest/v1/services/get
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "GoogleApiServiceusageV1Service",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The resource name of the consumer and service. A valid name would be: - projects/123/services/serviceusage.googleapis.com"
            },
            "state": {
              "enum": [
                "STATE_UNSPECIFIED",
                "DISABLED",
                "ENABLED"
              ],
              "type": "string",
              "description": "Whether or not the service has been enabled for use by the consumer.",
              "enumDescriptions": [
                "The default value, which indicates that the enabled state of the service is unspecified or not meaningful. Currently, all consumers other than projects (such as folders and organizations) are always in this state.",
                "The service cannot be used by this consumer. It has either been explicitly disabled, or has never been enabled.",
                "The service has been explicitly enabled for use by this consumer."
              ]
            },
            "config": {
              "id": "GoogleApiServiceusageV1ServiceConfig",
              "type": "object",
              "properties": {
                "apis": {
                  "type": "array",
                  "items": {
                    "id": "Api",
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "The fully qualified name of this interface, including package name followed by the interface's simple name."
                      },
                      "mixins": {
                        "type": "array",
                        "items": {
                          "id": "Mixin",
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "The fully qualified name of the interface which is included."
                            },
                            "root": {
                              "type": "string",
                              "description": "If non-empty specifies a path under which inherited HTTP paths are rooted."
                            }
                          },
                          "description": "Declares an API Interface to be included in this interface. The including interface must redeclare all the methods from the included interface, but documentation and options are inherited as follows: - If after comment and whitespace stripping, the documentation string of the redeclared method is empty, it will be inherited from the original method. - Each annotation belonging to the service config (http, visibility) which is not set in the redeclared method will be inherited. - If an http annotation is inherited, the path pattern will be modified as follows. Any version prefix will be replaced by the version of the including interface plus the root path if specified. Example of a simple mixin: package google.acl.v1; service AccessControl { // Get the underlying ACL object. rpc GetAcl(GetAclRequest) returns (Acl) { option (google.api.http).get = \"/v1/{resource=**}:getAcl\"; } } package google.storage.v2; service Storage { // rpc GetAcl(GetAclRequest) returns (Acl); // Get a data record. rpc GetData(GetDataRequest) returns (Data) { option (google.api.http).get = \"/v2/{resource=**}\"; } } Example of a mixin configuration: apis: - name: google.storage.v2.Storage mixins: - name: google.acl.v1.AccessControl The mixin construct implies that all methods in `AccessControl` are also declared with same name and request/response types in `Storage`. A documentation generator or annotation processor will see the effective `Storage.GetAcl` method after inheriting documentation and annotations as follows: service Storage { // Get the underlying ACL object. rpc GetAcl(GetAclRequest) returns (Acl) { option (google.api.http).get = \"/v2/{resource=**}:getAcl\"; } ... } Note how the version in the path pattern changed from `v1` to `v2`. If the `root` field in the mixin is specified, it should be a relative path under which inherited HTTP paths are placed. Example: apis: - name: google.storage.v2.Storage mixins: - name: google.acl.v1.AccessControl root: acls This implies the following inherited HTTP annotation: service Storage { // Get the underlying ACL object. rpc GetAcl(GetAclRequest) returns (Acl) { option (google.api.http).get = \"/v2/acls/{resource=**}:getAcl\"; } ... }"
                        },
                        "description": "Included interfaces. See Mixin."
                      },
                      "syntax": {
                        "enum": [
                          "SYNTAX_PROTO2",
                          "SYNTAX_PROTO3"
                        ],
                        "type": "string",
                        "description": "The source syntax of the service.",
                        "enumDescriptions": [
                          "Syntax `proto2`.",
                          "Syntax `proto3`."
                        ]
                      },
                      "methods": {
                        "type": "array",
                        "items": {
                          "id": "Method",
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "The simple name of this method."
                            },
                            "syntax": {
                              "enum": [
                                "SYNTAX_PROTO2",
                                "SYNTAX_PROTO3"
                              ],
                              "type": "string",
                              "description": "The source syntax of this method.",
                              "enumDescriptions": [
                                "Syntax `proto2`.",
                                "Syntax `proto3`."
                              ]
                            },
                            "options": {
                              "type": "array",
                              "items": {
                                "id": "Option",
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "description": "The option's name. For protobuf built-in options (options defined in descriptor.proto), this is the short name. For example, `\"map_entry\"`. For custom options, it should be the fully-qualified name. For example, `\"google.api.http\"`."
                                  },
                                  "value": {
                                    "type": "object",
                                    "description": "The option's value packed in an Any message. If the value is a primitive, the corresponding wrapper type defined in google/protobuf/wrappers.proto should be used. If the value is an enum, it should be stored as an int32 value using the google.protobuf.Int32Value type.",
                                    "additionalProperties": {
                                      "type": "any",
                                      "description": "Properties of the object. Contains field @type with type URL."
                                    }
                                  }
                                },
                                "description": "A protocol buffer option, which can be attached to a message, field, enumeration, etc."
                              },
                              "description": "Any metadata attached to the method."
                            },
                            "requestTypeUrl": {
                              "type": "string",
                              "description": "A URL of the input message type."
                            },
                            "responseTypeUrl": {
                              "type": "string",
                              "description": "The URL of the output message type."
                            },
                            "requestStreaming": {
                              "type": "boolean",
                              "description": "If true, the request is streamed."
                            },
                            "responseStreaming": {
                              "type": "boolean",
                              "description": "If true, the response is streamed."
                            }
                          },
                          "description": "Method represents a method of an API interface."
                        },
                        "description": "The methods of this interface, in unspecified order."
                      },
                      "options": {
                        "type": "array",
                        "items": {
                          "id": "Option",
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "The option's name. For protobuf built-in options (options defined in descriptor.proto), this is the short name. For example, `\"map_entry\"`. For custom options, it should be the fully-qualified name. For example, `\"google.api.http\"`."
                            },
                            "value": {
                              "type": "object",
                              "description": "The option's value packed in an Any message. If the value is a primitive, the corresponding wrapper type defined in google/protobuf/wrappers.proto should be used. If the value is an enum, it should be stored as an int32 value using the google.protobuf.Int32Value type.",
                              "additionalProperties": {
                                "type": "any",
                                "description": "Properties of the object. Contains field @type with type URL."
                              }
                            }
                          },
                          "description": "A protocol buffer option, which can be attached to a message, field, enumeration, etc."
                        },
                        "description": "Any metadata attached to the interface."
                      },
                      "version": {
                        "type": "string",
                        "description": "A version string for this interface. If specified, must have the form `major-version.minor-version`, as in `1.10`. If the minor version is omitted, it defaults to zero. If the entire version field is empty, the major version is derived from the package name, as outlined below. If the field is not empty, the version in the package name will be verified to be consistent with what is provided here. The versioning schema uses [semantic versioning](http://semver.org) where the major version number indicates a breaking change and the minor version an additive, non-breaking change. Both version numbers are signals to users what to expect from different versions, and should be carefully chosen based on the product plan. The major version is also reflected in the package name of the interface, which must end in `v`, as in `google.feature.v1`. For major versions 0 and 1, the suffix can be omitted. Zero major versions must only be used for experimental, non-GA interfaces. "
                      },
                      "sourceContext": {
                        "id": "SourceContext",
                        "type": "object",
                        "properties": {
                          "fileName": {
                            "type": "string",
                            "description": "The path-qualified name of the .proto file that contained the associated protobuf element. For example: `\"google/protobuf/source_context.proto\"`."
                          }
                        },
                        "description": "Source context for the protocol buffer service represented by this message."
                      }
                    },
                    "description": "Api is a light-weight descriptor for an API Interface. Interfaces are also described as \"protocol buffer services\" in some contexts, such as by the \"service\" keyword in a .proto file, but they are different from API Services, which represent a concrete implementation of an interface as opposed to simply a description of methods and bindings. They are also sometimes simply referred to as \"APIs\" in other contexts, such as the name of this message itself. See https://cloud.google.com/apis/design/glossary for detailed terminology."
                  },
                  "description": "A list of API interfaces exported by this service. Contains only the names, versions, and method names of the interfaces."
                },
                "name": {
                  "type": "string",
                  "description": "The DNS address at which this service is available. An example DNS address would be: `calendar.googleapis.com`."
                },
                "quota": {
                  "id": "Quota",
                  "type": "object",
                  "properties": {
                    "limits": {
                      "type": "array",
                      "items": {
                        "id": "QuotaLimit",
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of the quota limit. The name must be provided, and it must be unique within the service. The name can only include alphanumeric characters as well as '-'. The maximum length of the limit name is 64 characters."
                          },
                          "unit": {
                            "type": "string",
                            "description": "Specify the unit of the quota limit. It uses the same syntax as Metric.unit. The supported unit kinds are determined by the quota backend system. Here are some examples: * \"1/min/{project}\" for quota per minute per project. Note: the order of unit components is insignificant. The \"1\" at the beginning is required to follow the metric unit syntax."
                          },
                          "metric": {
                            "type": "string",
                            "description": "The name of the metric this quota limit applies to. The quota limits with the same metric will be checked together during runtime. The metric must be defined within the service config."
                          },
                          "values": {
                            "type": "object",
                            "description": "Tiered limit values. You must specify this as a key:value pair, with an integer value that is the maximum number of requests allowed for the specified unit. Currently only STANDARD is supported.",
                            "additionalProperties": {
                              "type": "string",
                              "format": "int64"
                            }
                          },
                          "duration": {
                            "type": "string",
                            "description": "Duration of this limit in textual notation. Must be \"100s\" or \"1d\". Used by group-based quotas only."
                          },
                          "freeTier": {
                            "type": "string",
                            "format": "int64",
                            "description": "Free tier value displayed in the Developers Console for this limit. The free tier is the number of tokens that will be subtracted from the billed amount when billing is enabled. This field can only be set on a limit with duration \"1d\", in a billable group; it is invalid on any other limit. If this field is not set, it defaults to 0, indicating that there is no free tier for this service. Used by group-based quotas only."
                          },
                          "maxLimit": {
                            "type": "string",
                            "format": "int64",
                            "description": "Maximum number of tokens that can be consumed during the specified duration. Client application developers can override the default limit up to this maximum. If specified, this value cannot be set to a value less than the default limit. If not specified, it is set to the default limit. To allow clients to apply overrides with no upper bound, set this to -1, indicating unlimited maximum quota. Used by group-based quotas only."
                          },
                          "description": {
                            "type": "string",
                            "description": "Optional. User-visible, extended description for this quota limit. Should be used only when more context is needed to understand this limit than provided by the limit's display name (see: `display_name`)."
                          },
                          "displayName": {
                            "type": "string",
                            "description": "User-visible display name for this limit. Optional. If not set, the UI will provide a default display name based on the quota configuration. This field can be used to override the default display name generated from the configuration."
                          },
                          "defaultLimit": {
                            "type": "string",
                            "format": "int64",
                            "description": "Default number of tokens that can be consumed during the specified duration. This is the number of tokens assigned when a client application developer activates the service for his/her project. Specifying a value of 0 will block all requests. This can be used if you are provisioning quota to selected consumers and blocking others. Similarly, a value of -1 will indicate an unlimited quota. No other negative values are allowed. Used by group-based quotas only."
                          }
                        },
                        "description": "`QuotaLimit` defines a specific limit that applies over a specified duration for a limit type. There can be at most one limit for a duration and limit type combination defined within a `QuotaGroup`."
                      },
                      "description": "List of `QuotaLimit` definitions for the service."
                    },
                    "metricRules": {
                      "type": "array",
                      "items": {
                        "id": "MetricRule",
                        "type": "object",
                        "properties": {
                          "selector": {
                            "type": "string",
                            "description": "Selects the methods to which this rule applies. Refer to selector for syntax details."
                          },
                          "metricCosts": {
                            "type": "object",
                            "description": "Metrics to update when the selected methods are called, and the associated cost applied to each metric. The key of the map is the metric name, and the values are the amount increased for the metric against which the quota limits are defined. The value must not be negative.",
                            "additionalProperties": {
                              "type": "string",
                              "format": "int64"
                            }
                          }
                        },
                        "description": "Bind API methods to metrics. Binding a method to a metric causes that metric's configured quota behaviors to apply to the method call."
                      },
                      "description": "List of `MetricRule` definitions, each one mapping a selected method to one or more metrics."
                    }
                  },
                  "description": "Quota configuration."
                },
                "title": {
                  "type": "string",
                  "description": "The product title for this service."
                },
                "usage": {
                  "id": "Usage",
                  "type": "object",
                  "properties": {
                    "rules": {
                      "type": "array",
                      "items": {
                        "id": "UsageRule",
                        "type": "object",
                        "properties": {
                          "selector": {
                            "type": "string",
                            "description": "Selects the methods to which this rule applies. Use '*' to indicate all methods in all APIs. Refer to selector for syntax details."
                          },
                          "skipServiceControl": {
                            "type": "boolean",
                            "description": "If true, the selected method should skip service control and the control plane features, such as quota and billing, will not be available. This flag is used by Google Cloud Endpoints to bypass checks for internal methods, such as service health check methods."
                          },
                          "allowUnregisteredCalls": {
                            "type": "boolean",
                            "description": "If true, the selected method allows unregistered calls, e.g. calls that don't identify any user or application."
                          }
                        },
                        "description": "Usage configuration rules for the service. NOTE: Under development. Use this rule to configure unregistered calls for the service. Unregistered calls are calls that do not contain consumer project identity. (Example: calls that do not contain an API key). By default, API methods do not allow unregistered calls, and each method call must be identified by a consumer project identity. Use this rule to allow/disallow unregistered calls. Example of an API that wants to allow unregistered calls for entire service. usage: rules: - selector: \"*\" allow_unregistered_calls: true Example of a method that wants to allow unregistered calls. usage: rules: - selector: \"google.example.library.v1.LibraryService.CreateBook\" allow_unregistered_calls: true"
                      },
                      "description": "A list of usage rules that apply to individual API methods. **NOTE:** All service configuration rules follow \"last one wins\" order."
                    },
                    "requirements": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Requirements that must be satisfied before a consumer project can use the service. Each requirement is of the form /; for example 'serviceusage.googleapis.com/billing-enabled'. For Google APIs, a Terms of Service requirement must be included here. Google Cloud APIs must include \"serviceusage.googleapis.com/tos/cloud\". Other Google APIs should include \"serviceusage.googleapis.com/tos/universal\". Additional ToS can be included based on the business needs."
                    },
                    "producerNotificationChannel": {
                      "type": "string",
                      "description": "The full resource name of a channel used for sending notifications to the service producer. Google Service Management currently only supports [Google Cloud Pub/Sub](https://cloud.google.com/pubsub) as a notification channel. To use Google Cloud Pub/Sub as the channel, this must be the name of a Cloud Pub/Sub topic that uses the Cloud Pub/Sub topic name format documented in https://cloud.google.com/pubsub/docs/overview."
                    }
                  },
                  "description": "Configuration controlling usage of this service."
                },
                "endpoints": {
                  "type": "array",
                  "items": {
                    "id": "Endpoint",
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "The canonical name of this endpoint."
                      },
                      "target": {
                        "type": "string",
                        "description": "The specification of an Internet routable address of API frontend that will handle requests to this [API Endpoint](https://cloud.google.com/apis/design/glossary). It should be either a valid IPv4 address or a fully-qualified domain name. For example, \"8.8.8.8\" or \"myservice.appspot.com\"."
                      },
                      "allowCors": {
                        "type": "boolean",
                        "description": "Allowing [CORS](https://en.wikipedia.org/wiki/Cross-origin_resource_sharing), aka cross-domain traffic, would allow the backends served from this endpoint to receive and respond to HTTP OPTIONS requests. The response will be used by the browser to determine whether the subsequent cross-origin request is allowed to proceed."
                      }
                    },
                    "description": "`Endpoint` describes a network endpoint of a service that serves a set of APIs. It is commonly known as a service endpoint. A service may expose any number of service endpoints, and all service endpoints share the same service definition, such as quota limits and monitoring metrics. Example service configuration: name: library-example.googleapis.com endpoints: # Below entry makes 'google.example.library.v1.Library' # API be served from endpoint address library-example.googleapis.com. # It also allows HTTP OPTIONS calls to be passed to the backend, for # it to decide whether the subsequent cross-origin request is # allowed to proceed. - name: library-example.googleapis.com allow_cors: true"
                  },
                  "description": "Configuration for network endpoints. Contains only the names and aliases of the endpoints."
                },
                "monitoring": {
                  "id": "Monitoring",
                  "type": "object",
                  "properties": {
                    "consumerDestinations": {
                      "type": "array",
                      "items": {
                        "id": "MonitoringDestination",
                        "type": "object",
                        "properties": {
                          "metrics": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "Types of the metrics to report to this monitoring destination. Each type must be defined in Service.metrics section."
                          },
                          "monitoredResource": {
                            "type": "string",
                            "description": "The monitored resource type. The type must be defined in Service.monitored_resources section."
                          }
                        },
                        "description": "Configuration of a specific monitoring destination (the producer project or the consumer project)."
                      },
                      "description": "Monitoring configurations for sending metrics to the consumer project. There can be multiple consumer destinations. A monitored resource type may appear in multiple monitoring destinations if different aggregations are needed for different sets of metrics associated with that monitored resource type. A monitored resource and metric pair may only be used once in the Monitoring configuration."
                    },
                    "producerDestinations": {
                      "type": "array",
                      "items": {
                        "id": "MonitoringDestination",
                        "type": "object",
                        "properties": {
                          "metrics": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "Types of the metrics to report to this monitoring destination. Each type must be defined in Service.metrics section."
                          },
                          "monitoredResource": {
                            "type": "string",
                            "description": "The monitored resource type. The type must be defined in Service.monitored_resources section."
                          }
                        },
                        "description": "Configuration of a specific monitoring destination (the producer project or the consumer project)."
                      },
                      "description": "Monitoring configurations for sending metrics to the producer project. There can be multiple producer destinations. A monitored resource type may appear in multiple monitoring destinations if different aggregations are needed for different sets of metrics associated with that monitored resource type. A monitored resource and metric pair may only be used once in the Monitoring configuration."
                    }
                  },
                  "description": "Monitoring configuration. This should not include the 'producer_destinations' field."
                },
                "documentation": {
                  "id": "Documentation",
                  "type": "object",
                  "properties": {
                    "pages": {
                      "type": "array",
                      "items": {
                        "id": "Page",
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The name of the page. It will be used as an identity of the page to generate URI of the page, text of the link to this page in navigation, etc. The full page name (start from the root page name to this page concatenated with `.`) can be used as reference to the page in your documentation. For example: pages: - name: Tutorial content: (== include tutorial.md ==) subpages: - name: Java content: (== include tutorial_java.md ==) You can reference `Java` page using Markdown reference link syntax: `Java`."
                          },
                          "content": {
                            "type": "string",
                            "description": "The Markdown content of the page. You can use (== include {path} ==) to include content from a Markdown file."
                          },
                          "subpages": {
                            "type": "array",
                            "items": {},
                            "description": "Subpages of this page. The order of subpages specified here will be honored in the generated docset."
                          }
                        },
                        "description": "Represents a documentation page. A page can contain subpages to represent nested documentation set structure."
                      },
                      "description": "The top level pages for the documentation set."
                    },
                    "rules": {
                      "type": "array",
                      "items": {
                        "id": "DocumentationRule",
                        "type": "object",
                        "properties": {
                          "selector": {
                            "type": "string",
                            "description": "The selector is a comma-separated list of patterns. Each pattern is a qualified name of the element which may end in \"*\", indicating a wildcard. Wildcards are only allowed at the end and for a whole component of the qualified name, i.e. \"foo.*\" is ok, but not \"foo.b*\" or \"foo.*.bar\". A wildcard will match one or more components. To specify a default for all applicable elements, the whole pattern \"*\" is used."
                          },
                          "description": {
                            "type": "string",
                            "description": "Description of the selected API(s)."
                          },
                          "deprecationDescription": {
                            "type": "string",
                            "description": "Deprecation description of the selected element(s). It can be provided if an element is marked as `deprecated`."
                          }
                        },
                        "description": "A documentation rule provides information about individual API elements."
                      },
                      "description": "A list of documentation rules that apply to individual API elements. **NOTE:** All service configuration rules follow \"last one wins\" order."
                    },
                    "summary": {
                      "type": "string",
                      "description": "A short summary of what the service does. Can only be provided by plain text."
                    },
                    "overview": {
                      "type": "string",
                      "description": "Declares a single overview page. For example: documentation: summary: ... overview: (== include overview.md ==) This is a shortcut for the following declaration (using pages style): documentation: summary: ... pages: - name: Overview content: (== include overview.md ==) Note: you cannot specify both `overview` field and `pages` field."
                    },
                    "serviceRootUrl": {
                      "type": "string",
                      "description": "Specifies the service root url if the default one (the service name from the yaml file) is not suitable. This can be seen in any fully specified service urls as well as sections that show a base that other urls are relative to."
                    },
                    "documentationRootUrl": {
                      "type": "string",
                      "description": "The URL to the root of documentation."
                    }
                  },
                  "description": "Additional API documentation. Contains only the summary and the documentation URL."
                },
                "authentication": {
                  "id": "Authentication",
                  "type": "object",
                  "properties": {
                    "rules": {
                      "type": "array",
                      "items": {
                        "id": "AuthenticationRule",
                        "type": "object",
                        "properties": {
                          "oauth": {
                            "id": "OAuthRequirements",
                            "type": "object",
                            "properties": {
                              "canonicalScopes": {
                                "type": "string",
                                "description": "The list of publicly documented OAuth scopes that are allowed access. An OAuth token containing any of these scopes will be accepted. Example: canonical_scopes: https://www.googleapis.com/auth/calendar, https://www.googleapis.com/auth/calendar.read"
                              }
                            },
                            "description": "The requirements for OAuth credentials."
                          },
                          "selector": {
                            "type": "string",
                            "description": "Selects the methods to which this rule applies. Refer to selector for syntax details."
                          },
                          "requirements": {
                            "type": "array",
                            "items": {
                              "id": "AuthRequirement",
                              "type": "object",
                              "properties": {
                                "audiences": {
                                  "type": "string",
                                  "description": "NOTE: This will be deprecated soon, once AuthProvider.audiences is implemented and accepted in all the runtime components. The list of JWT [audiences](https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32#section-4.1.3). that are allowed to access. A JWT containing any of these audiences will be accepted. When this setting is absent, only JWTs with audience \"https://Service_name/API_name\" will be accepted. For example, if no audiences are in the setting, LibraryService API will only accept JWTs with the following audience \"https://library-example.googleapis.com/google.example.library.v1.LibraryService\". Example: audiences: bookstore_android.apps.googleusercontent.com, bookstore_web.apps.googleusercontent.com"
                                },
                                "providerId": {
                                  "type": "string",
                                  "description": "id from authentication provider. Example: provider_id: bookstore_auth"
                                }
                              },
                              "description": "User-defined authentication requirements, including support for [JSON Web Token (JWT)](https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32)."
                            },
                            "description": "Requirements for additional authentication providers."
                          },
                          "allowWithoutCredential": {
                            "type": "boolean",
                            "description": "If true, the service accepts API keys without any other credential. This flag only applies to HTTP and gRPC requests."
                          }
                        },
                        "description": "Authentication rules for the service. By default, if a method has any authentication requirements, every request must include a valid credential matching one of the requirements. It's an error to include more than one kind of credential in a single request. If a method doesn't have any auth requirements, request credentials will be ignored."
                      },
                      "description": "A list of authentication rules that apply to individual API methods. **NOTE:** All service configuration rules follow \"last one wins\" order."
                    },
                    "providers": {
                      "type": "array",
                      "items": {
                        "id": "AuthProvider",
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "The unique identifier of the auth provider. It will be referred to by `AuthRequirement.provider_id`. Example: \"bookstore_auth\"."
                          },
                          "issuer": {
                            "type": "string",
                            "description": "Identifies the principal that issued the JWT. See https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32#section-4.1.1 Usually a URL or an email address. Example: https://securetoken.google.com Example: 1234567-compute@developer.gserviceaccount.com"
                          },
                          "jwksUri": {
                            "type": "string",
                            "description": "URL of the provider's public key set to validate signature of the JWT. See [OpenID Discovery](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata). Optional if the key set document: - can be retrieved from [OpenID Discovery](https://openid.net/specs/openid-connect-discovery-1_0.html) of the issuer. - can be inferred from the email domain of the issuer (e.g. a Google service account). Example: https://www.googleapis.com/oauth2/v1/certs"
                          },
                          "audiences": {
                            "type": "string",
                            "description": "The list of JWT [audiences](https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32#section-4.1.3). that are allowed to access. A JWT containing any of these audiences will be accepted. When this setting is absent, JWTs with audiences: - \"https://[service.name]/[google.protobuf.Api.name]\" - \"https://[service.name]/\" will be accepted. For example, if no audiences are in the setting, LibraryService API will accept JWTs with the following audiences: - https://library-example.googleapis.com/google.example.library.v1.LibraryService - https://library-example.googleapis.com/ Example: audiences: bookstore_android.apps.googleusercontent.com, bookstore_web.apps.googleusercontent.com"
                          },
                          "jwtLocations": {
                            "type": "array",
                            "items": {
                              "id": "JwtLocation",
                              "type": "object",
                              "properties": {
                                "query": {
                                  "type": "string",
                                  "description": "Specifies URL query parameter name to extract JWT token."
                                },
                                "header": {
                                  "type": "string",
                                  "description": "Specifies HTTP header name to extract JWT token."
                                },
                                "valuePrefix": {
                                  "type": "string",
                                  "description": "The value prefix. The value format is \"value_prefix{token}\" Only applies to \"in\" header type. Must be empty for \"in\" query type. If not empty, the header value has to match (case sensitive) this prefix. If not matched, JWT will not be extracted. If matched, JWT will be extracted after the prefix is removed. For example, for \"Authorization: Bearer {JWT}\", value_prefix=\"Bearer \" with a space at the end."
                                }
                              },
                              "description": "Specifies a location to extract JWT from an API request."
                            },
                            "description": "Defines the locations to extract the JWT. JWT locations can be either from HTTP headers or URL query parameters. The rule is that the first match wins. The checking order is: checking all headers first, then URL query parameters. If not specified, default to use following 3 locations: 1) Authorization: Bearer 2) x-goog-iap-jwt-assertion 3) access_token query parameter Default locations can be specified as followings: jwt_locations: - header: Authorization value_prefix: \"Bearer \" - header: x-goog-iap-jwt-assertion - query: access_token"
                          },
                          "authorizationUrl": {
                            "type": "string",
                            "description": "Redirect URL if JWT token is required but not present or is expired. Implement authorizationUrl of securityDefinitions in OpenAPI spec."
                          }
                        },
                        "description": "Configuration for an authentication provider, including support for [JSON Web Token (JWT)](https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32)."
                      },
                      "description": "Defines a set of authentication providers that a service supports."
                    }
                  },
                  "description": "Auth configuration. Contains only the OAuth rules."
                },
                "monitoredResources": {
                  "type": "array",
                  "items": {
                    "id": "MonitoredResourceDescriptor",
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Optional. The resource name of the monitored resource descriptor: `\"projects/{project_id}/monitoredResourceDescriptors/{type}\"` where {type} is the value of the `type` field in this object and {project_id} is a project ID that provides API-specific context for accessing the type. APIs that do not use project information can use the resource name format `\"monitoredResourceDescriptors/{type}\"`."
                      },
                      "type": {
                        "type": "string",
                        "description": "Required. The monitored resource type. For example, the type `\"cloudsql_database\"` represents databases in Google Cloud SQL."
                      },
                      "labels": {
                        "type": "array",
                        "items": {
                          "id": "LabelDescriptor",
                          "type": "object",
                          "properties": {
                            "key": {
                              "type": "string",
                              "description": "The label key."
                            },
                            "valueType": {
                              "enum": [
                                "STRING",
                                "BOOL",
                                "INT64"
                              ],
                              "type": "string",
                              "description": "The type of data that can be assigned to the label.",
                              "enumDescriptions": [
                                "A variable-length string. This is the default.",
                                "Boolean; true or false.",
                                "A 64-bit signed integer."
                              ]
                            },
                            "description": {
                              "type": "string",
                              "description": "A human-readable description for the label."
                            }
                          },
                          "description": "A description of a label."
                        },
                        "description": "Required. A set of labels used to describe instances of this monitored resource type. For example, an individual Google Cloud SQL database is identified by values for the labels `\"database_id\"` and `\"zone\"`."
                      },
                      "description": {
                        "type": "string",
                        "description": "Optional. A detailed description of the monitored resource type that might be used in documentation."
                      },
                      "displayName": {
                        "type": "string",
                        "description": "Optional. A concise name for the monitored resource type that might be displayed in user interfaces. It should be a Title Cased Noun Phrase, without any article or other determiners. For example, `\"Google Cloud SQL Database\"`."
                      },
                      "launchStage": {
                        "enum": [
                          "LAUNCH_STAGE_UNSPECIFIED",
                          "UNIMPLEMENTED",
                          "PRELAUNCH",
                          "EARLY_ACCESS",
                          "ALPHA",
                          "BETA",
                          "GA",
                          "DEPRECATED"
                        ],
                        "type": "string",
                        "description": "Optional. The launch stage of the monitored resource definition.",
                        "enumDescriptions": [
                          "Do not use this default value.",
                          "The feature is not yet implemented. Users can not use it.",
                          "Prelaunch features are hidden from users and are only visible internally.",
                          "Early Access features are limited to a closed group of testers. To use these features, you must sign up in advance and sign a Trusted Tester agreement (which includes confidentiality provisions). These features may be unstable, changed in backward-incompatible ways, and are not guaranteed to be released.",
                          "Alpha is a limited availability test for releases before they are cleared for widespread use. By Alpha, all significant design issues are resolved and we are in the process of verifying functionality. Alpha customers need to apply for access, agree to applicable terms, and have their projects allowlisted. Alpha releases don’t have to be feature complete, no SLAs are provided, and there are no technical support obligations, but they will be far enough along that customers can actually use them in test environments or for limited-use tests -- just like they would in normal production cases.",
                          "Beta is the point at which we are ready to open a release for any customer to use. There are no SLA or technical support obligations in a Beta release. Products will be complete from a feature perspective, but may have some open outstanding issues. Beta releases are suitable for limited production use cases.",
                          "GA features are open to all developers and are considered stable and fully qualified for production use.",
                          "Deprecated features are scheduled to be shut down and removed. For more information, see the “Deprecation Policy” section of our [Terms of Service](https://cloud.google.com/terms/) and the [Google Cloud Platform Subject to the Deprecation Policy](https://cloud.google.com/terms/deprecation) documentation."
                        ]
                      }
                    },
                    "description": "An object that describes the schema of a MonitoredResource object using a type name and a set of labels. For example, the monitored resource descriptor for Google Compute Engine VM instances has a type of `\"gce_instance\"` and specifies the use of the labels `\"instance_id\"` and `\"zone\"` to identify particular VM instances. Different APIs can support different monitored resource types. APIs generally provide a `list` method that returns the monitored resource descriptors used by the API. "
                  },
                  "description": "Defines the monitored resources used by this service. This is required by the Service.monitoring and Service.logging configurations."
                }
              },
              "description": "The service configuration of the available service. Some fields may be filtered out of the configuration in responses to the `ListServices` method. These fields are present only in responses to the `GetService` method."
            },
            "parent": {
              "type": "string",
              "description": "The resource name of the consumer. A valid name would be: - projects/123"
            }
          },
          "description": "A service that is available for use by the consumer."
        }
      ]
  services.list:
    description: |-
      List all services available to the specified project, and the current state of those services with respect to the project. The list includes all public services, all services for which the calling user has the `servicemanagement.services.bind` permission, and all services that have already been enabled on the project. The list can be filtered to only include services in a specific state, for example to only include services enabled on the project. WARNING: If you need to query enabled services frequently or across an organization, you should use [Cloud Asset Inventory API](https://cloud.google.com/asset-inventory/docs/apis), which provides higher throughput and richer filtering capability.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/service-usage/docs/reference/rest/v1/services/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "ListServicesResponse",
          "type": "object",
          "properties": {
            "services": {
              "type": "array",
              "items": {
                "id": "GoogleApiServiceusageV1Service",
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The resource name of the consumer and service. A valid name would be: - projects/123/services/serviceusage.googleapis.com"
                  },
                  "state": {
                    "enum": [
                      "STATE_UNSPECIFIED",
                      "DISABLED",
                      "ENABLED"
                    ],
                    "type": "string",
                    "description": "Whether or not the service has been enabled for use by the consumer.",
                    "enumDescriptions": [
                      "The default value, which indicates that the enabled state of the service is unspecified or not meaningful. Currently, all consumers other than projects (such as folders and organizations) are always in this state.",
                      "The service cannot be used by this consumer. It has either been explicitly disabled, or has never been enabled.",
                      "The service has been explicitly enabled for use by this consumer."
                    ]
                  },
                  "config": {
                    "id": "GoogleApiServiceusageV1ServiceConfig",
                    "type": "object",
                    "properties": {
                      "apis": {
                        "type": "array",
                        "items": {
                          "id": "Api",
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "The fully qualified name of this interface, including package name followed by the interface's simple name."
                            },
                            "mixins": {
                              "type": "array",
                              "items": {
                                "id": "Mixin",
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "description": "The fully qualified name of the interface which is included."
                                  },
                                  "root": {
                                    "type": "string",
                                    "description": "If non-empty specifies a path under which inherited HTTP paths are rooted."
                                  }
                                },
                                "description": "Declares an API Interface to be included in this interface. The including interface must redeclare all the methods from the included interface, but documentation and options are inherited as follows: - If after comment and whitespace stripping, the documentation string of the redeclared method is empty, it will be inherited from the original method. - Each annotation belonging to the service config (http, visibility) which is not set in the redeclared method will be inherited. - If an http annotation is inherited, the path pattern will be modified as follows. Any version prefix will be replaced by the version of the including interface plus the root path if specified. Example of a simple mixin: package google.acl.v1; service AccessControl { // Get the underlying ACL object. rpc GetAcl(GetAclRequest) returns (Acl) { option (google.api.http).get = \"/v1/{resource=**}:getAcl\"; } } package google.storage.v2; service Storage { // rpc GetAcl(GetAclRequest) returns (Acl); // Get a data record. rpc GetData(GetDataRequest) returns (Data) { option (google.api.http).get = \"/v2/{resource=**}\"; } } Example of a mixin configuration: apis: - name: google.storage.v2.Storage mixins: - name: google.acl.v1.AccessControl The mixin construct implies that all methods in `AccessControl` are also declared with same name and request/response types in `Storage`. A documentation generator or annotation processor will see the effective `Storage.GetAcl` method after inheriting documentation and annotations as follows: service Storage { // Get the underlying ACL object. rpc GetAcl(GetAclRequest) returns (Acl) { option (google.api.http).get = \"/v2/{resource=**}:getAcl\"; } ... } Note how the version in the path pattern changed from `v1` to `v2`. If the `root` field in the mixin is specified, it should be a relative path under which inherited HTTP paths are placed. Example: apis: - name: google.storage.v2.Storage mixins: - name: google.acl.v1.AccessControl root: acls This implies the following inherited HTTP annotation: service Storage { // Get the underlying ACL object. rpc GetAcl(GetAclRequest) returns (Acl) { option (google.api.http).get = \"/v2/acls/{resource=**}:getAcl\"; } ... }"
                              },
                              "description": "Included interfaces. See Mixin."
                            },
                            "syntax": {
                              "enum": [
                                "SYNTAX_PROTO2",
                                "SYNTAX_PROTO3"
                              ],
                              "type": "string",
                              "description": "The source syntax of the service.",
                              "enumDescriptions": [
                                "Syntax `proto2`.",
                                "Syntax `proto3`."
                              ]
                            },
                            "methods": {
                              "type": "array",
                              "items": {
                                "id": "Method",
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "description": "The simple name of this method."
                                  },
                                  "syntax": {
                                    "enum": [
                                      "SYNTAX_PROTO2",
                                      "SYNTAX_PROTO3"
                                    ],
                                    "type": "string",
                                    "description": "The source syntax of this method.",
                                    "enumDescriptions": [
                                      "Syntax `proto2`.",
                                      "Syntax `proto3`."
                                    ]
                                  },
                                  "options": {
                                    "type": "array",
                                    "items": {
                                      "id": "Option",
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "description": "The option's name. For protobuf built-in options (options defined in descriptor.proto), this is the short name. For example, `\"map_entry\"`. For custom options, it should be the fully-qualified name. For example, `\"google.api.http\"`."
                                        },
                                        "value": {
                                          "type": "object",
                                          "description": "The option's value packed in an Any message. If the value is a primitive, the corresponding wrapper type defined in google/protobuf/wrappers.proto should be used. If the value is an enum, it should be stored as an int32 value using the google.protobuf.Int32Value type.",
                                          "additionalProperties": {
                                            "type": "any",
                                            "description": "Properties of the object. Contains field @type with type URL."
                                          }
                                        }
                                      },
                                      "description": "A protocol buffer option, which can be attached to a message, field, enumeration, etc."
                                    },
                                    "description": "Any metadata attached to the method."
                                  },
                                  "requestTypeUrl": {
                                    "type": "string",
                                    "description": "A URL of the input message type."
                                  },
                                  "responseTypeUrl": {
                                    "type": "string",
                                    "description": "The URL of the output message type."
                                  },
                                  "requestStreaming": {
                                    "type": "boolean",
                                    "description": "If true, the request is streamed."
                                  },
                                  "responseStreaming": {
                                    "type": "boolean",
                                    "description": "If true, the response is streamed."
                                  }
                                },
                                "description": "Method represents a method of an API interface."
                              },
                              "description": "The methods of this interface, in unspecified order."
                            },
                            "options": {
                              "type": "array",
                              "items": {
                                "id": "Option",
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "description": "The option's name. For protobuf built-in options (options defined in descriptor.proto), this is the short name. For example, `\"map_entry\"`. For custom options, it should be the fully-qualified name. For example, `\"google.api.http\"`."
                                  },
                                  "value": {
                                    "type": "object",
                                    "description": "The option's value packed in an Any message. If the value is a primitive, the corresponding wrapper type defined in google/protobuf/wrappers.proto should be used. If the value is an enum, it should be stored as an int32 value using the google.protobuf.Int32Value type.",
                                    "additionalProperties": {
                                      "type": "any",
                                      "description": "Properties of the object. Contains field @type with type URL."
                                    }
                                  }
                                },
                                "description": "A protocol buffer option, which can be attached to a message, field, enumeration, etc."
                              },
                              "description": "Any metadata attached to the interface."
                            },
                            "version": {
                              "type": "string",
                              "description": "A version string for this interface. If specified, must have the form `major-version.minor-version`, as in `1.10`. If the minor version is omitted, it defaults to zero. If the entire version field is empty, the major version is derived from the package name, as outlined below. If the field is not empty, the version in the package name will be verified to be consistent with what is provided here. The versioning schema uses [semantic versioning](http://semver.org) where the major version number indicates a breaking change and the minor version an additive, non-breaking change. Both version numbers are signals to users what to expect from different versions, and should be carefully chosen based on the product plan. The major version is also reflected in the package name of the interface, which must end in `v`, as in `google.feature.v1`. For major versions 0 and 1, the suffix can be omitted. Zero major versions must only be used for experimental, non-GA interfaces. "
                            },
                            "sourceContext": {
                              "id": "SourceContext",
                              "type": "object",
                              "properties": {
                                "fileName": {
                                  "type": "string",
                                  "description": "The path-qualified name of the .proto file that contained the associated protobuf element. For example: `\"google/protobuf/source_context.proto\"`."
                                }
                              },
                              "description": "Source context for the protocol buffer service represented by this message."
                            }
                          },
                          "description": "Api is a light-weight descriptor for an API Interface. Interfaces are also described as \"protocol buffer services\" in some contexts, such as by the \"service\" keyword in a .proto file, but they are different from API Services, which represent a concrete implementation of an interface as opposed to simply a description of methods and bindings. They are also sometimes simply referred to as \"APIs\" in other contexts, such as the name of this message itself. See https://cloud.google.com/apis/design/glossary for detailed terminology."
                        },
                        "description": "A list of API interfaces exported by this service. Contains only the names, versions, and method names of the interfaces."
                      },
                      "name": {
                        "type": "string",
                        "description": "The DNS address at which this service is available. An example DNS address would be: `calendar.googleapis.com`."
                      },
                      "quota": {
                        "id": "Quota",
                        "type": "object",
                        "properties": {
                          "limits": {
                            "type": "array",
                            "items": {
                              "id": "QuotaLimit",
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "Name of the quota limit. The name must be provided, and it must be unique within the service. The name can only include alphanumeric characters as well as '-'. The maximum length of the limit name is 64 characters."
                                },
                                "unit": {
                                  "type": "string",
                                  "description": "Specify the unit of the quota limit. It uses the same syntax as Metric.unit. The supported unit kinds are determined by the quota backend system. Here are some examples: * \"1/min/{project}\" for quota per minute per project. Note: the order of unit components is insignificant. The \"1\" at the beginning is required to follow the metric unit syntax."
                                },
                                "metric": {
                                  "type": "string",
                                  "description": "The name of the metric this quota limit applies to. The quota limits with the same metric will be checked together during runtime. The metric must be defined within the service config."
                                },
                                "values": {
                                  "type": "object",
                                  "description": "Tiered limit values. You must specify this as a key:value pair, with an integer value that is the maximum number of requests allowed for the specified unit. Currently only STANDARD is supported.",
                                  "additionalProperties": {
                                    "type": "string",
                                    "format": "int64"
                                  }
                                },
                                "duration": {
                                  "type": "string",
                                  "description": "Duration of this limit in textual notation. Must be \"100s\" or \"1d\". Used by group-based quotas only."
                                },
                                "freeTier": {
                                  "type": "string",
                                  "format": "int64",
                                  "description": "Free tier value displayed in the Developers Console for this limit. The free tier is the number of tokens that will be subtracted from the billed amount when billing is enabled. This field can only be set on a limit with duration \"1d\", in a billable group; it is invalid on any other limit. If this field is not set, it defaults to 0, indicating that there is no free tier for this service. Used by group-based quotas only."
                                },
                                "maxLimit": {
                                  "type": "string",
                                  "format": "int64",
                                  "description": "Maximum number of tokens that can be consumed during the specified duration. Client application developers can override the default limit up to this maximum. If specified, this value cannot be set to a value less than the default limit. If not specified, it is set to the default limit. To allow clients to apply overrides with no upper bound, set this to -1, indicating unlimited maximum quota. Used by group-based quotas only."
                                },
                                "description": {
                                  "type": "string",
                                  "description": "Optional. User-visible, extended description for this quota limit. Should be used only when more context is needed to understand this limit than provided by the limit's display name (see: `display_name`)."
                                },
                                "displayName": {
                                  "type": "string",
                                  "description": "User-visible display name for this limit. Optional. If not set, the UI will provide a default display name based on the quota configuration. This field can be used to override the default display name generated from the configuration."
                                },
                                "defaultLimit": {
                                  "type": "string",
                                  "format": "int64",
                                  "description": "Default number of tokens that can be consumed during the specified duration. This is the number of tokens assigned when a client application developer activates the service for his/her project. Specifying a value of 0 will block all requests. This can be used if you are provisioning quota to selected consumers and blocking others. Similarly, a value of -1 will indicate an unlimited quota. No other negative values are allowed. Used by group-based quotas only."
                                }
                              },
                              "description": "`QuotaLimit` defines a specific limit that applies over a specified duration for a limit type. There can be at most one limit for a duration and limit type combination defined within a `QuotaGroup`."
                            },
                            "description": "List of `QuotaLimit` definitions for the service."
                          },
                          "metricRules": {
                            "type": "array",
                            "items": {
                              "id": "MetricRule",
                              "type": "object",
                              "properties": {
                                "selector": {
                                  "type": "string",
                                  "description": "Selects the methods to which this rule applies. Refer to selector for syntax details."
                                },
                                "metricCosts": {
                                  "type": "object",
                                  "description": "Metrics to update when the selected methods are called, and the associated cost applied to each metric. The key of the map is the metric name, and the values are the amount increased for the metric against which the quota limits are defined. The value must not be negative.",
                                  "additionalProperties": {
                                    "type": "string",
                                    "format": "int64"
                                  }
                                }
                              },
                              "description": "Bind API methods to metrics. Binding a method to a metric causes that metric's configured quota behaviors to apply to the method call."
                            },
                            "description": "List of `MetricRule` definitions, each one mapping a selected method to one or more metrics."
                          }
                        },
                        "description": "Quota configuration."
                      },
                      "title": {
                        "type": "string",
                        "description": "The product title for this service."
                      },
                      "usage": {
                        "id": "Usage",
                        "type": "object",
                        "properties": {
                          "rules": {
                            "type": "array",
                            "items": {
                              "id": "UsageRule",
                              "type": "object",
                              "properties": {
                                "selector": {
                                  "type": "string",
                                  "description": "Selects the methods to which this rule applies. Use '*' to indicate all methods in all APIs. Refer to selector for syntax details."
                                },
                                "skipServiceControl": {
                                  "type": "boolean",
                                  "description": "If true, the selected method should skip service control and the control plane features, such as quota and billing, will not be available. This flag is used by Google Cloud Endpoints to bypass checks for internal methods, such as service health check methods."
                                },
                                "allowUnregisteredCalls": {
                                  "type": "boolean",
                                  "description": "If true, the selected method allows unregistered calls, e.g. calls that don't identify any user or application."
                                }
                              },
                              "description": "Usage configuration rules for the service. NOTE: Under development. Use this rule to configure unregistered calls for the service. Unregistered calls are calls that do not contain consumer project identity. (Example: calls that do not contain an API key). By default, API methods do not allow unregistered calls, and each method call must be identified by a consumer project identity. Use this rule to allow/disallow unregistered calls. Example of an API that wants to allow unregistered calls for entire service. usage: rules: - selector: \"*\" allow_unregistered_calls: true Example of a method that wants to allow unregistered calls. usage: rules: - selector: \"google.example.library.v1.LibraryService.CreateBook\" allow_unregistered_calls: true"
                            },
                            "description": "A list of usage rules that apply to individual API methods. **NOTE:** All service configuration rules follow \"last one wins\" order."
                          },
                          "requirements": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "Requirements that must be satisfied before a consumer project can use the service. Each requirement is of the form /; for example 'serviceusage.googleapis.com/billing-enabled'. For Google APIs, a Terms of Service requirement must be included here. Google Cloud APIs must include \"serviceusage.googleapis.com/tos/cloud\". Other Google APIs should include \"serviceusage.googleapis.com/tos/universal\". Additional ToS can be included based on the business needs."
                          },
                          "producerNotificationChannel": {
                            "type": "string",
                            "description": "The full resource name of a channel used for sending notifications to the service producer. Google Service Management currently only supports [Google Cloud Pub/Sub](https://cloud.google.com/pubsub) as a notification channel. To use Google Cloud Pub/Sub as the channel, this must be the name of a Cloud Pub/Sub topic that uses the Cloud Pub/Sub topic name format documented in https://cloud.google.com/pubsub/docs/overview."
                          }
                        },
                        "description": "Configuration controlling usage of this service."
                      },
                      "endpoints": {
                        "type": "array",
                        "items": {
                          "id": "Endpoint",
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "The canonical name of this endpoint."
                            },
                            "target": {
                              "type": "string",
                              "description": "The specification of an Internet routable address of API frontend that will handle requests to this [API Endpoint](https://cloud.google.com/apis/design/glossary). It should be either a valid IPv4 address or a fully-qualified domain name. For example, \"8.8.8.8\" or \"myservice.appspot.com\"."
                            },
                            "allowCors": {
                              "type": "boolean",
                              "description": "Allowing [CORS](https://en.wikipedia.org/wiki/Cross-origin_resource_sharing), aka cross-domain traffic, would allow the backends served from this endpoint to receive and respond to HTTP OPTIONS requests. The response will be used by the browser to determine whether the subsequent cross-origin request is allowed to proceed."
                            }
                          },
                          "description": "`Endpoint` describes a network endpoint of a service that serves a set of APIs. It is commonly known as a service endpoint. A service may expose any number of service endpoints, and all service endpoints share the same service definition, such as quota limits and monitoring metrics. Example service configuration: name: library-example.googleapis.com endpoints: # Below entry makes 'google.example.library.v1.Library' # API be served from endpoint address library-example.googleapis.com. # It also allows HTTP OPTIONS calls to be passed to the backend, for # it to decide whether the subsequent cross-origin request is # allowed to proceed. - name: library-example.googleapis.com allow_cors: true"
                        },
                        "description": "Configuration for network endpoints. Contains only the names and aliases of the endpoints."
                      },
                      "monitoring": {
                        "id": "Monitoring",
                        "type": "object",
                        "properties": {
                          "consumerDestinations": {
                            "type": "array",
                            "items": {
                              "id": "MonitoringDestination",
                              "type": "object",
                              "properties": {
                                "metrics": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "description": "Types of the metrics to report to this monitoring destination. Each type must be defined in Service.metrics section."
                                },
                                "monitoredResource": {
                                  "type": "string",
                                  "description": "The monitored resource type. The type must be defined in Service.monitored_resources section."
                                }
                              },
                              "description": "Configuration of a specific monitoring destination (the producer project or the consumer project)."
                            },
                            "description": "Monitoring configurations for sending metrics to the consumer project. There can be multiple consumer destinations. A monitored resource type may appear in multiple monitoring destinations if different aggregations are needed for different sets of metrics associated with that monitored resource type. A monitored resource and metric pair may only be used once in the Monitoring configuration."
                          },
                          "producerDestinations": {
                            "type": "array",
                            "items": {
                              "id": "MonitoringDestination",
                              "type": "object",
                              "properties": {
                                "metrics": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "description": "Types of the metrics to report to this monitoring destination. Each type must be defined in Service.metrics section."
                                },
                                "monitoredResource": {
                                  "type": "string",
                                  "description": "The monitored resource type. The type must be defined in Service.monitored_resources section."
                                }
                              },
                              "description": "Configuration of a specific monitoring destination (the producer project or the consumer project)."
                            },
                            "description": "Monitoring configurations for sending metrics to the producer project. There can be multiple producer destinations. A monitored resource type may appear in multiple monitoring destinations if different aggregations are needed for different sets of metrics associated with that monitored resource type. A monitored resource and metric pair may only be used once in the Monitoring configuration."
                          }
                        },
                        "description": "Monitoring configuration. This should not include the 'producer_destinations' field."
                      },
                      "documentation": {
                        "id": "Documentation",
                        "type": "object",
                        "properties": {
                          "pages": {
                            "type": "array",
                            "items": {
                              "id": "Page",
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "The name of the page. It will be used as an identity of the page to generate URI of the page, text of the link to this page in navigation, etc. The full page name (start from the root page name to this page concatenated with `.`) can be used as reference to the page in your documentation. For example: pages: - name: Tutorial content: (== include tutorial.md ==) subpages: - name: Java content: (== include tutorial_java.md ==) You can reference `Java` page using Markdown reference link syntax: `Java`."
                                },
                                "content": {
                                  "type": "string",
                                  "description": "The Markdown content of the page. You can use (== include {path} ==) to include content from a Markdown file."
                                },
                                "subpages": {
                                  "type": "array",
                                  "items": {},
                                  "description": "Subpages of this page. The order of subpages specified here will be honored in the generated docset."
                                }
                              },
                              "description": "Represents a documentation page. A page can contain subpages to represent nested documentation set structure."
                            },
                            "description": "The top level pages for the documentation set."
                          },
                          "rules": {
                            "type": "array",
                            "items": {
                              "id": "DocumentationRule",
                              "type": "object",
                              "properties": {
                                "selector": {
                                  "type": "string",
                                  "description": "The selector is a comma-separated list of patterns. Each pattern is a qualified name of the element which may end in \"*\", indicating a wildcard. Wildcards are only allowed at the end and for a whole component of the qualified name, i.e. \"foo.*\" is ok, but not \"foo.b*\" or \"foo.*.bar\". A wildcard will match one or more components. To specify a default for all applicable elements, the whole pattern \"*\" is used."
                                },
                                "description": {
                                  "type": "string",
                                  "description": "Description of the selected API(s)."
                                },
                                "deprecationDescription": {
                                  "type": "string",
                                  "description": "Deprecation description of the selected element(s). It can be provided if an element is marked as `deprecated`."
                                }
                              },
                              "description": "A documentation rule provides information about individual API elements."
                            },
                            "description": "A list of documentation rules that apply to individual API elements. **NOTE:** All service configuration rules follow \"last one wins\" order."
                          },
                          "summary": {
                            "type": "string",
                            "description": "A short summary of what the service does. Can only be provided by plain text."
                          },
                          "overview": {
                            "type": "string",
                            "description": "Declares a single overview page. For example: documentation: summary: ... overview: (== include overview.md ==) This is a shortcut for the following declaration (using pages style): documentation: summary: ... pages: - name: Overview content: (== include overview.md ==) Note: you cannot specify both `overview` field and `pages` field."
                          },
                          "serviceRootUrl": {
                            "type": "string",
                            "description": "Specifies the service root url if the default one (the service name from the yaml file) is not suitable. This can be seen in any fully specified service urls as well as sections that show a base that other urls are relative to."
                          },
                          "documentationRootUrl": {
                            "type": "string",
                            "description": "The URL to the root of documentation."
                          }
                        },
                        "description": "Additional API documentation. Contains only the summary and the documentation URL."
                      },
                      "authentication": {
                        "id": "Authentication",
                        "type": "object",
                        "properties": {
                          "rules": {
                            "type": "array",
                            "items": {
                              "id": "AuthenticationRule",
                              "type": "object",
                              "properties": {
                                "oauth": {
                                  "id": "OAuthRequirements",
                                  "type": "object",
                                  "properties": {
                                    "canonicalScopes": {
                                      "type": "string",
                                      "description": "The list of publicly documented OAuth scopes that are allowed access. An OAuth token containing any of these scopes will be accepted. Example: canonical_scopes: https://www.googleapis.com/auth/calendar, https://www.googleapis.com/auth/calendar.read"
                                    }
                                  },
                                  "description": "The requirements for OAuth credentials."
                                },
                                "selector": {
                                  "type": "string",
                                  "description": "Selects the methods to which this rule applies. Refer to selector for syntax details."
                                },
                                "requirements": {
                                  "type": "array",
                                  "items": {
                                    "id": "AuthRequirement",
                                    "type": "object",
                                    "properties": {
                                      "audiences": {
                                        "type": "string",
                                        "description": "NOTE: This will be deprecated soon, once AuthProvider.audiences is implemented and accepted in all the runtime components. The list of JWT [audiences](https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32#section-4.1.3). that are allowed to access. A JWT containing any of these audiences will be accepted. When this setting is absent, only JWTs with audience \"https://Service_name/API_name\" will be accepted. For example, if no audiences are in the setting, LibraryService API will only accept JWTs with the following audience \"https://library-example.googleapis.com/google.example.library.v1.LibraryService\". Example: audiences: bookstore_android.apps.googleusercontent.com, bookstore_web.apps.googleusercontent.com"
                                      },
                                      "providerId": {
                                        "type": "string",
                                        "description": "id from authentication provider. Example: provider_id: bookstore_auth"
                                      }
                                    },
                                    "description": "User-defined authentication requirements, including support for [JSON Web Token (JWT)](https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32)."
                                  },
                                  "description": "Requirements for additional authentication providers."
                                },
                                "allowWithoutCredential": {
                                  "type": "boolean",
                                  "description": "If true, the service accepts API keys without any other credential. This flag only applies to HTTP and gRPC requests."
                                }
                              },
                              "description": "Authentication rules for the service. By default, if a method has any authentication requirements, every request must include a valid credential matching one of the requirements. It's an error to include more than one kind of credential in a single request. If a method doesn't have any auth requirements, request credentials will be ignored."
                            },
                            "description": "A list of authentication rules that apply to individual API methods. **NOTE:** All service configuration rules follow \"last one wins\" order."
                          },
                          "providers": {
                            "type": "array",
                            "items": {
                              "id": "AuthProvider",
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "description": "The unique identifier of the auth provider. It will be referred to by `AuthRequirement.provider_id`. Example: \"bookstore_auth\"."
                                },
                                "issuer": {
                                  "type": "string",
                                  "description": "Identifies the principal that issued the JWT. See https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32#section-4.1.1 Usually a URL or an email address. Example: https://securetoken.google.com Example: 1234567-compute@developer.gserviceaccount.com"
                                },
                                "jwksUri": {
                                  "type": "string",
                                  "description": "URL of the provider's public key set to validate signature of the JWT. See [OpenID Discovery](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata). Optional if the key set document: - can be retrieved from [OpenID Discovery](https://openid.net/specs/openid-connect-discovery-1_0.html) of the issuer. - can be inferred from the email domain of the issuer (e.g. a Google service account). Example: https://www.googleapis.com/oauth2/v1/certs"
                                },
                                "audiences": {
                                  "type": "string",
                                  "description": "The list of JWT [audiences](https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32#section-4.1.3). that are allowed to access. A JWT containing any of these audiences will be accepted. When this setting is absent, JWTs with audiences: - \"https://[service.name]/[google.protobuf.Api.name]\" - \"https://[service.name]/\" will be accepted. For example, if no audiences are in the setting, LibraryService API will accept JWTs with the following audiences: - https://library-example.googleapis.com/google.example.library.v1.LibraryService - https://library-example.googleapis.com/ Example: audiences: bookstore_android.apps.googleusercontent.com, bookstore_web.apps.googleusercontent.com"
                                },
                                "jwtLocations": {
                                  "type": "array",
                                  "items": {
                                    "id": "JwtLocation",
                                    "type": "object",
                                    "properties": {
                                      "query": {
                                        "type": "string",
                                        "description": "Specifies URL query parameter name to extract JWT token."
                                      },
                                      "header": {
                                        "type": "string",
                                        "description": "Specifies HTTP header name to extract JWT token."
                                      },
                                      "valuePrefix": {
                                        "type": "string",
                                        "description": "The value prefix. The value format is \"value_prefix{token}\" Only applies to \"in\" header type. Must be empty for \"in\" query type. If not empty, the header value has to match (case sensitive) this prefix. If not matched, JWT will not be extracted. If matched, JWT will be extracted after the prefix is removed. For example, for \"Authorization: Bearer {JWT}\", value_prefix=\"Bearer \" with a space at the end."
                                      }
                                    },
                                    "description": "Specifies a location to extract JWT from an API request."
                                  },
                                  "description": "Defines the locations to extract the JWT. JWT locations can be either from HTTP headers or URL query parameters. The rule is that the first match wins. The checking order is: checking all headers first, then URL query parameters. If not specified, default to use following 3 locations: 1) Authorization: Bearer 2) x-goog-iap-jwt-assertion 3) access_token query parameter Default locations can be specified as followings: jwt_locations: - header: Authorization value_prefix: \"Bearer \" - header: x-goog-iap-jwt-assertion - query: access_token"
                                },
                                "authorizationUrl": {
                                  "type": "string",
                                  "description": "Redirect URL if JWT token is required but not present or is expired. Implement authorizationUrl of securityDefinitions in OpenAPI spec."
                                }
                              },
                              "description": "Configuration for an authentication provider, including support for [JSON Web Token (JWT)](https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32)."
                            },
                            "description": "Defines a set of authentication providers that a service supports."
                          }
                        },
                        "description": "Auth configuration. Contains only the OAuth rules."
                      },
                      "monitoredResources": {
                        "type": "array",
                        "items": {
                          "id": "MonitoredResourceDescriptor",
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "Optional. The resource name of the monitored resource descriptor: `\"projects/{project_id}/monitoredResourceDescriptors/{type}\"` where {type} is the value of the `type` field in this object and {project_id} is a project ID that provides API-specific context for accessing the type. APIs that do not use project information can use the resource name format `\"monitoredResourceDescriptors/{type}\"`."
                            },
                            "type": {
                              "type": "string",
                              "description": "Required. The monitored resource type. For example, the type `\"cloudsql_database\"` represents databases in Google Cloud SQL."
                            },
                            "labels": {
                              "type": "array",
                              "items": {
                                "id": "LabelDescriptor",
                                "type": "object",
                                "properties": {
                                  "key": {
                                    "type": "string",
                                    "description": "The label key."
                                  },
                                  "valueType": {
                                    "enum": [
                                      "STRING",
                                      "BOOL",
                                      "INT64"
                                    ],
                                    "type": "string",
                                    "description": "The type of data that can be assigned to the label.",
                                    "enumDescriptions": [
                                      "A variable-length string. This is the default.",
                                      "Boolean; true or false.",
                                      "A 64-bit signed integer."
                                    ]
                                  },
                                  "description": {
                                    "type": "string",
                                    "description": "A human-readable description for the label."
                                  }
                                },
                                "description": "A description of a label."
                              },
                              "description": "Required. A set of labels used to describe instances of this monitored resource type. For example, an individual Google Cloud SQL database is identified by values for the labels `\"database_id\"` and `\"zone\"`."
                            },
                            "description": {
                              "type": "string",
                              "description": "Optional. A detailed description of the monitored resource type that might be used in documentation."
                            },
                            "displayName": {
                              "type": "string",
                              "description": "Optional. A concise name for the monitored resource type that might be displayed in user interfaces. It should be a Title Cased Noun Phrase, without any article or other determiners. For example, `\"Google Cloud SQL Database\"`."
                            },
                            "launchStage": {
                              "enum": [
                                "LAUNCH_STAGE_UNSPECIFIED",
                                "UNIMPLEMENTED",
                                "PRELAUNCH",
                                "EARLY_ACCESS",
                                "ALPHA",
                                "BETA",
                                "GA",
                                "DEPRECATED"
                              ],
                              "type": "string",
                              "description": "Optional. The launch stage of the monitored resource definition.",
                              "enumDescriptions": [
                                "Do not use this default value.",
                                "The feature is not yet implemented. Users can not use it.",
                                "Prelaunch features are hidden from users and are only visible internally.",
                                "Early Access features are limited to a closed group of testers. To use these features, you must sign up in advance and sign a Trusted Tester agreement (which includes confidentiality provisions). These features may be unstable, changed in backward-incompatible ways, and are not guaranteed to be released.",
                                "Alpha is a limited availability test for releases before they are cleared for widespread use. By Alpha, all significant design issues are resolved and we are in the process of verifying functionality. Alpha customers need to apply for access, agree to applicable terms, and have their projects allowlisted. Alpha releases don’t have to be feature complete, no SLAs are provided, and there are no technical support obligations, but they will be far enough along that customers can actually use them in test environments or for limited-use tests -- just like they would in normal production cases.",
                                "Beta is the point at which we are ready to open a release for any customer to use. There are no SLA or technical support obligations in a Beta release. Products will be complete from a feature perspective, but may have some open outstanding issues. Beta releases are suitable for limited production use cases.",
                                "GA features are open to all developers and are considered stable and fully qualified for production use.",
                                "Deprecated features are scheduled to be shut down and removed. For more information, see the “Deprecation Policy” section of our [Terms of Service](https://cloud.google.com/terms/) and the [Google Cloud Platform Subject to the Deprecation Policy](https://cloud.google.com/terms/deprecation) documentation."
                              ]
                            }
                          },
                          "description": "An object that describes the schema of a MonitoredResource object using a type name and a set of labels. For example, the monitored resource descriptor for Google Compute Engine VM instances has a type of `\"gce_instance\"` and specifies the use of the labels `\"instance_id\"` and `\"zone\"` to identify particular VM instances. Different APIs can support different monitored resource types. APIs generally provide a `list` method that returns the monitored resource descriptors used by the API. "
                        },
                        "description": "Defines the monitored resources used by this service. This is required by the Service.monitoring and Service.logging configurations."
                      }
                    },
                    "description": "The service configuration of the available service. Some fields may be filtered out of the configuration in responses to the `ListServices` method. These fields are present only in responses to the `GetService` method."
                  },
                  "parent": {
                    "type": "string",
                    "description": "The resource name of the consumer. A valid name would be: - projects/123"
                  }
                },
                "description": "A service that is available for use by the consumer."
              },
              "description": "The available services for the requested project."
            },
            "nextPageToken": {
              "type": "string",
              "description": "Token that can be passed to `ListServices` to resume a paginated query."
            }
          },
          "description": "Response message for the `ListServices` method."
        }
      ]