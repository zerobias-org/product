Product:
  name: GCP Data Catalog
  versions: [1.0.0]
  package: google.gcp.datacatalog
  description: |-
    Data Catalog
  link: https://cloud.google.com/data-catalog
  contentType: json
Operations:
  catalog.search:
    description: |-
      Searches Data Catalog for multiple resources like entries, tags that match a query. This is a custom method (https://cloud.google.com/apis/design/custom_methods) and does not return the complete resource, only the resource identifier and high level fields. Clients can subsequently call `Get` methods. Note that Data Catalog search queries do not guarantee full recall. Query results that match your query may not be returned, even in subsequent result pages. Also note that results returned (and not returned) can vary across repeated search queries. See [Data Catalog Search Syntax](https://cloud.google.com/data-catalog/docs/how-to/search-reference) for more information.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/catalog/search
    example:
      inputs: [
        {
          "id": "GoogleCloudDatacatalogV1beta1SearchCatalogRequest",
          "type": "object",
          "properties": {
            "query": {
              "type": "string",
              "description": "Optional. The query string in search query syntax. An empty query string will result in all data assets (in the specified scope) that the user has access to. Query strings can be simple as \"x\" or more qualified as: * name:x * column:x * description:y Note: Query tokens need to have a minimum of 3 characters for substring matching to work correctly. See [Data Catalog Search Syntax](https://cloud.google.com/data-catalog/docs/how-to/search-reference) for more information."
            },
            "scope": {
              "id": "GoogleCloudDatacatalogV1beta1SearchCatalogRequestScope",
              "type": "object",
              "properties": {
                "includeOrgIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "The list of organization IDs to search within. To find your organization ID, follow instructions in https://cloud.google.com/resource-manager/docs/creating-managing-organization."
                },
                "includeProjectIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "The list of project IDs to search within. To learn more about the distinction between project names/IDs/numbers, go to https://cloud.google.com/docs/overview/#projects."
                },
                "restrictedLocations": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Optional. The list of locations to search within. 1. If empty, search will be performed in all locations; 2. If any of the locations are NOT in the valid locations list, error will be returned; 3. Otherwise, search only the given locations for matching results. Typical usage is to leave this field empty. When a location is unreachable as returned in the `SearchCatalogResponse.unreachable` field, users can repeat the search request with this parameter set to get additional information on the error. Valid locations: * asia-east1 * asia-east2 * asia-northeast1 * asia-northeast2 * asia-northeast3 * asia-south1 * asia-southeast1 * australia-southeast1 * eu * europe-north1 * europe-west1 * europe-west2 * europe-west3 * europe-west4 * europe-west6 * global * northamerica-northeast1 * southamerica-east1 * us * us-central1 * us-east1 * us-east4 * us-west1 * us-west2"
                },
                "includeGcpPublicDatasets": {
                  "type": "boolean",
                  "description": "If `true`, include Google Cloud Platform (GCP) public datasets in the search results. Info on GCP public datasets is available at https://cloud.google.com/public-datasets/. By default, GCP public datasets are excluded."
                }
              },
              "description": "Required. The scope of this search request. A `scope` that has empty `include_org_ids`, `include_project_ids` AND false `include_gcp_public_datasets` is considered invalid. Data Catalog will return an error in such a case."
            },
            "orderBy": {
              "type": "string",
              "description": "Specifies the ordering of results, currently supported case-sensitive choices are: * `relevance`, only supports descending * `last_modified_timestamp [asc|desc]`, defaults to descending if not specified If not specified, defaults to `relevance` descending."
            },
            "pageSize": {
              "type": "integer",
              "format": "int32",
              "description": "Number of results in the search page. If <=0 then defaults to 10. Max limit for page_size is 1000. Throws an invalid argument for page_size > 1000."
            },
            "pageToken": {
              "type": "string",
              "description": "Optional. Pagination token returned in an earlier SearchCatalogResponse.next_page_token, which indicates that this is a continuation of a prior SearchCatalogRequest call, and that the system should return the next page of data. If empty, the first page is returned."
            }
          },
          "description": "Request message for SearchCatalog."
        }
      ]
      outputs: [
        {
          "id": "GoogleCloudDatacatalogV1beta1SearchCatalogResponse",
          "type": "object",
          "properties": {
            "results": {
              "type": "array",
              "items": {
                "id": "GoogleCloudDatacatalogV1beta1SearchCatalogResult",
                "type": "object",
                "properties": {
                  "modifyTime": {
                    "type": "string",
                    "format": "google-datetime",
                    "description": "Last-modified timestamp of the entry from the managing system."
                  },
                  "linkedResource": {
                    "type": "string",
                    "description": "The full name of the cloud resource the entry belongs to. See: https://cloud.google.com/apis/design/resource_names#full_resource_name. Example: * `//bigquery.googleapis.com/projects/projectId/datasets/datasetId/tables/tableId`"
                  },
                  "searchResultType": {
                    "enum": [
                      "SEARCH_RESULT_TYPE_UNSPECIFIED",
                      "ENTRY",
                      "TAG_TEMPLATE",
                      "ENTRY_GROUP"
                    ],
                    "type": "string",
                    "description": "Type of the search result. This field can be used to determine which Get method to call to fetch the full resource.",
                    "enumDescriptions": [
                      "Default unknown type.",
                      "An Entry.",
                      "A TagTemplate.",
                      "An EntryGroup."
                    ]
                  },
                  "searchResultSubtype": {
                    "type": "string",
                    "description": "Sub-type of the search result. This is a dot-delimited description of the resource's full type, and is the same as the value callers would provide in the \"type\" search facet. Examples: `entry.table`, `entry.dataStream`, `tagTemplate`."
                  },
                  "relativeResourceName": {
                    "type": "string",
                    "description": "The relative resource name of the resource in URL format. Examples: * `projects/{project_id}/locations/{location_id}/entryGroups/{entry_group_id}/entries/{entry_id}` * `projects/{project_id}/tagTemplates/{tag_template_id}`"
                  }
                },
                "description": "A result that appears in the response of a search request. Each result captures details of one entry that matches the search."
              },
              "description": "Search results."
            },
            "unreachable": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Unreachable locations. Search result does not include data from those locations. Users can get additional information on the error by repeating the search request with a more restrictive parameter -- setting the value for `SearchDataCatalogRequest.scope.restricted_locations`."
            },
            "nextPageToken": {
              "type": "string",
              "description": "The token that can be used to retrieve the next page of results."
            }
          },
          "description": "Response message for SearchCatalog."
        }
      ]
  entries.lookup:
    description: |-
      Get an entry by target resource name. This method allows clients to use the resource name from the source Google Cloud Platform service to get the Data Catalog Entry.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/entries/lookup
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "GoogleCloudDatacatalogV1beta1Entry",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "readOnly": true,
              "description": "Output only. The Data Catalog resource name of the entry in URL format. Example: * projects/{project_id}/locations/{location}/entryGroups/{entry_group_id}/entries/{entry_id} Note that this Entry and its child resources may not actually be stored in the location in this name."
            },
            "type": {
              "enum": [
                "ENTRY_TYPE_UNSPECIFIED",
                "TABLE",
                "MODEL",
                "DATA_STREAM",
                "FILESET"
              ],
              "type": "string",
              "description": "The type of the entry. Only used for Entries with types in the EntryType enum.",
              "enumDescriptions": [
                "Default unknown type.",
                "Output only. The type of entry that has a GoogleSQL schema, including logical views.",
                "Output only. The type of models. https://cloud.google.com/bigquery-ml/docs/bigqueryml-intro",
                "Output only. An entry type which is used for streaming entries. Example: Pub/Sub topic.",
                "An entry type which is a set of files or objects. Example: Cloud Storage fileset."
              ]
            },
            "schema": {
              "id": "GoogleCloudDatacatalogV1beta1Schema",
              "type": "object",
              "properties": {
                "columns": {
                  "type": "array",
                  "items": {
                    "id": "GoogleCloudDatacatalogV1beta1ColumnSchema",
                    "type": "object",
                    "properties": {
                      "mode": {
                        "type": "string",
                        "description": "Optional. A column's mode indicates whether the values in this column are required, nullable, etc. Only `NULLABLE`, `REQUIRED` and `REPEATED` are supported. Default mode is `NULLABLE`."
                      },
                      "type": {
                        "type": "string",
                        "description": "Required. Type of the column."
                      },
                      "column": {
                        "type": "string",
                        "description": "Required. Name of the column."
                      },
                      "subcolumns": {
                        "type": "array",
                        "items": {},
                        "description": "Optional. Schema of sub-columns. A column can have zero or more sub-columns."
                      },
                      "description": {
                        "type": "string",
                        "description": "Optional. Description of the column. Default value is an empty string."
                      }
                    },
                    "description": "Representation of a column within a schema. Columns could be nested inside other columns."
                  },
                  "description": "Required. Schema of columns. A maximum of 10,000 columns and sub-columns can be specified."
                }
              },
              "description": "Schema of the entry. An entry might not have any schema attached to it."
            },
            "description": {
              "type": "string",
              "description": "Entry description, which can consist of several sentences or paragraphs that describe entry contents. Default value is an empty string."
            },
            "displayName": {
              "type": "string",
              "description": "Display information such as title and description. A short name to identify the entry, for example, \"Analytics Data - Jan 2011\". Default value is an empty string."
            },
            "gcsFilesetSpec": {
              "id": "GoogleCloudDatacatalogV1beta1GcsFilesetSpec",
              "type": "object",
              "properties": {
                "filePatterns": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Required. Patterns to identify a set of files in Google Cloud Storage. See [Cloud Storage documentation](https://cloud.google.com/storage/docs/gsutil/addlhelp/WildcardNames) for more information. Note that bucket wildcards are currently not supported. Examples of valid file_patterns: * `gs://bucket_name/dir/*`: matches all files within `bucket_name/dir` directory. * `gs://bucket_name/dir/**`: matches all files in `bucket_name/dir` spanning all subdirectories. * `gs://bucket_name/file*`: matches files prefixed by `file` in `bucket_name` * `gs://bucket_name/??.txt`: matches files with two characters followed by `.txt` in `bucket_name` * `gs://bucket_name/[aeiou].txt`: matches files that contain a single vowel character followed by `.txt` in `bucket_name` * `gs://bucket_name/[a-m].txt`: matches files that contain `a`, `b`, ... or `m` followed by `.txt` in `bucket_name` * `gs://bucket_name/a/*/b`: matches all files in `bucket_name` that match `a/*/b` pattern, such as `a/c/b`, `a/d/b` * `gs://another_bucket/a.txt`: matches `gs://another_bucket/a.txt` You can combine wildcards to provide more powerful matches, for example: * `gs://bucket_name/[a-m]??.j*g`"
                },
                "sampleGcsFileSpecs": {
                  "type": "array",
                  "items": {
                    "id": "GoogleCloudDatacatalogV1beta1GcsFileSpec",
                    "type": "object",
                    "properties": {
                      "filePath": {
                        "type": "string",
                        "description": "Required. The full file path. Example: `gs://bucket_name/a/b.txt`."
                      },
                      "sizeBytes": {
                        "type": "string",
                        "format": "int64",
                        "readOnly": true,
                        "description": "Output only. The size of the file, in bytes."
                      },
                      "gcsTimestamps": {
                        "id": "GoogleCloudDatacatalogV1beta1SystemTimestamps",
                        "type": "object",
                        "readOnly": true,
                        "properties": {
                          "createTime": {
                            "type": "string",
                            "format": "google-datetime",
                            "description": "The creation time of the resource within the given system."
                          },
                          "expireTime": {
                            "type": "string",
                            "format": "google-datetime",
                            "readOnly": true,
                            "description": "Output only. The expiration time of the resource within the given system. Currently only apllicable to BigQuery resources."
                          },
                          "updateTime": {
                            "type": "string",
                            "format": "google-datetime",
                            "description": "The last-modified time of the resource within the given system."
                          }
                        },
                        "description": "Output only. Timestamps about the Cloud Storage file."
                      }
                    },
                    "description": "Specifications of a single file in Cloud Storage."
                  },
                  "readOnly": true,
                  "description": "Output only. Sample files contained in this fileset, not all files contained in this fileset are represented here."
                }
              },
              "description": "Specification that applies to a Cloud Storage fileset. This is only valid on entries of type FILESET."
            },
            "linkedResource": {
              "type": "string",
              "description": "The resource this metadata entry refers to. For Google Cloud Platform resources, `linked_resource` is the [full name of the resource](https://cloud.google.com/apis/design/resource_names#full_resource_name). For example, the `linked_resource` for a table resource from BigQuery is: * //bigquery.googleapis.com/projects/projectId/datasets/datasetId/tables/tableId Output only when Entry is of type in the EntryType enum. For entries with user_specified_type, this field is optional and defaults to an empty string."
            },
            "integratedSystem": {
              "enum": [
                "INTEGRATED_SYSTEM_UNSPECIFIED",
                "BIGQUERY",
                "CLOUD_PUBSUB"
              ],
              "type": "string",
              "readOnly": true,
              "description": "Output only. This field indicates the entry's source system that Data Catalog integrates with, such as BigQuery or Pub/Sub.",
              "enumDescriptions": [
                "Default unknown system.",
                "BigQuery.",
                "Cloud Pub/Sub."
              ]
            },
            "bigqueryTableSpec": {
              "id": "GoogleCloudDatacatalogV1beta1BigQueryTableSpec",
              "type": "object",
              "properties": {
                "viewSpec": {
                  "id": "GoogleCloudDatacatalogV1beta1ViewSpec",
                  "type": "object",
                  "properties": {
                    "viewQuery": {
                      "type": "string",
                      "readOnly": true,
                      "description": "Output only. The query that defines the table view."
                    }
                  },
                  "description": "Table view specification. This field should only be populated if `table_source_type` is `BIGQUERY_VIEW`."
                },
                "tableSpec": {
                  "id": "GoogleCloudDatacatalogV1beta1TableSpec",
                  "type": "object",
                  "properties": {
                    "groupedEntry": {
                      "type": "string",
                      "readOnly": true,
                      "description": "Output only. If the table is a dated shard, i.e., with name pattern `[prefix]YYYYMMDD`, `grouped_entry` is the Data Catalog resource name of the date sharded grouped entry, for example, `projects/{project_id}/locations/{location}/entrygroups/{entry_group_id}/entries/{entry_id}`. Otherwise, `grouped_entry` is empty."
                    }
                  },
                  "description": "Spec of a BigQuery table. This field should only be populated if `table_source_type` is `BIGQUERY_TABLE`."
                },
                "tableSourceType": {
                  "enum": [
                    "TABLE_SOURCE_TYPE_UNSPECIFIED",
                    "BIGQUERY_VIEW",
                    "BIGQUERY_TABLE",
                    "BIGQUERY_MATERIALIZED_VIEW"
                  ],
                  "type": "string",
                  "readOnly": true,
                  "description": "Output only. The table source type.",
                  "enumDescriptions": [
                    "Default unknown type.",
                    "Table view.",
                    "BigQuery native table.",
                    "BigQuery materialized view."
                  ]
                }
              },
              "description": "Specification that applies to a BigQuery table. This is only valid on entries of type `TABLE`."
            },
            "userSpecifiedType": {
              "type": "string",
              "description": "Entry type if it does not fit any of the input-allowed values listed in `EntryType` enum above. When creating an entry, users should check the enum values first, if nothing matches the entry to be created, then provide a custom value, for example \"my_special_type\". `user_specified_type` strings must begin with a letter or underscore and can only contain letters, numbers, and underscores; are case insensitive; must be at least 1 character and at most 64 characters long. Currently, only FILESET enum value is allowed. All other entries created through Data Catalog must use `user_specified_type`."
            },
            "userSpecifiedSystem": {
              "type": "string",
              "description": "This field indicates the entry's source system that Data Catalog does not integrate with. `user_specified_system` strings must begin with a letter or underscore and can only contain letters, numbers, and underscores; are case insensitive; must be at least 1 character and at most 64 characters long."
            },
            "sourceSystemTimestamps": {
              "id": "GoogleCloudDatacatalogV1beta1SystemTimestamps",
              "type": "object",
              "readOnly": true,
              "properties": {
                "createTime": {
                  "type": "string",
                  "format": "google-datetime",
                  "description": "The creation time of the resource within the given system."
                },
                "expireTime": {
                  "type": "string",
                  "format": "google-datetime",
                  "readOnly": true,
                  "description": "Output only. The expiration time of the resource within the given system. Currently only apllicable to BigQuery resources."
                },
                "updateTime": {
                  "type": "string",
                  "format": "google-datetime",
                  "description": "The last-modified time of the resource within the given system."
                }
              },
              "description": "Output only. Timestamps about the underlying resource, not about this Data Catalog entry. Output only when Entry is of type in the EntryType enum. For entries with user_specified_type, this field is optional and defaults to an empty timestamp."
            },
            "bigqueryDateShardedSpec": {
              "id": "GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpec",
              "type": "object",
              "properties": {
                "dataset": {
                  "type": "string",
                  "readOnly": true,
                  "description": "Output only. The Data Catalog resource name of the dataset entry the current table belongs to, for example, `projects/{project_id}/locations/{location}/entrygroups/{entry_group_id}/entries/{entry_id}`."
                },
                "shardCount": {
                  "type": "string",
                  "format": "int64",
                  "readOnly": true,
                  "description": "Output only. Total number of shards."
                },
                "tablePrefix": {
                  "type": "string",
                  "readOnly": true,
                  "description": "Output only. The table name prefix of the shards. The name of any given shard is `[table_prefix]YYYYMMDD`, for example, for shard `MyTable20180101`, the `table_prefix` is `MyTable`."
                }
              },
              "description": "Specification for a group of BigQuery tables with name pattern `[prefix]YYYYMMDD`. Context: https://cloud.google.com/bigquery/docs/partitioned-tables#partitioning_versus_sharding."
            }
          },
          "description": "Entry Metadata. A Data Catalog Entry resource represents another resource in Google Cloud Platform (such as a BigQuery dataset or a Pub/Sub topic), or outside of Google Cloud Platform. Clients can use the `linked_resource` field in the Entry resource to refer to the original resource ID of the source system. An Entry resource contains resource details, such as its schema. An Entry can also be used to attach flexible metadata, such as a Tag."
        }
      ]
  projects.locations.entryGroups.create:
    description: |-
      A maximum of 10,000 entry groups may be created per organization across all locations. Users should enable the Data Catalog API in the project identified by the `parent` parameter (see [Data Catalog Resource Project] (https://cloud.google.com/data-catalog/docs/concepts/resource-project) for more information).
    versions:
      from: 1.0.0
    link: https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.entryGroups/create
    example:
      inputs: [
        {
          "id": "GoogleCloudDatacatalogV1beta1EntryGroup",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The resource name of the entry group in URL format. Example: * projects/{project_id}/locations/{location}/entryGroups/{entry_group_id} Note that this EntryGroup and its child resources may not actually be stored in the location in this name."
            },
            "description": {
              "type": "string",
              "description": "Entry group description, which can consist of several sentences or paragraphs that describe entry group contents. Default value is an empty string."
            },
            "displayName": {
              "type": "string",
              "description": "A short name to identify the entry group, for example, \"analytics data - jan 2011\". Default value is an empty string."
            },
            "dataCatalogTimestamps": {
              "id": "GoogleCloudDatacatalogV1beta1SystemTimestamps",
              "type": "object",
              "readOnly": true,
              "properties": {
                "createTime": {
                  "type": "string",
                  "format": "google-datetime",
                  "description": "The creation time of the resource within the given system."
                },
                "expireTime": {
                  "type": "string",
                  "format": "google-datetime",
                  "readOnly": true,
                  "description": "Output only. The expiration time of the resource within the given system. Currently only apllicable to BigQuery resources."
                },
                "updateTime": {
                  "type": "string",
                  "format": "google-datetime",
                  "description": "The last-modified time of the resource within the given system."
                }
              },
              "description": "Output only. Timestamps about this EntryGroup. Default value is empty timestamps."
            }
          },
          "description": "EntryGroup Metadata. An EntryGroup resource represents a logical grouping of zero or more Data Catalog Entry resources."
        }
      ]
      outputs: [
        {}
      ]
  projects.locations.entryGroups.delete:
    description: |-
      Deletes an EntryGroup. Only entry groups that do not contain entries can be deleted. Users should enable the Data Catalog API in the project identified by the `name` parameter (see [Data Catalog Resource Project] (https://cloud.google.com/data-catalog/docs/concepts/resource-project) for more information).
    versions:
      from: 1.0.0
    link: https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.entryGroups/delete
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "Empty",
          "type": "object",
          "properties": {},
          "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`."
        }
      ]
  projects.locations.entryGroups.entries.create:
    description: |-
      Creates an entry. Only entries of 'FILESET' type or user-specified type can be created. Users should enable the Data Catalog API in the project identified by the `parent` parameter (see [Data Catalog Resource Project] (https://cloud.google.com/data-catalog/docs/concepts/resource-project) for more information). A maximum of 100,000 entries may be created per entry group.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.entryGroups.entries/create
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "GoogleCloudDatacatalogV1beta1Entry",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "readOnly": true,
              "description": "Output only. The Data Catalog resource name of the entry in URL format. Example: * projects/{project_id}/locations/{location}/entryGroups/{entry_group_id}/entries/{entry_id} Note that this Entry and its child resources may not actually be stored in the location in this name."
            },
            "type": {
              "enum": [
                "ENTRY_TYPE_UNSPECIFIED",
                "TABLE",
                "MODEL",
                "DATA_STREAM",
                "FILESET"
              ],
              "type": "string",
              "description": "The type of the entry. Only used for Entries with types in the EntryType enum.",
              "enumDescriptions": [
                "Default unknown type.",
                "Output only. The type of entry that has a GoogleSQL schema, including logical views.",
                "Output only. The type of models. https://cloud.google.com/bigquery-ml/docs/bigqueryml-intro",
                "Output only. An entry type which is used for streaming entries. Example: Pub/Sub topic.",
                "An entry type which is a set of files or objects. Example: Cloud Storage fileset."
              ]
            },
            "schema": {
              "id": "GoogleCloudDatacatalogV1beta1Schema",
              "type": "object",
              "properties": {
                "columns": {
                  "type": "array",
                  "items": {
                    "id": "GoogleCloudDatacatalogV1beta1ColumnSchema",
                    "type": "object",
                    "properties": {
                      "mode": {
                        "type": "string",
                        "description": "Optional. A column's mode indicates whether the values in this column are required, nullable, etc. Only `NULLABLE`, `REQUIRED` and `REPEATED` are supported. Default mode is `NULLABLE`."
                      },
                      "type": {
                        "type": "string",
                        "description": "Required. Type of the column."
                      },
                      "column": {
                        "type": "string",
                        "description": "Required. Name of the column."
                      },
                      "subcolumns": {
                        "type": "array",
                        "items": {},
                        "description": "Optional. Schema of sub-columns. A column can have zero or more sub-columns."
                      },
                      "description": {
                        "type": "string",
                        "description": "Optional. Description of the column. Default value is an empty string."
                      }
                    },
                    "description": "Representation of a column within a schema. Columns could be nested inside other columns."
                  },
                  "description": "Required. Schema of columns. A maximum of 10,000 columns and sub-columns can be specified."
                }
              },
              "description": "Schema of the entry. An entry might not have any schema attached to it."
            },
            "description": {
              "type": "string",
              "description": "Entry description, which can consist of several sentences or paragraphs that describe entry contents. Default value is an empty string."
            },
            "displayName": {
              "type": "string",
              "description": "Display information such as title and description. A short name to identify the entry, for example, \"Analytics Data - Jan 2011\". Default value is an empty string."
            },
            "gcsFilesetSpec": {
              "id": "GoogleCloudDatacatalogV1beta1GcsFilesetSpec",
              "type": "object",
              "properties": {
                "filePatterns": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Required. Patterns to identify a set of files in Google Cloud Storage. See [Cloud Storage documentation](https://cloud.google.com/storage/docs/gsutil/addlhelp/WildcardNames) for more information. Note that bucket wildcards are currently not supported. Examples of valid file_patterns: * `gs://bucket_name/dir/*`: matches all files within `bucket_name/dir` directory. * `gs://bucket_name/dir/**`: matches all files in `bucket_name/dir` spanning all subdirectories. * `gs://bucket_name/file*`: matches files prefixed by `file` in `bucket_name` * `gs://bucket_name/??.txt`: matches files with two characters followed by `.txt` in `bucket_name` * `gs://bucket_name/[aeiou].txt`: matches files that contain a single vowel character followed by `.txt` in `bucket_name` * `gs://bucket_name/[a-m].txt`: matches files that contain `a`, `b`, ... or `m` followed by `.txt` in `bucket_name` * `gs://bucket_name/a/*/b`: matches all files in `bucket_name` that match `a/*/b` pattern, such as `a/c/b`, `a/d/b` * `gs://another_bucket/a.txt`: matches `gs://another_bucket/a.txt` You can combine wildcards to provide more powerful matches, for example: * `gs://bucket_name/[a-m]??.j*g`"
                },
                "sampleGcsFileSpecs": {
                  "type": "array",
                  "items": {
                    "id": "GoogleCloudDatacatalogV1beta1GcsFileSpec",
                    "type": "object",
                    "properties": {
                      "filePath": {
                        "type": "string",
                        "description": "Required. The full file path. Example: `gs://bucket_name/a/b.txt`."
                      },
                      "sizeBytes": {
                        "type": "string",
                        "format": "int64",
                        "readOnly": true,
                        "description": "Output only. The size of the file, in bytes."
                      },
                      "gcsTimestamps": {
                        "id": "GoogleCloudDatacatalogV1beta1SystemTimestamps",
                        "type": "object",
                        "readOnly": true,
                        "properties": {
                          "createTime": {
                            "type": "string",
                            "format": "google-datetime",
                            "description": "The creation time of the resource within the given system."
                          },
                          "expireTime": {
                            "type": "string",
                            "format": "google-datetime",
                            "readOnly": true,
                            "description": "Output only. The expiration time of the resource within the given system. Currently only apllicable to BigQuery resources."
                          },
                          "updateTime": {
                            "type": "string",
                            "format": "google-datetime",
                            "description": "The last-modified time of the resource within the given system."
                          }
                        },
                        "description": "Output only. Timestamps about the Cloud Storage file."
                      }
                    },
                    "description": "Specifications of a single file in Cloud Storage."
                  },
                  "readOnly": true,
                  "description": "Output only. Sample files contained in this fileset, not all files contained in this fileset are represented here."
                }
              },
              "description": "Specification that applies to a Cloud Storage fileset. This is only valid on entries of type FILESET."
            },
            "linkedResource": {
              "type": "string",
              "description": "The resource this metadata entry refers to. For Google Cloud Platform resources, `linked_resource` is the [full name of the resource](https://cloud.google.com/apis/design/resource_names#full_resource_name). For example, the `linked_resource` for a table resource from BigQuery is: * //bigquery.googleapis.com/projects/projectId/datasets/datasetId/tables/tableId Output only when Entry is of type in the EntryType enum. For entries with user_specified_type, this field is optional and defaults to an empty string."
            },
            "integratedSystem": {
              "enum": [
                "INTEGRATED_SYSTEM_UNSPECIFIED",
                "BIGQUERY",
                "CLOUD_PUBSUB"
              ],
              "type": "string",
              "readOnly": true,
              "description": "Output only. This field indicates the entry's source system that Data Catalog integrates with, such as BigQuery or Pub/Sub.",
              "enumDescriptions": [
                "Default unknown system.",
                "BigQuery.",
                "Cloud Pub/Sub."
              ]
            },
            "bigqueryTableSpec": {
              "id": "GoogleCloudDatacatalogV1beta1BigQueryTableSpec",
              "type": "object",
              "properties": {
                "viewSpec": {
                  "id": "GoogleCloudDatacatalogV1beta1ViewSpec",
                  "type": "object",
                  "properties": {
                    "viewQuery": {
                      "type": "string",
                      "readOnly": true,
                      "description": "Output only. The query that defines the table view."
                    }
                  },
                  "description": "Table view specification. This field should only be populated if `table_source_type` is `BIGQUERY_VIEW`."
                },
                "tableSpec": {
                  "id": "GoogleCloudDatacatalogV1beta1TableSpec",
                  "type": "object",
                  "properties": {
                    "groupedEntry": {
                      "type": "string",
                      "readOnly": true,
                      "description": "Output only. If the table is a dated shard, i.e., with name pattern `[prefix]YYYYMMDD`, `grouped_entry` is the Data Catalog resource name of the date sharded grouped entry, for example, `projects/{project_id}/locations/{location}/entrygroups/{entry_group_id}/entries/{entry_id}`. Otherwise, `grouped_entry` is empty."
                    }
                  },
                  "description": "Spec of a BigQuery table. This field should only be populated if `table_source_type` is `BIGQUERY_TABLE`."
                },
                "tableSourceType": {
                  "enum": [
                    "TABLE_SOURCE_TYPE_UNSPECIFIED",
                    "BIGQUERY_VIEW",
                    "BIGQUERY_TABLE",
                    "BIGQUERY_MATERIALIZED_VIEW"
                  ],
                  "type": "string",
                  "readOnly": true,
                  "description": "Output only. The table source type.",
                  "enumDescriptions": [
                    "Default unknown type.",
                    "Table view.",
                    "BigQuery native table.",
                    "BigQuery materialized view."
                  ]
                }
              },
              "description": "Specification that applies to a BigQuery table. This is only valid on entries of type `TABLE`."
            },
            "userSpecifiedType": {
              "type": "string",
              "description": "Entry type if it does not fit any of the input-allowed values listed in `EntryType` enum above. When creating an entry, users should check the enum values first, if nothing matches the entry to be created, then provide a custom value, for example \"my_special_type\". `user_specified_type` strings must begin with a letter or underscore and can only contain letters, numbers, and underscores; are case insensitive; must be at least 1 character and at most 64 characters long. Currently, only FILESET enum value is allowed. All other entries created through Data Catalog must use `user_specified_type`."
            },
            "userSpecifiedSystem": {
              "type": "string",
              "description": "This field indicates the entry's source system that Data Catalog does not integrate with. `user_specified_system` strings must begin with a letter or underscore and can only contain letters, numbers, and underscores; are case insensitive; must be at least 1 character and at most 64 characters long."
            },
            "sourceSystemTimestamps": {
              "id": "GoogleCloudDatacatalogV1beta1SystemTimestamps",
              "type": "object",
              "readOnly": true,
              "properties": {
                "createTime": {
                  "type": "string",
                  "format": "google-datetime",
                  "description": "The creation time of the resource within the given system."
                },
                "expireTime": {
                  "type": "string",
                  "format": "google-datetime",
                  "readOnly": true,
                  "description": "Output only. The expiration time of the resource within the given system. Currently only apllicable to BigQuery resources."
                },
                "updateTime": {
                  "type": "string",
                  "format": "google-datetime",
                  "description": "The last-modified time of the resource within the given system."
                }
              },
              "description": "Output only. Timestamps about the underlying resource, not about this Data Catalog entry. Output only when Entry is of type in the EntryType enum. For entries with user_specified_type, this field is optional and defaults to an empty timestamp."
            },
            "bigqueryDateShardedSpec": {
              "id": "GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpec",
              "type": "object",
              "properties": {
                "dataset": {
                  "type": "string",
                  "readOnly": true,
                  "description": "Output only. The Data Catalog resource name of the dataset entry the current table belongs to, for example, `projects/{project_id}/locations/{location}/entrygroups/{entry_group_id}/entries/{entry_id}`."
                },
                "shardCount": {
                  "type": "string",
                  "format": "int64",
                  "readOnly": true,
                  "description": "Output only. Total number of shards."
                },
                "tablePrefix": {
                  "type": "string",
                  "readOnly": true,
                  "description": "Output only. The table name prefix of the shards. The name of any given shard is `[table_prefix]YYYYMMDD`, for example, for shard `MyTable20180101`, the `table_prefix` is `MyTable`."
                }
              },
              "description": "Specification for a group of BigQuery tables with name pattern `[prefix]YYYYMMDD`. Context: https://cloud.google.com/bigquery/docs/partitioned-tables#partitioning_versus_sharding."
            }
          },
          "description": "Entry Metadata. A Data Catalog Entry resource represents another resource in Google Cloud Platform (such as a BigQuery dataset or a Pub/Sub topic), or outside of Google Cloud Platform. Clients can use the `linked_resource` field in the Entry resource to refer to the original resource ID of the source system. An Entry resource contains resource details, such as its schema. An Entry can also be used to attach flexible metadata, such as a Tag."
        }
      ]
  projects.locations.entryGroups.entries.delete:
    description: |-
      Deletes an existing entry. Only entries created through CreateEntry method can be deleted. Users should enable the Data Catalog API in the project identified by the `name` parameter (see [Data Catalog Resource Project] (https://cloud.google.com/data-catalog/docs/concepts/resource-project) for more information).
    versions:
      from: 1.0.0
    link: https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.entryGroups.entries/delete
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "Empty",
          "type": "object",
          "properties": {},
          "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`."
        }
      ]
  projects.locations.entryGroups.entries.get:
    description: |-
      Gets an entry.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.entryGroups.entries/get
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "GoogleCloudDatacatalogV1beta1Entry",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "readOnly": true,
              "description": "Output only. The Data Catalog resource name of the entry in URL format. Example: * projects/{project_id}/locations/{location}/entryGroups/{entry_group_id}/entries/{entry_id} Note that this Entry and its child resources may not actually be stored in the location in this name."
            },
            "type": {
              "enum": [
                "ENTRY_TYPE_UNSPECIFIED",
                "TABLE",
                "MODEL",
                "DATA_STREAM",
                "FILESET"
              ],
              "type": "string",
              "description": "The type of the entry. Only used for Entries with types in the EntryType enum.",
              "enumDescriptions": [
                "Default unknown type.",
                "Output only. The type of entry that has a GoogleSQL schema, including logical views.",
                "Output only. The type of models. https://cloud.google.com/bigquery-ml/docs/bigqueryml-intro",
                "Output only. An entry type which is used for streaming entries. Example: Pub/Sub topic.",
                "An entry type which is a set of files or objects. Example: Cloud Storage fileset."
              ]
            },
            "schema": {
              "id": "GoogleCloudDatacatalogV1beta1Schema",
              "type": "object",
              "properties": {
                "columns": {
                  "type": "array",
                  "items": {
                    "id": "GoogleCloudDatacatalogV1beta1ColumnSchema",
                    "type": "object",
                    "properties": {
                      "mode": {
                        "type": "string",
                        "description": "Optional. A column's mode indicates whether the values in this column are required, nullable, etc. Only `NULLABLE`, `REQUIRED` and `REPEATED` are supported. Default mode is `NULLABLE`."
                      },
                      "type": {
                        "type": "string",
                        "description": "Required. Type of the column."
                      },
                      "column": {
                        "type": "string",
                        "description": "Required. Name of the column."
                      },
                      "subcolumns": {
                        "type": "array",
                        "items": {},
                        "description": "Optional. Schema of sub-columns. A column can have zero or more sub-columns."
                      },
                      "description": {
                        "type": "string",
                        "description": "Optional. Description of the column. Default value is an empty string."
                      }
                    },
                    "description": "Representation of a column within a schema. Columns could be nested inside other columns."
                  },
                  "description": "Required. Schema of columns. A maximum of 10,000 columns and sub-columns can be specified."
                }
              },
              "description": "Schema of the entry. An entry might not have any schema attached to it."
            },
            "description": {
              "type": "string",
              "description": "Entry description, which can consist of several sentences or paragraphs that describe entry contents. Default value is an empty string."
            },
            "displayName": {
              "type": "string",
              "description": "Display information such as title and description. A short name to identify the entry, for example, \"Analytics Data - Jan 2011\". Default value is an empty string."
            },
            "gcsFilesetSpec": {
              "id": "GoogleCloudDatacatalogV1beta1GcsFilesetSpec",
              "type": "object",
              "properties": {
                "filePatterns": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Required. Patterns to identify a set of files in Google Cloud Storage. See [Cloud Storage documentation](https://cloud.google.com/storage/docs/gsutil/addlhelp/WildcardNames) for more information. Note that bucket wildcards are currently not supported. Examples of valid file_patterns: * `gs://bucket_name/dir/*`: matches all files within `bucket_name/dir` directory. * `gs://bucket_name/dir/**`: matches all files in `bucket_name/dir` spanning all subdirectories. * `gs://bucket_name/file*`: matches files prefixed by `file` in `bucket_name` * `gs://bucket_name/??.txt`: matches files with two characters followed by `.txt` in `bucket_name` * `gs://bucket_name/[aeiou].txt`: matches files that contain a single vowel character followed by `.txt` in `bucket_name` * `gs://bucket_name/[a-m].txt`: matches files that contain `a`, `b`, ... or `m` followed by `.txt` in `bucket_name` * `gs://bucket_name/a/*/b`: matches all files in `bucket_name` that match `a/*/b` pattern, such as `a/c/b`, `a/d/b` * `gs://another_bucket/a.txt`: matches `gs://another_bucket/a.txt` You can combine wildcards to provide more powerful matches, for example: * `gs://bucket_name/[a-m]??.j*g`"
                },
                "sampleGcsFileSpecs": {
                  "type": "array",
                  "items": {
                    "id": "GoogleCloudDatacatalogV1beta1GcsFileSpec",
                    "type": "object",
                    "properties": {
                      "filePath": {
                        "type": "string",
                        "description": "Required. The full file path. Example: `gs://bucket_name/a/b.txt`."
                      },
                      "sizeBytes": {
                        "type": "string",
                        "format": "int64",
                        "readOnly": true,
                        "description": "Output only. The size of the file, in bytes."
                      },
                      "gcsTimestamps": {
                        "id": "GoogleCloudDatacatalogV1beta1SystemTimestamps",
                        "type": "object",
                        "readOnly": true,
                        "properties": {
                          "createTime": {
                            "type": "string",
                            "format": "google-datetime",
                            "description": "The creation time of the resource within the given system."
                          },
                          "expireTime": {
                            "type": "string",
                            "format": "google-datetime",
                            "readOnly": true,
                            "description": "Output only. The expiration time of the resource within the given system. Currently only apllicable to BigQuery resources."
                          },
                          "updateTime": {
                            "type": "string",
                            "format": "google-datetime",
                            "description": "The last-modified time of the resource within the given system."
                          }
                        },
                        "description": "Output only. Timestamps about the Cloud Storage file."
                      }
                    },
                    "description": "Specifications of a single file in Cloud Storage."
                  },
                  "readOnly": true,
                  "description": "Output only. Sample files contained in this fileset, not all files contained in this fileset are represented here."
                }
              },
              "description": "Specification that applies to a Cloud Storage fileset. This is only valid on entries of type FILESET."
            },
            "linkedResource": {
              "type": "string",
              "description": "The resource this metadata entry refers to. For Google Cloud Platform resources, `linked_resource` is the [full name of the resource](https://cloud.google.com/apis/design/resource_names#full_resource_name). For example, the `linked_resource` for a table resource from BigQuery is: * //bigquery.googleapis.com/projects/projectId/datasets/datasetId/tables/tableId Output only when Entry is of type in the EntryType enum. For entries with user_specified_type, this field is optional and defaults to an empty string."
            },
            "integratedSystem": {
              "enum": [
                "INTEGRATED_SYSTEM_UNSPECIFIED",
                "BIGQUERY",
                "CLOUD_PUBSUB"
              ],
              "type": "string",
              "readOnly": true,
              "description": "Output only. This field indicates the entry's source system that Data Catalog integrates with, such as BigQuery or Pub/Sub.",
              "enumDescriptions": [
                "Default unknown system.",
                "BigQuery.",
                "Cloud Pub/Sub."
              ]
            },
            "bigqueryTableSpec": {
              "id": "GoogleCloudDatacatalogV1beta1BigQueryTableSpec",
              "type": "object",
              "properties": {
                "viewSpec": {
                  "id": "GoogleCloudDatacatalogV1beta1ViewSpec",
                  "type": "object",
                  "properties": {
                    "viewQuery": {
                      "type": "string",
                      "readOnly": true,
                      "description": "Output only. The query that defines the table view."
                    }
                  },
                  "description": "Table view specification. This field should only be populated if `table_source_type` is `BIGQUERY_VIEW`."
                },
                "tableSpec": {
                  "id": "GoogleCloudDatacatalogV1beta1TableSpec",
                  "type": "object",
                  "properties": {
                    "groupedEntry": {
                      "type": "string",
                      "readOnly": true,
                      "description": "Output only. If the table is a dated shard, i.e., with name pattern `[prefix]YYYYMMDD`, `grouped_entry` is the Data Catalog resource name of the date sharded grouped entry, for example, `projects/{project_id}/locations/{location}/entrygroups/{entry_group_id}/entries/{entry_id}`. Otherwise, `grouped_entry` is empty."
                    }
                  },
                  "description": "Spec of a BigQuery table. This field should only be populated if `table_source_type` is `BIGQUERY_TABLE`."
                },
                "tableSourceType": {
                  "enum": [
                    "TABLE_SOURCE_TYPE_UNSPECIFIED",
                    "BIGQUERY_VIEW",
                    "BIGQUERY_TABLE",
                    "BIGQUERY_MATERIALIZED_VIEW"
                  ],
                  "type": "string",
                  "readOnly": true,
                  "description": "Output only. The table source type.",
                  "enumDescriptions": [
                    "Default unknown type.",
                    "Table view.",
                    "BigQuery native table.",
                    "BigQuery materialized view."
                  ]
                }
              },
              "description": "Specification that applies to a BigQuery table. This is only valid on entries of type `TABLE`."
            },
            "userSpecifiedType": {
              "type": "string",
              "description": "Entry type if it does not fit any of the input-allowed values listed in `EntryType` enum above. When creating an entry, users should check the enum values first, if nothing matches the entry to be created, then provide a custom value, for example \"my_special_type\". `user_specified_type` strings must begin with a letter or underscore and can only contain letters, numbers, and underscores; are case insensitive; must be at least 1 character and at most 64 characters long. Currently, only FILESET enum value is allowed. All other entries created through Data Catalog must use `user_specified_type`."
            },
            "userSpecifiedSystem": {
              "type": "string",
              "description": "This field indicates the entry's source system that Data Catalog does not integrate with. `user_specified_system` strings must begin with a letter or underscore and can only contain letters, numbers, and underscores; are case insensitive; must be at least 1 character and at most 64 characters long."
            },
            "sourceSystemTimestamps": {
              "id": "GoogleCloudDatacatalogV1beta1SystemTimestamps",
              "type": "object",
              "readOnly": true,
              "properties": {
                "createTime": {
                  "type": "string",
                  "format": "google-datetime",
                  "description": "The creation time of the resource within the given system."
                },
                "expireTime": {
                  "type": "string",
                  "format": "google-datetime",
                  "readOnly": true,
                  "description": "Output only. The expiration time of the resource within the given system. Currently only apllicable to BigQuery resources."
                },
                "updateTime": {
                  "type": "string",
                  "format": "google-datetime",
                  "description": "The last-modified time of the resource within the given system."
                }
              },
              "description": "Output only. Timestamps about the underlying resource, not about this Data Catalog entry. Output only when Entry is of type in the EntryType enum. For entries with user_specified_type, this field is optional and defaults to an empty timestamp."
            },
            "bigqueryDateShardedSpec": {
              "id": "GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpec",
              "type": "object",
              "properties": {
                "dataset": {
                  "type": "string",
                  "readOnly": true,
                  "description": "Output only. The Data Catalog resource name of the dataset entry the current table belongs to, for example, `projects/{project_id}/locations/{location}/entrygroups/{entry_group_id}/entries/{entry_id}`."
                },
                "shardCount": {
                  "type": "string",
                  "format": "int64",
                  "readOnly": true,
                  "description": "Output only. Total number of shards."
                },
                "tablePrefix": {
                  "type": "string",
                  "readOnly": true,
                  "description": "Output only. The table name prefix of the shards. The name of any given shard is `[table_prefix]YYYYMMDD`, for example, for shard `MyTable20180101`, the `table_prefix` is `MyTable`."
                }
              },
              "description": "Specification for a group of BigQuery tables with name pattern `[prefix]YYYYMMDD`. Context: https://cloud.google.com/bigquery/docs/partitioned-tables#partitioning_versus_sharding."
            }
          },
          "description": "Entry Metadata. A Data Catalog Entry resource represents another resource in Google Cloud Platform (such as a BigQuery dataset or a Pub/Sub topic), or outside of Google Cloud Platform. Clients can use the `linked_resource` field in the Entry resource to refer to the original resource ID of the source system. An Entry resource contains resource details, such as its schema. An Entry can also be used to attach flexible metadata, such as a Tag."
        }
      ]
  projects.locations.entryGroups.entries.getIamPolicy:
    description: |-
      Gets the access control policy for a resource. A `NOT_FOUND` error is returned if the resource does not exist. An empty policy is returned if the resource exists but does not have a policy set on it. Supported resources are: - Tag templates. - Entries. - Entry groups. Note, this method cannot be used to manage policies for BigQuery, Pub/Sub and any external Google Cloud Platform resources synced to Data Catalog. Callers must have following Google IAM permission - `datacatalog.tagTemplates.getIamPolicy` to get policies on tag templates. - `datacatalog.entries.getIamPolicy` to get policies on entries. - `datacatalog.entryGroups.getIamPolicy` to get policies on entry groups.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.entryGroups.entries/getIamPolicy
    example:
      inputs: [
        {
          "id": "GetIamPolicyRequest",
          "type": "object",
          "properties": {
            "options": {
              "id": "GetPolicyOptions",
              "type": "object",
              "properties": {
                "requestedPolicyVersion": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Optional. The policy format version to be returned. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional bindings must specify version 3. Policies without any conditional bindings may specify any valid value or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies)."
                }
              },
              "description": "OPTIONAL: A `GetPolicyOptions` object for specifying options to `GetIamPolicy`."
            }
          },
          "description": "Request message for `GetIamPolicy` method."
        }
      ]
      outputs: [
        {
          "id": "Policy",
          "type": "object",
          "properties": {
            "etag": {
              "type": "string",
              "format": "byte",
              "description": "`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost."
            },
            "version": {
              "type": "integer",
              "format": "int32",
              "description": "Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies)."
            },
            "bindings": {
              "type": "array",
              "items": {
                "id": "Binding",
                "type": "object",
                "properties": {
                  "role": {
                    "type": "string",
                    "description": "Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`."
                  },
                  "members": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. "
                  },
                  "condition": {
                    "id": "Expr",
                    "type": "object",
                    "properties": {
                      "title": {
                        "type": "string",
                        "description": "Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression."
                      },
                      "location": {
                        "type": "string",
                        "description": "Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file."
                      },
                      "expression": {
                        "type": "string",
                        "description": "Textual representation of an expression in Common Expression Language syntax."
                      },
                      "description": {
                        "type": "string",
                        "description": "Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI."
                      }
                    },
                    "description": "The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies)."
                  }
                },
                "description": "Associates `members` with a `role`."
              },
              "description": "Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member."
            }
          },
          "description": "An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { \"bindings\": [ { \"role\": \"roles/resourcemanager.organizationAdmin\", \"members\": [ \"user:mike@example.com\", \"group:admins@example.com\", \"domain:google.com\", \"serviceAccount:my-project-id@appspot.gserviceaccount.com\" ] }, { \"role\": \"roles/resourcemanager.organizationViewer\", \"members\": [ \"user:eve@example.com\" ], \"condition\": { \"title\": \"expirable access\", \"description\": \"Does not grant access after Sep 2020\", \"expression\": \"request.time < timestamp('2020-10-01T00:00:00.000Z')\", } } ], \"etag\": \"BwWWja0YfJA=\", \"version\": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/)."
        }
      ]
  projects.locations.entryGroups.entries.list:
    description: |-
      Lists entries.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.entryGroups.entries/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "GoogleCloudDatacatalogV1beta1ListEntriesResponse",
          "type": "object",
          "properties": {
            "entries": {
              "type": "array",
              "items": {
                "id": "GoogleCloudDatacatalogV1beta1Entry",
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "readOnly": true,
                    "description": "Output only. The Data Catalog resource name of the entry in URL format. Example: * projects/{project_id}/locations/{location}/entryGroups/{entry_group_id}/entries/{entry_id} Note that this Entry and its child resources may not actually be stored in the location in this name."
                  },
                  "type": {
                    "enum": [
                      "ENTRY_TYPE_UNSPECIFIED",
                      "TABLE",
                      "MODEL",
                      "DATA_STREAM",
                      "FILESET"
                    ],
                    "type": "string",
                    "description": "The type of the entry. Only used for Entries with types in the EntryType enum.",
                    "enumDescriptions": [
                      "Default unknown type.",
                      "Output only. The type of entry that has a GoogleSQL schema, including logical views.",
                      "Output only. The type of models. https://cloud.google.com/bigquery-ml/docs/bigqueryml-intro",
                      "Output only. An entry type which is used for streaming entries. Example: Pub/Sub topic.",
                      "An entry type which is a set of files or objects. Example: Cloud Storage fileset."
                    ]
                  },
                  "schema": {
                    "id": "GoogleCloudDatacatalogV1beta1Schema",
                    "type": "object",
                    "properties": {
                      "columns": {
                        "type": "array",
                        "items": {
                          "id": "GoogleCloudDatacatalogV1beta1ColumnSchema",
                          "type": "object",
                          "properties": {
                            "mode": {
                              "type": "string",
                              "description": "Optional. A column's mode indicates whether the values in this column are required, nullable, etc. Only `NULLABLE`, `REQUIRED` and `REPEATED` are supported. Default mode is `NULLABLE`."
                            },
                            "type": {
                              "type": "string",
                              "description": "Required. Type of the column."
                            },
                            "column": {
                              "type": "string",
                              "description": "Required. Name of the column."
                            },
                            "subcolumns": {
                              "type": "array",
                              "items": {},
                              "description": "Optional. Schema of sub-columns. A column can have zero or more sub-columns."
                            },
                            "description": {
                              "type": "string",
                              "description": "Optional. Description of the column. Default value is an empty string."
                            }
                          },
                          "description": "Representation of a column within a schema. Columns could be nested inside other columns."
                        },
                        "description": "Required. Schema of columns. A maximum of 10,000 columns and sub-columns can be specified."
                      }
                    },
                    "description": "Schema of the entry. An entry might not have any schema attached to it."
                  },
                  "description": {
                    "type": "string",
                    "description": "Entry description, which can consist of several sentences or paragraphs that describe entry contents. Default value is an empty string."
                  },
                  "displayName": {
                    "type": "string",
                    "description": "Display information such as title and description. A short name to identify the entry, for example, \"Analytics Data - Jan 2011\". Default value is an empty string."
                  },
                  "gcsFilesetSpec": {
                    "id": "GoogleCloudDatacatalogV1beta1GcsFilesetSpec",
                    "type": "object",
                    "properties": {
                      "filePatterns": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Required. Patterns to identify a set of files in Google Cloud Storage. See [Cloud Storage documentation](https://cloud.google.com/storage/docs/gsutil/addlhelp/WildcardNames) for more information. Note that bucket wildcards are currently not supported. Examples of valid file_patterns: * `gs://bucket_name/dir/*`: matches all files within `bucket_name/dir` directory. * `gs://bucket_name/dir/**`: matches all files in `bucket_name/dir` spanning all subdirectories. * `gs://bucket_name/file*`: matches files prefixed by `file` in `bucket_name` * `gs://bucket_name/??.txt`: matches files with two characters followed by `.txt` in `bucket_name` * `gs://bucket_name/[aeiou].txt`: matches files that contain a single vowel character followed by `.txt` in `bucket_name` * `gs://bucket_name/[a-m].txt`: matches files that contain `a`, `b`, ... or `m` followed by `.txt` in `bucket_name` * `gs://bucket_name/a/*/b`: matches all files in `bucket_name` that match `a/*/b` pattern, such as `a/c/b`, `a/d/b` * `gs://another_bucket/a.txt`: matches `gs://another_bucket/a.txt` You can combine wildcards to provide more powerful matches, for example: * `gs://bucket_name/[a-m]??.j*g`"
                      },
                      "sampleGcsFileSpecs": {
                        "type": "array",
                        "items": {
                          "id": "GoogleCloudDatacatalogV1beta1GcsFileSpec",
                          "type": "object",
                          "properties": {
                            "filePath": {
                              "type": "string",
                              "description": "Required. The full file path. Example: `gs://bucket_name/a/b.txt`."
                            },
                            "sizeBytes": {
                              "type": "string",
                              "format": "int64",
                              "readOnly": true,
                              "description": "Output only. The size of the file, in bytes."
                            },
                            "gcsTimestamps": {
                              "id": "GoogleCloudDatacatalogV1beta1SystemTimestamps",
                              "type": "object",
                              "readOnly": true,
                              "properties": {
                                "createTime": {
                                  "type": "string",
                                  "format": "google-datetime",
                                  "description": "The creation time of the resource within the given system."
                                },
                                "expireTime": {
                                  "type": "string",
                                  "format": "google-datetime",
                                  "readOnly": true,
                                  "description": "Output only. The expiration time of the resource within the given system. Currently only apllicable to BigQuery resources."
                                },
                                "updateTime": {
                                  "type": "string",
                                  "format": "google-datetime",
                                  "description": "The last-modified time of the resource within the given system."
                                }
                              },
                              "description": "Output only. Timestamps about the Cloud Storage file."
                            }
                          },
                          "description": "Specifications of a single file in Cloud Storage."
                        },
                        "readOnly": true,
                        "description": "Output only. Sample files contained in this fileset, not all files contained in this fileset are represented here."
                      }
                    },
                    "description": "Specification that applies to a Cloud Storage fileset. This is only valid on entries of type FILESET."
                  },
                  "linkedResource": {
                    "type": "string",
                    "description": "The resource this metadata entry refers to. For Google Cloud Platform resources, `linked_resource` is the [full name of the resource](https://cloud.google.com/apis/design/resource_names#full_resource_name). For example, the `linked_resource` for a table resource from BigQuery is: * //bigquery.googleapis.com/projects/projectId/datasets/datasetId/tables/tableId Output only when Entry is of type in the EntryType enum. For entries with user_specified_type, this field is optional and defaults to an empty string."
                  },
                  "integratedSystem": {
                    "enum": [
                      "INTEGRATED_SYSTEM_UNSPECIFIED",
                      "BIGQUERY",
                      "CLOUD_PUBSUB"
                    ],
                    "type": "string",
                    "readOnly": true,
                    "description": "Output only. This field indicates the entry's source system that Data Catalog integrates with, such as BigQuery or Pub/Sub.",
                    "enumDescriptions": [
                      "Default unknown system.",
                      "BigQuery.",
                      "Cloud Pub/Sub."
                    ]
                  },
                  "bigqueryTableSpec": {
                    "id": "GoogleCloudDatacatalogV1beta1BigQueryTableSpec",
                    "type": "object",
                    "properties": {
                      "viewSpec": {
                        "id": "GoogleCloudDatacatalogV1beta1ViewSpec",
                        "type": "object",
                        "properties": {
                          "viewQuery": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Output only. The query that defines the table view."
                          }
                        },
                        "description": "Table view specification. This field should only be populated if `table_source_type` is `BIGQUERY_VIEW`."
                      },
                      "tableSpec": {
                        "id": "GoogleCloudDatacatalogV1beta1TableSpec",
                        "type": "object",
                        "properties": {
                          "groupedEntry": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Output only. If the table is a dated shard, i.e., with name pattern `[prefix]YYYYMMDD`, `grouped_entry` is the Data Catalog resource name of the date sharded grouped entry, for example, `projects/{project_id}/locations/{location}/entrygroups/{entry_group_id}/entries/{entry_id}`. Otherwise, `grouped_entry` is empty."
                          }
                        },
                        "description": "Spec of a BigQuery table. This field should only be populated if `table_source_type` is `BIGQUERY_TABLE`."
                      },
                      "tableSourceType": {
                        "enum": [
                          "TABLE_SOURCE_TYPE_UNSPECIFIED",
                          "BIGQUERY_VIEW",
                          "BIGQUERY_TABLE",
                          "BIGQUERY_MATERIALIZED_VIEW"
                        ],
                        "type": "string",
                        "readOnly": true,
                        "description": "Output only. The table source type.",
                        "enumDescriptions": [
                          "Default unknown type.",
                          "Table view.",
                          "BigQuery native table.",
                          "BigQuery materialized view."
                        ]
                      }
                    },
                    "description": "Specification that applies to a BigQuery table. This is only valid on entries of type `TABLE`."
                  },
                  "userSpecifiedType": {
                    "type": "string",
                    "description": "Entry type if it does not fit any of the input-allowed values listed in `EntryType` enum above. When creating an entry, users should check the enum values first, if nothing matches the entry to be created, then provide a custom value, for example \"my_special_type\". `user_specified_type` strings must begin with a letter or underscore and can only contain letters, numbers, and underscores; are case insensitive; must be at least 1 character and at most 64 characters long. Currently, only FILESET enum value is allowed. All other entries created through Data Catalog must use `user_specified_type`."
                  },
                  "userSpecifiedSystem": {
                    "type": "string",
                    "description": "This field indicates the entry's source system that Data Catalog does not integrate with. `user_specified_system` strings must begin with a letter or underscore and can only contain letters, numbers, and underscores; are case insensitive; must be at least 1 character and at most 64 characters long."
                  },
                  "sourceSystemTimestamps": {
                    "id": "GoogleCloudDatacatalogV1beta1SystemTimestamps",
                    "type": "object",
                    "readOnly": true,
                    "properties": {
                      "createTime": {
                        "type": "string",
                        "format": "google-datetime",
                        "description": "The creation time of the resource within the given system."
                      },
                      "expireTime": {
                        "type": "string",
                        "format": "google-datetime",
                        "readOnly": true,
                        "description": "Output only. The expiration time of the resource within the given system. Currently only apllicable to BigQuery resources."
                      },
                      "updateTime": {
                        "type": "string",
                        "format": "google-datetime",
                        "description": "The last-modified time of the resource within the given system."
                      }
                    },
                    "description": "Output only. Timestamps about the underlying resource, not about this Data Catalog entry. Output only when Entry is of type in the EntryType enum. For entries with user_specified_type, this field is optional and defaults to an empty timestamp."
                  },
                  "bigqueryDateShardedSpec": {
                    "id": "GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpec",
                    "type": "object",
                    "properties": {
                      "dataset": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Output only. The Data Catalog resource name of the dataset entry the current table belongs to, for example, `projects/{project_id}/locations/{location}/entrygroups/{entry_group_id}/entries/{entry_id}`."
                      },
                      "shardCount": {
                        "type": "string",
                        "format": "int64",
                        "readOnly": true,
                        "description": "Output only. Total number of shards."
                      },
                      "tablePrefix": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Output only. The table name prefix of the shards. The name of any given shard is `[table_prefix]YYYYMMDD`, for example, for shard `MyTable20180101`, the `table_prefix` is `MyTable`."
                      }
                    },
                    "description": "Specification for a group of BigQuery tables with name pattern `[prefix]YYYYMMDD`. Context: https://cloud.google.com/bigquery/docs/partitioned-tables#partitioning_versus_sharding."
                  }
                },
                "description": "Entry Metadata. A Data Catalog Entry resource represents another resource in Google Cloud Platform (such as a BigQuery dataset or a Pub/Sub topic), or outside of Google Cloud Platform. Clients can use the `linked_resource` field in the Entry resource to refer to the original resource ID of the source system. An Entry resource contains resource details, such as its schema. An Entry can also be used to attach flexible metadata, such as a Tag."
              },
              "description": "Entry details."
            },
            "nextPageToken": {
              "type": "string",
              "description": "Token to retrieve the next page of results. It is set to empty if no items remain in results."
            }
          },
          "description": "Response message for ListEntries."
        }
      ]
  projects.locations.entryGroups.entries.patch:
    description: |-
      Updates an existing entry. Users should enable the Data Catalog API in the project identified by the `entry.name` parameter (see [Data Catalog Resource Project] (https://cloud.google.com/data-catalog/docs/concepts/resource-project) for more information).
    versions:
      from: 1.0.0
    link: https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.entryGroups.entries/patch
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "GoogleCloudDatacatalogV1beta1Entry",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "readOnly": true,
              "description": "Output only. The Data Catalog resource name of the entry in URL format. Example: * projects/{project_id}/locations/{location}/entryGroups/{entry_group_id}/entries/{entry_id} Note that this Entry and its child resources may not actually be stored in the location in this name."
            },
            "type": {
              "enum": [
                "ENTRY_TYPE_UNSPECIFIED",
                "TABLE",
                "MODEL",
                "DATA_STREAM",
                "FILESET"
              ],
              "type": "string",
              "description": "The type of the entry. Only used for Entries with types in the EntryType enum.",
              "enumDescriptions": [
                "Default unknown type.",
                "Output only. The type of entry that has a GoogleSQL schema, including logical views.",
                "Output only. The type of models. https://cloud.google.com/bigquery-ml/docs/bigqueryml-intro",
                "Output only. An entry type which is used for streaming entries. Example: Pub/Sub topic.",
                "An entry type which is a set of files or objects. Example: Cloud Storage fileset."
              ]
            },
            "schema": {
              "id": "GoogleCloudDatacatalogV1beta1Schema",
              "type": "object",
              "properties": {
                "columns": {
                  "type": "array",
                  "items": {
                    "id": "GoogleCloudDatacatalogV1beta1ColumnSchema",
                    "type": "object",
                    "properties": {
                      "mode": {
                        "type": "string",
                        "description": "Optional. A column's mode indicates whether the values in this column are required, nullable, etc. Only `NULLABLE`, `REQUIRED` and `REPEATED` are supported. Default mode is `NULLABLE`."
                      },
                      "type": {
                        "type": "string",
                        "description": "Required. Type of the column."
                      },
                      "column": {
                        "type": "string",
                        "description": "Required. Name of the column."
                      },
                      "subcolumns": {
                        "type": "array",
                        "items": {},
                        "description": "Optional. Schema of sub-columns. A column can have zero or more sub-columns."
                      },
                      "description": {
                        "type": "string",
                        "description": "Optional. Description of the column. Default value is an empty string."
                      }
                    },
                    "description": "Representation of a column within a schema. Columns could be nested inside other columns."
                  },
                  "description": "Required. Schema of columns. A maximum of 10,000 columns and sub-columns can be specified."
                }
              },
              "description": "Schema of the entry. An entry might not have any schema attached to it."
            },
            "description": {
              "type": "string",
              "description": "Entry description, which can consist of several sentences or paragraphs that describe entry contents. Default value is an empty string."
            },
            "displayName": {
              "type": "string",
              "description": "Display information such as title and description. A short name to identify the entry, for example, \"Analytics Data - Jan 2011\". Default value is an empty string."
            },
            "gcsFilesetSpec": {
              "id": "GoogleCloudDatacatalogV1beta1GcsFilesetSpec",
              "type": "object",
              "properties": {
                "filePatterns": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Required. Patterns to identify a set of files in Google Cloud Storage. See [Cloud Storage documentation](https://cloud.google.com/storage/docs/gsutil/addlhelp/WildcardNames) for more information. Note that bucket wildcards are currently not supported. Examples of valid file_patterns: * `gs://bucket_name/dir/*`: matches all files within `bucket_name/dir` directory. * `gs://bucket_name/dir/**`: matches all files in `bucket_name/dir` spanning all subdirectories. * `gs://bucket_name/file*`: matches files prefixed by `file` in `bucket_name` * `gs://bucket_name/??.txt`: matches files with two characters followed by `.txt` in `bucket_name` * `gs://bucket_name/[aeiou].txt`: matches files that contain a single vowel character followed by `.txt` in `bucket_name` * `gs://bucket_name/[a-m].txt`: matches files that contain `a`, `b`, ... or `m` followed by `.txt` in `bucket_name` * `gs://bucket_name/a/*/b`: matches all files in `bucket_name` that match `a/*/b` pattern, such as `a/c/b`, `a/d/b` * `gs://another_bucket/a.txt`: matches `gs://another_bucket/a.txt` You can combine wildcards to provide more powerful matches, for example: * `gs://bucket_name/[a-m]??.j*g`"
                },
                "sampleGcsFileSpecs": {
                  "type": "array",
                  "items": {
                    "id": "GoogleCloudDatacatalogV1beta1GcsFileSpec",
                    "type": "object",
                    "properties": {
                      "filePath": {
                        "type": "string",
                        "description": "Required. The full file path. Example: `gs://bucket_name/a/b.txt`."
                      },
                      "sizeBytes": {
                        "type": "string",
                        "format": "int64",
                        "readOnly": true,
                        "description": "Output only. The size of the file, in bytes."
                      },
                      "gcsTimestamps": {
                        "id": "GoogleCloudDatacatalogV1beta1SystemTimestamps",
                        "type": "object",
                        "readOnly": true,
                        "properties": {
                          "createTime": {
                            "type": "string",
                            "format": "google-datetime",
                            "description": "The creation time of the resource within the given system."
                          },
                          "expireTime": {
                            "type": "string",
                            "format": "google-datetime",
                            "readOnly": true,
                            "description": "Output only. The expiration time of the resource within the given system. Currently only apllicable to BigQuery resources."
                          },
                          "updateTime": {
                            "type": "string",
                            "format": "google-datetime",
                            "description": "The last-modified time of the resource within the given system."
                          }
                        },
                        "description": "Output only. Timestamps about the Cloud Storage file."
                      }
                    },
                    "description": "Specifications of a single file in Cloud Storage."
                  },
                  "readOnly": true,
                  "description": "Output only. Sample files contained in this fileset, not all files contained in this fileset are represented here."
                }
              },
              "description": "Specification that applies to a Cloud Storage fileset. This is only valid on entries of type FILESET."
            },
            "linkedResource": {
              "type": "string",
              "description": "The resource this metadata entry refers to. For Google Cloud Platform resources, `linked_resource` is the [full name of the resource](https://cloud.google.com/apis/design/resource_names#full_resource_name). For example, the `linked_resource` for a table resource from BigQuery is: * //bigquery.googleapis.com/projects/projectId/datasets/datasetId/tables/tableId Output only when Entry is of type in the EntryType enum. For entries with user_specified_type, this field is optional and defaults to an empty string."
            },
            "integratedSystem": {
              "enum": [
                "INTEGRATED_SYSTEM_UNSPECIFIED",
                "BIGQUERY",
                "CLOUD_PUBSUB"
              ],
              "type": "string",
              "readOnly": true,
              "description": "Output only. This field indicates the entry's source system that Data Catalog integrates with, such as BigQuery or Pub/Sub.",
              "enumDescriptions": [
                "Default unknown system.",
                "BigQuery.",
                "Cloud Pub/Sub."
              ]
            },
            "bigqueryTableSpec": {
              "id": "GoogleCloudDatacatalogV1beta1BigQueryTableSpec",
              "type": "object",
              "properties": {
                "viewSpec": {
                  "id": "GoogleCloudDatacatalogV1beta1ViewSpec",
                  "type": "object",
                  "properties": {
                    "viewQuery": {
                      "type": "string",
                      "readOnly": true,
                      "description": "Output only. The query that defines the table view."
                    }
                  },
                  "description": "Table view specification. This field should only be populated if `table_source_type` is `BIGQUERY_VIEW`."
                },
                "tableSpec": {
                  "id": "GoogleCloudDatacatalogV1beta1TableSpec",
                  "type": "object",
                  "properties": {
                    "groupedEntry": {
                      "type": "string",
                      "readOnly": true,
                      "description": "Output only. If the table is a dated shard, i.e., with name pattern `[prefix]YYYYMMDD`, `grouped_entry` is the Data Catalog resource name of the date sharded grouped entry, for example, `projects/{project_id}/locations/{location}/entrygroups/{entry_group_id}/entries/{entry_id}`. Otherwise, `grouped_entry` is empty."
                    }
                  },
                  "description": "Spec of a BigQuery table. This field should only be populated if `table_source_type` is `BIGQUERY_TABLE`."
                },
                "tableSourceType": {
                  "enum": [
                    "TABLE_SOURCE_TYPE_UNSPECIFIED",
                    "BIGQUERY_VIEW",
                    "BIGQUERY_TABLE",
                    "BIGQUERY_MATERIALIZED_VIEW"
                  ],
                  "type": "string",
                  "readOnly": true,
                  "description": "Output only. The table source type.",
                  "enumDescriptions": [
                    "Default unknown type.",
                    "Table view.",
                    "BigQuery native table.",
                    "BigQuery materialized view."
                  ]
                }
              },
              "description": "Specification that applies to a BigQuery table. This is only valid on entries of type `TABLE`."
            },
            "userSpecifiedType": {
              "type": "string",
              "description": "Entry type if it does not fit any of the input-allowed values listed in `EntryType` enum above. When creating an entry, users should check the enum values first, if nothing matches the entry to be created, then provide a custom value, for example \"my_special_type\". `user_specified_type` strings must begin with a letter or underscore and can only contain letters, numbers, and underscores; are case insensitive; must be at least 1 character and at most 64 characters long. Currently, only FILESET enum value is allowed. All other entries created through Data Catalog must use `user_specified_type`."
            },
            "userSpecifiedSystem": {
              "type": "string",
              "description": "This field indicates the entry's source system that Data Catalog does not integrate with. `user_specified_system` strings must begin with a letter or underscore and can only contain letters, numbers, and underscores; are case insensitive; must be at least 1 character and at most 64 characters long."
            },
            "sourceSystemTimestamps": {
              "id": "GoogleCloudDatacatalogV1beta1SystemTimestamps",
              "type": "object",
              "readOnly": true,
              "properties": {
                "createTime": {
                  "type": "string",
                  "format": "google-datetime",
                  "description": "The creation time of the resource within the given system."
                },
                "expireTime": {
                  "type": "string",
                  "format": "google-datetime",
                  "readOnly": true,
                  "description": "Output only. The expiration time of the resource within the given system. Currently only apllicable to BigQuery resources."
                },
                "updateTime": {
                  "type": "string",
                  "format": "google-datetime",
                  "description": "The last-modified time of the resource within the given system."
                }
              },
              "description": "Output only. Timestamps about the underlying resource, not about this Data Catalog entry. Output only when Entry is of type in the EntryType enum. For entries with user_specified_type, this field is optional and defaults to an empty timestamp."
            },
            "bigqueryDateShardedSpec": {
              "id": "GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpec",
              "type": "object",
              "properties": {
                "dataset": {
                  "type": "string",
                  "readOnly": true,
                  "description": "Output only. The Data Catalog resource name of the dataset entry the current table belongs to, for example, `projects/{project_id}/locations/{location}/entrygroups/{entry_group_id}/entries/{entry_id}`."
                },
                "shardCount": {
                  "type": "string",
                  "format": "int64",
                  "readOnly": true,
                  "description": "Output only. Total number of shards."
                },
                "tablePrefix": {
                  "type": "string",
                  "readOnly": true,
                  "description": "Output only. The table name prefix of the shards. The name of any given shard is `[table_prefix]YYYYMMDD`, for example, for shard `MyTable20180101`, the `table_prefix` is `MyTable`."
                }
              },
              "description": "Specification for a group of BigQuery tables with name pattern `[prefix]YYYYMMDD`. Context: https://cloud.google.com/bigquery/docs/partitioned-tables#partitioning_versus_sharding."
            }
          },
          "description": "Entry Metadata. A Data Catalog Entry resource represents another resource in Google Cloud Platform (such as a BigQuery dataset or a Pub/Sub topic), or outside of Google Cloud Platform. Clients can use the `linked_resource` field in the Entry resource to refer to the original resource ID of the source system. An Entry resource contains resource details, such as its schema. An Entry can also be used to attach flexible metadata, such as a Tag."
        }
      ]
  projects.locations.entryGroups.entries.tags.create:
    description: |-
      Creates a tag on an Entry. Note: The project identified by the `parent` parameter for the [tag](https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.entryGroups.entries.tags/create#path-parameters) and the [tag template](https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.tagTemplates/create#path-parameters) used to create the tag must be from the same organization.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.entryGroups.entries.tags/create
    example:
      inputs: [
        {
          "id": "GoogleCloudDatacatalogV1beta1Tag",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The resource name of the tag in URL format. Example: * projects/{project_id}/locations/{location}/entrygroups/{entry_group_id}/entries/{entry_id}/tags/{tag_id} where `tag_id` is a system-generated identifier. Note that this Tag may not actually be stored in the location in this name."
            },
            "column": {
              "type": "string",
              "description": "Resources like Entry can have schemas associated with them. This scope allows users to attach tags to an individual column based on that schema. For attaching a tag to a nested column, use `.` to separate the column names. Example: * `outer_column.inner_column`"
            },
            "fields": {
              "type": "object",
              "description": "Required. This maps the ID of a tag field to the value of and additional information about that field. Valid field IDs are defined by the tag's template. A tag must have at least 1 field and at most 500 fields.",
              "additionalProperties": {
                "id": "GoogleCloudDatacatalogV1beta1TagField",
                "type": "object",
                "properties": {
                  "order": {
                    "type": "integer",
                    "format": "int32",
                    "readOnly": true,
                    "description": "Output only. The order of this field with respect to other fields in this tag. It can be set in Tag. For example, a higher value can indicate a more important field. The value can be negative. Multiple fields can have the same order, and field orders within a tag do not have to be sequential."
                  },
                  "boolValue": {
                    "type": "boolean",
                    "description": "Holds the value for a tag field with boolean type."
                  },
                  "enumValue": {
                    "id": "GoogleCloudDatacatalogV1beta1TagFieldEnumValue",
                    "type": "object",
                    "properties": {
                      "displayName": {
                        "type": "string",
                        "description": "The display name of the enum value."
                      }
                    },
                    "description": "Holds the value for a tag field with enum type. This value must be one of the allowed values in the definition of this enum."
                  },
                  "displayName": {
                    "type": "string",
                    "readOnly": true,
                    "description": "Output only. The display name of this field."
                  },
                  "doubleValue": {
                    "type": "number",
                    "format": "double",
                    "description": "Holds the value for a tag field with double type."
                  },
                  "stringValue": {
                    "type": "string",
                    "description": "Holds the value for a tag field with string type."
                  },
                  "timestampValue": {
                    "type": "string",
                    "format": "google-datetime",
                    "description": "Holds the value for a tag field with timestamp type."
                  }
                },
                "description": "Contains the value and supporting information for a field within a Tag."
              }
            },
            "template": {
              "type": "string",
              "description": "Required. The resource name of the tag template that this tag uses. Example: * projects/{project_id}/locations/{location}/tagTemplates/{tag_template_id} This field cannot be modified after creation."
            },
            "templateDisplayName": {
              "type": "string",
              "readOnly": true,
              "description": "Output only. The display name of the tag template."
            }
          },
          "description": "Tags are used to attach custom metadata to Data Catalog resources. Tags conform to the specifications within their tag template. See [Data Catalog IAM](https://cloud.google.com/data-catalog/docs/concepts/iam) for information on the permissions needed to create or view tags."
        }
      ]
      outputs: [
        {}
      ]
  projects.locations.entryGroups.entries.tags.delete:
    description: |-
      Deletes a tag.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.entryGroups.entries.tags/delete
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "Empty",
          "type": "object",
          "properties": {},
          "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`."
        }
      ]
  projects.locations.entryGroups.entries.tags.list:
    description: |-
      Lists the tags on an Entry.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.entryGroups.entries.tags/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "GoogleCloudDatacatalogV1beta1ListTagsResponse",
          "type": "object",
          "properties": {
            "tags": {
              "type": "array",
              "items": {
                "id": "GoogleCloudDatacatalogV1beta1Tag",
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The resource name of the tag in URL format. Example: * projects/{project_id}/locations/{location}/entrygroups/{entry_group_id}/entries/{entry_id}/tags/{tag_id} where `tag_id` is a system-generated identifier. Note that this Tag may not actually be stored in the location in this name."
                  },
                  "column": {
                    "type": "string",
                    "description": "Resources like Entry can have schemas associated with them. This scope allows users to attach tags to an individual column based on that schema. For attaching a tag to a nested column, use `.` to separate the column names. Example: * `outer_column.inner_column`"
                  },
                  "fields": {
                    "type": "object",
                    "description": "Required. This maps the ID of a tag field to the value of and additional information about that field. Valid field IDs are defined by the tag's template. A tag must have at least 1 field and at most 500 fields.",
                    "additionalProperties": {
                      "id": "GoogleCloudDatacatalogV1beta1TagField",
                      "type": "object",
                      "properties": {
                        "order": {
                          "type": "integer",
                          "format": "int32",
                          "readOnly": true,
                          "description": "Output only. The order of this field with respect to other fields in this tag. It can be set in Tag. For example, a higher value can indicate a more important field. The value can be negative. Multiple fields can have the same order, and field orders within a tag do not have to be sequential."
                        },
                        "boolValue": {
                          "type": "boolean",
                          "description": "Holds the value for a tag field with boolean type."
                        },
                        "enumValue": {
                          "id": "GoogleCloudDatacatalogV1beta1TagFieldEnumValue",
                          "type": "object",
                          "properties": {
                            "displayName": {
                              "type": "string",
                              "description": "The display name of the enum value."
                            }
                          },
                          "description": "Holds the value for a tag field with enum type. This value must be one of the allowed values in the definition of this enum."
                        },
                        "displayName": {
                          "type": "string",
                          "readOnly": true,
                          "description": "Output only. The display name of this field."
                        },
                        "doubleValue": {
                          "type": "number",
                          "format": "double",
                          "description": "Holds the value for a tag field with double type."
                        },
                        "stringValue": {
                          "type": "string",
                          "description": "Holds the value for a tag field with string type."
                        },
                        "timestampValue": {
                          "type": "string",
                          "format": "google-datetime",
                          "description": "Holds the value for a tag field with timestamp type."
                        }
                      },
                      "description": "Contains the value and supporting information for a field within a Tag."
                    }
                  },
                  "template": {
                    "type": "string",
                    "description": "Required. The resource name of the tag template that this tag uses. Example: * projects/{project_id}/locations/{location}/tagTemplates/{tag_template_id} This field cannot be modified after creation."
                  },
                  "templateDisplayName": {
                    "type": "string",
                    "readOnly": true,
                    "description": "Output only. The display name of the tag template."
                  }
                },
                "description": "Tags are used to attach custom metadata to Data Catalog resources. Tags conform to the specifications within their tag template. See [Data Catalog IAM](https://cloud.google.com/data-catalog/docs/concepts/iam) for information on the permissions needed to create or view tags."
              },
              "description": "Tag details."
            },
            "nextPageToken": {
              "type": "string",
              "description": "Token to retrieve the next page of results. It is set to empty if no items remain in results."
            }
          },
          "description": "Response message for ListTags."
        }
      ]
  projects.locations.entryGroups.entries.tags.patch:
    description: |-
      Updates an existing tag.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.entryGroups.entries.tags/patch
    example:
      inputs: [
        {
          "id": "GoogleCloudDatacatalogV1beta1Tag",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The resource name of the tag in URL format. Example: * projects/{project_id}/locations/{location}/entrygroups/{entry_group_id}/entries/{entry_id}/tags/{tag_id} where `tag_id` is a system-generated identifier. Note that this Tag may not actually be stored in the location in this name."
            },
            "column": {
              "type": "string",
              "description": "Resources like Entry can have schemas associated with them. This scope allows users to attach tags to an individual column based on that schema. For attaching a tag to a nested column, use `.` to separate the column names. Example: * `outer_column.inner_column`"
            },
            "fields": {
              "type": "object",
              "description": "Required. This maps the ID of a tag field to the value of and additional information about that field. Valid field IDs are defined by the tag's template. A tag must have at least 1 field and at most 500 fields.",
              "additionalProperties": {
                "id": "GoogleCloudDatacatalogV1beta1TagField",
                "type": "object",
                "properties": {
                  "order": {
                    "type": "integer",
                    "format": "int32",
                    "readOnly": true,
                    "description": "Output only. The order of this field with respect to other fields in this tag. It can be set in Tag. For example, a higher value can indicate a more important field. The value can be negative. Multiple fields can have the same order, and field orders within a tag do not have to be sequential."
                  },
                  "boolValue": {
                    "type": "boolean",
                    "description": "Holds the value for a tag field with boolean type."
                  },
                  "enumValue": {
                    "id": "GoogleCloudDatacatalogV1beta1TagFieldEnumValue",
                    "type": "object",
                    "properties": {
                      "displayName": {
                        "type": "string",
                        "description": "The display name of the enum value."
                      }
                    },
                    "description": "Holds the value for a tag field with enum type. This value must be one of the allowed values in the definition of this enum."
                  },
                  "displayName": {
                    "type": "string",
                    "readOnly": true,
                    "description": "Output only. The display name of this field."
                  },
                  "doubleValue": {
                    "type": "number",
                    "format": "double",
                    "description": "Holds the value for a tag field with double type."
                  },
                  "stringValue": {
                    "type": "string",
                    "description": "Holds the value for a tag field with string type."
                  },
                  "timestampValue": {
                    "type": "string",
                    "format": "google-datetime",
                    "description": "Holds the value for a tag field with timestamp type."
                  }
                },
                "description": "Contains the value and supporting information for a field within a Tag."
              }
            },
            "template": {
              "type": "string",
              "description": "Required. The resource name of the tag template that this tag uses. Example: * projects/{project_id}/locations/{location}/tagTemplates/{tag_template_id} This field cannot be modified after creation."
            },
            "templateDisplayName": {
              "type": "string",
              "readOnly": true,
              "description": "Output only. The display name of the tag template."
            }
          },
          "description": "Tags are used to attach custom metadata to Data Catalog resources. Tags conform to the specifications within their tag template. See [Data Catalog IAM](https://cloud.google.com/data-catalog/docs/concepts/iam) for information on the permissions needed to create or view tags."
        }
      ]
      outputs: [
        {}
      ]
  projects.locations.entryGroups.entries.testIamPermissions:
    description: |-
      Returns the caller's permissions on a resource. If the resource does not exist, an empty set of permissions is returned (We don't return a `NOT_FOUND` error). Supported resources are: - Tag templates. - Entries. - Entry groups. Note, this method cannot be used to manage policies for BigQuery, Pub/Sub and any external Google Cloud Platform resources synced to Data Catalog. A caller is not required to have Google IAM permission to make this request.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.entryGroups.entries/testIamPermissions
    example:
      inputs: [
        {
          "id": "TestIamPermissionsRequest",
          "type": "object",
          "properties": {
            "permissions": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "The set of permissions to check for the `resource`. Permissions with wildcards (such as '*' or 'storage.*') are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions)."
            }
          },
          "description": "Request message for `TestIamPermissions` method."
        }
      ]
      outputs: [
        {
          "id": "TestIamPermissionsResponse",
          "type": "object",
          "properties": {
            "permissions": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "A subset of `TestPermissionsRequest.permissions` that the caller is allowed."
            }
          },
          "description": "Response message for `TestIamPermissions` method."
        }
      ]
  projects.locations.entryGroups.get:
    description: |-
      Gets an EntryGroup.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.entryGroups/get
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  projects.locations.entryGroups.getIamPolicy:
    description: |-
      Gets the access control policy for a resource. A `NOT_FOUND` error is returned if the resource does not exist. An empty policy is returned if the resource exists but does not have a policy set on it. Supported resources are: - Tag templates. - Entries. - Entry groups. Note, this method cannot be used to manage policies for BigQuery, Pub/Sub and any external Google Cloud Platform resources synced to Data Catalog. Callers must have following Google IAM permission - `datacatalog.tagTemplates.getIamPolicy` to get policies on tag templates. - `datacatalog.entries.getIamPolicy` to get policies on entries. - `datacatalog.entryGroups.getIamPolicy` to get policies on entry groups.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.entryGroups/getIamPolicy
    example:
      inputs: [
        {
          "id": "GetIamPolicyRequest",
          "type": "object",
          "properties": {
            "options": {
              "id": "GetPolicyOptions",
              "type": "object",
              "properties": {
                "requestedPolicyVersion": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Optional. The policy format version to be returned. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional bindings must specify version 3. Policies without any conditional bindings may specify any valid value or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies)."
                }
              },
              "description": "OPTIONAL: A `GetPolicyOptions` object for specifying options to `GetIamPolicy`."
            }
          },
          "description": "Request message for `GetIamPolicy` method."
        }
      ]
      outputs: [
        {
          "id": "Policy",
          "type": "object",
          "properties": {
            "etag": {
              "type": "string",
              "format": "byte",
              "description": "`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost."
            },
            "version": {
              "type": "integer",
              "format": "int32",
              "description": "Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies)."
            },
            "bindings": {
              "type": "array",
              "items": {
                "id": "Binding",
                "type": "object",
                "properties": {
                  "role": {
                    "type": "string",
                    "description": "Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`."
                  },
                  "members": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. "
                  },
                  "condition": {
                    "id": "Expr",
                    "type": "object",
                    "properties": {
                      "title": {
                        "type": "string",
                        "description": "Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression."
                      },
                      "location": {
                        "type": "string",
                        "description": "Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file."
                      },
                      "expression": {
                        "type": "string",
                        "description": "Textual representation of an expression in Common Expression Language syntax."
                      },
                      "description": {
                        "type": "string",
                        "description": "Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI."
                      }
                    },
                    "description": "The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies)."
                  }
                },
                "description": "Associates `members` with a `role`."
              },
              "description": "Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member."
            }
          },
          "description": "An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { \"bindings\": [ { \"role\": \"roles/resourcemanager.organizationAdmin\", \"members\": [ \"user:mike@example.com\", \"group:admins@example.com\", \"domain:google.com\", \"serviceAccount:my-project-id@appspot.gserviceaccount.com\" ] }, { \"role\": \"roles/resourcemanager.organizationViewer\", \"members\": [ \"user:eve@example.com\" ], \"condition\": { \"title\": \"expirable access\", \"description\": \"Does not grant access after Sep 2020\", \"expression\": \"request.time < timestamp('2020-10-01T00:00:00.000Z')\", } } ], \"etag\": \"BwWWja0YfJA=\", \"version\": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/)."
        }
      ]
  projects.locations.entryGroups.list:
    description: |-
      Lists entry groups.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.entryGroups/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "GoogleCloudDatacatalogV1beta1ListEntryGroupsResponse",
          "type": "object",
          "properties": {
            "entryGroups": {
              "type": "array",
              "items": {
                "id": "GoogleCloudDatacatalogV1beta1EntryGroup",
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The resource name of the entry group in URL format. Example: * projects/{project_id}/locations/{location}/entryGroups/{entry_group_id} Note that this EntryGroup and its child resources may not actually be stored in the location in this name."
                  },
                  "description": {
                    "type": "string",
                    "description": "Entry group description, which can consist of several sentences or paragraphs that describe entry group contents. Default value is an empty string."
                  },
                  "displayName": {
                    "type": "string",
                    "description": "A short name to identify the entry group, for example, \"analytics data - jan 2011\". Default value is an empty string."
                  },
                  "dataCatalogTimestamps": {
                    "id": "GoogleCloudDatacatalogV1beta1SystemTimestamps",
                    "type": "object",
                    "readOnly": true,
                    "properties": {
                      "createTime": {
                        "type": "string",
                        "format": "google-datetime",
                        "description": "The creation time of the resource within the given system."
                      },
                      "expireTime": {
                        "type": "string",
                        "format": "google-datetime",
                        "readOnly": true,
                        "description": "Output only. The expiration time of the resource within the given system. Currently only apllicable to BigQuery resources."
                      },
                      "updateTime": {
                        "type": "string",
                        "format": "google-datetime",
                        "description": "The last-modified time of the resource within the given system."
                      }
                    },
                    "description": "Output only. Timestamps about this EntryGroup. Default value is empty timestamps."
                  }
                },
                "description": "EntryGroup Metadata. An EntryGroup resource represents a logical grouping of zero or more Data Catalog Entry resources."
              },
              "description": "EntryGroup details."
            },
            "nextPageToken": {
              "type": "string",
              "description": "Token to retrieve the next page of results. It is set to empty if no items remain in results."
            }
          },
          "description": "Response message for ListEntryGroups."
        }
      ]
  projects.locations.entryGroups.patch:
    description: |-
      Updates an EntryGroup. The user should enable the Data Catalog API in the project identified by the `entry_group.name` parameter (see [Data Catalog Resource Project] (https://cloud.google.com/data-catalog/docs/concepts/resource-project) for more information).
    versions:
      from: 1.0.0
    link: https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.entryGroups/patch
    example:
      inputs: [
        {
          "id": "GoogleCloudDatacatalogV1beta1EntryGroup",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The resource name of the entry group in URL format. Example: * projects/{project_id}/locations/{location}/entryGroups/{entry_group_id} Note that this EntryGroup and its child resources may not actually be stored in the location in this name."
            },
            "description": {
              "type": "string",
              "description": "Entry group description, which can consist of several sentences or paragraphs that describe entry group contents. Default value is an empty string."
            },
            "displayName": {
              "type": "string",
              "description": "A short name to identify the entry group, for example, \"analytics data - jan 2011\". Default value is an empty string."
            },
            "dataCatalogTimestamps": {
              "id": "GoogleCloudDatacatalogV1beta1SystemTimestamps",
              "type": "object",
              "readOnly": true,
              "properties": {
                "createTime": {
                  "type": "string",
                  "format": "google-datetime",
                  "description": "The creation time of the resource within the given system."
                },
                "expireTime": {
                  "type": "string",
                  "format": "google-datetime",
                  "readOnly": true,
                  "description": "Output only. The expiration time of the resource within the given system. Currently only apllicable to BigQuery resources."
                },
                "updateTime": {
                  "type": "string",
                  "format": "google-datetime",
                  "description": "The last-modified time of the resource within the given system."
                }
              },
              "description": "Output only. Timestamps about this EntryGroup. Default value is empty timestamps."
            }
          },
          "description": "EntryGroup Metadata. An EntryGroup resource represents a logical grouping of zero or more Data Catalog Entry resources."
        }
      ]
      outputs: [
        {}
      ]
  projects.locations.entryGroups.setIamPolicy:
    description: |-
      Sets the access control policy for a resource. Replaces any existing policy. Supported resources are: - Tag templates. - Entries. - Entry groups. Note, this method cannot be used to manage policies for BigQuery, Pub/Sub and any external Google Cloud Platform resources synced to Data Catalog. Callers must have following Google IAM permission - `datacatalog.tagTemplates.setIamPolicy` to set policies on tag templates. - `datacatalog.entries.setIamPolicy` to set policies on entries. - `datacatalog.entryGroups.setIamPolicy` to set policies on entry groups.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.entryGroups/setIamPolicy
    example:
      inputs: [
        {
          "id": "SetIamPolicyRequest",
          "type": "object",
          "properties": {
            "policy": {
              "id": "Policy",
              "type": "object",
              "properties": {
                "etag": {
                  "type": "string",
                  "format": "byte",
                  "description": "`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost."
                },
                "version": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies)."
                },
                "bindings": {
                  "type": "array",
                  "items": {
                    "id": "Binding",
                    "type": "object",
                    "properties": {
                      "role": {
                        "type": "string",
                        "description": "Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`."
                      },
                      "members": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. "
                      },
                      "condition": {
                        "id": "Expr",
                        "type": "object",
                        "properties": {
                          "title": {
                            "type": "string",
                            "description": "Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression."
                          },
                          "location": {
                            "type": "string",
                            "description": "Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file."
                          },
                          "expression": {
                            "type": "string",
                            "description": "Textual representation of an expression in Common Expression Language syntax."
                          },
                          "description": {
                            "type": "string",
                            "description": "Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI."
                          }
                        },
                        "description": "The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies)."
                      }
                    },
                    "description": "Associates `members` with a `role`."
                  },
                  "description": "Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member."
                }
              },
              "description": "An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { \"bindings\": [ { \"role\": \"roles/resourcemanager.organizationAdmin\", \"members\": [ \"user:mike@example.com\", \"group:admins@example.com\", \"domain:google.com\", \"serviceAccount:my-project-id@appspot.gserviceaccount.com\" ] }, { \"role\": \"roles/resourcemanager.organizationViewer\", \"members\": [ \"user:eve@example.com\" ], \"condition\": { \"title\": \"expirable access\", \"description\": \"Does not grant access after Sep 2020\", \"expression\": \"request.time < timestamp('2020-10-01T00:00:00.000Z')\", } } ], \"etag\": \"BwWWja0YfJA=\", \"version\": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/)."
            }
          },
          "description": "Request message for `SetIamPolicy` method."
        }
      ]
      outputs: [
        {
          "id": "Policy",
          "type": "object",
          "properties": {
            "etag": {
              "type": "string",
              "format": "byte",
              "description": "`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost."
            },
            "version": {
              "type": "integer",
              "format": "int32",
              "description": "Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies)."
            },
            "bindings": {
              "type": "array",
              "items": {
                "id": "Binding",
                "type": "object",
                "properties": {
                  "role": {
                    "type": "string",
                    "description": "Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`."
                  },
                  "members": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. "
                  },
                  "condition": {
                    "id": "Expr",
                    "type": "object",
                    "properties": {
                      "title": {
                        "type": "string",
                        "description": "Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression."
                      },
                      "location": {
                        "type": "string",
                        "description": "Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file."
                      },
                      "expression": {
                        "type": "string",
                        "description": "Textual representation of an expression in Common Expression Language syntax."
                      },
                      "description": {
                        "type": "string",
                        "description": "Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI."
                      }
                    },
                    "description": "The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies)."
                  }
                },
                "description": "Associates `members` with a `role`."
              },
              "description": "Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member."
            }
          },
          "description": "An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { \"bindings\": [ { \"role\": \"roles/resourcemanager.organizationAdmin\", \"members\": [ \"user:mike@example.com\", \"group:admins@example.com\", \"domain:google.com\", \"serviceAccount:my-project-id@appspot.gserviceaccount.com\" ] }, { \"role\": \"roles/resourcemanager.organizationViewer\", \"members\": [ \"user:eve@example.com\" ], \"condition\": { \"title\": \"expirable access\", \"description\": \"Does not grant access after Sep 2020\", \"expression\": \"request.time < timestamp('2020-10-01T00:00:00.000Z')\", } } ], \"etag\": \"BwWWja0YfJA=\", \"version\": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/)."
        }
      ]
  projects.locations.entryGroups.tags.create:
    description: |-
      Creates a tag on an Entry. Note: The project identified by the `parent` parameter for the [tag](https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.entryGroups.entries.tags/create#path-parameters) and the [tag template](https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.tagTemplates/create#path-parameters) used to create the tag must be from the same organization.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.entryGroups.tags/create
    example:
      inputs: [
        {
          "id": "GoogleCloudDatacatalogV1beta1Tag",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The resource name of the tag in URL format. Example: * projects/{project_id}/locations/{location}/entrygroups/{entry_group_id}/entries/{entry_id}/tags/{tag_id} where `tag_id` is a system-generated identifier. Note that this Tag may not actually be stored in the location in this name."
            },
            "column": {
              "type": "string",
              "description": "Resources like Entry can have schemas associated with them. This scope allows users to attach tags to an individual column based on that schema. For attaching a tag to a nested column, use `.` to separate the column names. Example: * `outer_column.inner_column`"
            },
            "fields": {
              "type": "object",
              "description": "Required. This maps the ID of a tag field to the value of and additional information about that field. Valid field IDs are defined by the tag's template. A tag must have at least 1 field and at most 500 fields.",
              "additionalProperties": {
                "id": "GoogleCloudDatacatalogV1beta1TagField",
                "type": "object",
                "properties": {
                  "order": {
                    "type": "integer",
                    "format": "int32",
                    "readOnly": true,
                    "description": "Output only. The order of this field with respect to other fields in this tag. It can be set in Tag. For example, a higher value can indicate a more important field. The value can be negative. Multiple fields can have the same order, and field orders within a tag do not have to be sequential."
                  },
                  "boolValue": {
                    "type": "boolean",
                    "description": "Holds the value for a tag field with boolean type."
                  },
                  "enumValue": {
                    "id": "GoogleCloudDatacatalogV1beta1TagFieldEnumValue",
                    "type": "object",
                    "properties": {
                      "displayName": {
                        "type": "string",
                        "description": "The display name of the enum value."
                      }
                    },
                    "description": "Holds the value for a tag field with enum type. This value must be one of the allowed values in the definition of this enum."
                  },
                  "displayName": {
                    "type": "string",
                    "readOnly": true,
                    "description": "Output only. The display name of this field."
                  },
                  "doubleValue": {
                    "type": "number",
                    "format": "double",
                    "description": "Holds the value for a tag field with double type."
                  },
                  "stringValue": {
                    "type": "string",
                    "description": "Holds the value for a tag field with string type."
                  },
                  "timestampValue": {
                    "type": "string",
                    "format": "google-datetime",
                    "description": "Holds the value for a tag field with timestamp type."
                  }
                },
                "description": "Contains the value and supporting information for a field within a Tag."
              }
            },
            "template": {
              "type": "string",
              "description": "Required. The resource name of the tag template that this tag uses. Example: * projects/{project_id}/locations/{location}/tagTemplates/{tag_template_id} This field cannot be modified after creation."
            },
            "templateDisplayName": {
              "type": "string",
              "readOnly": true,
              "description": "Output only. The display name of the tag template."
            }
          },
          "description": "Tags are used to attach custom metadata to Data Catalog resources. Tags conform to the specifications within their tag template. See [Data Catalog IAM](https://cloud.google.com/data-catalog/docs/concepts/iam) for information on the permissions needed to create or view tags."
        }
      ]
      outputs: [
        {}
      ]
  projects.locations.entryGroups.tags.delete:
    description: |-
      Deletes a tag.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.entryGroups.tags/delete
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "Empty",
          "type": "object",
          "properties": {},
          "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`."
        }
      ]
  projects.locations.entryGroups.tags.list:
    description: |-
      Lists the tags on an Entry.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.entryGroups.tags/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "GoogleCloudDatacatalogV1beta1ListTagsResponse",
          "type": "object",
          "properties": {
            "tags": {
              "type": "array",
              "items": {
                "id": "GoogleCloudDatacatalogV1beta1Tag",
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The resource name of the tag in URL format. Example: * projects/{project_id}/locations/{location}/entrygroups/{entry_group_id}/entries/{entry_id}/tags/{tag_id} where `tag_id` is a system-generated identifier. Note that this Tag may not actually be stored in the location in this name."
                  },
                  "column": {
                    "type": "string",
                    "description": "Resources like Entry can have schemas associated with them. This scope allows users to attach tags to an individual column based on that schema. For attaching a tag to a nested column, use `.` to separate the column names. Example: * `outer_column.inner_column`"
                  },
                  "fields": {
                    "type": "object",
                    "description": "Required. This maps the ID of a tag field to the value of and additional information about that field. Valid field IDs are defined by the tag's template. A tag must have at least 1 field and at most 500 fields.",
                    "additionalProperties": {
                      "id": "GoogleCloudDatacatalogV1beta1TagField",
                      "type": "object",
                      "properties": {
                        "order": {
                          "type": "integer",
                          "format": "int32",
                          "readOnly": true,
                          "description": "Output only. The order of this field with respect to other fields in this tag. It can be set in Tag. For example, a higher value can indicate a more important field. The value can be negative. Multiple fields can have the same order, and field orders within a tag do not have to be sequential."
                        },
                        "boolValue": {
                          "type": "boolean",
                          "description": "Holds the value for a tag field with boolean type."
                        },
                        "enumValue": {
                          "id": "GoogleCloudDatacatalogV1beta1TagFieldEnumValue",
                          "type": "object",
                          "properties": {
                            "displayName": {
                              "type": "string",
                              "description": "The display name of the enum value."
                            }
                          },
                          "description": "Holds the value for a tag field with enum type. This value must be one of the allowed values in the definition of this enum."
                        },
                        "displayName": {
                          "type": "string",
                          "readOnly": true,
                          "description": "Output only. The display name of this field."
                        },
                        "doubleValue": {
                          "type": "number",
                          "format": "double",
                          "description": "Holds the value for a tag field with double type."
                        },
                        "stringValue": {
                          "type": "string",
                          "description": "Holds the value for a tag field with string type."
                        },
                        "timestampValue": {
                          "type": "string",
                          "format": "google-datetime",
                          "description": "Holds the value for a tag field with timestamp type."
                        }
                      },
                      "description": "Contains the value and supporting information for a field within a Tag."
                    }
                  },
                  "template": {
                    "type": "string",
                    "description": "Required. The resource name of the tag template that this tag uses. Example: * projects/{project_id}/locations/{location}/tagTemplates/{tag_template_id} This field cannot be modified after creation."
                  },
                  "templateDisplayName": {
                    "type": "string",
                    "readOnly": true,
                    "description": "Output only. The display name of the tag template."
                  }
                },
                "description": "Tags are used to attach custom metadata to Data Catalog resources. Tags conform to the specifications within their tag template. See [Data Catalog IAM](https://cloud.google.com/data-catalog/docs/concepts/iam) for information on the permissions needed to create or view tags."
              },
              "description": "Tag details."
            },
            "nextPageToken": {
              "type": "string",
              "description": "Token to retrieve the next page of results. It is set to empty if no items remain in results."
            }
          },
          "description": "Response message for ListTags."
        }
      ]
  projects.locations.entryGroups.tags.patch:
    description: |-
      Updates an existing tag.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.entryGroups.tags/patch
    example:
      inputs: [
        {
          "id": "GoogleCloudDatacatalogV1beta1Tag",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The resource name of the tag in URL format. Example: * projects/{project_id}/locations/{location}/entrygroups/{entry_group_id}/entries/{entry_id}/tags/{tag_id} where `tag_id` is a system-generated identifier. Note that this Tag may not actually be stored in the location in this name."
            },
            "column": {
              "type": "string",
              "description": "Resources like Entry can have schemas associated with them. This scope allows users to attach tags to an individual column based on that schema. For attaching a tag to a nested column, use `.` to separate the column names. Example: * `outer_column.inner_column`"
            },
            "fields": {
              "type": "object",
              "description": "Required. This maps the ID of a tag field to the value of and additional information about that field. Valid field IDs are defined by the tag's template. A tag must have at least 1 field and at most 500 fields.",
              "additionalProperties": {
                "id": "GoogleCloudDatacatalogV1beta1TagField",
                "type": "object",
                "properties": {
                  "order": {
                    "type": "integer",
                    "format": "int32",
                    "readOnly": true,
                    "description": "Output only. The order of this field with respect to other fields in this tag. It can be set in Tag. For example, a higher value can indicate a more important field. The value can be negative. Multiple fields can have the same order, and field orders within a tag do not have to be sequential."
                  },
                  "boolValue": {
                    "type": "boolean",
                    "description": "Holds the value for a tag field with boolean type."
                  },
                  "enumValue": {
                    "id": "GoogleCloudDatacatalogV1beta1TagFieldEnumValue",
                    "type": "object",
                    "properties": {
                      "displayName": {
                        "type": "string",
                        "description": "The display name of the enum value."
                      }
                    },
                    "description": "Holds the value for a tag field with enum type. This value must be one of the allowed values in the definition of this enum."
                  },
                  "displayName": {
                    "type": "string",
                    "readOnly": true,
                    "description": "Output only. The display name of this field."
                  },
                  "doubleValue": {
                    "type": "number",
                    "format": "double",
                    "description": "Holds the value for a tag field with double type."
                  },
                  "stringValue": {
                    "type": "string",
                    "description": "Holds the value for a tag field with string type."
                  },
                  "timestampValue": {
                    "type": "string",
                    "format": "google-datetime",
                    "description": "Holds the value for a tag field with timestamp type."
                  }
                },
                "description": "Contains the value and supporting information for a field within a Tag."
              }
            },
            "template": {
              "type": "string",
              "description": "Required. The resource name of the tag template that this tag uses. Example: * projects/{project_id}/locations/{location}/tagTemplates/{tag_template_id} This field cannot be modified after creation."
            },
            "templateDisplayName": {
              "type": "string",
              "readOnly": true,
              "description": "Output only. The display name of the tag template."
            }
          },
          "description": "Tags are used to attach custom metadata to Data Catalog resources. Tags conform to the specifications within their tag template. See [Data Catalog IAM](https://cloud.google.com/data-catalog/docs/concepts/iam) for information on the permissions needed to create or view tags."
        }
      ]
      outputs: [
        {}
      ]
  projects.locations.entryGroups.testIamPermissions:
    description: |-
      Returns the caller's permissions on a resource. If the resource does not exist, an empty set of permissions is returned (We don't return a `NOT_FOUND` error). Supported resources are: - Tag templates. - Entries. - Entry groups. Note, this method cannot be used to manage policies for BigQuery, Pub/Sub and any external Google Cloud Platform resources synced to Data Catalog. A caller is not required to have Google IAM permission to make this request.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.entryGroups/testIamPermissions
    example:
      inputs: [
        {
          "id": "TestIamPermissionsRequest",
          "type": "object",
          "properties": {
            "permissions": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "The set of permissions to check for the `resource`. Permissions with wildcards (such as '*' or 'storage.*') are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions)."
            }
          },
          "description": "Request message for `TestIamPermissions` method."
        }
      ]
      outputs: [
        {
          "id": "TestIamPermissionsResponse",
          "type": "object",
          "properties": {
            "permissions": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "A subset of `TestPermissionsRequest.permissions` that the caller is allowed."
            }
          },
          "description": "Response message for `TestIamPermissions` method."
        }
      ]
  projects.locations.tagTemplates.create:
    description: |-
      Creates a tag template. The user should enable the Data Catalog API in the project identified by the `parent` parameter (see [Data Catalog Resource Project](https://cloud.google.com/data-catalog/docs/concepts/resource-project) for more information).
    versions:
      from: 1.0.0
    link: https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.tagTemplates/create
    example:
      inputs: [
        {
          "id": "GoogleCloudDatacatalogV1beta1TagTemplate",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The resource name of the tag template in URL format. Example: * projects/{project_id}/locations/{location}/tagTemplates/{tag_template_id} Note that this TagTemplate and its child resources may not actually be stored in the location in this name."
            },
            "fields": {
              "type": "object",
              "description": "Required. Map of tag template field IDs to the settings for the field. This map is an exhaustive list of the allowed fields. This map must contain at least one field and at most 500 fields. The keys to this map are tag template field IDs. Field IDs can contain letters (both uppercase and lowercase), numbers (0-9) and underscores (_). Field IDs must be at least 1 character long and at most 64 characters long. Field IDs must start with a letter or underscore.",
              "additionalProperties": {
                "id": "GoogleCloudDatacatalogV1beta1TagTemplateField",
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "readOnly": true,
                    "description": "Output only. The resource name of the tag template field in URL format. Example: * projects/{project_id}/locations/{location}/tagTemplates/{tag_template}/fields/{field} Note that this TagTemplateField may not actually be stored in the location in this name."
                  },
                  "type": {
                    "id": "GoogleCloudDatacatalogV1beta1FieldType",
                    "type": "object",
                    "properties": {
                      "enumType": {
                        "id": "GoogleCloudDatacatalogV1beta1FieldTypeEnumType",
                        "type": "object",
                        "properties": {
                          "allowedValues": {
                            "type": "array",
                            "items": {
                              "id": "GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValue",
                              "type": "object",
                              "properties": {
                                "displayName": {
                                  "type": "string",
                                  "description": "Required. The display name of the enum value. Must not be an empty string."
                                }
                              }
                            }
                          }
                        },
                        "description": "Represents an enum type."
                      },
                      "primitiveType": {
                        "enum": [
                          "PRIMITIVE_TYPE_UNSPECIFIED",
                          "DOUBLE",
                          "STRING",
                          "BOOL",
                          "TIMESTAMP"
                        ],
                        "type": "string",
                        "description": "Represents primitive types - string, bool etc.",
                        "enumDescriptions": [
                          "This is the default invalid value for a type.",
                          "A double precision number.",
                          "An UTF-8 string.",
                          "A boolean value.",
                          "A timestamp."
                        ]
                      }
                    },
                    "description": "Required. The type of value this tag field can contain."
                  },
                  "order": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The order of this field with respect to other fields in this tag template. A higher value indicates a more important field. The value can be negative. Multiple fields can have the same order, and field orders within a tag do not have to be sequential."
                  },
                  "isRequired": {
                    "type": "boolean",
                    "description": "Whether this is a required field. Defaults to false."
                  },
                  "description": {
                    "type": "string",
                    "description": "The description for this field. Defaults to an empty string."
                  },
                  "displayName": {
                    "type": "string",
                    "description": "The display name for this field. Defaults to an empty string."
                  }
                },
                "description": "The template for an individual field within a tag template."
              }
            },
            "displayName": {
              "type": "string",
              "description": "The display name for this template. Defaults to an empty string."
            }
          },
          "description": "A tag template defines a tag, which can have one or more typed fields. The template is used to create and attach the tag to GCP resources. [Tag template roles](https://cloud.google.com/iam/docs/understanding-roles#data-catalog-roles) provide permissions to create, edit, and use the template. See, for example, the [TagTemplate User](https://cloud.google.com/data-catalog/docs/how-to/template-user) role, which includes permission to use the tag template to tag resources."
        }
      ]
      outputs: [
        {}
      ]
  projects.locations.tagTemplates.delete:
    description: |-
      Deletes a tag template and all tags using the template. Users should enable the Data Catalog API in the project identified by the `name` parameter (see [Data Catalog Resource Project] (https://cloud.google.com/data-catalog/docs/concepts/resource-project) for more information).
    versions:
      from: 1.0.0
    link: https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.tagTemplates/delete
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "Empty",
          "type": "object",
          "properties": {},
          "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`."
        }
      ]
  projects.locations.tagTemplates.fields.create:
    description: |-
      Creates a field in a tag template. The user should enable the Data Catalog API in the project identified by the `parent` parameter (see [Data Catalog Resource Project](https://cloud.google.com/data-catalog/docs/concepts/resource-project) for more information).
    versions:
      from: 1.0.0
    link: https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.tagTemplates.fields/create
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "GoogleCloudDatacatalogV1beta1TagTemplateField",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "readOnly": true,
              "description": "Output only. The resource name of the tag template field in URL format. Example: * projects/{project_id}/locations/{location}/tagTemplates/{tag_template}/fields/{field} Note that this TagTemplateField may not actually be stored in the location in this name."
            },
            "type": {
              "id": "GoogleCloudDatacatalogV1beta1FieldType",
              "type": "object",
              "properties": {
                "enumType": {
                  "id": "GoogleCloudDatacatalogV1beta1FieldTypeEnumType",
                  "type": "object",
                  "properties": {
                    "allowedValues": {
                      "type": "array",
                      "items": {
                        "id": "GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValue",
                        "type": "object",
                        "properties": {
                          "displayName": {
                            "type": "string",
                            "description": "Required. The display name of the enum value. Must not be an empty string."
                          }
                        }
                      }
                    }
                  },
                  "description": "Represents an enum type."
                },
                "primitiveType": {
                  "enum": [
                    "PRIMITIVE_TYPE_UNSPECIFIED",
                    "DOUBLE",
                    "STRING",
                    "BOOL",
                    "TIMESTAMP"
                  ],
                  "type": "string",
                  "description": "Represents primitive types - string, bool etc.",
                  "enumDescriptions": [
                    "This is the default invalid value for a type.",
                    "A double precision number.",
                    "An UTF-8 string.",
                    "A boolean value.",
                    "A timestamp."
                  ]
                }
              },
              "description": "Required. The type of value this tag field can contain."
            },
            "order": {
              "type": "integer",
              "format": "int32",
              "description": "The order of this field with respect to other fields in this tag template. A higher value indicates a more important field. The value can be negative. Multiple fields can have the same order, and field orders within a tag do not have to be sequential."
            },
            "isRequired": {
              "type": "boolean",
              "description": "Whether this is a required field. Defaults to false."
            },
            "description": {
              "type": "string",
              "description": "The description for this field. Defaults to an empty string."
            },
            "displayName": {
              "type": "string",
              "description": "The display name for this field. Defaults to an empty string."
            }
          },
          "description": "The template for an individual field within a tag template."
        }
      ]
  projects.locations.tagTemplates.fields.delete:
    description: |-
      Deletes a field in a tag template and all uses of that field. Users should enable the Data Catalog API in the project identified by the `name` parameter (see [Data Catalog Resource Project] (https://cloud.google.com/data-catalog/docs/concepts/resource-project) for more information).
    versions:
      from: 1.0.0
    link: https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.tagTemplates.fields/delete
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "Empty",
          "type": "object",
          "properties": {},
          "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`."
        }
      ]
  projects.locations.tagTemplates.fields.enumValues.rename:
    description: |-
      Renames an enum value in a tag template. The enum values have to be unique within one enum field. Thus, an enum value cannot be renamed with a name used in any other enum value within the same enum field.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.tagTemplates.fields.enumValues/rename
    example:
      inputs: [
        {
          "id": "GoogleCloudDatacatalogV1beta1RenameTagTemplateFieldEnumValueRequest",
          "type": "object",
          "properties": {
            "newEnumValueDisplayName": {
              "type": "string",
              "description": "Required. The new display name of the enum value. For example, `my_new_enum_value`."
            }
          },
          "description": "Request message for RenameTagTemplateFieldEnumValue."
        }
      ]
      outputs: [
        {
          "id": "GoogleCloudDatacatalogV1beta1TagTemplateField",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "readOnly": true,
              "description": "Output only. The resource name of the tag template field in URL format. Example: * projects/{project_id}/locations/{location}/tagTemplates/{tag_template}/fields/{field} Note that this TagTemplateField may not actually be stored in the location in this name."
            },
            "type": {
              "id": "GoogleCloudDatacatalogV1beta1FieldType",
              "type": "object",
              "properties": {
                "enumType": {
                  "id": "GoogleCloudDatacatalogV1beta1FieldTypeEnumType",
                  "type": "object",
                  "properties": {
                    "allowedValues": {
                      "type": "array",
                      "items": {
                        "id": "GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValue",
                        "type": "object",
                        "properties": {
                          "displayName": {
                            "type": "string",
                            "description": "Required. The display name of the enum value. Must not be an empty string."
                          }
                        }
                      }
                    }
                  },
                  "description": "Represents an enum type."
                },
                "primitiveType": {
                  "enum": [
                    "PRIMITIVE_TYPE_UNSPECIFIED",
                    "DOUBLE",
                    "STRING",
                    "BOOL",
                    "TIMESTAMP"
                  ],
                  "type": "string",
                  "description": "Represents primitive types - string, bool etc.",
                  "enumDescriptions": [
                    "This is the default invalid value for a type.",
                    "A double precision number.",
                    "An UTF-8 string.",
                    "A boolean value.",
                    "A timestamp."
                  ]
                }
              },
              "description": "Required. The type of value this tag field can contain."
            },
            "order": {
              "type": "integer",
              "format": "int32",
              "description": "The order of this field with respect to other fields in this tag template. A higher value indicates a more important field. The value can be negative. Multiple fields can have the same order, and field orders within a tag do not have to be sequential."
            },
            "isRequired": {
              "type": "boolean",
              "description": "Whether this is a required field. Defaults to false."
            },
            "description": {
              "type": "string",
              "description": "The description for this field. Defaults to an empty string."
            },
            "displayName": {
              "type": "string",
              "description": "The display name for this field. Defaults to an empty string."
            }
          },
          "description": "The template for an individual field within a tag template."
        }
      ]
  projects.locations.tagTemplates.fields.patch:
    description: |-
      Updates a field in a tag template. This method cannot be used to update the field type. Users should enable the Data Catalog API in the project identified by the `name` parameter (see [Data Catalog Resource Project] (https://cloud.google.com/data-catalog/docs/concepts/resource-project) for more information).
    versions:
      from: 1.0.0
    link: https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.tagTemplates.fields/patch
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "GoogleCloudDatacatalogV1beta1TagTemplateField",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "readOnly": true,
              "description": "Output only. The resource name of the tag template field in URL format. Example: * projects/{project_id}/locations/{location}/tagTemplates/{tag_template}/fields/{field} Note that this TagTemplateField may not actually be stored in the location in this name."
            },
            "type": {
              "id": "GoogleCloudDatacatalogV1beta1FieldType",
              "type": "object",
              "properties": {
                "enumType": {
                  "id": "GoogleCloudDatacatalogV1beta1FieldTypeEnumType",
                  "type": "object",
                  "properties": {
                    "allowedValues": {
                      "type": "array",
                      "items": {
                        "id": "GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValue",
                        "type": "object",
                        "properties": {
                          "displayName": {
                            "type": "string",
                            "description": "Required. The display name of the enum value. Must not be an empty string."
                          }
                        }
                      }
                    }
                  },
                  "description": "Represents an enum type."
                },
                "primitiveType": {
                  "enum": [
                    "PRIMITIVE_TYPE_UNSPECIFIED",
                    "DOUBLE",
                    "STRING",
                    "BOOL",
                    "TIMESTAMP"
                  ],
                  "type": "string",
                  "description": "Represents primitive types - string, bool etc.",
                  "enumDescriptions": [
                    "This is the default invalid value for a type.",
                    "A double precision number.",
                    "An UTF-8 string.",
                    "A boolean value.",
                    "A timestamp."
                  ]
                }
              },
              "description": "Required. The type of value this tag field can contain."
            },
            "order": {
              "type": "integer",
              "format": "int32",
              "description": "The order of this field with respect to other fields in this tag template. A higher value indicates a more important field. The value can be negative. Multiple fields can have the same order, and field orders within a tag do not have to be sequential."
            },
            "isRequired": {
              "type": "boolean",
              "description": "Whether this is a required field. Defaults to false."
            },
            "description": {
              "type": "string",
              "description": "The description for this field. Defaults to an empty string."
            },
            "displayName": {
              "type": "string",
              "description": "The display name for this field. Defaults to an empty string."
            }
          },
          "description": "The template for an individual field within a tag template."
        }
      ]
  projects.locations.tagTemplates.fields.rename:
    description: |-
      Renames a field in a tag template. The user should enable the Data Catalog API in the project identified by the `name` parameter (see [Data Catalog Resource Project](https://cloud.google.com/data-catalog/docs/concepts/resource-project) for more information).
    versions:
      from: 1.0.0
    link: https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.tagTemplates.fields/rename
    example:
      inputs: [
        {
          "id": "GoogleCloudDatacatalogV1beta1RenameTagTemplateFieldRequest",
          "type": "object",
          "properties": {
            "newTagTemplateFieldId": {
              "type": "string",
              "description": "Required. The new ID of this tag template field. For example, `my_new_field`."
            }
          },
          "description": "Request message for RenameTagTemplateField."
        }
      ]
      outputs: [
        {
          "id": "GoogleCloudDatacatalogV1beta1TagTemplateField",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "readOnly": true,
              "description": "Output only. The resource name of the tag template field in URL format. Example: * projects/{project_id}/locations/{location}/tagTemplates/{tag_template}/fields/{field} Note that this TagTemplateField may not actually be stored in the location in this name."
            },
            "type": {
              "id": "GoogleCloudDatacatalogV1beta1FieldType",
              "type": "object",
              "properties": {
                "enumType": {
                  "id": "GoogleCloudDatacatalogV1beta1FieldTypeEnumType",
                  "type": "object",
                  "properties": {
                    "allowedValues": {
                      "type": "array",
                      "items": {
                        "id": "GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValue",
                        "type": "object",
                        "properties": {
                          "displayName": {
                            "type": "string",
                            "description": "Required. The display name of the enum value. Must not be an empty string."
                          }
                        }
                      }
                    }
                  },
                  "description": "Represents an enum type."
                },
                "primitiveType": {
                  "enum": [
                    "PRIMITIVE_TYPE_UNSPECIFIED",
                    "DOUBLE",
                    "STRING",
                    "BOOL",
                    "TIMESTAMP"
                  ],
                  "type": "string",
                  "description": "Represents primitive types - string, bool etc.",
                  "enumDescriptions": [
                    "This is the default invalid value for a type.",
                    "A double precision number.",
                    "An UTF-8 string.",
                    "A boolean value.",
                    "A timestamp."
                  ]
                }
              },
              "description": "Required. The type of value this tag field can contain."
            },
            "order": {
              "type": "integer",
              "format": "int32",
              "description": "The order of this field with respect to other fields in this tag template. A higher value indicates a more important field. The value can be negative. Multiple fields can have the same order, and field orders within a tag do not have to be sequential."
            },
            "isRequired": {
              "type": "boolean",
              "description": "Whether this is a required field. Defaults to false."
            },
            "description": {
              "type": "string",
              "description": "The description for this field. Defaults to an empty string."
            },
            "displayName": {
              "type": "string",
              "description": "The display name for this field. Defaults to an empty string."
            }
          },
          "description": "The template for an individual field within a tag template."
        }
      ]
  projects.locations.tagTemplates.get:
    description: |-
      Gets a tag template.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.tagTemplates/get
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  projects.locations.tagTemplates.getIamPolicy:
    description: |-
      Gets the access control policy for a resource. A `NOT_FOUND` error is returned if the resource does not exist. An empty policy is returned if the resource exists but does not have a policy set on it. Supported resources are: - Tag templates. - Entries. - Entry groups. Note, this method cannot be used to manage policies for BigQuery, Pub/Sub and any external Google Cloud Platform resources synced to Data Catalog. Callers must have following Google IAM permission - `datacatalog.tagTemplates.getIamPolicy` to get policies on tag templates. - `datacatalog.entries.getIamPolicy` to get policies on entries. - `datacatalog.entryGroups.getIamPolicy` to get policies on entry groups.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.tagTemplates/getIamPolicy
    example:
      inputs: [
        {
          "id": "GetIamPolicyRequest",
          "type": "object",
          "properties": {
            "options": {
              "id": "GetPolicyOptions",
              "type": "object",
              "properties": {
                "requestedPolicyVersion": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Optional. The policy format version to be returned. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional bindings must specify version 3. Policies without any conditional bindings may specify any valid value or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies)."
                }
              },
              "description": "OPTIONAL: A `GetPolicyOptions` object for specifying options to `GetIamPolicy`."
            }
          },
          "description": "Request message for `GetIamPolicy` method."
        }
      ]
      outputs: [
        {
          "id": "Policy",
          "type": "object",
          "properties": {
            "etag": {
              "type": "string",
              "format": "byte",
              "description": "`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost."
            },
            "version": {
              "type": "integer",
              "format": "int32",
              "description": "Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies)."
            },
            "bindings": {
              "type": "array",
              "items": {
                "id": "Binding",
                "type": "object",
                "properties": {
                  "role": {
                    "type": "string",
                    "description": "Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`."
                  },
                  "members": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. "
                  },
                  "condition": {
                    "id": "Expr",
                    "type": "object",
                    "properties": {
                      "title": {
                        "type": "string",
                        "description": "Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression."
                      },
                      "location": {
                        "type": "string",
                        "description": "Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file."
                      },
                      "expression": {
                        "type": "string",
                        "description": "Textual representation of an expression in Common Expression Language syntax."
                      },
                      "description": {
                        "type": "string",
                        "description": "Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI."
                      }
                    },
                    "description": "The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies)."
                  }
                },
                "description": "Associates `members` with a `role`."
              },
              "description": "Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member."
            }
          },
          "description": "An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { \"bindings\": [ { \"role\": \"roles/resourcemanager.organizationAdmin\", \"members\": [ \"user:mike@example.com\", \"group:admins@example.com\", \"domain:google.com\", \"serviceAccount:my-project-id@appspot.gserviceaccount.com\" ] }, { \"role\": \"roles/resourcemanager.organizationViewer\", \"members\": [ \"user:eve@example.com\" ], \"condition\": { \"title\": \"expirable access\", \"description\": \"Does not grant access after Sep 2020\", \"expression\": \"request.time < timestamp('2020-10-01T00:00:00.000Z')\", } } ], \"etag\": \"BwWWja0YfJA=\", \"version\": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/)."
        }
      ]
  projects.locations.tagTemplates.patch:
    description: |-
      Updates a tag template. This method cannot be used to update the fields of a template. The tag template fields are represented as separate resources and should be updated using their own create/update/delete methods. Users should enable the Data Catalog API in the project identified by the `tag_template.name` parameter (see [Data Catalog Resource Project] (https://cloud.google.com/data-catalog/docs/concepts/resource-project) for more information).
    versions:
      from: 1.0.0
    link: https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.tagTemplates/patch
    example:
      inputs: [
        {
          "id": "GoogleCloudDatacatalogV1beta1TagTemplate",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The resource name of the tag template in URL format. Example: * projects/{project_id}/locations/{location}/tagTemplates/{tag_template_id} Note that this TagTemplate and its child resources may not actually be stored in the location in this name."
            },
            "fields": {
              "type": "object",
              "description": "Required. Map of tag template field IDs to the settings for the field. This map is an exhaustive list of the allowed fields. This map must contain at least one field and at most 500 fields. The keys to this map are tag template field IDs. Field IDs can contain letters (both uppercase and lowercase), numbers (0-9) and underscores (_). Field IDs must be at least 1 character long and at most 64 characters long. Field IDs must start with a letter or underscore.",
              "additionalProperties": {
                "id": "GoogleCloudDatacatalogV1beta1TagTemplateField",
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "readOnly": true,
                    "description": "Output only. The resource name of the tag template field in URL format. Example: * projects/{project_id}/locations/{location}/tagTemplates/{tag_template}/fields/{field} Note that this TagTemplateField may not actually be stored in the location in this name."
                  },
                  "type": {
                    "id": "GoogleCloudDatacatalogV1beta1FieldType",
                    "type": "object",
                    "properties": {
                      "enumType": {
                        "id": "GoogleCloudDatacatalogV1beta1FieldTypeEnumType",
                        "type": "object",
                        "properties": {
                          "allowedValues": {
                            "type": "array",
                            "items": {
                              "id": "GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValue",
                              "type": "object",
                              "properties": {
                                "displayName": {
                                  "type": "string",
                                  "description": "Required. The display name of the enum value. Must not be an empty string."
                                }
                              }
                            }
                          }
                        },
                        "description": "Represents an enum type."
                      },
                      "primitiveType": {
                        "enum": [
                          "PRIMITIVE_TYPE_UNSPECIFIED",
                          "DOUBLE",
                          "STRING",
                          "BOOL",
                          "TIMESTAMP"
                        ],
                        "type": "string",
                        "description": "Represents primitive types - string, bool etc.",
                        "enumDescriptions": [
                          "This is the default invalid value for a type.",
                          "A double precision number.",
                          "An UTF-8 string.",
                          "A boolean value.",
                          "A timestamp."
                        ]
                      }
                    },
                    "description": "Required. The type of value this tag field can contain."
                  },
                  "order": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The order of this field with respect to other fields in this tag template. A higher value indicates a more important field. The value can be negative. Multiple fields can have the same order, and field orders within a tag do not have to be sequential."
                  },
                  "isRequired": {
                    "type": "boolean",
                    "description": "Whether this is a required field. Defaults to false."
                  },
                  "description": {
                    "type": "string",
                    "description": "The description for this field. Defaults to an empty string."
                  },
                  "displayName": {
                    "type": "string",
                    "description": "The display name for this field. Defaults to an empty string."
                  }
                },
                "description": "The template for an individual field within a tag template."
              }
            },
            "displayName": {
              "type": "string",
              "description": "The display name for this template. Defaults to an empty string."
            }
          },
          "description": "A tag template defines a tag, which can have one or more typed fields. The template is used to create and attach the tag to GCP resources. [Tag template roles](https://cloud.google.com/iam/docs/understanding-roles#data-catalog-roles) provide permissions to create, edit, and use the template. See, for example, the [TagTemplate User](https://cloud.google.com/data-catalog/docs/how-to/template-user) role, which includes permission to use the tag template to tag resources."
        }
      ]
      outputs: [
        {}
      ]
  projects.locations.tagTemplates.setIamPolicy:
    description: |-
      Sets the access control policy for a resource. Replaces any existing policy. Supported resources are: - Tag templates. - Entries. - Entry groups. Note, this method cannot be used to manage policies for BigQuery, Pub/Sub and any external Google Cloud Platform resources synced to Data Catalog. Callers must have following Google IAM permission - `datacatalog.tagTemplates.setIamPolicy` to set policies on tag templates. - `datacatalog.entries.setIamPolicy` to set policies on entries. - `datacatalog.entryGroups.setIamPolicy` to set policies on entry groups.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.tagTemplates/setIamPolicy
    example:
      inputs: [
        {
          "id": "SetIamPolicyRequest",
          "type": "object",
          "properties": {
            "policy": {
              "id": "Policy",
              "type": "object",
              "properties": {
                "etag": {
                  "type": "string",
                  "format": "byte",
                  "description": "`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost."
                },
                "version": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies)."
                },
                "bindings": {
                  "type": "array",
                  "items": {
                    "id": "Binding",
                    "type": "object",
                    "properties": {
                      "role": {
                        "type": "string",
                        "description": "Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`."
                      },
                      "members": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. "
                      },
                      "condition": {
                        "id": "Expr",
                        "type": "object",
                        "properties": {
                          "title": {
                            "type": "string",
                            "description": "Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression."
                          },
                          "location": {
                            "type": "string",
                            "description": "Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file."
                          },
                          "expression": {
                            "type": "string",
                            "description": "Textual representation of an expression in Common Expression Language syntax."
                          },
                          "description": {
                            "type": "string",
                            "description": "Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI."
                          }
                        },
                        "description": "The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies)."
                      }
                    },
                    "description": "Associates `members` with a `role`."
                  },
                  "description": "Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member."
                }
              },
              "description": "An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { \"bindings\": [ { \"role\": \"roles/resourcemanager.organizationAdmin\", \"members\": [ \"user:mike@example.com\", \"group:admins@example.com\", \"domain:google.com\", \"serviceAccount:my-project-id@appspot.gserviceaccount.com\" ] }, { \"role\": \"roles/resourcemanager.organizationViewer\", \"members\": [ \"user:eve@example.com\" ], \"condition\": { \"title\": \"expirable access\", \"description\": \"Does not grant access after Sep 2020\", \"expression\": \"request.time < timestamp('2020-10-01T00:00:00.000Z')\", } } ], \"etag\": \"BwWWja0YfJA=\", \"version\": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/)."
            }
          },
          "description": "Request message for `SetIamPolicy` method."
        }
      ]
      outputs: [
        {
          "id": "Policy",
          "type": "object",
          "properties": {
            "etag": {
              "type": "string",
              "format": "byte",
              "description": "`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost."
            },
            "version": {
              "type": "integer",
              "format": "int32",
              "description": "Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies)."
            },
            "bindings": {
              "type": "array",
              "items": {
                "id": "Binding",
                "type": "object",
                "properties": {
                  "role": {
                    "type": "string",
                    "description": "Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`."
                  },
                  "members": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. "
                  },
                  "condition": {
                    "id": "Expr",
                    "type": "object",
                    "properties": {
                      "title": {
                        "type": "string",
                        "description": "Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression."
                      },
                      "location": {
                        "type": "string",
                        "description": "Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file."
                      },
                      "expression": {
                        "type": "string",
                        "description": "Textual representation of an expression in Common Expression Language syntax."
                      },
                      "description": {
                        "type": "string",
                        "description": "Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI."
                      }
                    },
                    "description": "The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies)."
                  }
                },
                "description": "Associates `members` with a `role`."
              },
              "description": "Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member."
            }
          },
          "description": "An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { \"bindings\": [ { \"role\": \"roles/resourcemanager.organizationAdmin\", \"members\": [ \"user:mike@example.com\", \"group:admins@example.com\", \"domain:google.com\", \"serviceAccount:my-project-id@appspot.gserviceaccount.com\" ] }, { \"role\": \"roles/resourcemanager.organizationViewer\", \"members\": [ \"user:eve@example.com\" ], \"condition\": { \"title\": \"expirable access\", \"description\": \"Does not grant access after Sep 2020\", \"expression\": \"request.time < timestamp('2020-10-01T00:00:00.000Z')\", } } ], \"etag\": \"BwWWja0YfJA=\", \"version\": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/)."
        }
      ]
  projects.locations.tagTemplates.testIamPermissions:
    description: |-
      Returns the caller's permissions on a resource. If the resource does not exist, an empty set of permissions is returned (We don't return a `NOT_FOUND` error). Supported resources are: - Tag templates. - Entries. - Entry groups. Note, this method cannot be used to manage policies for BigQuery, Pub/Sub and any external Google Cloud Platform resources synced to Data Catalog. A caller is not required to have Google IAM permission to make this request.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.tagTemplates/testIamPermissions
    example:
      inputs: [
        {
          "id": "TestIamPermissionsRequest",
          "type": "object",
          "properties": {
            "permissions": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "The set of permissions to check for the `resource`. Permissions with wildcards (such as '*' or 'storage.*') are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions)."
            }
          },
          "description": "Request message for `TestIamPermissions` method."
        }
      ]
      outputs: [
        {
          "id": "TestIamPermissionsResponse",
          "type": "object",
          "properties": {
            "permissions": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "A subset of `TestPermissionsRequest.permissions` that the caller is allowed."
            }
          },
          "description": "Response message for `TestIamPermissions` method."
        }
      ]
  projects.locations.taxonomies.create:
    description: |-
      Creates a taxonomy in the specified project.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.taxonomies/create
    example:
      inputs: [
        {
          "id": "GoogleCloudDatacatalogV1beta1Taxonomy",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "readOnly": true,
              "description": "Output only. Resource name of this taxonomy, whose format is: \"projects/{project_number}/locations/{location_id}/taxonomies/{id}\"."
            },
            "description": {
              "type": "string",
              "description": "Optional. Description of this taxonomy. It must: contain only unicode characters, tabs, newlines, carriage returns and page breaks; and be at most 2000 bytes long when encoded in UTF-8. If not set, defaults to an empty description."
            },
            "displayName": {
              "type": "string",
              "description": "Required. User defined name of this taxonomy. It must: contain only unicode letters, numbers, underscores, dashes and spaces; not start or end with spaces; and be at most 200 bytes long when encoded in UTF-8."
            },
            "policyTagCount": {
              "type": "integer",
              "format": "int32",
              "readOnly": true,
              "description": "Output only. Number of policy tags contained in this taxonomy."
            },
            "taxonomyTimestamps": {
              "id": "GoogleCloudDatacatalogV1beta1SystemTimestamps",
              "type": "object",
              "readOnly": true,
              "properties": {
                "createTime": {
                  "type": "string",
                  "format": "google-datetime",
                  "description": "The creation time of the resource within the given system."
                },
                "expireTime": {
                  "type": "string",
                  "format": "google-datetime",
                  "readOnly": true,
                  "description": "Output only. The expiration time of the resource within the given system. Currently only apllicable to BigQuery resources."
                },
                "updateTime": {
                  "type": "string",
                  "format": "google-datetime",
                  "description": "The last-modified time of the resource within the given system."
                }
              },
              "description": "Output only. Timestamps about this taxonomy. Only create_time and update_time are used."
            },
            "activatedPolicyTypes": {
              "type": "array",
              "items": {
                "enum": [
                  "POLICY_TYPE_UNSPECIFIED",
                  "FINE_GRAINED_ACCESS_CONTROL"
                ],
                "type": "string",
                "enumDescriptions": [
                  "Unspecified policy type.",
                  "Fine grained access control policy, which enables access control on tagged resources."
                ]
              },
              "description": "Optional. A list of policy types that are activated for this taxonomy. If not set, defaults to an empty list."
            }
          },
          "description": "A taxonomy is a collection of policy tags that classify data along a common axis. For instance a data *sensitivity* taxonomy could contain policy tags denoting PII such as age, zipcode, and SSN. A data *origin* taxonomy could contain policy tags to distinguish user data, employee data, partner data, public data."
        }
      ]
      outputs: [
        {}
      ]
  projects.locations.taxonomies.delete:
    description: |-
      Deletes a taxonomy. This operation will also delete all policy tags in this taxonomy along with their associated policies.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.taxonomies/delete
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "Empty",
          "type": "object",
          "properties": {},
          "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`."
        }
      ]
  projects.locations.taxonomies.export:
    description: |-
      Exports all taxonomies and their policy tags in a project. This method generates SerializedTaxonomy protos with nested policy tags that can be used as an input for future ImportTaxonomies calls.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.taxonomies/export
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "GoogleCloudDatacatalogV1beta1ExportTaxonomiesResponse",
          "type": "object",
          "properties": {
            "taxonomies": {
              "type": "array",
              "items": {
                "id": "GoogleCloudDatacatalogV1beta1SerializedTaxonomy",
                "type": "object",
                "properties": {
                  "policyTags": {
                    "type": "array",
                    "items": {
                      "id": "GoogleCloudDatacatalogV1beta1SerializedPolicyTag",
                      "type": "object",
                      "properties": {
                        "policyTag": {
                          "type": "string",
                          "description": "Resource name of the policy tag. This field will be ignored when calling ImportTaxonomies."
                        },
                        "description": {
                          "type": "string",
                          "description": "Description of the serialized policy tag. The length of the description is limited to 2000 bytes when encoded in UTF-8. If not set, defaults to an empty description."
                        },
                        "displayName": {
                          "type": "string",
                          "description": "Required. Display name of the policy tag. Max 200 bytes when encoded in UTF-8."
                        },
                        "childPolicyTags": {
                          "type": "array",
                          "items": {},
                          "description": "Children of the policy tag if any."
                        }
                      },
                      "description": "Message representing one policy tag when exported as a nested proto."
                    },
                    "description": "Top level policy tags associated with the taxonomy if any."
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of the serialized taxonomy. The length of the description is limited to 2000 bytes when encoded in UTF-8. If not set, defaults to an empty description."
                  },
                  "displayName": {
                    "type": "string",
                    "description": "Required. Display name of the taxonomy. Max 200 bytes when encoded in UTF-8."
                  },
                  "activatedPolicyTypes": {
                    "type": "array",
                    "items": {
                      "enum": [
                        "POLICY_TYPE_UNSPECIFIED",
                        "FINE_GRAINED_ACCESS_CONTROL"
                      ],
                      "type": "string",
                      "enumDescriptions": [
                        "Unspecified policy type.",
                        "Fine grained access control policy, which enables access control on tagged resources."
                      ]
                    },
                    "description": "A list of policy types that are activated for a taxonomy."
                  }
                },
                "description": "Message capturing a taxonomy and its policy tag hierarchy as a nested proto. Used for taxonomy import/export and mutation."
              },
              "description": "List of taxonomies and policy tags in a tree structure."
            }
          },
          "description": "Response message for ExportTaxonomies."
        }
      ]
  projects.locations.taxonomies.get:
    description: |-
      Gets a taxonomy.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.taxonomies/get
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  projects.locations.taxonomies.getIamPolicy:
    description: |-
      Gets the IAM policy for a taxonomy or a policy tag.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.taxonomies/getIamPolicy
    example:
      inputs: [
        {
          "id": "GetIamPolicyRequest",
          "type": "object",
          "properties": {
            "options": {
              "id": "GetPolicyOptions",
              "type": "object",
              "properties": {
                "requestedPolicyVersion": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Optional. The policy format version to be returned. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional bindings must specify version 3. Policies without any conditional bindings may specify any valid value or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies)."
                }
              },
              "description": "OPTIONAL: A `GetPolicyOptions` object for specifying options to `GetIamPolicy`."
            }
          },
          "description": "Request message for `GetIamPolicy` method."
        }
      ]
      outputs: [
        {
          "id": "Policy",
          "type": "object",
          "properties": {
            "etag": {
              "type": "string",
              "format": "byte",
              "description": "`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost."
            },
            "version": {
              "type": "integer",
              "format": "int32",
              "description": "Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies)."
            },
            "bindings": {
              "type": "array",
              "items": {
                "id": "Binding",
                "type": "object",
                "properties": {
                  "role": {
                    "type": "string",
                    "description": "Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`."
                  },
                  "members": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. "
                  },
                  "condition": {
                    "id": "Expr",
                    "type": "object",
                    "properties": {
                      "title": {
                        "type": "string",
                        "description": "Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression."
                      },
                      "location": {
                        "type": "string",
                        "description": "Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file."
                      },
                      "expression": {
                        "type": "string",
                        "description": "Textual representation of an expression in Common Expression Language syntax."
                      },
                      "description": {
                        "type": "string",
                        "description": "Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI."
                      }
                    },
                    "description": "The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies)."
                  }
                },
                "description": "Associates `members` with a `role`."
              },
              "description": "Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member."
            }
          },
          "description": "An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { \"bindings\": [ { \"role\": \"roles/resourcemanager.organizationAdmin\", \"members\": [ \"user:mike@example.com\", \"group:admins@example.com\", \"domain:google.com\", \"serviceAccount:my-project-id@appspot.gserviceaccount.com\" ] }, { \"role\": \"roles/resourcemanager.organizationViewer\", \"members\": [ \"user:eve@example.com\" ], \"condition\": { \"title\": \"expirable access\", \"description\": \"Does not grant access after Sep 2020\", \"expression\": \"request.time < timestamp('2020-10-01T00:00:00.000Z')\", } } ], \"etag\": \"BwWWja0YfJA=\", \"version\": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/)."
        }
      ]
  projects.locations.taxonomies.import:
    description: |-
      Imports all taxonomies and their policy tags to a project as new taxonomies. This method provides a bulk taxonomy / policy tag creation using nested proto structure.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.taxonomies/import
    example:
      inputs: [
        {
          "id": "GoogleCloudDatacatalogV1beta1ImportTaxonomiesRequest",
          "type": "object",
          "properties": {
            "inlineSource": {
              "id": "GoogleCloudDatacatalogV1beta1InlineSource",
              "type": "object",
              "properties": {
                "taxonomies": {
                  "type": "array",
                  "items": {
                    "id": "GoogleCloudDatacatalogV1beta1SerializedTaxonomy",
                    "type": "object",
                    "properties": {
                      "policyTags": {
                        "type": "array",
                        "items": {
                          "id": "GoogleCloudDatacatalogV1beta1SerializedPolicyTag",
                          "type": "object",
                          "properties": {
                            "policyTag": {
                              "type": "string",
                              "description": "Resource name of the policy tag. This field will be ignored when calling ImportTaxonomies."
                            },
                            "description": {
                              "type": "string",
                              "description": "Description of the serialized policy tag. The length of the description is limited to 2000 bytes when encoded in UTF-8. If not set, defaults to an empty description."
                            },
                            "displayName": {
                              "type": "string",
                              "description": "Required. Display name of the policy tag. Max 200 bytes when encoded in UTF-8."
                            },
                            "childPolicyTags": {
                              "type": "array",
                              "items": {},
                              "description": "Children of the policy tag if any."
                            }
                          },
                          "description": "Message representing one policy tag when exported as a nested proto."
                        },
                        "description": "Top level policy tags associated with the taxonomy if any."
                      },
                      "description": {
                        "type": "string",
                        "description": "Description of the serialized taxonomy. The length of the description is limited to 2000 bytes when encoded in UTF-8. If not set, defaults to an empty description."
                      },
                      "displayName": {
                        "type": "string",
                        "description": "Required. Display name of the taxonomy. Max 200 bytes when encoded in UTF-8."
                      },
                      "activatedPolicyTypes": {
                        "type": "array",
                        "items": {
                          "enum": [
                            "POLICY_TYPE_UNSPECIFIED",
                            "FINE_GRAINED_ACCESS_CONTROL"
                          ],
                          "type": "string",
                          "enumDescriptions": [
                            "Unspecified policy type.",
                            "Fine grained access control policy, which enables access control on tagged resources."
                          ]
                        },
                        "description": "A list of policy types that are activated for a taxonomy."
                      }
                    },
                    "description": "Message capturing a taxonomy and its policy tag hierarchy as a nested proto. Used for taxonomy import/export and mutation."
                  },
                  "description": "Required. Taxonomies to be imported."
                }
              },
              "description": "Inline source used for taxonomies to be imported."
            }
          },
          "description": "Request message for ImportTaxonomies."
        }
      ]
      outputs: [
        {
          "id": "GoogleCloudDatacatalogV1beta1ImportTaxonomiesResponse",
          "type": "object",
          "properties": {
            "taxonomies": {
              "type": "array",
              "items": {
                "id": "GoogleCloudDatacatalogV1beta1Taxonomy",
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "readOnly": true,
                    "description": "Output only. Resource name of this taxonomy, whose format is: \"projects/{project_number}/locations/{location_id}/taxonomies/{id}\"."
                  },
                  "description": {
                    "type": "string",
                    "description": "Optional. Description of this taxonomy. It must: contain only unicode characters, tabs, newlines, carriage returns and page breaks; and be at most 2000 bytes long when encoded in UTF-8. If not set, defaults to an empty description."
                  },
                  "displayName": {
                    "type": "string",
                    "description": "Required. User defined name of this taxonomy. It must: contain only unicode letters, numbers, underscores, dashes and spaces; not start or end with spaces; and be at most 200 bytes long when encoded in UTF-8."
                  },
                  "policyTagCount": {
                    "type": "integer",
                    "format": "int32",
                    "readOnly": true,
                    "description": "Output only. Number of policy tags contained in this taxonomy."
                  },
                  "taxonomyTimestamps": {
                    "id": "GoogleCloudDatacatalogV1beta1SystemTimestamps",
                    "type": "object",
                    "readOnly": true,
                    "properties": {
                      "createTime": {
                        "type": "string",
                        "format": "google-datetime",
                        "description": "The creation time of the resource within the given system."
                      },
                      "expireTime": {
                        "type": "string",
                        "format": "google-datetime",
                        "readOnly": true,
                        "description": "Output only. The expiration time of the resource within the given system. Currently only apllicable to BigQuery resources."
                      },
                      "updateTime": {
                        "type": "string",
                        "format": "google-datetime",
                        "description": "The last-modified time of the resource within the given system."
                      }
                    },
                    "description": "Output only. Timestamps about this taxonomy. Only create_time and update_time are used."
                  },
                  "activatedPolicyTypes": {
                    "type": "array",
                    "items": {
                      "enum": [
                        "POLICY_TYPE_UNSPECIFIED",
                        "FINE_GRAINED_ACCESS_CONTROL"
                      ],
                      "type": "string",
                      "enumDescriptions": [
                        "Unspecified policy type.",
                        "Fine grained access control policy, which enables access control on tagged resources."
                      ]
                    },
                    "description": "Optional. A list of policy types that are activated for this taxonomy. If not set, defaults to an empty list."
                  }
                },
                "description": "A taxonomy is a collection of policy tags that classify data along a common axis. For instance a data *sensitivity* taxonomy could contain policy tags denoting PII such as age, zipcode, and SSN. A data *origin* taxonomy could contain policy tags to distinguish user data, employee data, partner data, public data."
              },
              "description": "Taxonomies that were imported."
            }
          },
          "description": "Response message for ImportTaxonomies."
        }
      ]
  projects.locations.taxonomies.list:
    description: |-
      Lists all taxonomies in a project in a particular location that the caller has permission to view.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.taxonomies/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "GoogleCloudDatacatalogV1beta1ListTaxonomiesResponse",
          "type": "object",
          "properties": {
            "taxonomies": {
              "type": "array",
              "items": {
                "id": "GoogleCloudDatacatalogV1beta1Taxonomy",
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "readOnly": true,
                    "description": "Output only. Resource name of this taxonomy, whose format is: \"projects/{project_number}/locations/{location_id}/taxonomies/{id}\"."
                  },
                  "description": {
                    "type": "string",
                    "description": "Optional. Description of this taxonomy. It must: contain only unicode characters, tabs, newlines, carriage returns and page breaks; and be at most 2000 bytes long when encoded in UTF-8. If not set, defaults to an empty description."
                  },
                  "displayName": {
                    "type": "string",
                    "description": "Required. User defined name of this taxonomy. It must: contain only unicode letters, numbers, underscores, dashes and spaces; not start or end with spaces; and be at most 200 bytes long when encoded in UTF-8."
                  },
                  "policyTagCount": {
                    "type": "integer",
                    "format": "int32",
                    "readOnly": true,
                    "description": "Output only. Number of policy tags contained in this taxonomy."
                  },
                  "taxonomyTimestamps": {
                    "id": "GoogleCloudDatacatalogV1beta1SystemTimestamps",
                    "type": "object",
                    "readOnly": true,
                    "properties": {
                      "createTime": {
                        "type": "string",
                        "format": "google-datetime",
                        "description": "The creation time of the resource within the given system."
                      },
                      "expireTime": {
                        "type": "string",
                        "format": "google-datetime",
                        "readOnly": true,
                        "description": "Output only. The expiration time of the resource within the given system. Currently only apllicable to BigQuery resources."
                      },
                      "updateTime": {
                        "type": "string",
                        "format": "google-datetime",
                        "description": "The last-modified time of the resource within the given system."
                      }
                    },
                    "description": "Output only. Timestamps about this taxonomy. Only create_time and update_time are used."
                  },
                  "activatedPolicyTypes": {
                    "type": "array",
                    "items": {
                      "enum": [
                        "POLICY_TYPE_UNSPECIFIED",
                        "FINE_GRAINED_ACCESS_CONTROL"
                      ],
                      "type": "string",
                      "enumDescriptions": [
                        "Unspecified policy type.",
                        "Fine grained access control policy, which enables access control on tagged resources."
                      ]
                    },
                    "description": "Optional. A list of policy types that are activated for this taxonomy. If not set, defaults to an empty list."
                  }
                },
                "description": "A taxonomy is a collection of policy tags that classify data along a common axis. For instance a data *sensitivity* taxonomy could contain policy tags denoting PII such as age, zipcode, and SSN. A data *origin* taxonomy could contain policy tags to distinguish user data, employee data, partner data, public data."
              },
              "description": "Taxonomies that the project contains."
            },
            "nextPageToken": {
              "type": "string",
              "description": "Token used to retrieve the next page of results, or empty if there are no more results in the list."
            }
          },
          "description": "Response message for ListTaxonomies."
        }
      ]
  projects.locations.taxonomies.patch:
    description: |-
      Updates a taxonomy.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.taxonomies/patch
    example:
      inputs: [
        {
          "id": "GoogleCloudDatacatalogV1beta1Taxonomy",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "readOnly": true,
              "description": "Output only. Resource name of this taxonomy, whose format is: \"projects/{project_number}/locations/{location_id}/taxonomies/{id}\"."
            },
            "description": {
              "type": "string",
              "description": "Optional. Description of this taxonomy. It must: contain only unicode characters, tabs, newlines, carriage returns and page breaks; and be at most 2000 bytes long when encoded in UTF-8. If not set, defaults to an empty description."
            },
            "displayName": {
              "type": "string",
              "description": "Required. User defined name of this taxonomy. It must: contain only unicode letters, numbers, underscores, dashes and spaces; not start or end with spaces; and be at most 200 bytes long when encoded in UTF-8."
            },
            "policyTagCount": {
              "type": "integer",
              "format": "int32",
              "readOnly": true,
              "description": "Output only. Number of policy tags contained in this taxonomy."
            },
            "taxonomyTimestamps": {
              "id": "GoogleCloudDatacatalogV1beta1SystemTimestamps",
              "type": "object",
              "readOnly": true,
              "properties": {
                "createTime": {
                  "type": "string",
                  "format": "google-datetime",
                  "description": "The creation time of the resource within the given system."
                },
                "expireTime": {
                  "type": "string",
                  "format": "google-datetime",
                  "readOnly": true,
                  "description": "Output only. The expiration time of the resource within the given system. Currently only apllicable to BigQuery resources."
                },
                "updateTime": {
                  "type": "string",
                  "format": "google-datetime",
                  "description": "The last-modified time of the resource within the given system."
                }
              },
              "description": "Output only. Timestamps about this taxonomy. Only create_time and update_time are used."
            },
            "activatedPolicyTypes": {
              "type": "array",
              "items": {
                "enum": [
                  "POLICY_TYPE_UNSPECIFIED",
                  "FINE_GRAINED_ACCESS_CONTROL"
                ],
                "type": "string",
                "enumDescriptions": [
                  "Unspecified policy type.",
                  "Fine grained access control policy, which enables access control on tagged resources."
                ]
              },
              "description": "Optional. A list of policy types that are activated for this taxonomy. If not set, defaults to an empty list."
            }
          },
          "description": "A taxonomy is a collection of policy tags that classify data along a common axis. For instance a data *sensitivity* taxonomy could contain policy tags denoting PII such as age, zipcode, and SSN. A data *origin* taxonomy could contain policy tags to distinguish user data, employee data, partner data, public data."
        }
      ]
      outputs: [
        {}
      ]
  projects.locations.taxonomies.policyTags.create:
    description: |-
      Creates a policy tag in the specified taxonomy.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.taxonomies.policyTags/create
    example:
      inputs: [
        {
          "id": "GoogleCloudDatacatalogV1beta1PolicyTag",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "readOnly": true,
              "description": "Output only. Resource name of this policy tag, whose format is: \"projects/{project_number}/locations/{location_id}/taxonomies/{taxonomy_id}/policyTags/{id}\"."
            },
            "description": {
              "type": "string",
              "description": "Description of this policy tag. It must: contain only unicode characters, tabs, newlines, carriage returns and page breaks; and be at most 2000 bytes long when encoded in UTF-8. If not set, defaults to an empty description. If not set, defaults to an empty description."
            },
            "displayName": {
              "type": "string",
              "description": "Required. User defined name of this policy tag. It must: be unique within the parent taxonomy; contain only unicode letters, numbers, underscores, dashes and spaces; not start or end with spaces; and be at most 200 bytes long when encoded in UTF-8."
            },
            "childPolicyTags": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "readOnly": true,
              "description": "Output only. Resource names of child policy tags of this policy tag."
            },
            "parentPolicyTag": {
              "type": "string",
              "description": "Resource name of this policy tag's parent policy tag (e.g. for the \"LatLong\" policy tag in the example above, this field contains the resource name of the \"Geolocation\" policy tag). If empty, it means this policy tag is a top level policy tag (e.g. this field is empty for the \"Geolocation\" policy tag in the example above). If not set, defaults to an empty string."
            }
          },
          "description": "Denotes one policy tag in a taxonomy (e.g. ssn). Policy Tags can be defined in a hierarchy. For example, consider the following hierarchy: Geolocation -> (LatLong, City, ZipCode). PolicyTag \"Geolocation\" contains three child policy tags: \"LatLong\", \"City\", and \"ZipCode\"."
        }
      ]
      outputs: [
        {}
      ]
  projects.locations.taxonomies.policyTags.delete:
    description: |-
      Deletes a policy tag. Also deletes all of its descendant policy tags.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.taxonomies.policyTags/delete
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "Empty",
          "type": "object",
          "properties": {},
          "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`."
        }
      ]
  projects.locations.taxonomies.policyTags.get:
    description: |-
      Gets a policy tag.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.taxonomies.policyTags/get
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  projects.locations.taxonomies.policyTags.getIamPolicy:
    description: |-
      Gets the IAM policy for a taxonomy or a policy tag.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.taxonomies.policyTags/getIamPolicy
    example:
      inputs: [
        {
          "id": "GetIamPolicyRequest",
          "type": "object",
          "properties": {
            "options": {
              "id": "GetPolicyOptions",
              "type": "object",
              "properties": {
                "requestedPolicyVersion": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Optional. The policy format version to be returned. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional bindings must specify version 3. Policies without any conditional bindings may specify any valid value or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies)."
                }
              },
              "description": "OPTIONAL: A `GetPolicyOptions` object for specifying options to `GetIamPolicy`."
            }
          },
          "description": "Request message for `GetIamPolicy` method."
        }
      ]
      outputs: [
        {
          "id": "Policy",
          "type": "object",
          "properties": {
            "etag": {
              "type": "string",
              "format": "byte",
              "description": "`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost."
            },
            "version": {
              "type": "integer",
              "format": "int32",
              "description": "Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies)."
            },
            "bindings": {
              "type": "array",
              "items": {
                "id": "Binding",
                "type": "object",
                "properties": {
                  "role": {
                    "type": "string",
                    "description": "Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`."
                  },
                  "members": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. "
                  },
                  "condition": {
                    "id": "Expr",
                    "type": "object",
                    "properties": {
                      "title": {
                        "type": "string",
                        "description": "Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression."
                      },
                      "location": {
                        "type": "string",
                        "description": "Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file."
                      },
                      "expression": {
                        "type": "string",
                        "description": "Textual representation of an expression in Common Expression Language syntax."
                      },
                      "description": {
                        "type": "string",
                        "description": "Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI."
                      }
                    },
                    "description": "The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies)."
                  }
                },
                "description": "Associates `members` with a `role`."
              },
              "description": "Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member."
            }
          },
          "description": "An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { \"bindings\": [ { \"role\": \"roles/resourcemanager.organizationAdmin\", \"members\": [ \"user:mike@example.com\", \"group:admins@example.com\", \"domain:google.com\", \"serviceAccount:my-project-id@appspot.gserviceaccount.com\" ] }, { \"role\": \"roles/resourcemanager.organizationViewer\", \"members\": [ \"user:eve@example.com\" ], \"condition\": { \"title\": \"expirable access\", \"description\": \"Does not grant access after Sep 2020\", \"expression\": \"request.time < timestamp('2020-10-01T00:00:00.000Z')\", } } ], \"etag\": \"BwWWja0YfJA=\", \"version\": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/)."
        }
      ]
  projects.locations.taxonomies.policyTags.list:
    description: |-
      Lists all policy tags in a taxonomy.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.taxonomies.policyTags/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "GoogleCloudDatacatalogV1beta1ListPolicyTagsResponse",
          "type": "object",
          "properties": {
            "policyTags": {
              "type": "array",
              "items": {
                "id": "GoogleCloudDatacatalogV1beta1PolicyTag",
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "readOnly": true,
                    "description": "Output only. Resource name of this policy tag, whose format is: \"projects/{project_number}/locations/{location_id}/taxonomies/{taxonomy_id}/policyTags/{id}\"."
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of this policy tag. It must: contain only unicode characters, tabs, newlines, carriage returns and page breaks; and be at most 2000 bytes long when encoded in UTF-8. If not set, defaults to an empty description. If not set, defaults to an empty description."
                  },
                  "displayName": {
                    "type": "string",
                    "description": "Required. User defined name of this policy tag. It must: be unique within the parent taxonomy; contain only unicode letters, numbers, underscores, dashes and spaces; not start or end with spaces; and be at most 200 bytes long when encoded in UTF-8."
                  },
                  "childPolicyTags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "readOnly": true,
                    "description": "Output only. Resource names of child policy tags of this policy tag."
                  },
                  "parentPolicyTag": {
                    "type": "string",
                    "description": "Resource name of this policy tag's parent policy tag (e.g. for the \"LatLong\" policy tag in the example above, this field contains the resource name of the \"Geolocation\" policy tag). If empty, it means this policy tag is a top level policy tag (e.g. this field is empty for the \"Geolocation\" policy tag in the example above). If not set, defaults to an empty string."
                  }
                },
                "description": "Denotes one policy tag in a taxonomy (e.g. ssn). Policy Tags can be defined in a hierarchy. For example, consider the following hierarchy: Geolocation -> (LatLong, City, ZipCode). PolicyTag \"Geolocation\" contains three child policy tags: \"LatLong\", \"City\", and \"ZipCode\"."
              },
              "description": "The policy tags that are in the requested taxonomy."
            },
            "nextPageToken": {
              "type": "string",
              "description": "Token used to retrieve the next page of results, or empty if there are no more results in the list."
            }
          },
          "description": "Response message for ListPolicyTags."
        }
      ]
  projects.locations.taxonomies.policyTags.patch:
    description: |-
      Updates a policy tag.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.taxonomies.policyTags/patch
    example:
      inputs: [
        {
          "id": "GoogleCloudDatacatalogV1beta1PolicyTag",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "readOnly": true,
              "description": "Output only. Resource name of this policy tag, whose format is: \"projects/{project_number}/locations/{location_id}/taxonomies/{taxonomy_id}/policyTags/{id}\"."
            },
            "description": {
              "type": "string",
              "description": "Description of this policy tag. It must: contain only unicode characters, tabs, newlines, carriage returns and page breaks; and be at most 2000 bytes long when encoded in UTF-8. If not set, defaults to an empty description. If not set, defaults to an empty description."
            },
            "displayName": {
              "type": "string",
              "description": "Required. User defined name of this policy tag. It must: be unique within the parent taxonomy; contain only unicode letters, numbers, underscores, dashes and spaces; not start or end with spaces; and be at most 200 bytes long when encoded in UTF-8."
            },
            "childPolicyTags": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "readOnly": true,
              "description": "Output only. Resource names of child policy tags of this policy tag."
            },
            "parentPolicyTag": {
              "type": "string",
              "description": "Resource name of this policy tag's parent policy tag (e.g. for the \"LatLong\" policy tag in the example above, this field contains the resource name of the \"Geolocation\" policy tag). If empty, it means this policy tag is a top level policy tag (e.g. this field is empty for the \"Geolocation\" policy tag in the example above). If not set, defaults to an empty string."
            }
          },
          "description": "Denotes one policy tag in a taxonomy (e.g. ssn). Policy Tags can be defined in a hierarchy. For example, consider the following hierarchy: Geolocation -> (LatLong, City, ZipCode). PolicyTag \"Geolocation\" contains three child policy tags: \"LatLong\", \"City\", and \"ZipCode\"."
        }
      ]
      outputs: [
        {}
      ]
  projects.locations.taxonomies.policyTags.setIamPolicy:
    description: |-
      Sets the IAM policy for a taxonomy or a policy tag.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.taxonomies.policyTags/setIamPolicy
    example:
      inputs: [
        {
          "id": "SetIamPolicyRequest",
          "type": "object",
          "properties": {
            "policy": {
              "id": "Policy",
              "type": "object",
              "properties": {
                "etag": {
                  "type": "string",
                  "format": "byte",
                  "description": "`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost."
                },
                "version": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies)."
                },
                "bindings": {
                  "type": "array",
                  "items": {
                    "id": "Binding",
                    "type": "object",
                    "properties": {
                      "role": {
                        "type": "string",
                        "description": "Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`."
                      },
                      "members": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. "
                      },
                      "condition": {
                        "id": "Expr",
                        "type": "object",
                        "properties": {
                          "title": {
                            "type": "string",
                            "description": "Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression."
                          },
                          "location": {
                            "type": "string",
                            "description": "Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file."
                          },
                          "expression": {
                            "type": "string",
                            "description": "Textual representation of an expression in Common Expression Language syntax."
                          },
                          "description": {
                            "type": "string",
                            "description": "Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI."
                          }
                        },
                        "description": "The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies)."
                      }
                    },
                    "description": "Associates `members` with a `role`."
                  },
                  "description": "Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member."
                }
              },
              "description": "An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { \"bindings\": [ { \"role\": \"roles/resourcemanager.organizationAdmin\", \"members\": [ \"user:mike@example.com\", \"group:admins@example.com\", \"domain:google.com\", \"serviceAccount:my-project-id@appspot.gserviceaccount.com\" ] }, { \"role\": \"roles/resourcemanager.organizationViewer\", \"members\": [ \"user:eve@example.com\" ], \"condition\": { \"title\": \"expirable access\", \"description\": \"Does not grant access after Sep 2020\", \"expression\": \"request.time < timestamp('2020-10-01T00:00:00.000Z')\", } } ], \"etag\": \"BwWWja0YfJA=\", \"version\": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/)."
            }
          },
          "description": "Request message for `SetIamPolicy` method."
        }
      ]
      outputs: [
        {
          "id": "Policy",
          "type": "object",
          "properties": {
            "etag": {
              "type": "string",
              "format": "byte",
              "description": "`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost."
            },
            "version": {
              "type": "integer",
              "format": "int32",
              "description": "Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies)."
            },
            "bindings": {
              "type": "array",
              "items": {
                "id": "Binding",
                "type": "object",
                "properties": {
                  "role": {
                    "type": "string",
                    "description": "Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`."
                  },
                  "members": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. "
                  },
                  "condition": {
                    "id": "Expr",
                    "type": "object",
                    "properties": {
                      "title": {
                        "type": "string",
                        "description": "Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression."
                      },
                      "location": {
                        "type": "string",
                        "description": "Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file."
                      },
                      "expression": {
                        "type": "string",
                        "description": "Textual representation of an expression in Common Expression Language syntax."
                      },
                      "description": {
                        "type": "string",
                        "description": "Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI."
                      }
                    },
                    "description": "The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies)."
                  }
                },
                "description": "Associates `members` with a `role`."
              },
              "description": "Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member."
            }
          },
          "description": "An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { \"bindings\": [ { \"role\": \"roles/resourcemanager.organizationAdmin\", \"members\": [ \"user:mike@example.com\", \"group:admins@example.com\", \"domain:google.com\", \"serviceAccount:my-project-id@appspot.gserviceaccount.com\" ] }, { \"role\": \"roles/resourcemanager.organizationViewer\", \"members\": [ \"user:eve@example.com\" ], \"condition\": { \"title\": \"expirable access\", \"description\": \"Does not grant access after Sep 2020\", \"expression\": \"request.time < timestamp('2020-10-01T00:00:00.000Z')\", } } ], \"etag\": \"BwWWja0YfJA=\", \"version\": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/)."
        }
      ]
  projects.locations.taxonomies.policyTags.testIamPermissions:
    description: |-
      Returns the permissions that a caller has on the specified taxonomy or policy tag.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.taxonomies.policyTags/testIamPermissions
    example:
      inputs: [
        {
          "id": "TestIamPermissionsRequest",
          "type": "object",
          "properties": {
            "permissions": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "The set of permissions to check for the `resource`. Permissions with wildcards (such as '*' or 'storage.*') are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions)."
            }
          },
          "description": "Request message for `TestIamPermissions` method."
        }
      ]
      outputs: [
        {
          "id": "TestIamPermissionsResponse",
          "type": "object",
          "properties": {
            "permissions": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "A subset of `TestPermissionsRequest.permissions` that the caller is allowed."
            }
          },
          "description": "Response message for `TestIamPermissions` method."
        }
      ]
  projects.locations.taxonomies.setIamPolicy:
    description: |-
      Sets the IAM policy for a taxonomy or a policy tag.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.taxonomies/setIamPolicy
    example:
      inputs: [
        {
          "id": "SetIamPolicyRequest",
          "type": "object",
          "properties": {
            "policy": {
              "id": "Policy",
              "type": "object",
              "properties": {
                "etag": {
                  "type": "string",
                  "format": "byte",
                  "description": "`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost."
                },
                "version": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies)."
                },
                "bindings": {
                  "type": "array",
                  "items": {
                    "id": "Binding",
                    "type": "object",
                    "properties": {
                      "role": {
                        "type": "string",
                        "description": "Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`."
                      },
                      "members": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. "
                      },
                      "condition": {
                        "id": "Expr",
                        "type": "object",
                        "properties": {
                          "title": {
                            "type": "string",
                            "description": "Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression."
                          },
                          "location": {
                            "type": "string",
                            "description": "Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file."
                          },
                          "expression": {
                            "type": "string",
                            "description": "Textual representation of an expression in Common Expression Language syntax."
                          },
                          "description": {
                            "type": "string",
                            "description": "Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI."
                          }
                        },
                        "description": "The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies)."
                      }
                    },
                    "description": "Associates `members` with a `role`."
                  },
                  "description": "Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member."
                }
              },
              "description": "An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { \"bindings\": [ { \"role\": \"roles/resourcemanager.organizationAdmin\", \"members\": [ \"user:mike@example.com\", \"group:admins@example.com\", \"domain:google.com\", \"serviceAccount:my-project-id@appspot.gserviceaccount.com\" ] }, { \"role\": \"roles/resourcemanager.organizationViewer\", \"members\": [ \"user:eve@example.com\" ], \"condition\": { \"title\": \"expirable access\", \"description\": \"Does not grant access after Sep 2020\", \"expression\": \"request.time < timestamp('2020-10-01T00:00:00.000Z')\", } } ], \"etag\": \"BwWWja0YfJA=\", \"version\": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/)."
            }
          },
          "description": "Request message for `SetIamPolicy` method."
        }
      ]
      outputs: [
        {
          "id": "Policy",
          "type": "object",
          "properties": {
            "etag": {
              "type": "string",
              "format": "byte",
              "description": "`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost."
            },
            "version": {
              "type": "integer",
              "format": "int32",
              "description": "Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies)."
            },
            "bindings": {
              "type": "array",
              "items": {
                "id": "Binding",
                "type": "object",
                "properties": {
                  "role": {
                    "type": "string",
                    "description": "Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`."
                  },
                  "members": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. "
                  },
                  "condition": {
                    "id": "Expr",
                    "type": "object",
                    "properties": {
                      "title": {
                        "type": "string",
                        "description": "Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression."
                      },
                      "location": {
                        "type": "string",
                        "description": "Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file."
                      },
                      "expression": {
                        "type": "string",
                        "description": "Textual representation of an expression in Common Expression Language syntax."
                      },
                      "description": {
                        "type": "string",
                        "description": "Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI."
                      }
                    },
                    "description": "The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies)."
                  }
                },
                "description": "Associates `members` with a `role`."
              },
              "description": "Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member."
            }
          },
          "description": "An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { \"bindings\": [ { \"role\": \"roles/resourcemanager.organizationAdmin\", \"members\": [ \"user:mike@example.com\", \"group:admins@example.com\", \"domain:google.com\", \"serviceAccount:my-project-id@appspot.gserviceaccount.com\" ] }, { \"role\": \"roles/resourcemanager.organizationViewer\", \"members\": [ \"user:eve@example.com\" ], \"condition\": { \"title\": \"expirable access\", \"description\": \"Does not grant access after Sep 2020\", \"expression\": \"request.time < timestamp('2020-10-01T00:00:00.000Z')\", } } ], \"etag\": \"BwWWja0YfJA=\", \"version\": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/)."
        }
      ]
  projects.locations.taxonomies.testIamPermissions:
    description: |-
      Returns the permissions that a caller has on the specified taxonomy or policy tag.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.taxonomies/testIamPermissions
    example:
      inputs: [
        {
          "id": "TestIamPermissionsRequest",
          "type": "object",
          "properties": {
            "permissions": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "The set of permissions to check for the `resource`. Permissions with wildcards (such as '*' or 'storage.*') are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions)."
            }
          },
          "description": "Request message for `TestIamPermissions` method."
        }
      ]
      outputs: [
        {
          "id": "TestIamPermissionsResponse",
          "type": "object",
          "properties": {
            "permissions": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "A subset of `TestPermissionsRequest.permissions` that the caller is allowed."
            }
          },
          "description": "Response message for `TestIamPermissions` method."
        }
      ]