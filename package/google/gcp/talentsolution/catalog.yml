Product:
  name: GCP Talent Solution
  versions: [4.0.0]
  package: google.gcp.talentsolution
  description: |-
    Cloud Talent Solution
  link: https://cloud.google.com/talent-solution/job-search
  contentType: json
Operations:
  projects.operations.get:
    description: |-
      Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
    versions:
      from: 4.0.0
    link: https://cloud.google.com/talent-solution/job-search/docs/reference/rest/v4/projects.operations/get
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "Operation",
          "type": "object",
          "properties": {
            "done": {
              "type": "boolean",
              "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available."
            },
            "name": {
              "type": "string",
              "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`."
            },
            "error": {
              "id": "Status",
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The status code, which should be an enum value of google.rpc.Code."
                },
                "details": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  },
                  "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
                },
                "message": {
                  "type": "string",
                  "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                }
              },
              "description": "The error result of the operation in case of failure or cancellation."
            },
            "metadata": {
              "type": "object",
              "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
              "additionalProperties": {
                "type": "any",
                "description": "Properties of the object. Contains field @type with type URL."
              }
            },
            "response": {
              "type": "object",
              "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
              "additionalProperties": {
                "type": "any",
                "description": "Properties of the object. Contains field @type with type URL."
              }
            }
          },
          "description": "This resource represents a long-running operation that is the result of a network API call."
        }
      ]
  projects.tenants.clientEvents.create:
    description: |-
      Report events issued when end user interacts with customer's application that uses Cloud Talent Solution. You may inspect the created events in [self service tools](https://console.cloud.google.com/talent-solution/overview). [Learn more](https://cloud.google.com/talent-solution/docs/management-tools) about self service tools.
    versions:
      from: 4.0.0
    link: https://cloud.google.com/talent-solution/job-search/docs/reference/rest/v4/projects.tenants.clientEvents/create
    example:
      inputs: [
        {
          "id": "ClientEvent",
          "type": "object",
          "properties": {
            "eventId": {
              "type": "string",
              "description": "Required. A unique identifier, generated by the client application."
            },
            "jobEvent": {
              "id": "JobEvent",
              "type": "object",
              "properties": {
                "jobs": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Required. The job name(s) associated with this event. For example, if this is an impression event, this field contains the identifiers of all jobs shown to the job seeker. If this was a view event, this field contains the identifier of the viewed job. The format is \"projects/{project_id}/tenants/{tenant_id}/jobs/{job_id}\", for example, \"projects/foo/tenants/bar/jobs/baz\"."
                },
                "type": {
                  "enum": [
                    "JOB_EVENT_TYPE_UNSPECIFIED",
                    "IMPRESSION",
                    "VIEW",
                    "VIEW_REDIRECT",
                    "APPLICATION_START",
                    "APPLICATION_FINISH",
                    "APPLICATION_QUICK_SUBMISSION",
                    "APPLICATION_REDIRECT",
                    "APPLICATION_START_FROM_SEARCH",
                    "APPLICATION_REDIRECT_FROM_SEARCH",
                    "APPLICATION_COMPANY_SUBMIT",
                    "BOOKMARK",
                    "NOTIFICATION",
                    "HIRED",
                    "SENT_CV",
                    "INTERVIEW_GRANTED"
                  ],
                  "type": "string",
                  "description": "Required. The type of the event (see JobEventType).",
                  "enumDescriptions": [
                    "The event is unspecified by other provided values.",
                    "The job seeker or other entity interacting with the service has had a job rendered in their view, such as in a list of search results in a compressed or clipped format. This event is typically associated with the viewing of a jobs list on a single page by a job seeker.",
                    "The job seeker, or other entity interacting with the service, has viewed the details of a job, including the full description. This event doesn't apply to the viewing a snippet of a job appearing as a part of the job search results. Viewing a snippet is associated with an impression).",
                    "The job seeker or other entity interacting with the service performed an action to view a job and was redirected to a different website for job.",
                    "The job seeker or other entity interacting with the service began the process or demonstrated the intention of applying for a job.",
                    "The job seeker or other entity interacting with the service submitted an application for a job.",
                    "The job seeker or other entity interacting with the service submitted an application for a job with a single click without entering information. If a job seeker performs this action, send only this event to the service. Do not also send JobEventType.APPLICATION_START or JobEventType.APPLICATION_FINISH events.",
                    "The job seeker or other entity interacting with the service performed an action to apply to a job and was redirected to a different website to complete the application.",
                    "The job seeker or other entity interacting with the service began the process or demonstrated the intention of applying for a job from the search results page without viewing the details of the job posting. If sending this event, JobEventType.VIEW event shouldn't be sent.",
                    "The job seeker, or other entity interacting with the service, performs an action with a single click from the search results page to apply to a job (without viewing the details of the job posting), and is redirected to a different website to complete the application. If a candidate performs this action, send only this event to the service. Do not also send JobEventType.APPLICATION_START, JobEventType.APPLICATION_FINISH or JobEventType.VIEW events.",
                    "This event should be used when a company submits an application on behalf of a job seeker. This event is intended for use by staffing agencies attempting to place candidates.",
                    "The job seeker or other entity interacting with the service demonstrated an interest in a job by bookmarking or saving it.",
                    "The job seeker or other entity interacting with the service was sent a notification, such as an email alert or device notification, containing one or more jobs listings generated by the service.",
                    "The job seeker or other entity interacting with the service was employed by the hiring entity (employer). Send this event only if the job seeker was hired through an application that was initiated by a search conducted through the Cloud Talent Solution service.",
                    "A recruiter or staffing agency submitted an application on behalf of the candidate after interacting with the service to identify a suitable job posting.",
                    "The entity interacting with the service (for example, the job seeker), was granted an initial interview by the hiring entity (employer). This event should only be sent if the job seeker was granted an interview as part of an application that was initiated by a search conducted through / recommendation provided by the Cloud Talent Solution service."
                  ]
                }
              },
              "description": "An event issued when a job seeker interacts with the application that implements Cloud Talent Solution."
            },
            "requestId": {
              "type": "string",
              "description": "Strongly recommended for the best service experience. A unique ID generated in the API responses. It can be found in ResponseMetadata.request_id."
            },
            "createTime": {
              "type": "string",
              "format": "google-datetime",
              "description": "Required. The timestamp of the event."
            },
            "eventNotes": {
              "type": "string",
              "description": "Notes about the event provided by recruiters or other users, for example, feedback on why a job was bookmarked."
            }
          },
          "description": "An event issued when an end user interacts with the application that implements Cloud Talent Solution. Providing this information improves the quality of results for the API clients, enabling the service to perform optimally. The number of events sent must be consistent with other calls, such as job searches, issued to the service by the client."
        }
      ]
      outputs: [
        {}
      ]
  projects.tenants.companies.create:
    description: |-
      Creates a new company entity.
    versions:
      from: 4.0.0
    link: https://cloud.google.com/talent-solution/job-search/docs/reference/rest/v4/projects.tenants.companies/create
    example:
      inputs: [
        {
          "id": "Company",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Required during company update. The resource name for a company. This is generated by the service when a company is created. The format is \"projects/{project_id}/tenants/{tenant_id}/companies/{company_id}\", for example, \"projects/foo/tenants/bar/companies/baz\"."
            },
            "size": {
              "enum": [
                "COMPANY_SIZE_UNSPECIFIED",
                "MINI",
                "SMALL",
                "SMEDIUM",
                "MEDIUM",
                "BIG",
                "BIGGER",
                "GIANT"
              ],
              "type": "string",
              "description": "The employer's company size.",
              "enumDescriptions": [
                "Default value if the size isn't specified.",
                "The company has less than 50 employees.",
                "The company has between 50 and 99 employees.",
                "The company has between 100 and 499 employees.",
                "The company has between 500 and 999 employees.",
                "The company has between 1,000 and 4,999 employees.",
                "The company has between 5,000 and 9,999 employees.",
                "The company has 10,000 or more employees."
              ]
            },
            "eeoText": {
              "type": "string",
              "description": "Equal Employment Opportunity legal disclaimer text to be associated with all jobs, and typically to be displayed in all roles. The maximum number of allowed characters is 500."
            },
            "imageUri": {
              "type": "string",
              "description": "A URI that hosts the employer's company logo."
            },
            "suspended": {
              "type": "boolean",
              "readOnly": true,
              "description": "Output only. Indicates whether a company is flagged to be suspended from public availability by the service when job content appears suspicious, abusive, or spammy."
            },
            "externalId": {
              "type": "string",
              "description": "Required. Client side company identifier, used to uniquely identify the company. The maximum number of allowed characters is 255."
            },
            "websiteUri": {
              "type": "string",
              "description": "The URI representing the company's primary web site or home page, for example, \"https://www.google.com\". The maximum number of allowed characters is 255."
            },
            "derivedInfo": {
              "id": "CompanyDerivedInfo",
              "type": "object",
              "readOnly": true,
              "properties": {
                "headquartersLocation": {
                  "id": "Location",
                  "type": "object",
                  "properties": {
                    "latLng": {
                      "id": "LatLng",
                      "type": "object",
                      "properties": {
                        "latitude": {
                          "type": "number",
                          "format": "double",
                          "description": "The latitude in degrees. It must be in the range [-90.0, +90.0]."
                        },
                        "longitude": {
                          "type": "number",
                          "format": "double",
                          "description": "The longitude in degrees. It must be in the range [-180.0, +180.0]."
                        }
                      },
                      "description": "An object representing a latitude/longitude pair."
                    },
                    "radiusMiles": {
                      "type": "number",
                      "format": "double",
                      "description": "Radius in miles of the job location. This value is derived from the location bounding box in which a circle with the specified radius centered from google.type.LatLng covers the area associated with the job location. For example, currently, \"Mountain View, CA, USA\" has a radius of 6.17 miles."
                    },
                    "locationType": {
                      "enum": [
                        "LOCATION_TYPE_UNSPECIFIED",
                        "COUNTRY",
                        "ADMINISTRATIVE_AREA",
                        "SUB_ADMINISTRATIVE_AREA",
                        "LOCALITY",
                        "POSTAL_CODE",
                        "SUB_LOCALITY",
                        "SUB_LOCALITY_1",
                        "SUB_LOCALITY_2",
                        "NEIGHBORHOOD",
                        "STREET_ADDRESS"
                      ],
                      "type": "string",
                      "description": "The type of a location, which corresponds to the address lines field of google.type.PostalAddress. For example, \"Downtown, Atlanta, GA, USA\" has a type of LocationType.NEIGHBORHOOD, and \"Kansas City, KS, USA\" has a type of LocationType.LOCALITY.",
                      "enumDescriptions": [
                        "Default value if the type isn't specified.",
                        "A country level location.",
                        "A state or equivalent level location.",
                        "A county or equivalent level location.",
                        "A city or equivalent level location.",
                        "A postal code level location.",
                        "A sublocality is a subdivision of a locality, for example a city borough, ward, or arrondissement. Sublocalities are usually recognized by a local political authority. For example, Manhattan and Brooklyn are recognized as boroughs by the City of New York, and are therefore modeled as sublocalities.",
                        "A district or equivalent level location.",
                        "A smaller district or equivalent level display.",
                        "A neighborhood level location.",
                        "A street address level location."
                      ]
                    },
                    "postalAddress": {
                      "id": "PostalAddress",
                      "type": "object",
                      "properties": {
                        "locality": {
                          "type": "string",
                          "description": "Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use address_lines."
                        },
                        "revision": {
                          "type": "integer",
                          "format": "int32",
                          "description": "The schema revision of the `PostalAddress`. This must be set to 0, which is the latest revision. All new revisions **must** be backward compatible with old revisions."
                        },
                        "postalCode": {
                          "type": "string",
                          "description": "Optional. Postal code of the address. Not all countries use or require postal codes to be present, but where they are used, they may trigger additional validation with other parts of the address (e.g. state/zip validation in the U.S.A.)."
                        },
                        "recipients": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "Optional. The recipient at the address. This field may, under certain circumstances, contain multiline information. For example, it might contain \"care of\" information."
                        },
                        "regionCode": {
                          "type": "string",
                          "description": "Required. CLDR region code of the country/region of the address. This is never inferred and it is up to the user to ensure the value is correct. See http://cldr.unicode.org/ and http://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: \"CH\" for Switzerland."
                        },
                        "sortingCode": {
                          "type": "string",
                          "description": "Optional. Additional, country-specific, sorting code. This is not used in most regions. Where it is used, the value is either a string like \"CEDEX\", optionally followed by a number (e.g. \"CEDEX 7\"), or just a number alone, representing the \"sector code\" (Jamaica), \"delivery area indicator\" (Malawi) or \"post office indicator\" (e.g. Côte d'Ivoire)."
                        },
                        "sublocality": {
                          "type": "string",
                          "description": "Optional. Sublocality of the address. For example, this can be neighborhoods, boroughs, districts."
                        },
                        "addressLines": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "Unstructured address lines describing the lower levels of an address. Because values in address_lines do not have type information and may sometimes contain multiple values in a single field (e.g. \"Austin, TX\"), it is important that the line order is clear. The order of address lines should be \"envelope order\" for the country/region of the address. In places where this can vary (e.g. Japan), address_language is used to make it explicit (e.g. \"ja\" for large-to-small ordering and \"ja-Latn\" or \"en\" for small-to-large). This way, the most specific line of an address can be selected based on the language. The minimum permitted structural representation of an address consists of a region_code with all remaining information placed in the address_lines. It would be possible to format such an address very approximately without geocoding, but no semantic reasoning could be made about any of the address components until it was at least partially resolved. Creating an address only containing a region_code and address_lines, and then geocoding is the recommended way to handle completely unstructured addresses (as opposed to guessing which parts of the address should be localities or administrative areas)."
                        },
                        "languageCode": {
                          "type": "string",
                          "description": "Optional. BCP-47 language code of the contents of this address (if known). This is often the UI language of the input form or is expected to match one of the languages used in the address' country/region, or their transliterated equivalents. This can affect formatting in certain countries, but is not critical to the correctness of the data and will never affect any validation or other non-formatting related operations. If this value is not known, it should be omitted (rather than specifying a possibly incorrect default). Examples: \"zh-Hant\", \"ja\", \"ja-Latn\", \"en\"."
                        },
                        "organization": {
                          "type": "string",
                          "description": "Optional. The name of the organization at the address."
                        },
                        "administrativeArea": {
                          "type": "string",
                          "description": "Optional. Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state, a province, an oblast, or a prefecture. Specifically, for Spain this is the province and not the autonomous community (e.g. \"Barcelona\" and not \"Catalonia\"). Many countries don't use an administrative area in postal addresses. E.g. in Switzerland this should be left unpopulated."
                        }
                      },
                      "description": "Postal address of the location that includes human readable information, such as postal delivery and payments addresses. Given a postal address, a postal service can deliver items to a premises, P.O. Box, or other delivery location."
                    }
                  },
                  "description": "A structured headquarters location of the company, resolved from Company.headquarters_address if provided."
                }
              },
              "description": "Output only. Derived details about the company."
            },
            "displayName": {
              "type": "string",
              "description": "Required. The display name of the company, for example, \"Google LLC\"."
            },
            "hiringAgency": {
              "type": "boolean",
              "description": "Set to true if it is the hiring agency that post jobs for other employers. Defaults to false if not provided."
            },
            "careerSiteUri": {
              "type": "string",
              "description": "The URI to employer's career site or careers page on the employer's web site, for example, \"https://careers.google.com\"."
            },
            "headquartersAddress": {
              "type": "string",
              "description": "The street address of the company's main headquarters, which may be different from the job location. The service attempts to geolocate the provided address, and populates a more specific location wherever possible in DerivedInfo.headquarters_location."
            },
            "keywordSearchableJobCustomAttributes": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "A list of keys of filterable Job.custom_attributes, whose corresponding `string_values` are used in keyword searches. Jobs with `string_values` under these specified field keys are returned if any of the values match the search keyword. Custom field values with parenthesis, brackets and special symbols are not searchable as-is, and those keyword queries must be surrounded by quotes."
            }
          },
          "description": "A Company resource represents a company in the service. A company is the entity that owns job postings, that is, the hiring entity responsible for employing applicants for the job position."
        }
      ]
      outputs: [
        {}
      ]
  projects.tenants.companies.delete:
    description: |-
      Deletes specified company. Prerequisite: The company has no jobs associated with it.
    versions:
      from: 4.0.0
    link: https://cloud.google.com/talent-solution/job-search/docs/reference/rest/v4/projects.tenants.companies/delete
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "Empty",
          "type": "object",
          "properties": {},
          "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`."
        }
      ]
  projects.tenants.companies.get:
    description: |-
      Retrieves specified company.
    versions:
      from: 4.0.0
    link: https://cloud.google.com/talent-solution/job-search/docs/reference/rest/v4/projects.tenants.companies/get
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  projects.tenants.companies.list:
    description: |-
      Lists all companies associated with the project.
    versions:
      from: 4.0.0
    link: https://cloud.google.com/talent-solution/job-search/docs/reference/rest/v4/projects.tenants.companies/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "ListCompaniesResponse",
          "type": "object",
          "properties": {
            "metadata": {
              "id": "ResponseMetadata",
              "type": "object",
              "properties": {
                "requestId": {
                  "type": "string",
                  "description": "A unique id associated with this call. This id is logged for tracking purposes."
                }
              },
              "description": "Additional information for the API invocation, such as the request tracking id."
            },
            "companies": {
              "type": "array",
              "items": {
                "id": "Company",
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Required during company update. The resource name for a company. This is generated by the service when a company is created. The format is \"projects/{project_id}/tenants/{tenant_id}/companies/{company_id}\", for example, \"projects/foo/tenants/bar/companies/baz\"."
                  },
                  "size": {
                    "enum": [
                      "COMPANY_SIZE_UNSPECIFIED",
                      "MINI",
                      "SMALL",
                      "SMEDIUM",
                      "MEDIUM",
                      "BIG",
                      "BIGGER",
                      "GIANT"
                    ],
                    "type": "string",
                    "description": "The employer's company size.",
                    "enumDescriptions": [
                      "Default value if the size isn't specified.",
                      "The company has less than 50 employees.",
                      "The company has between 50 and 99 employees.",
                      "The company has between 100 and 499 employees.",
                      "The company has between 500 and 999 employees.",
                      "The company has between 1,000 and 4,999 employees.",
                      "The company has between 5,000 and 9,999 employees.",
                      "The company has 10,000 or more employees."
                    ]
                  },
                  "eeoText": {
                    "type": "string",
                    "description": "Equal Employment Opportunity legal disclaimer text to be associated with all jobs, and typically to be displayed in all roles. The maximum number of allowed characters is 500."
                  },
                  "imageUri": {
                    "type": "string",
                    "description": "A URI that hosts the employer's company logo."
                  },
                  "suspended": {
                    "type": "boolean",
                    "readOnly": true,
                    "description": "Output only. Indicates whether a company is flagged to be suspended from public availability by the service when job content appears suspicious, abusive, or spammy."
                  },
                  "externalId": {
                    "type": "string",
                    "description": "Required. Client side company identifier, used to uniquely identify the company. The maximum number of allowed characters is 255."
                  },
                  "websiteUri": {
                    "type": "string",
                    "description": "The URI representing the company's primary web site or home page, for example, \"https://www.google.com\". The maximum number of allowed characters is 255."
                  },
                  "derivedInfo": {
                    "id": "CompanyDerivedInfo",
                    "type": "object",
                    "readOnly": true,
                    "properties": {
                      "headquartersLocation": {
                        "id": "Location",
                        "type": "object",
                        "properties": {
                          "latLng": {
                            "id": "LatLng",
                            "type": "object",
                            "properties": {
                              "latitude": {
                                "type": "number",
                                "format": "double",
                                "description": "The latitude in degrees. It must be in the range [-90.0, +90.0]."
                              },
                              "longitude": {
                                "type": "number",
                                "format": "double",
                                "description": "The longitude in degrees. It must be in the range [-180.0, +180.0]."
                              }
                            },
                            "description": "An object representing a latitude/longitude pair."
                          },
                          "radiusMiles": {
                            "type": "number",
                            "format": "double",
                            "description": "Radius in miles of the job location. This value is derived from the location bounding box in which a circle with the specified radius centered from google.type.LatLng covers the area associated with the job location. For example, currently, \"Mountain View, CA, USA\" has a radius of 6.17 miles."
                          },
                          "locationType": {
                            "enum": [
                              "LOCATION_TYPE_UNSPECIFIED",
                              "COUNTRY",
                              "ADMINISTRATIVE_AREA",
                              "SUB_ADMINISTRATIVE_AREA",
                              "LOCALITY",
                              "POSTAL_CODE",
                              "SUB_LOCALITY",
                              "SUB_LOCALITY_1",
                              "SUB_LOCALITY_2",
                              "NEIGHBORHOOD",
                              "STREET_ADDRESS"
                            ],
                            "type": "string",
                            "description": "The type of a location, which corresponds to the address lines field of google.type.PostalAddress. For example, \"Downtown, Atlanta, GA, USA\" has a type of LocationType.NEIGHBORHOOD, and \"Kansas City, KS, USA\" has a type of LocationType.LOCALITY.",
                            "enumDescriptions": [
                              "Default value if the type isn't specified.",
                              "A country level location.",
                              "A state or equivalent level location.",
                              "A county or equivalent level location.",
                              "A city or equivalent level location.",
                              "A postal code level location.",
                              "A sublocality is a subdivision of a locality, for example a city borough, ward, or arrondissement. Sublocalities are usually recognized by a local political authority. For example, Manhattan and Brooklyn are recognized as boroughs by the City of New York, and are therefore modeled as sublocalities.",
                              "A district or equivalent level location.",
                              "A smaller district or equivalent level display.",
                              "A neighborhood level location.",
                              "A street address level location."
                            ]
                          },
                          "postalAddress": {
                            "id": "PostalAddress",
                            "type": "object",
                            "properties": {
                              "locality": {
                                "type": "string",
                                "description": "Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use address_lines."
                              },
                              "revision": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The schema revision of the `PostalAddress`. This must be set to 0, which is the latest revision. All new revisions **must** be backward compatible with old revisions."
                              },
                              "postalCode": {
                                "type": "string",
                                "description": "Optional. Postal code of the address. Not all countries use or require postal codes to be present, but where they are used, they may trigger additional validation with other parts of the address (e.g. state/zip validation in the U.S.A.)."
                              },
                              "recipients": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "description": "Optional. The recipient at the address. This field may, under certain circumstances, contain multiline information. For example, it might contain \"care of\" information."
                              },
                              "regionCode": {
                                "type": "string",
                                "description": "Required. CLDR region code of the country/region of the address. This is never inferred and it is up to the user to ensure the value is correct. See http://cldr.unicode.org/ and http://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: \"CH\" for Switzerland."
                              },
                              "sortingCode": {
                                "type": "string",
                                "description": "Optional. Additional, country-specific, sorting code. This is not used in most regions. Where it is used, the value is either a string like \"CEDEX\", optionally followed by a number (e.g. \"CEDEX 7\"), or just a number alone, representing the \"sector code\" (Jamaica), \"delivery area indicator\" (Malawi) or \"post office indicator\" (e.g. Côte d'Ivoire)."
                              },
                              "sublocality": {
                                "type": "string",
                                "description": "Optional. Sublocality of the address. For example, this can be neighborhoods, boroughs, districts."
                              },
                              "addressLines": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "description": "Unstructured address lines describing the lower levels of an address. Because values in address_lines do not have type information and may sometimes contain multiple values in a single field (e.g. \"Austin, TX\"), it is important that the line order is clear. The order of address lines should be \"envelope order\" for the country/region of the address. In places where this can vary (e.g. Japan), address_language is used to make it explicit (e.g. \"ja\" for large-to-small ordering and \"ja-Latn\" or \"en\" for small-to-large). This way, the most specific line of an address can be selected based on the language. The minimum permitted structural representation of an address consists of a region_code with all remaining information placed in the address_lines. It would be possible to format such an address very approximately without geocoding, but no semantic reasoning could be made about any of the address components until it was at least partially resolved. Creating an address only containing a region_code and address_lines, and then geocoding is the recommended way to handle completely unstructured addresses (as opposed to guessing which parts of the address should be localities or administrative areas)."
                              },
                              "languageCode": {
                                "type": "string",
                                "description": "Optional. BCP-47 language code of the contents of this address (if known). This is often the UI language of the input form or is expected to match one of the languages used in the address' country/region, or their transliterated equivalents. This can affect formatting in certain countries, but is not critical to the correctness of the data and will never affect any validation or other non-formatting related operations. If this value is not known, it should be omitted (rather than specifying a possibly incorrect default). Examples: \"zh-Hant\", \"ja\", \"ja-Latn\", \"en\"."
                              },
                              "organization": {
                                "type": "string",
                                "description": "Optional. The name of the organization at the address."
                              },
                              "administrativeArea": {
                                "type": "string",
                                "description": "Optional. Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state, a province, an oblast, or a prefecture. Specifically, for Spain this is the province and not the autonomous community (e.g. \"Barcelona\" and not \"Catalonia\"). Many countries don't use an administrative area in postal addresses. E.g. in Switzerland this should be left unpopulated."
                              }
                            },
                            "description": "Postal address of the location that includes human readable information, such as postal delivery and payments addresses. Given a postal address, a postal service can deliver items to a premises, P.O. Box, or other delivery location."
                          }
                        },
                        "description": "A structured headquarters location of the company, resolved from Company.headquarters_address if provided."
                      }
                    },
                    "description": "Output only. Derived details about the company."
                  },
                  "displayName": {
                    "type": "string",
                    "description": "Required. The display name of the company, for example, \"Google LLC\"."
                  },
                  "hiringAgency": {
                    "type": "boolean",
                    "description": "Set to true if it is the hiring agency that post jobs for other employers. Defaults to false if not provided."
                  },
                  "careerSiteUri": {
                    "type": "string",
                    "description": "The URI to employer's career site or careers page on the employer's web site, for example, \"https://careers.google.com\"."
                  },
                  "headquartersAddress": {
                    "type": "string",
                    "description": "The street address of the company's main headquarters, which may be different from the job location. The service attempts to geolocate the provided address, and populates a more specific location wherever possible in DerivedInfo.headquarters_location."
                  },
                  "keywordSearchableJobCustomAttributes": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "A list of keys of filterable Job.custom_attributes, whose corresponding `string_values` are used in keyword searches. Jobs with `string_values` under these specified field keys are returned if any of the values match the search keyword. Custom field values with parenthesis, brackets and special symbols are not searchable as-is, and those keyword queries must be surrounded by quotes."
                  }
                },
                "description": "A Company resource represents a company in the service. A company is the entity that owns job postings, that is, the hiring entity responsible for employing applicants for the job position."
              },
              "description": "Companies for the current client."
            },
            "nextPageToken": {
              "type": "string",
              "description": "A token to retrieve the next page of results."
            }
          },
          "description": "The List companies response object."
        }
      ]
  projects.tenants.companies.patch:
    description: |-
      Updates specified company.
    versions:
      from: 4.0.0
    link: https://cloud.google.com/talent-solution/job-search/docs/reference/rest/v4/projects.tenants.companies/patch
    example:
      inputs: [
        {
          "id": "Company",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Required during company update. The resource name for a company. This is generated by the service when a company is created. The format is \"projects/{project_id}/tenants/{tenant_id}/companies/{company_id}\", for example, \"projects/foo/tenants/bar/companies/baz\"."
            },
            "size": {
              "enum": [
                "COMPANY_SIZE_UNSPECIFIED",
                "MINI",
                "SMALL",
                "SMEDIUM",
                "MEDIUM",
                "BIG",
                "BIGGER",
                "GIANT"
              ],
              "type": "string",
              "description": "The employer's company size.",
              "enumDescriptions": [
                "Default value if the size isn't specified.",
                "The company has less than 50 employees.",
                "The company has between 50 and 99 employees.",
                "The company has between 100 and 499 employees.",
                "The company has between 500 and 999 employees.",
                "The company has between 1,000 and 4,999 employees.",
                "The company has between 5,000 and 9,999 employees.",
                "The company has 10,000 or more employees."
              ]
            },
            "eeoText": {
              "type": "string",
              "description": "Equal Employment Opportunity legal disclaimer text to be associated with all jobs, and typically to be displayed in all roles. The maximum number of allowed characters is 500."
            },
            "imageUri": {
              "type": "string",
              "description": "A URI that hosts the employer's company logo."
            },
            "suspended": {
              "type": "boolean",
              "readOnly": true,
              "description": "Output only. Indicates whether a company is flagged to be suspended from public availability by the service when job content appears suspicious, abusive, or spammy."
            },
            "externalId": {
              "type": "string",
              "description": "Required. Client side company identifier, used to uniquely identify the company. The maximum number of allowed characters is 255."
            },
            "websiteUri": {
              "type": "string",
              "description": "The URI representing the company's primary web site or home page, for example, \"https://www.google.com\". The maximum number of allowed characters is 255."
            },
            "derivedInfo": {
              "id": "CompanyDerivedInfo",
              "type": "object",
              "readOnly": true,
              "properties": {
                "headquartersLocation": {
                  "id": "Location",
                  "type": "object",
                  "properties": {
                    "latLng": {
                      "id": "LatLng",
                      "type": "object",
                      "properties": {
                        "latitude": {
                          "type": "number",
                          "format": "double",
                          "description": "The latitude in degrees. It must be in the range [-90.0, +90.0]."
                        },
                        "longitude": {
                          "type": "number",
                          "format": "double",
                          "description": "The longitude in degrees. It must be in the range [-180.0, +180.0]."
                        }
                      },
                      "description": "An object representing a latitude/longitude pair."
                    },
                    "radiusMiles": {
                      "type": "number",
                      "format": "double",
                      "description": "Radius in miles of the job location. This value is derived from the location bounding box in which a circle with the specified radius centered from google.type.LatLng covers the area associated with the job location. For example, currently, \"Mountain View, CA, USA\" has a radius of 6.17 miles."
                    },
                    "locationType": {
                      "enum": [
                        "LOCATION_TYPE_UNSPECIFIED",
                        "COUNTRY",
                        "ADMINISTRATIVE_AREA",
                        "SUB_ADMINISTRATIVE_AREA",
                        "LOCALITY",
                        "POSTAL_CODE",
                        "SUB_LOCALITY",
                        "SUB_LOCALITY_1",
                        "SUB_LOCALITY_2",
                        "NEIGHBORHOOD",
                        "STREET_ADDRESS"
                      ],
                      "type": "string",
                      "description": "The type of a location, which corresponds to the address lines field of google.type.PostalAddress. For example, \"Downtown, Atlanta, GA, USA\" has a type of LocationType.NEIGHBORHOOD, and \"Kansas City, KS, USA\" has a type of LocationType.LOCALITY.",
                      "enumDescriptions": [
                        "Default value if the type isn't specified.",
                        "A country level location.",
                        "A state or equivalent level location.",
                        "A county or equivalent level location.",
                        "A city or equivalent level location.",
                        "A postal code level location.",
                        "A sublocality is a subdivision of a locality, for example a city borough, ward, or arrondissement. Sublocalities are usually recognized by a local political authority. For example, Manhattan and Brooklyn are recognized as boroughs by the City of New York, and are therefore modeled as sublocalities.",
                        "A district or equivalent level location.",
                        "A smaller district or equivalent level display.",
                        "A neighborhood level location.",
                        "A street address level location."
                      ]
                    },
                    "postalAddress": {
                      "id": "PostalAddress",
                      "type": "object",
                      "properties": {
                        "locality": {
                          "type": "string",
                          "description": "Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use address_lines."
                        },
                        "revision": {
                          "type": "integer",
                          "format": "int32",
                          "description": "The schema revision of the `PostalAddress`. This must be set to 0, which is the latest revision. All new revisions **must** be backward compatible with old revisions."
                        },
                        "postalCode": {
                          "type": "string",
                          "description": "Optional. Postal code of the address. Not all countries use or require postal codes to be present, but where they are used, they may trigger additional validation with other parts of the address (e.g. state/zip validation in the U.S.A.)."
                        },
                        "recipients": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "Optional. The recipient at the address. This field may, under certain circumstances, contain multiline information. For example, it might contain \"care of\" information."
                        },
                        "regionCode": {
                          "type": "string",
                          "description": "Required. CLDR region code of the country/region of the address. This is never inferred and it is up to the user to ensure the value is correct. See http://cldr.unicode.org/ and http://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: \"CH\" for Switzerland."
                        },
                        "sortingCode": {
                          "type": "string",
                          "description": "Optional. Additional, country-specific, sorting code. This is not used in most regions. Where it is used, the value is either a string like \"CEDEX\", optionally followed by a number (e.g. \"CEDEX 7\"), or just a number alone, representing the \"sector code\" (Jamaica), \"delivery area indicator\" (Malawi) or \"post office indicator\" (e.g. Côte d'Ivoire)."
                        },
                        "sublocality": {
                          "type": "string",
                          "description": "Optional. Sublocality of the address. For example, this can be neighborhoods, boroughs, districts."
                        },
                        "addressLines": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "Unstructured address lines describing the lower levels of an address. Because values in address_lines do not have type information and may sometimes contain multiple values in a single field (e.g. \"Austin, TX\"), it is important that the line order is clear. The order of address lines should be \"envelope order\" for the country/region of the address. In places where this can vary (e.g. Japan), address_language is used to make it explicit (e.g. \"ja\" for large-to-small ordering and \"ja-Latn\" or \"en\" for small-to-large). This way, the most specific line of an address can be selected based on the language. The minimum permitted structural representation of an address consists of a region_code with all remaining information placed in the address_lines. It would be possible to format such an address very approximately without geocoding, but no semantic reasoning could be made about any of the address components until it was at least partially resolved. Creating an address only containing a region_code and address_lines, and then geocoding is the recommended way to handle completely unstructured addresses (as opposed to guessing which parts of the address should be localities or administrative areas)."
                        },
                        "languageCode": {
                          "type": "string",
                          "description": "Optional. BCP-47 language code of the contents of this address (if known). This is often the UI language of the input form or is expected to match one of the languages used in the address' country/region, or their transliterated equivalents. This can affect formatting in certain countries, but is not critical to the correctness of the data and will never affect any validation or other non-formatting related operations. If this value is not known, it should be omitted (rather than specifying a possibly incorrect default). Examples: \"zh-Hant\", \"ja\", \"ja-Latn\", \"en\"."
                        },
                        "organization": {
                          "type": "string",
                          "description": "Optional. The name of the organization at the address."
                        },
                        "administrativeArea": {
                          "type": "string",
                          "description": "Optional. Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state, a province, an oblast, or a prefecture. Specifically, for Spain this is the province and not the autonomous community (e.g. \"Barcelona\" and not \"Catalonia\"). Many countries don't use an administrative area in postal addresses. E.g. in Switzerland this should be left unpopulated."
                        }
                      },
                      "description": "Postal address of the location that includes human readable information, such as postal delivery and payments addresses. Given a postal address, a postal service can deliver items to a premises, P.O. Box, or other delivery location."
                    }
                  },
                  "description": "A structured headquarters location of the company, resolved from Company.headquarters_address if provided."
                }
              },
              "description": "Output only. Derived details about the company."
            },
            "displayName": {
              "type": "string",
              "description": "Required. The display name of the company, for example, \"Google LLC\"."
            },
            "hiringAgency": {
              "type": "boolean",
              "description": "Set to true if it is the hiring agency that post jobs for other employers. Defaults to false if not provided."
            },
            "careerSiteUri": {
              "type": "string",
              "description": "The URI to employer's career site or careers page on the employer's web site, for example, \"https://careers.google.com\"."
            },
            "headquartersAddress": {
              "type": "string",
              "description": "The street address of the company's main headquarters, which may be different from the job location. The service attempts to geolocate the provided address, and populates a more specific location wherever possible in DerivedInfo.headquarters_location."
            },
            "keywordSearchableJobCustomAttributes": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "A list of keys of filterable Job.custom_attributes, whose corresponding `string_values` are used in keyword searches. Jobs with `string_values` under these specified field keys are returned if any of the values match the search keyword. Custom field values with parenthesis, brackets and special symbols are not searchable as-is, and those keyword queries must be surrounded by quotes."
            }
          },
          "description": "A Company resource represents a company in the service. A company is the entity that owns job postings, that is, the hiring entity responsible for employing applicants for the job position."
        }
      ]
      outputs: [
        {}
      ]
  projects.tenants.completeQuery:
    description: |-
      Completes the specified prefix with keyword suggestions. Intended for use by a job search auto-complete search box.
    versions:
      from: 4.0.0
    link: https://cloud.google.com/talent-solution/job-search/docs/reference/rest/v4/projects.tenants/completeQuery
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "CompleteQueryResponse",
          "type": "object",
          "properties": {
            "metadata": {
              "id": "ResponseMetadata",
              "type": "object",
              "properties": {
                "requestId": {
                  "type": "string",
                  "description": "A unique id associated with this call. This id is logged for tracking purposes."
                }
              },
              "description": "Additional information for the API invocation, such as the request tracking id."
            },
            "completionResults": {
              "type": "array",
              "items": {
                "id": "CompletionResult",
                "type": "object",
                "properties": {
                  "type": {
                    "enum": [
                      "COMPLETION_TYPE_UNSPECIFIED",
                      "JOB_TITLE",
                      "COMPANY_NAME",
                      "COMBINED"
                    ],
                    "type": "string",
                    "description": "The completion topic.",
                    "enumDescriptions": [
                      "Default value.",
                      "Suggest job titles for jobs autocomplete. For CompletionType.JOB_TITLE type, only open jobs with the same language_codes are returned.",
                      "Suggest company names for jobs autocomplete. For CompletionType.COMPANY_NAME type, only companies having open jobs with the same language_codes are returned.",
                      "Suggest both job titles and company names for jobs autocomplete. For CompletionType.COMBINED type, only open jobs with the same language_codes or companies having open jobs with the same language_codes are returned."
                    ]
                  },
                  "imageUri": {
                    "type": "string",
                    "description": "The URI of the company image for COMPANY_NAME."
                  },
                  "suggestion": {
                    "type": "string",
                    "description": "The suggestion for the query."
                  }
                },
                "description": "Resource that represents completion results."
              },
              "description": "Results of the matching job/company candidates."
            }
          },
          "description": "Response of auto-complete query."
        }
      ]
  projects.tenants.create:
    description: |-
      Creates a new tenant entity.
    versions:
      from: 4.0.0
    link: https://cloud.google.com/talent-solution/job-search/docs/reference/rest/v4/projects.tenants/create
    example:
      inputs: [
        {
          "id": "Tenant",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Required during tenant update. The resource name for a tenant. This is generated by the service when a tenant is created. The format is \"projects/{project_id}/tenants/{tenant_id}\", for example, \"projects/foo/tenants/bar\"."
            },
            "externalId": {
              "type": "string",
              "description": "Required. Client side tenant identifier, used to uniquely identify the tenant. The maximum number of allowed characters is 255."
            }
          },
          "description": "A Tenant resource represents a tenant in the service. A tenant is a group or entity that shares common access with specific privileges for resources like jobs. Customer may create multiple tenants to provide data isolation for different groups."
        }
      ]
      outputs: [
        {}
      ]
  projects.tenants.delete:
    description: |-
      Deletes specified tenant.
    versions:
      from: 4.0.0
    link: https://cloud.google.com/talent-solution/job-search/docs/reference/rest/v4/projects.tenants/delete
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "Empty",
          "type": "object",
          "properties": {},
          "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`."
        }
      ]
  projects.tenants.get:
    description: |-
      Retrieves specified tenant.
    versions:
      from: 4.0.0
    link: https://cloud.google.com/talent-solution/job-search/docs/reference/rest/v4/projects.tenants/get
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  projects.tenants.jobs.batchCreate:
    description: |-
      Begins executing a batch create jobs operation.
    versions:
      from: 4.0.0
    link: https://cloud.google.com/talent-solution/job-search/docs/reference/rest/v4/projects.tenants.jobs/batchCreate
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  projects.tenants.jobs.batchDelete:
    description: |-
      Begins executing a batch delete jobs operation.
    versions:
      from: 4.0.0
    link: https://cloud.google.com/talent-solution/job-search/docs/reference/rest/v4/projects.tenants.jobs/batchDelete
    example:
      inputs: [
        {
          "id": "BatchDeleteJobsRequest",
          "type": "object",
          "properties": {
            "names": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "The names of the jobs to delete. The format is \"projects/{project_id}/tenants/{tenant_id}/jobs/{job_id}\". For example, \"projects/foo/tenants/bar/jobs/baz\". A maximum of 200 jobs can be deleted in a batch."
            }
          },
          "description": "Request to delete a batch of jobs."
        }
      ]
      outputs: [
        {
          "id": "Operation",
          "type": "object",
          "properties": {
            "done": {
              "type": "boolean",
              "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available."
            },
            "name": {
              "type": "string",
              "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`."
            },
            "error": {
              "id": "Status",
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The status code, which should be an enum value of google.rpc.Code."
                },
                "details": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  },
                  "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
                },
                "message": {
                  "type": "string",
                  "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                }
              },
              "description": "The error result of the operation in case of failure or cancellation."
            },
            "metadata": {
              "type": "object",
              "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
              "additionalProperties": {
                "type": "any",
                "description": "Properties of the object. Contains field @type with type URL."
              }
            },
            "response": {
              "type": "object",
              "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
              "additionalProperties": {
                "type": "any",
                "description": "Properties of the object. Contains field @type with type URL."
              }
            }
          },
          "description": "This resource represents a long-running operation that is the result of a network API call."
        }
      ]
  projects.tenants.jobs.batchUpdate:
    description: |-
      Begins executing a batch update jobs operation.
    versions:
      from: 4.0.0
    link: https://cloud.google.com/talent-solution/job-search/docs/reference/rest/v4/projects.tenants.jobs/batchUpdate
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  projects.tenants.jobs.create:
    description: |-
      Creates a new job. Typically, the job becomes searchable within 10 seconds, but it may take up to 5 minutes.
    versions:
      from: 4.0.0
    link: https://cloud.google.com/talent-solution/job-search/docs/reference/rest/v4/projects.tenants.jobs/create
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  projects.tenants.jobs.delete:
    description: |-
      Deletes the specified job. Typically, the job becomes unsearchable within 10 seconds, but it may take up to 5 minutes.
    versions:
      from: 4.0.0
    link: https://cloud.google.com/talent-solution/job-search/docs/reference/rest/v4/projects.tenants.jobs/delete
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "Empty",
          "type": "object",
          "properties": {},
          "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`."
        }
      ]
  projects.tenants.jobs.get:
    description: |-
      Retrieves the specified job, whose status is OPEN or recently EXPIRED within the last 90 days.
    versions:
      from: 4.0.0
    link: https://cloud.google.com/talent-solution/job-search/docs/reference/rest/v4/projects.tenants.jobs/get
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "Job",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Required during job update. The resource name for the job. This is generated by the service when a job is created. The format is \"projects/{project_id}/tenants/{tenant_id}/jobs/{job_id}\". For example, \"projects/foo/tenants/bar/jobs/baz\". Use of this field in job queries and API calls is preferred over the use of requisition_id since this value is unique."
            },
            "title": {
              "type": "string",
              "description": "Required. The title of the job, such as \"Software Engineer\" The maximum number of allowed characters is 500."
            },
            "company": {
              "type": "string",
              "description": "Required. The resource name of the company listing the job. The format is \"projects/{project_id}/tenants/{tenant_id}/companies/{company_id}\". For example, \"projects/foo/tenants/bar/companies/baz\"."
            },
            "jobLevel": {
              "enum": [
                "JOB_LEVEL_UNSPECIFIED",
                "ENTRY_LEVEL",
                "EXPERIENCED",
                "MANAGER",
                "DIRECTOR",
                "EXECUTIVE"
              ],
              "type": "string",
              "description": "The experience level associated with the job, such as \"Entry Level\".",
              "enumDescriptions": [
                "The default value if the level isn't specified.",
                "Entry-level individual contributors, typically with less than 2 years of experience in a similar role. Includes interns.",
                "Experienced individual contributors, typically with 2+ years of experience in a similar role.",
                "Entry- to mid-level managers responsible for managing a team of people.",
                "Senior-level managers responsible for managing teams of managers.",
                "Executive-level managers and above, including C-level positions."
              ]
            },
            "addresses": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Strongly recommended for the best service experience. Location(s) where the employer is looking to hire for this job posting. Specifying the full street address(es) of the hiring location enables better API results, especially job searches by commute time. At most 50 locations are allowed for best search performance. If a job has more locations, it is suggested to split it into multiple jobs with unique requisition_ids (e.g. 'ReqA' becomes 'ReqA-1', 'ReqA-2', and so on.) as multiple jobs with the same company, language_code and requisition_id are not allowed. If the original requisition_id must be preserved, a custom field should be used for storage. It is also suggested to group the locations that close to each other in the same job for better search experience. Jobs with multiple addresses must have their addresses with the same LocationType to allow location filtering to work properly. (For example, a Job with addresses \"1600 Amphitheatre Parkway, Mountain View, CA, USA\" and \"London, UK\" may not have location filters applied correctly at search time since the first is a LocationType.STREET_ADDRESS and the second is a LocationType.LOCALITY.) If a job needs to have multiple addresses, it is suggested to split it into multiple jobs with same LocationTypes. The maximum number of allowed characters is 500."
            },
            "department": {
              "type": "string",
              "description": "The department or functional area within the company with the open position. The maximum number of allowed characters is 255."
            },
            "incentives": {
              "type": "string",
              "description": "A description of bonus, commission, and other compensation incentives associated with the job not including salary or pay. The maximum number of allowed characters is 10,000."
            },
            "jobEndTime": {
              "type": "string",
              "format": "google-datetime",
              "description": "The end timestamp of the job. Typically this field is used for contracting engagements. Invalid timestamps are ignored."
            },
            "visibility": {
              "enum": [
                "VISIBILITY_UNSPECIFIED",
                "ACCOUNT_ONLY",
                "SHARED_WITH_GOOGLE",
                "SHARED_WITH_PUBLIC"
              ],
              "type": "string",
              "description": "Deprecated. The job is only visible to the owner. The visibility of the job. Defaults to Visibility.ACCOUNT_ONLY if not specified.",
              "enumDescriptions": [
                "Default value.",
                "The resource is only visible to the GCP account who owns it.",
                "The resource is visible to the owner and may be visible to other applications and processes at Google.",
                "The resource is visible to the owner and may be visible to all other API clients."
              ]
            },
            "degreeTypes": {
              "type": "array",
              "items": {
                "enum": [
                  "DEGREE_TYPE_UNSPECIFIED",
                  "PRIMARY_EDUCATION",
                  "LOWER_SECONDARY_EDUCATION",
                  "UPPER_SECONDARY_EDUCATION",
                  "ADULT_REMEDIAL_EDUCATION",
                  "ASSOCIATES_OR_EQUIVALENT",
                  "BACHELORS_OR_EQUIVALENT",
                  "MASTERS_OR_EQUIVALENT",
                  "DOCTORAL_OR_EQUIVALENT"
                ],
                "type": "string",
                "enumDescriptions": [
                  "Default value. Represents no degree, or early childhood education. Maps to ISCED code 0. Ex) Kindergarten",
                  "Primary education which is typically the first stage of compulsory education. ISCED code 1. Ex) Elementary school",
                  "Lower secondary education; First stage of secondary education building on primary education, typically with a more subject-oriented curriculum. ISCED code 2. Ex) Middle school",
                  "Middle education; Second/final stage of secondary education preparing for tertiary education and/or providing skills relevant to employment. Usually with an increased range of subject options and streams. ISCED code 3. Ex) High school",
                  "Adult Remedial Education; Programmes providing learning experiences that build on secondary education and prepare for labour market entry and/or tertiary education. The content is broader than secondary but not as complex as tertiary education. ISCED code 4.",
                  "Associate's or equivalent; Short first tertiary programmes that are typically practically-based, occupationally-specific and prepare for labour market entry. These programmes may also provide a pathway to other tertiary programmes. ISCED code 5.",
                  "Bachelor's or equivalent; Programmes designed to provide intermediate academic and/or professional knowledge, skills and competencies leading to a first tertiary degree or equivalent qualification. ISCED code 6.",
                  "Master's or equivalent; Programmes designed to provide advanced academic and/or professional knowledge, skills and competencies leading to a second tertiary degree or equivalent qualification. ISCED code 7.",
                  "Doctoral or equivalent; Programmes designed primarily to lead to an advanced research qualification, usually concluding with the submission and defense of a substantive dissertation of publishable quality based on original research. ISCED code 8."
                ]
              },
              "description": "The desired education degrees for the job, such as Bachelors, Masters."
            },
            "derivedInfo": {
              "id": "JobDerivedInfo",
              "type": "object",
              "readOnly": true,
              "properties": {
                "locations": {
                  "type": "array",
                  "items": {
                    "id": "Location",
                    "type": "object",
                    "properties": {
                      "latLng": {
                        "id": "LatLng",
                        "type": "object",
                        "properties": {
                          "latitude": {
                            "type": "number",
                            "format": "double",
                            "description": "The latitude in degrees. It must be in the range [-90.0, +90.0]."
                          },
                          "longitude": {
                            "type": "number",
                            "format": "double",
                            "description": "The longitude in degrees. It must be in the range [-180.0, +180.0]."
                          }
                        },
                        "description": "An object representing a latitude/longitude pair."
                      },
                      "radiusMiles": {
                        "type": "number",
                        "format": "double",
                        "description": "Radius in miles of the job location. This value is derived from the location bounding box in which a circle with the specified radius centered from google.type.LatLng covers the area associated with the job location. For example, currently, \"Mountain View, CA, USA\" has a radius of 6.17 miles."
                      },
                      "locationType": {
                        "enum": [
                          "LOCATION_TYPE_UNSPECIFIED",
                          "COUNTRY",
                          "ADMINISTRATIVE_AREA",
                          "SUB_ADMINISTRATIVE_AREA",
                          "LOCALITY",
                          "POSTAL_CODE",
                          "SUB_LOCALITY",
                          "SUB_LOCALITY_1",
                          "SUB_LOCALITY_2",
                          "NEIGHBORHOOD",
                          "STREET_ADDRESS"
                        ],
                        "type": "string",
                        "description": "The type of a location, which corresponds to the address lines field of google.type.PostalAddress. For example, \"Downtown, Atlanta, GA, USA\" has a type of LocationType.NEIGHBORHOOD, and \"Kansas City, KS, USA\" has a type of LocationType.LOCALITY.",
                        "enumDescriptions": [
                          "Default value if the type isn't specified.",
                          "A country level location.",
                          "A state or equivalent level location.",
                          "A county or equivalent level location.",
                          "A city or equivalent level location.",
                          "A postal code level location.",
                          "A sublocality is a subdivision of a locality, for example a city borough, ward, or arrondissement. Sublocalities are usually recognized by a local political authority. For example, Manhattan and Brooklyn are recognized as boroughs by the City of New York, and are therefore modeled as sublocalities.",
                          "A district or equivalent level location.",
                          "A smaller district or equivalent level display.",
                          "A neighborhood level location.",
                          "A street address level location."
                        ]
                      },
                      "postalAddress": {
                        "id": "PostalAddress",
                        "type": "object",
                        "properties": {
                          "locality": {
                            "type": "string",
                            "description": "Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use address_lines."
                          },
                          "revision": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The schema revision of the `PostalAddress`. This must be set to 0, which is the latest revision. All new revisions **must** be backward compatible with old revisions."
                          },
                          "postalCode": {
                            "type": "string",
                            "description": "Optional. Postal code of the address. Not all countries use or require postal codes to be present, but where they are used, they may trigger additional validation with other parts of the address (e.g. state/zip validation in the U.S.A.)."
                          },
                          "recipients": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "Optional. The recipient at the address. This field may, under certain circumstances, contain multiline information. For example, it might contain \"care of\" information."
                          },
                          "regionCode": {
                            "type": "string",
                            "description": "Required. CLDR region code of the country/region of the address. This is never inferred and it is up to the user to ensure the value is correct. See http://cldr.unicode.org/ and http://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: \"CH\" for Switzerland."
                          },
                          "sortingCode": {
                            "type": "string",
                            "description": "Optional. Additional, country-specific, sorting code. This is not used in most regions. Where it is used, the value is either a string like \"CEDEX\", optionally followed by a number (e.g. \"CEDEX 7\"), or just a number alone, representing the \"sector code\" (Jamaica), \"delivery area indicator\" (Malawi) or \"post office indicator\" (e.g. Côte d'Ivoire)."
                          },
                          "sublocality": {
                            "type": "string",
                            "description": "Optional. Sublocality of the address. For example, this can be neighborhoods, boroughs, districts."
                          },
                          "addressLines": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "Unstructured address lines describing the lower levels of an address. Because values in address_lines do not have type information and may sometimes contain multiple values in a single field (e.g. \"Austin, TX\"), it is important that the line order is clear. The order of address lines should be \"envelope order\" for the country/region of the address. In places where this can vary (e.g. Japan), address_language is used to make it explicit (e.g. \"ja\" for large-to-small ordering and \"ja-Latn\" or \"en\" for small-to-large). This way, the most specific line of an address can be selected based on the language. The minimum permitted structural representation of an address consists of a region_code with all remaining information placed in the address_lines. It would be possible to format such an address very approximately without geocoding, but no semantic reasoning could be made about any of the address components until it was at least partially resolved. Creating an address only containing a region_code and address_lines, and then geocoding is the recommended way to handle completely unstructured addresses (as opposed to guessing which parts of the address should be localities or administrative areas)."
                          },
                          "languageCode": {
                            "type": "string",
                            "description": "Optional. BCP-47 language code of the contents of this address (if known). This is often the UI language of the input form or is expected to match one of the languages used in the address' country/region, or their transliterated equivalents. This can affect formatting in certain countries, but is not critical to the correctness of the data and will never affect any validation or other non-formatting related operations. If this value is not known, it should be omitted (rather than specifying a possibly incorrect default). Examples: \"zh-Hant\", \"ja\", \"ja-Latn\", \"en\"."
                          },
                          "organization": {
                            "type": "string",
                            "description": "Optional. The name of the organization at the address."
                          },
                          "administrativeArea": {
                            "type": "string",
                            "description": "Optional. Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state, a province, an oblast, or a prefecture. Specifically, for Spain this is the province and not the autonomous community (e.g. \"Barcelona\" and not \"Catalonia\"). Many countries don't use an administrative area in postal addresses. E.g. in Switzerland this should be left unpopulated."
                          }
                        },
                        "description": "Postal address of the location that includes human readable information, such as postal delivery and payments addresses. Given a postal address, a postal service can deliver items to a premises, P.O. Box, or other delivery location."
                      }
                    },
                    "description": "A resource that represents a location with full geographic information."
                  },
                  "description": "Structured locations of the job, resolved from Job.addresses. locations are exactly matched to Job.addresses in the same order."
                },
                "jobCategories": {
                  "type": "array",
                  "items": {
                    "enum": [
                      "JOB_CATEGORY_UNSPECIFIED",
                      "ACCOUNTING_AND_FINANCE",
                      "ADMINISTRATIVE_AND_OFFICE",
                      "ADVERTISING_AND_MARKETING",
                      "ANIMAL_CARE",
                      "ART_FASHION_AND_DESIGN",
                      "BUSINESS_OPERATIONS",
                      "CLEANING_AND_FACILITIES",
                      "COMPUTER_AND_IT",
                      "CONSTRUCTION",
                      "CUSTOMER_SERVICE",
                      "EDUCATION",
                      "ENTERTAINMENT_AND_TRAVEL",
                      "FARMING_AND_OUTDOORS",
                      "HEALTHCARE",
                      "HUMAN_RESOURCES",
                      "INSTALLATION_MAINTENANCE_AND_REPAIR",
                      "LEGAL",
                      "MANAGEMENT",
                      "MANUFACTURING_AND_WAREHOUSE",
                      "MEDIA_COMMUNICATIONS_AND_WRITING",
                      "OIL_GAS_AND_MINING",
                      "PERSONAL_CARE_AND_SERVICES",
                      "PROTECTIVE_SERVICES",
                      "REAL_ESTATE",
                      "RESTAURANT_AND_HOSPITALITY",
                      "SALES_AND_RETAIL",
                      "SCIENCE_AND_ENGINEERING",
                      "SOCIAL_SERVICES_AND_NON_PROFIT",
                      "SPORTS_FITNESS_AND_RECREATION",
                      "TRANSPORTATION_AND_LOGISTICS"
                    ],
                    "type": "string",
                    "enumDescriptions": [
                      "The default value if the category isn't specified.",
                      "An accounting and finance job, such as an Accountant.",
                      "An administrative and office job, such as an Administrative Assistant.",
                      "An advertising and marketing job, such as Marketing Manager.",
                      "An animal care job, such as Veterinarian.",
                      "An art, fashion, or design job, such as Designer.",
                      "A business operations job, such as Business Operations Manager.",
                      "A cleaning and facilities job, such as Custodial Staff.",
                      "A computer and IT job, such as Systems Administrator.",
                      "A construction job, such as General Laborer.",
                      "A customer service job, such s Cashier.",
                      "An education job, such as School Teacher.",
                      "An entertainment and travel job, such as Flight Attendant.",
                      "A farming or outdoor job, such as Park Ranger.",
                      "A healthcare job, such as Registered Nurse.",
                      "A human resources job, such as Human Resources Director.",
                      "An installation, maintenance, or repair job, such as Electrician.",
                      "A legal job, such as Law Clerk.",
                      "A management job, often used in conjunction with another category, such as Store Manager.",
                      "A manufacturing or warehouse job, such as Assembly Technician.",
                      "A media, communications, or writing job, such as Media Relations.",
                      "An oil, gas or mining job, such as Offshore Driller.",
                      "A personal care and services job, such as Hair Stylist.",
                      "A protective services job, such as Security Guard.",
                      "A real estate job, such as Buyer's Agent.",
                      "A restaurant and hospitality job, such as Restaurant Server.",
                      "A sales and/or retail job, such Sales Associate.",
                      "A science and engineering job, such as Lab Technician.",
                      "A social services or non-profit job, such as Case Worker.",
                      "A sports, fitness, or recreation job, such as Personal Trainer.",
                      "A transportation or logistics job, such as Truck Driver."
                    ]
                  },
                  "description": "Job categories derived from Job.title and Job.description."
                }
              },
              "description": "Output only. Derived details about the job posting."
            },
            "description": {
              "type": "string",
              "description": "Required. The description of the job, which typically includes a multi-paragraph description of the company and related information. Separate fields are provided on the job object for responsibilities, qualifications, and other job characteristics. Use of these separate job fields is recommended. This field accepts and sanitizes HTML input, and also accepts bold, italic, ordered list, and unordered list markup tags. The maximum number of allowed characters is 100,000."
            },
            "jobBenefits": {
              "type": "array",
              "items": {
                "enum": [
                  "JOB_BENEFIT_UNSPECIFIED",
                  "CHILD_CARE",
                  "DENTAL",
                  "DOMESTIC_PARTNER",
                  "FLEXIBLE_HOURS",
                  "MEDICAL",
                  "LIFE_INSURANCE",
                  "PARENTAL_LEAVE",
                  "RETIREMENT_PLAN",
                  "SICK_DAYS",
                  "VACATION",
                  "VISION"
                ],
                "type": "string",
                "enumDescriptions": [
                  "Default value if the type isn't specified.",
                  "The job includes access to programs that support child care, such as daycare.",
                  "The job includes dental services covered by a dental insurance plan.",
                  "The job offers specific benefits to domestic partners.",
                  "The job allows for a flexible work schedule.",
                  "The job includes health services covered by a medical insurance plan.",
                  "The job includes a life insurance plan provided by the employer or available for purchase by the employee.",
                  "The job allows for a leave of absence to a parent to care for a newborn child.",
                  "The job includes a workplace retirement plan provided by the employer or available for purchase by the employee.",
                  "The job allows for paid time off due to illness.",
                  "The job includes paid time off for vacation.",
                  "The job includes vision services covered by a vision insurance plan."
                ]
              },
              "description": "The benefits included with the job."
            },
            "jobStartTime": {
              "type": "string",
              "format": "google-datetime",
              "description": "The start timestamp of the job in UTC time zone. Typically this field is used for contracting engagements. Invalid timestamps are ignored."
            },
            "languageCode": {
              "type": "string",
              "description": "The language of the posting. This field is distinct from any requirements for fluency that are associated with the job. Language codes must be in BCP-47 format, such as \"en-US\" or \"sr-Latn\". For more information, see [Tags for Identifying Languages](https://tools.ietf.org/html/bcp47){: class=\"external\" target=\"_blank\" }. If this field is unspecified and Job.description is present, detected language code based on Job.description is assigned, otherwise defaults to 'en_US'."
            },
            "postingRegion": {
              "enum": [
                "POSTING_REGION_UNSPECIFIED",
                "ADMINISTRATIVE_AREA",
                "NATION",
                "TELECOMMUTE"
              ],
              "type": "string",
              "description": "The job PostingRegion (for example, state, country) throughout which the job is available. If this field is set, a LocationFilter in a search query within the job region finds this job posting if an exact location match isn't specified. If this field is set to PostingRegion.NATION or PostingRegion.ADMINISTRATIVE_AREA, setting job Job.addresses to the same location level as this field is strongly recommended.",
              "enumDescriptions": [
                "If the region is unspecified, the job is only returned if it matches the LocationFilter.",
                "In addition to exact location matching, job posting is returned when the LocationFilter in the search query is in the same administrative area as the returned job posting. For example, if a `ADMINISTRATIVE_AREA` job is posted in \"CA, USA\", it's returned if LocationFilter has \"Mountain View\". Administrative area refers to top-level administrative subdivision of this country. For example, US state, IT region, UK constituent nation and JP prefecture.",
                "In addition to exact location matching, job is returned when LocationFilter in search query is in the same country as this job. For example, if a `NATION_WIDE` job is posted in \"USA\", it's returned if LocationFilter has 'Mountain View'.",
                "Job allows employees to work remotely (telecommute). If locations are provided with this value, the job is considered as having a location, but telecommuting is allowed."
              ]
            },
            "requisitionId": {
              "type": "string",
              "description": "Required. The requisition ID, also referred to as the posting ID, is assigned by the client to identify a job. This field is intended to be used by clients for client identification and tracking of postings. A job isn't allowed to be created if there is another job with the same company, language_code and requisition_id. The maximum number of allowed characters is 255."
            },
            "promotionValue": {
              "type": "integer",
              "format": "int32",
              "description": "A promotion value of the job, as determined by the client. The value determines the sort order of the jobs returned when searching for jobs using the featured jobs search call, with higher promotional values being returned first and ties being resolved by relevance sort. Only the jobs with a promotionValue >0 are returned in a FEATURED_JOB_SEARCH. Default value is 0, and negative values are treated as 0."
            },
            "qualifications": {
              "type": "string",
              "description": "A description of the qualifications required to perform the job. The use of this field is recommended as an alternative to using the more general description field. This field accepts and sanitizes HTML input, and also accepts bold, italic, ordered list, and unordered list markup tags. The maximum number of allowed characters is 10,000."
            },
            "applicationInfo": {
              "id": "ApplicationInfo",
              "type": "object",
              "properties": {
                "uris": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Use this URI field to direct an applicant to a website, for example to link to an online application form. The maximum number of allowed characters for each entry is 2,000."
                },
                "emails": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Use this field to specify email address(es) to which resumes or applications can be sent. The maximum number of allowed characters for each entry is 255."
                },
                "instruction": {
                  "type": "string",
                  "description": "Use this field to provide instructions, such as \"Mail your application to ...\", that a candidate can follow to apply for the job. This field accepts and sanitizes HTML input, and also accepts bold, italic, ordered list, and unordered list markup tags. The maximum number of allowed characters is 3,000."
                }
              },
              "description": "Job application information."
            },
            "employmentTypes": {
              "type": "array",
              "items": {
                "enum": [
                  "EMPLOYMENT_TYPE_UNSPECIFIED",
                  "FULL_TIME",
                  "PART_TIME",
                  "CONTRACTOR",
                  "CONTRACT_TO_HIRE",
                  "TEMPORARY",
                  "INTERN",
                  "VOLUNTEER",
                  "PER_DIEM",
                  "FLY_IN_FLY_OUT",
                  "OTHER_EMPLOYMENT_TYPE"
                ],
                "type": "string",
                "enumDescriptions": [
                  "The default value if the employment type isn't specified.",
                  "The job requires working a number of hours that constitute full time employment, typically 40 or more hours per week.",
                  "The job entails working fewer hours than a full time job, typically less than 40 hours a week.",
                  "The job is offered as a contracted, as opposed to a salaried employee, position.",
                  "The job is offered as a contracted position with the understanding that it's converted into a full-time position at the end of the contract. Jobs of this type are also returned by a search for EmploymentType.CONTRACTOR jobs.",
                  "The job is offered as a temporary employment opportunity, usually a short-term engagement.",
                  "The job is a fixed-term opportunity for students or entry-level job seekers to obtain on-the-job training, typically offered as a summer position.",
                  "The is an opportunity for an individual to volunteer, where there's no expectation of compensation for the provided services.",
                  "The job requires an employee to work on an as-needed basis with a flexible schedule.",
                  "The job involves employing people in remote areas and flying them temporarily to the work site instead of relocating employees and their families permanently.",
                  "The job does not fit any of the other listed types."
                ]
              },
              "description": "The employment type(s) of a job, for example, full time or part time."
            },
            "compensationInfo": {
              "id": "CompensationInfo",
              "type": "object",
              "properties": {
                "entries": {
                  "type": "array",
                  "items": {
                    "id": "CompensationEntry",
                    "type": "object",
                    "properties": {
                      "type": {
                        "enum": [
                          "COMPENSATION_TYPE_UNSPECIFIED",
                          "BASE",
                          "BONUS",
                          "SIGNING_BONUS",
                          "EQUITY",
                          "PROFIT_SHARING",
                          "COMMISSIONS",
                          "TIPS",
                          "OTHER_COMPENSATION_TYPE"
                        ],
                        "type": "string",
                        "description": "Compensation type. Default is CompensationType.COMPENSATION_TYPE_UNSPECIFIED.",
                        "enumDescriptions": [
                          "Default value.",
                          "Base compensation: Refers to the fixed amount of money paid to an employee by an employer in return for work performed. Base compensation does not include benefits, bonuses or any other potential compensation from an employer.",
                          "Bonus.",
                          "Signing bonus.",
                          "Equity.",
                          "Profit sharing.",
                          "Commission.",
                          "Tips.",
                          "Other compensation type."
                        ]
                      },
                      "unit": {
                        "enum": [
                          "COMPENSATION_UNIT_UNSPECIFIED",
                          "HOURLY",
                          "DAILY",
                          "WEEKLY",
                          "MONTHLY",
                          "YEARLY",
                          "ONE_TIME",
                          "OTHER_COMPENSATION_UNIT"
                        ],
                        "type": "string",
                        "description": "Frequency of the specified amount. Default is CompensationUnit.COMPENSATION_UNIT_UNSPECIFIED.",
                        "enumDescriptions": [
                          "Default value.",
                          "Hourly.",
                          "Daily.",
                          "Weekly",
                          "Monthly.",
                          "Yearly.",
                          "One time.",
                          "Other compensation units."
                        ]
                      },
                      "range": {
                        "id": "CompensationRange",
                        "type": "object",
                        "properties": {
                          "maxCompensation": {
                            "id": "Money",
                            "type": "object",
                            "properties": {
                              "nanos": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Number of nano (10^-9) units of the amount. The value must be between -999,999,999 and +999,999,999 inclusive. If `units` is positive, `nanos` must be positive or zero. If `units` is zero, `nanos` can be positive, zero, or negative. If `units` is negative, `nanos` must be negative or zero. For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000."
                              },
                              "units": {
                                "type": "string",
                                "format": "int64",
                                "description": "The whole units of the amount. For example if `currencyCode` is `\"USD\"`, then 1 unit is one US dollar."
                              },
                              "currencyCode": {
                                "type": "string",
                                "description": "The three-letter currency code defined in ISO 4217."
                              }
                            },
                            "description": "The maximum amount of compensation. If left empty, the value is set to a maximal compensation value and the currency code is set to match the currency code of min_compensation."
                          },
                          "minCompensation": {
                            "id": "Money",
                            "type": "object",
                            "properties": {
                              "nanos": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Number of nano (10^-9) units of the amount. The value must be between -999,999,999 and +999,999,999 inclusive. If `units` is positive, `nanos` must be positive or zero. If `units` is zero, `nanos` can be positive, zero, or negative. If `units` is negative, `nanos` must be negative or zero. For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000."
                              },
                              "units": {
                                "type": "string",
                                "format": "int64",
                                "description": "The whole units of the amount. For example if `currencyCode` is `\"USD\"`, then 1 unit is one US dollar."
                              },
                              "currencyCode": {
                                "type": "string",
                                "description": "The three-letter currency code defined in ISO 4217."
                              }
                            },
                            "description": "The minimum amount of compensation. If left empty, the value is set to zero and the currency code is set to match the currency code of max_compensation."
                          }
                        },
                        "description": "Compensation range."
                      },
                      "amount": {
                        "id": "Money",
                        "type": "object",
                        "properties": {
                          "nanos": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Number of nano (10^-9) units of the amount. The value must be between -999,999,999 and +999,999,999 inclusive. If `units` is positive, `nanos` must be positive or zero. If `units` is zero, `nanos` can be positive, zero, or negative. If `units` is negative, `nanos` must be negative or zero. For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000."
                          },
                          "units": {
                            "type": "string",
                            "format": "int64",
                            "description": "The whole units of the amount. For example if `currencyCode` is `\"USD\"`, then 1 unit is one US dollar."
                          },
                          "currencyCode": {
                            "type": "string",
                            "description": "The three-letter currency code defined in ISO 4217."
                          }
                        },
                        "description": "Compensation amount."
                      },
                      "description": {
                        "type": "string",
                        "description": "Compensation description. For example, could indicate equity terms or provide additional context to an estimated bonus."
                      },
                      "expectedUnitsPerYear": {
                        "type": "number",
                        "format": "double",
                        "description": "Expected number of units paid each year. If not specified, when Job.employment_types is FULLTIME, a default value is inferred based on unit. Default values: - HOURLY: 2080 - DAILY: 260 - WEEKLY: 52 - MONTHLY: 12 - ANNUAL: 1"
                      }
                    },
                    "description": "A compensation entry that represents one component of compensation, such as base pay, bonus, or other compensation type. Annualization: One compensation entry can be annualized if - it contains valid amount or range. - and its expected_units_per_year is set or can be derived. Its annualized range is determined as (amount or range) times expected_units_per_year."
                  },
                  "description": "Job compensation information. At most one entry can be of type CompensationInfo.CompensationType.BASE, which is referred as **base compensation entry** for the job."
                },
                "annualizedBaseCompensationRange": {
                  "id": "CompensationRange",
                  "type": "object",
                  "readOnly": true,
                  "properties": {
                    "maxCompensation": {
                      "id": "Money",
                      "type": "object",
                      "properties": {
                        "nanos": {
                          "type": "integer",
                          "format": "int32",
                          "description": "Number of nano (10^-9) units of the amount. The value must be between -999,999,999 and +999,999,999 inclusive. If `units` is positive, `nanos` must be positive or zero. If `units` is zero, `nanos` can be positive, zero, or negative. If `units` is negative, `nanos` must be negative or zero. For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000."
                        },
                        "units": {
                          "type": "string",
                          "format": "int64",
                          "description": "The whole units of the amount. For example if `currencyCode` is `\"USD\"`, then 1 unit is one US dollar."
                        },
                        "currencyCode": {
                          "type": "string",
                          "description": "The three-letter currency code defined in ISO 4217."
                        }
                      },
                      "description": "The maximum amount of compensation. If left empty, the value is set to a maximal compensation value and the currency code is set to match the currency code of min_compensation."
                    },
                    "minCompensation": {
                      "id": "Money",
                      "type": "object",
                      "properties": {
                        "nanos": {
                          "type": "integer",
                          "format": "int32",
                          "description": "Number of nano (10^-9) units of the amount. The value must be between -999,999,999 and +999,999,999 inclusive. If `units` is positive, `nanos` must be positive or zero. If `units` is zero, `nanos` can be positive, zero, or negative. If `units` is negative, `nanos` must be negative or zero. For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000."
                        },
                        "units": {
                          "type": "string",
                          "format": "int64",
                          "description": "The whole units of the amount. For example if `currencyCode` is `\"USD\"`, then 1 unit is one US dollar."
                        },
                        "currencyCode": {
                          "type": "string",
                          "description": "The three-letter currency code defined in ISO 4217."
                        }
                      },
                      "description": "The minimum amount of compensation. If left empty, the value is set to zero and the currency code is set to match the currency code of max_compensation."
                    }
                  },
                  "description": "Output only. Annualized base compensation range. Computed as base compensation entry's CompensationEntry.amount times CompensationEntry.expected_units_per_year. See CompensationEntry for explanation on compensation annualization."
                },
                "annualizedTotalCompensationRange": {
                  "id": "CompensationRange",
                  "type": "object",
                  "readOnly": true,
                  "properties": {
                    "maxCompensation": {
                      "id": "Money",
                      "type": "object",
                      "properties": {
                        "nanos": {
                          "type": "integer",
                          "format": "int32",
                          "description": "Number of nano (10^-9) units of the amount. The value must be between -999,999,999 and +999,999,999 inclusive. If `units` is positive, `nanos` must be positive or zero. If `units` is zero, `nanos` can be positive, zero, or negative. If `units` is negative, `nanos` must be negative or zero. For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000."
                        },
                        "units": {
                          "type": "string",
                          "format": "int64",
                          "description": "The whole units of the amount. For example if `currencyCode` is `\"USD\"`, then 1 unit is one US dollar."
                        },
                        "currencyCode": {
                          "type": "string",
                          "description": "The three-letter currency code defined in ISO 4217."
                        }
                      },
                      "description": "The maximum amount of compensation. If left empty, the value is set to a maximal compensation value and the currency code is set to match the currency code of min_compensation."
                    },
                    "minCompensation": {
                      "id": "Money",
                      "type": "object",
                      "properties": {
                        "nanos": {
                          "type": "integer",
                          "format": "int32",
                          "description": "Number of nano (10^-9) units of the amount. The value must be between -999,999,999 and +999,999,999 inclusive. If `units` is positive, `nanos` must be positive or zero. If `units` is zero, `nanos` can be positive, zero, or negative. If `units` is negative, `nanos` must be negative or zero. For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000."
                        },
                        "units": {
                          "type": "string",
                          "format": "int64",
                          "description": "The whole units of the amount. For example if `currencyCode` is `\"USD\"`, then 1 unit is one US dollar."
                        },
                        "currencyCode": {
                          "type": "string",
                          "description": "The three-letter currency code defined in ISO 4217."
                        }
                      },
                      "description": "The minimum amount of compensation. If left empty, the value is set to zero and the currency code is set to match the currency code of max_compensation."
                    }
                  },
                  "description": "Output only. Annualized total compensation range. Computed as all compensation entries' CompensationEntry.amount times CompensationEntry.expected_units_per_year. See CompensationEntry for explanation on compensation annualization."
                }
              },
              "description": "Job compensation information (a.k.a. \"pay rate\") i.e., the compensation that will paid to the employee."
            },
            "customAttributes": {
              "type": "object",
              "description": "A map of fields to hold both filterable and non-filterable custom job attributes that are not covered by the provided structured fields. The keys of the map are strings up to 64 bytes and must match the pattern: a-zA-Z*. For example, key0LikeThis or KEY_1_LIKE_THIS. At most 100 filterable and at most 100 unfilterable keys are supported. For filterable `string_values`, across all keys at most 200 values are allowed, with each string no more than 255 characters. For unfilterable `string_values`, the maximum total size of `string_values` across all keys is 50KB.",
              "additionalProperties": {
                "id": "CustomAttribute",
                "type": "object",
                "properties": {
                  "filterable": {
                    "type": "boolean",
                    "description": "If the `filterable` flag is true, the custom field values may be used for custom attribute filters JobQuery.custom_attribute_filter. If false, these values may not be used for custom attribute filters. Default is false."
                  },
                  "longValues": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "int64"
                    },
                    "description": "Exactly one of string_values or long_values must be specified. This field is used to perform number range search. (`EQ`, `GT`, `GE`, `LE`, `LT`) over filterable `long_value`. Currently at most 1 long_values is supported."
                  },
                  "stringValues": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Exactly one of string_values or long_values must be specified. This field is used to perform a string match (`CASE_SENSITIVE_MATCH` or `CASE_INSENSITIVE_MATCH`) search. For filterable `string_value`s, a maximum total number of 200 values is allowed, with each `string_value` has a byte size of no more than 500B. For unfilterable `string_values`, the maximum total byte size of unfilterable `string_values` is 50KB. Empty string isn't allowed."
                  },
                  "keywordSearchable": {
                    "type": "boolean",
                    "description": "If the `keyword_searchable` flag is true, the keywords in custom fields are searchable by keyword match. If false, the values are not searchable by keyword match. Default is false."
                  }
                },
                "description": "Custom attribute values that are either filterable or non-filterable."
              }
            },
            "responsibilities": {
              "type": "string",
              "description": "A description of job responsibilities. The use of this field is recommended as an alternative to using the more general description field. This field accepts and sanitizes HTML input, and also accepts bold, italic, ordered list, and unordered list markup tags. The maximum number of allowed characters is 10,000."
            },
            "postingCreateTime": {
              "type": "string",
              "format": "google-datetime",
              "readOnly": true,
              "description": "Output only. The timestamp when this job posting was created."
            },
            "postingExpireTime": {
              "type": "string",
              "format": "google-datetime",
              "description": "Strongly recommended for the best service experience. The expiration timestamp of the job. After this timestamp, the job is marked as expired, and it no longer appears in search results. The expired job can't be listed by the ListJobs API, but it can be retrieved with the GetJob API or updated with the UpdateJob API or deleted with the DeleteJob API. An expired job can be updated and opened again by using a future expiration timestamp. Updating an expired job fails if there is another existing open job with same company, language_code and requisition_id. The expired jobs are retained in our system for 90 days. However, the overall expired job count cannot exceed 3 times the maximum number of open jobs over previous 7 days. If this threshold is exceeded, expired jobs are cleaned out in order of earliest expire time. Expired jobs are no longer accessible after they are cleaned out. Invalid timestamps are ignored, and treated as expire time not provided. If the timestamp is before the instant request is made, the job is treated as expired immediately on creation. This kind of job can not be updated. And when creating a job with past timestamp, the posting_publish_time must be set before posting_expire_time. The purpose of this feature is to allow other objects, such as Application, to refer a job that didn't exist in the system prior to becoming expired. If you want to modify a job that was expired on creation, delete it and create a new one. If this value isn't provided at the time of job creation or is invalid, the job posting expires after 30 days from the job's creation time. For example, if the job was created on 2017/01/01 13:00AM UTC with an unspecified expiration date, the job expires after 2017/01/31 13:00AM UTC. If this value isn't provided on job update, it depends on the field masks set by UpdateJobRequest.update_mask. If the field masks include job_end_time, or the masks are empty meaning that every field is updated, the job posting expires after 30 days from the job's last update time. Otherwise the expiration date isn't updated."
            },
            "postingUpdateTime": {
              "type": "string",
              "format": "google-datetime",
              "readOnly": true,
              "description": "Output only. The timestamp when this job posting was last updated."
            },
            "processingOptions": {
              "id": "ProcessingOptions",
              "type": "object",
              "properties": {
                "htmlSanitization": {
                  "enum": [
                    "HTML_SANITIZATION_UNSPECIFIED",
                    "HTML_SANITIZATION_DISABLED",
                    "SIMPLE_FORMATTING_ONLY"
                  ],
                  "type": "string",
                  "description": "Option for job HTML content sanitization. Applied fields are: * description * applicationInfo.instruction * incentives * qualifications * responsibilities HTML tags in these fields may be stripped if sanitiazation isn't disabled. Defaults to HtmlSanitization.SIMPLE_FORMATTING_ONLY.",
                  "enumDescriptions": [
                    "Default value.",
                    "Disables sanitization on HTML input.",
                    "Sanitizes HTML input, only accepts bold, italic, ordered list, and unordered list markup tags."
                  ]
                },
                "disableStreetAddressResolution": {
                  "type": "boolean",
                  "description": "If set to `true`, the service does not attempt to resolve a more precise address for the job."
                }
              },
              "description": "Options for job processing."
            },
            "companyDisplayName": {
              "type": "string",
              "readOnly": true,
              "description": "Output only. Display name of the company listing the job."
            },
            "postingPublishTime": {
              "type": "string",
              "format": "google-datetime",
              "description": "The timestamp this job posting was most recently published. The default value is the time the request arrives at the server. Invalid timestamps are ignored."
            }
          },
          "description": "A Job resource represents a job posting (also referred to as a \"job listing\" or \"job requisition\"). A job belongs to a Company, which is the hiring entity responsible for the job."
        }
      ]
  projects.tenants.jobs.list:
    description: |-
      Lists jobs by filter.
    versions:
      from: 4.0.0
    link: https://cloud.google.com/talent-solution/job-search/docs/reference/rest/v4/projects.tenants.jobs/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "ListJobsResponse",
          "type": "object",
          "properties": {
            "jobs": {
              "type": "array",
              "items": {
                "id": "Job",
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Required during job update. The resource name for the job. This is generated by the service when a job is created. The format is \"projects/{project_id}/tenants/{tenant_id}/jobs/{job_id}\". For example, \"projects/foo/tenants/bar/jobs/baz\". Use of this field in job queries and API calls is preferred over the use of requisition_id since this value is unique."
                  },
                  "title": {
                    "type": "string",
                    "description": "Required. The title of the job, such as \"Software Engineer\" The maximum number of allowed characters is 500."
                  },
                  "company": {
                    "type": "string",
                    "description": "Required. The resource name of the company listing the job. The format is \"projects/{project_id}/tenants/{tenant_id}/companies/{company_id}\". For example, \"projects/foo/tenants/bar/companies/baz\"."
                  },
                  "jobLevel": {
                    "enum": [
                      "JOB_LEVEL_UNSPECIFIED",
                      "ENTRY_LEVEL",
                      "EXPERIENCED",
                      "MANAGER",
                      "DIRECTOR",
                      "EXECUTIVE"
                    ],
                    "type": "string",
                    "description": "The experience level associated with the job, such as \"Entry Level\".",
                    "enumDescriptions": [
                      "The default value if the level isn't specified.",
                      "Entry-level individual contributors, typically with less than 2 years of experience in a similar role. Includes interns.",
                      "Experienced individual contributors, typically with 2+ years of experience in a similar role.",
                      "Entry- to mid-level managers responsible for managing a team of people.",
                      "Senior-level managers responsible for managing teams of managers.",
                      "Executive-level managers and above, including C-level positions."
                    ]
                  },
                  "addresses": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Strongly recommended for the best service experience. Location(s) where the employer is looking to hire for this job posting. Specifying the full street address(es) of the hiring location enables better API results, especially job searches by commute time. At most 50 locations are allowed for best search performance. If a job has more locations, it is suggested to split it into multiple jobs with unique requisition_ids (e.g. 'ReqA' becomes 'ReqA-1', 'ReqA-2', and so on.) as multiple jobs with the same company, language_code and requisition_id are not allowed. If the original requisition_id must be preserved, a custom field should be used for storage. It is also suggested to group the locations that close to each other in the same job for better search experience. Jobs with multiple addresses must have their addresses with the same LocationType to allow location filtering to work properly. (For example, a Job with addresses \"1600 Amphitheatre Parkway, Mountain View, CA, USA\" and \"London, UK\" may not have location filters applied correctly at search time since the first is a LocationType.STREET_ADDRESS and the second is a LocationType.LOCALITY.) If a job needs to have multiple addresses, it is suggested to split it into multiple jobs with same LocationTypes. The maximum number of allowed characters is 500."
                  },
                  "department": {
                    "type": "string",
                    "description": "The department or functional area within the company with the open position. The maximum number of allowed characters is 255."
                  },
                  "incentives": {
                    "type": "string",
                    "description": "A description of bonus, commission, and other compensation incentives associated with the job not including salary or pay. The maximum number of allowed characters is 10,000."
                  },
                  "jobEndTime": {
                    "type": "string",
                    "format": "google-datetime",
                    "description": "The end timestamp of the job. Typically this field is used for contracting engagements. Invalid timestamps are ignored."
                  },
                  "visibility": {
                    "enum": [
                      "VISIBILITY_UNSPECIFIED",
                      "ACCOUNT_ONLY",
                      "SHARED_WITH_GOOGLE",
                      "SHARED_WITH_PUBLIC"
                    ],
                    "type": "string",
                    "description": "Deprecated. The job is only visible to the owner. The visibility of the job. Defaults to Visibility.ACCOUNT_ONLY if not specified.",
                    "enumDescriptions": [
                      "Default value.",
                      "The resource is only visible to the GCP account who owns it.",
                      "The resource is visible to the owner and may be visible to other applications and processes at Google.",
                      "The resource is visible to the owner and may be visible to all other API clients."
                    ]
                  },
                  "degreeTypes": {
                    "type": "array",
                    "items": {
                      "enum": [
                        "DEGREE_TYPE_UNSPECIFIED",
                        "PRIMARY_EDUCATION",
                        "LOWER_SECONDARY_EDUCATION",
                        "UPPER_SECONDARY_EDUCATION",
                        "ADULT_REMEDIAL_EDUCATION",
                        "ASSOCIATES_OR_EQUIVALENT",
                        "BACHELORS_OR_EQUIVALENT",
                        "MASTERS_OR_EQUIVALENT",
                        "DOCTORAL_OR_EQUIVALENT"
                      ],
                      "type": "string",
                      "enumDescriptions": [
                        "Default value. Represents no degree, or early childhood education. Maps to ISCED code 0. Ex) Kindergarten",
                        "Primary education which is typically the first stage of compulsory education. ISCED code 1. Ex) Elementary school",
                        "Lower secondary education; First stage of secondary education building on primary education, typically with a more subject-oriented curriculum. ISCED code 2. Ex) Middle school",
                        "Middle education; Second/final stage of secondary education preparing for tertiary education and/or providing skills relevant to employment. Usually with an increased range of subject options and streams. ISCED code 3. Ex) High school",
                        "Adult Remedial Education; Programmes providing learning experiences that build on secondary education and prepare for labour market entry and/or tertiary education. The content is broader than secondary but not as complex as tertiary education. ISCED code 4.",
                        "Associate's or equivalent; Short first tertiary programmes that are typically practically-based, occupationally-specific and prepare for labour market entry. These programmes may also provide a pathway to other tertiary programmes. ISCED code 5.",
                        "Bachelor's or equivalent; Programmes designed to provide intermediate academic and/or professional knowledge, skills and competencies leading to a first tertiary degree or equivalent qualification. ISCED code 6.",
                        "Master's or equivalent; Programmes designed to provide advanced academic and/or professional knowledge, skills and competencies leading to a second tertiary degree or equivalent qualification. ISCED code 7.",
                        "Doctoral or equivalent; Programmes designed primarily to lead to an advanced research qualification, usually concluding with the submission and defense of a substantive dissertation of publishable quality based on original research. ISCED code 8."
                      ]
                    },
                    "description": "The desired education degrees for the job, such as Bachelors, Masters."
                  },
                  "derivedInfo": {
                    "id": "JobDerivedInfo",
                    "type": "object",
                    "readOnly": true,
                    "properties": {
                      "locations": {
                        "type": "array",
                        "items": {
                          "id": "Location",
                          "type": "object",
                          "properties": {
                            "latLng": {
                              "id": "LatLng",
                              "type": "object",
                              "properties": {
                                "latitude": {
                                  "type": "number",
                                  "format": "double",
                                  "description": "The latitude in degrees. It must be in the range [-90.0, +90.0]."
                                },
                                "longitude": {
                                  "type": "number",
                                  "format": "double",
                                  "description": "The longitude in degrees. It must be in the range [-180.0, +180.0]."
                                }
                              },
                              "description": "An object representing a latitude/longitude pair."
                            },
                            "radiusMiles": {
                              "type": "number",
                              "format": "double",
                              "description": "Radius in miles of the job location. This value is derived from the location bounding box in which a circle with the specified radius centered from google.type.LatLng covers the area associated with the job location. For example, currently, \"Mountain View, CA, USA\" has a radius of 6.17 miles."
                            },
                            "locationType": {
                              "enum": [
                                "LOCATION_TYPE_UNSPECIFIED",
                                "COUNTRY",
                                "ADMINISTRATIVE_AREA",
                                "SUB_ADMINISTRATIVE_AREA",
                                "LOCALITY",
                                "POSTAL_CODE",
                                "SUB_LOCALITY",
                                "SUB_LOCALITY_1",
                                "SUB_LOCALITY_2",
                                "NEIGHBORHOOD",
                                "STREET_ADDRESS"
                              ],
                              "type": "string",
                              "description": "The type of a location, which corresponds to the address lines field of google.type.PostalAddress. For example, \"Downtown, Atlanta, GA, USA\" has a type of LocationType.NEIGHBORHOOD, and \"Kansas City, KS, USA\" has a type of LocationType.LOCALITY.",
                              "enumDescriptions": [
                                "Default value if the type isn't specified.",
                                "A country level location.",
                                "A state or equivalent level location.",
                                "A county or equivalent level location.",
                                "A city or equivalent level location.",
                                "A postal code level location.",
                                "A sublocality is a subdivision of a locality, for example a city borough, ward, or arrondissement. Sublocalities are usually recognized by a local political authority. For example, Manhattan and Brooklyn are recognized as boroughs by the City of New York, and are therefore modeled as sublocalities.",
                                "A district or equivalent level location.",
                                "A smaller district or equivalent level display.",
                                "A neighborhood level location.",
                                "A street address level location."
                              ]
                            },
                            "postalAddress": {
                              "id": "PostalAddress",
                              "type": "object",
                              "properties": {
                                "locality": {
                                  "type": "string",
                                  "description": "Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use address_lines."
                                },
                                "revision": {
                                  "type": "integer",
                                  "format": "int32",
                                  "description": "The schema revision of the `PostalAddress`. This must be set to 0, which is the latest revision. All new revisions **must** be backward compatible with old revisions."
                                },
                                "postalCode": {
                                  "type": "string",
                                  "description": "Optional. Postal code of the address. Not all countries use or require postal codes to be present, but where they are used, they may trigger additional validation with other parts of the address (e.g. state/zip validation in the U.S.A.)."
                                },
                                "recipients": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "description": "Optional. The recipient at the address. This field may, under certain circumstances, contain multiline information. For example, it might contain \"care of\" information."
                                },
                                "regionCode": {
                                  "type": "string",
                                  "description": "Required. CLDR region code of the country/region of the address. This is never inferred and it is up to the user to ensure the value is correct. See http://cldr.unicode.org/ and http://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: \"CH\" for Switzerland."
                                },
                                "sortingCode": {
                                  "type": "string",
                                  "description": "Optional. Additional, country-specific, sorting code. This is not used in most regions. Where it is used, the value is either a string like \"CEDEX\", optionally followed by a number (e.g. \"CEDEX 7\"), or just a number alone, representing the \"sector code\" (Jamaica), \"delivery area indicator\" (Malawi) or \"post office indicator\" (e.g. Côte d'Ivoire)."
                                },
                                "sublocality": {
                                  "type": "string",
                                  "description": "Optional. Sublocality of the address. For example, this can be neighborhoods, boroughs, districts."
                                },
                                "addressLines": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "description": "Unstructured address lines describing the lower levels of an address. Because values in address_lines do not have type information and may sometimes contain multiple values in a single field (e.g. \"Austin, TX\"), it is important that the line order is clear. The order of address lines should be \"envelope order\" for the country/region of the address. In places where this can vary (e.g. Japan), address_language is used to make it explicit (e.g. \"ja\" for large-to-small ordering and \"ja-Latn\" or \"en\" for small-to-large). This way, the most specific line of an address can be selected based on the language. The minimum permitted structural representation of an address consists of a region_code with all remaining information placed in the address_lines. It would be possible to format such an address very approximately without geocoding, but no semantic reasoning could be made about any of the address components until it was at least partially resolved. Creating an address only containing a region_code and address_lines, and then geocoding is the recommended way to handle completely unstructured addresses (as opposed to guessing which parts of the address should be localities or administrative areas)."
                                },
                                "languageCode": {
                                  "type": "string",
                                  "description": "Optional. BCP-47 language code of the contents of this address (if known). This is often the UI language of the input form or is expected to match one of the languages used in the address' country/region, or their transliterated equivalents. This can affect formatting in certain countries, but is not critical to the correctness of the data and will never affect any validation or other non-formatting related operations. If this value is not known, it should be omitted (rather than specifying a possibly incorrect default). Examples: \"zh-Hant\", \"ja\", \"ja-Latn\", \"en\"."
                                },
                                "organization": {
                                  "type": "string",
                                  "description": "Optional. The name of the organization at the address."
                                },
                                "administrativeArea": {
                                  "type": "string",
                                  "description": "Optional. Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state, a province, an oblast, or a prefecture. Specifically, for Spain this is the province and not the autonomous community (e.g. \"Barcelona\" and not \"Catalonia\"). Many countries don't use an administrative area in postal addresses. E.g. in Switzerland this should be left unpopulated."
                                }
                              },
                              "description": "Postal address of the location that includes human readable information, such as postal delivery and payments addresses. Given a postal address, a postal service can deliver items to a premises, P.O. Box, or other delivery location."
                            }
                          },
                          "description": "A resource that represents a location with full geographic information."
                        },
                        "description": "Structured locations of the job, resolved from Job.addresses. locations are exactly matched to Job.addresses in the same order."
                      },
                      "jobCategories": {
                        "type": "array",
                        "items": {
                          "enum": [
                            "JOB_CATEGORY_UNSPECIFIED",
                            "ACCOUNTING_AND_FINANCE",
                            "ADMINISTRATIVE_AND_OFFICE",
                            "ADVERTISING_AND_MARKETING",
                            "ANIMAL_CARE",
                            "ART_FASHION_AND_DESIGN",
                            "BUSINESS_OPERATIONS",
                            "CLEANING_AND_FACILITIES",
                            "COMPUTER_AND_IT",
                            "CONSTRUCTION",
                            "CUSTOMER_SERVICE",
                            "EDUCATION",
                            "ENTERTAINMENT_AND_TRAVEL",
                            "FARMING_AND_OUTDOORS",
                            "HEALTHCARE",
                            "HUMAN_RESOURCES",
                            "INSTALLATION_MAINTENANCE_AND_REPAIR",
                            "LEGAL",
                            "MANAGEMENT",
                            "MANUFACTURING_AND_WAREHOUSE",
                            "MEDIA_COMMUNICATIONS_AND_WRITING",
                            "OIL_GAS_AND_MINING",
                            "PERSONAL_CARE_AND_SERVICES",
                            "PROTECTIVE_SERVICES",
                            "REAL_ESTATE",
                            "RESTAURANT_AND_HOSPITALITY",
                            "SALES_AND_RETAIL",
                            "SCIENCE_AND_ENGINEERING",
                            "SOCIAL_SERVICES_AND_NON_PROFIT",
                            "SPORTS_FITNESS_AND_RECREATION",
                            "TRANSPORTATION_AND_LOGISTICS"
                          ],
                          "type": "string",
                          "enumDescriptions": [
                            "The default value if the category isn't specified.",
                            "An accounting and finance job, such as an Accountant.",
                            "An administrative and office job, such as an Administrative Assistant.",
                            "An advertising and marketing job, such as Marketing Manager.",
                            "An animal care job, such as Veterinarian.",
                            "An art, fashion, or design job, such as Designer.",
                            "A business operations job, such as Business Operations Manager.",
                            "A cleaning and facilities job, such as Custodial Staff.",
                            "A computer and IT job, such as Systems Administrator.",
                            "A construction job, such as General Laborer.",
                            "A customer service job, such s Cashier.",
                            "An education job, such as School Teacher.",
                            "An entertainment and travel job, such as Flight Attendant.",
                            "A farming or outdoor job, such as Park Ranger.",
                            "A healthcare job, such as Registered Nurse.",
                            "A human resources job, such as Human Resources Director.",
                            "An installation, maintenance, or repair job, such as Electrician.",
                            "A legal job, such as Law Clerk.",
                            "A management job, often used in conjunction with another category, such as Store Manager.",
                            "A manufacturing or warehouse job, such as Assembly Technician.",
                            "A media, communications, or writing job, such as Media Relations.",
                            "An oil, gas or mining job, such as Offshore Driller.",
                            "A personal care and services job, such as Hair Stylist.",
                            "A protective services job, such as Security Guard.",
                            "A real estate job, such as Buyer's Agent.",
                            "A restaurant and hospitality job, such as Restaurant Server.",
                            "A sales and/or retail job, such Sales Associate.",
                            "A science and engineering job, such as Lab Technician.",
                            "A social services or non-profit job, such as Case Worker.",
                            "A sports, fitness, or recreation job, such as Personal Trainer.",
                            "A transportation or logistics job, such as Truck Driver."
                          ]
                        },
                        "description": "Job categories derived from Job.title and Job.description."
                      }
                    },
                    "description": "Output only. Derived details about the job posting."
                  },
                  "description": {
                    "type": "string",
                    "description": "Required. The description of the job, which typically includes a multi-paragraph description of the company and related information. Separate fields are provided on the job object for responsibilities, qualifications, and other job characteristics. Use of these separate job fields is recommended. This field accepts and sanitizes HTML input, and also accepts bold, italic, ordered list, and unordered list markup tags. The maximum number of allowed characters is 100,000."
                  },
                  "jobBenefits": {
                    "type": "array",
                    "items": {
                      "enum": [
                        "JOB_BENEFIT_UNSPECIFIED",
                        "CHILD_CARE",
                        "DENTAL",
                        "DOMESTIC_PARTNER",
                        "FLEXIBLE_HOURS",
                        "MEDICAL",
                        "LIFE_INSURANCE",
                        "PARENTAL_LEAVE",
                        "RETIREMENT_PLAN",
                        "SICK_DAYS",
                        "VACATION",
                        "VISION"
                      ],
                      "type": "string",
                      "enumDescriptions": [
                        "Default value if the type isn't specified.",
                        "The job includes access to programs that support child care, such as daycare.",
                        "The job includes dental services covered by a dental insurance plan.",
                        "The job offers specific benefits to domestic partners.",
                        "The job allows for a flexible work schedule.",
                        "The job includes health services covered by a medical insurance plan.",
                        "The job includes a life insurance plan provided by the employer or available for purchase by the employee.",
                        "The job allows for a leave of absence to a parent to care for a newborn child.",
                        "The job includes a workplace retirement plan provided by the employer or available for purchase by the employee.",
                        "The job allows for paid time off due to illness.",
                        "The job includes paid time off for vacation.",
                        "The job includes vision services covered by a vision insurance plan."
                      ]
                    },
                    "description": "The benefits included with the job."
                  },
                  "jobStartTime": {
                    "type": "string",
                    "format": "google-datetime",
                    "description": "The start timestamp of the job in UTC time zone. Typically this field is used for contracting engagements. Invalid timestamps are ignored."
                  },
                  "languageCode": {
                    "type": "string",
                    "description": "The language of the posting. This field is distinct from any requirements for fluency that are associated with the job. Language codes must be in BCP-47 format, such as \"en-US\" or \"sr-Latn\". For more information, see [Tags for Identifying Languages](https://tools.ietf.org/html/bcp47){: class=\"external\" target=\"_blank\" }. If this field is unspecified and Job.description is present, detected language code based on Job.description is assigned, otherwise defaults to 'en_US'."
                  },
                  "postingRegion": {
                    "enum": [
                      "POSTING_REGION_UNSPECIFIED",
                      "ADMINISTRATIVE_AREA",
                      "NATION",
                      "TELECOMMUTE"
                    ],
                    "type": "string",
                    "description": "The job PostingRegion (for example, state, country) throughout which the job is available. If this field is set, a LocationFilter in a search query within the job region finds this job posting if an exact location match isn't specified. If this field is set to PostingRegion.NATION or PostingRegion.ADMINISTRATIVE_AREA, setting job Job.addresses to the same location level as this field is strongly recommended.",
                    "enumDescriptions": [
                      "If the region is unspecified, the job is only returned if it matches the LocationFilter.",
                      "In addition to exact location matching, job posting is returned when the LocationFilter in the search query is in the same administrative area as the returned job posting. For example, if a `ADMINISTRATIVE_AREA` job is posted in \"CA, USA\", it's returned if LocationFilter has \"Mountain View\". Administrative area refers to top-level administrative subdivision of this country. For example, US state, IT region, UK constituent nation and JP prefecture.",
                      "In addition to exact location matching, job is returned when LocationFilter in search query is in the same country as this job. For example, if a `NATION_WIDE` job is posted in \"USA\", it's returned if LocationFilter has 'Mountain View'.",
                      "Job allows employees to work remotely (telecommute). If locations are provided with this value, the job is considered as having a location, but telecommuting is allowed."
                    ]
                  },
                  "requisitionId": {
                    "type": "string",
                    "description": "Required. The requisition ID, also referred to as the posting ID, is assigned by the client to identify a job. This field is intended to be used by clients for client identification and tracking of postings. A job isn't allowed to be created if there is another job with the same company, language_code and requisition_id. The maximum number of allowed characters is 255."
                  },
                  "promotionValue": {
                    "type": "integer",
                    "format": "int32",
                    "description": "A promotion value of the job, as determined by the client. The value determines the sort order of the jobs returned when searching for jobs using the featured jobs search call, with higher promotional values being returned first and ties being resolved by relevance sort. Only the jobs with a promotionValue >0 are returned in a FEATURED_JOB_SEARCH. Default value is 0, and negative values are treated as 0."
                  },
                  "qualifications": {
                    "type": "string",
                    "description": "A description of the qualifications required to perform the job. The use of this field is recommended as an alternative to using the more general description field. This field accepts and sanitizes HTML input, and also accepts bold, italic, ordered list, and unordered list markup tags. The maximum number of allowed characters is 10,000."
                  },
                  "applicationInfo": {
                    "id": "ApplicationInfo",
                    "type": "object",
                    "properties": {
                      "uris": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Use this URI field to direct an applicant to a website, for example to link to an online application form. The maximum number of allowed characters for each entry is 2,000."
                      },
                      "emails": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Use this field to specify email address(es) to which resumes or applications can be sent. The maximum number of allowed characters for each entry is 255."
                      },
                      "instruction": {
                        "type": "string",
                        "description": "Use this field to provide instructions, such as \"Mail your application to ...\", that a candidate can follow to apply for the job. This field accepts and sanitizes HTML input, and also accepts bold, italic, ordered list, and unordered list markup tags. The maximum number of allowed characters is 3,000."
                      }
                    },
                    "description": "Job application information."
                  },
                  "employmentTypes": {
                    "type": "array",
                    "items": {
                      "enum": [
                        "EMPLOYMENT_TYPE_UNSPECIFIED",
                        "FULL_TIME",
                        "PART_TIME",
                        "CONTRACTOR",
                        "CONTRACT_TO_HIRE",
                        "TEMPORARY",
                        "INTERN",
                        "VOLUNTEER",
                        "PER_DIEM",
                        "FLY_IN_FLY_OUT",
                        "OTHER_EMPLOYMENT_TYPE"
                      ],
                      "type": "string",
                      "enumDescriptions": [
                        "The default value if the employment type isn't specified.",
                        "The job requires working a number of hours that constitute full time employment, typically 40 or more hours per week.",
                        "The job entails working fewer hours than a full time job, typically less than 40 hours a week.",
                        "The job is offered as a contracted, as opposed to a salaried employee, position.",
                        "The job is offered as a contracted position with the understanding that it's converted into a full-time position at the end of the contract. Jobs of this type are also returned by a search for EmploymentType.CONTRACTOR jobs.",
                        "The job is offered as a temporary employment opportunity, usually a short-term engagement.",
                        "The job is a fixed-term opportunity for students or entry-level job seekers to obtain on-the-job training, typically offered as a summer position.",
                        "The is an opportunity for an individual to volunteer, where there's no expectation of compensation for the provided services.",
                        "The job requires an employee to work on an as-needed basis with a flexible schedule.",
                        "The job involves employing people in remote areas and flying them temporarily to the work site instead of relocating employees and their families permanently.",
                        "The job does not fit any of the other listed types."
                      ]
                    },
                    "description": "The employment type(s) of a job, for example, full time or part time."
                  },
                  "compensationInfo": {
                    "id": "CompensationInfo",
                    "type": "object",
                    "properties": {
                      "entries": {
                        "type": "array",
                        "items": {
                          "id": "CompensationEntry",
                          "type": "object",
                          "properties": {
                            "type": {
                              "enum": [
                                "COMPENSATION_TYPE_UNSPECIFIED",
                                "BASE",
                                "BONUS",
                                "SIGNING_BONUS",
                                "EQUITY",
                                "PROFIT_SHARING",
                                "COMMISSIONS",
                                "TIPS",
                                "OTHER_COMPENSATION_TYPE"
                              ],
                              "type": "string",
                              "description": "Compensation type. Default is CompensationType.COMPENSATION_TYPE_UNSPECIFIED.",
                              "enumDescriptions": [
                                "Default value.",
                                "Base compensation: Refers to the fixed amount of money paid to an employee by an employer in return for work performed. Base compensation does not include benefits, bonuses or any other potential compensation from an employer.",
                                "Bonus.",
                                "Signing bonus.",
                                "Equity.",
                                "Profit sharing.",
                                "Commission.",
                                "Tips.",
                                "Other compensation type."
                              ]
                            },
                            "unit": {
                              "enum": [
                                "COMPENSATION_UNIT_UNSPECIFIED",
                                "HOURLY",
                                "DAILY",
                                "WEEKLY",
                                "MONTHLY",
                                "YEARLY",
                                "ONE_TIME",
                                "OTHER_COMPENSATION_UNIT"
                              ],
                              "type": "string",
                              "description": "Frequency of the specified amount. Default is CompensationUnit.COMPENSATION_UNIT_UNSPECIFIED.",
                              "enumDescriptions": [
                                "Default value.",
                                "Hourly.",
                                "Daily.",
                                "Weekly",
                                "Monthly.",
                                "Yearly.",
                                "One time.",
                                "Other compensation units."
                              ]
                            },
                            "range": {
                              "id": "CompensationRange",
                              "type": "object",
                              "properties": {
                                "maxCompensation": {
                                  "id": "Money",
                                  "type": "object",
                                  "properties": {
                                    "nanos": {
                                      "type": "integer",
                                      "format": "int32",
                                      "description": "Number of nano (10^-9) units of the amount. The value must be between -999,999,999 and +999,999,999 inclusive. If `units` is positive, `nanos` must be positive or zero. If `units` is zero, `nanos` can be positive, zero, or negative. If `units` is negative, `nanos` must be negative or zero. For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000."
                                    },
                                    "units": {
                                      "type": "string",
                                      "format": "int64",
                                      "description": "The whole units of the amount. For example if `currencyCode` is `\"USD\"`, then 1 unit is one US dollar."
                                    },
                                    "currencyCode": {
                                      "type": "string",
                                      "description": "The three-letter currency code defined in ISO 4217."
                                    }
                                  },
                                  "description": "The maximum amount of compensation. If left empty, the value is set to a maximal compensation value and the currency code is set to match the currency code of min_compensation."
                                },
                                "minCompensation": {
                                  "id": "Money",
                                  "type": "object",
                                  "properties": {
                                    "nanos": {
                                      "type": "integer",
                                      "format": "int32",
                                      "description": "Number of nano (10^-9) units of the amount. The value must be between -999,999,999 and +999,999,999 inclusive. If `units` is positive, `nanos` must be positive or zero. If `units` is zero, `nanos` can be positive, zero, or negative. If `units` is negative, `nanos` must be negative or zero. For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000."
                                    },
                                    "units": {
                                      "type": "string",
                                      "format": "int64",
                                      "description": "The whole units of the amount. For example if `currencyCode` is `\"USD\"`, then 1 unit is one US dollar."
                                    },
                                    "currencyCode": {
                                      "type": "string",
                                      "description": "The three-letter currency code defined in ISO 4217."
                                    }
                                  },
                                  "description": "The minimum amount of compensation. If left empty, the value is set to zero and the currency code is set to match the currency code of max_compensation."
                                }
                              },
                              "description": "Compensation range."
                            },
                            "amount": {
                              "id": "Money",
                              "type": "object",
                              "properties": {
                                "nanos": {
                                  "type": "integer",
                                  "format": "int32",
                                  "description": "Number of nano (10^-9) units of the amount. The value must be between -999,999,999 and +999,999,999 inclusive. If `units` is positive, `nanos` must be positive or zero. If `units` is zero, `nanos` can be positive, zero, or negative. If `units` is negative, `nanos` must be negative or zero. For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000."
                                },
                                "units": {
                                  "type": "string",
                                  "format": "int64",
                                  "description": "The whole units of the amount. For example if `currencyCode` is `\"USD\"`, then 1 unit is one US dollar."
                                },
                                "currencyCode": {
                                  "type": "string",
                                  "description": "The three-letter currency code defined in ISO 4217."
                                }
                              },
                              "description": "Compensation amount."
                            },
                            "description": {
                              "type": "string",
                              "description": "Compensation description. For example, could indicate equity terms or provide additional context to an estimated bonus."
                            },
                            "expectedUnitsPerYear": {
                              "type": "number",
                              "format": "double",
                              "description": "Expected number of units paid each year. If not specified, when Job.employment_types is FULLTIME, a default value is inferred based on unit. Default values: - HOURLY: 2080 - DAILY: 260 - WEEKLY: 52 - MONTHLY: 12 - ANNUAL: 1"
                            }
                          },
                          "description": "A compensation entry that represents one component of compensation, such as base pay, bonus, or other compensation type. Annualization: One compensation entry can be annualized if - it contains valid amount or range. - and its expected_units_per_year is set or can be derived. Its annualized range is determined as (amount or range) times expected_units_per_year."
                        },
                        "description": "Job compensation information. At most one entry can be of type CompensationInfo.CompensationType.BASE, which is referred as **base compensation entry** for the job."
                      },
                      "annualizedBaseCompensationRange": {
                        "id": "CompensationRange",
                        "type": "object",
                        "readOnly": true,
                        "properties": {
                          "maxCompensation": {
                            "id": "Money",
                            "type": "object",
                            "properties": {
                              "nanos": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Number of nano (10^-9) units of the amount. The value must be between -999,999,999 and +999,999,999 inclusive. If `units` is positive, `nanos` must be positive or zero. If `units` is zero, `nanos` can be positive, zero, or negative. If `units` is negative, `nanos` must be negative or zero. For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000."
                              },
                              "units": {
                                "type": "string",
                                "format": "int64",
                                "description": "The whole units of the amount. For example if `currencyCode` is `\"USD\"`, then 1 unit is one US dollar."
                              },
                              "currencyCode": {
                                "type": "string",
                                "description": "The three-letter currency code defined in ISO 4217."
                              }
                            },
                            "description": "The maximum amount of compensation. If left empty, the value is set to a maximal compensation value and the currency code is set to match the currency code of min_compensation."
                          },
                          "minCompensation": {
                            "id": "Money",
                            "type": "object",
                            "properties": {
                              "nanos": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Number of nano (10^-9) units of the amount. The value must be between -999,999,999 and +999,999,999 inclusive. If `units` is positive, `nanos` must be positive or zero. If `units` is zero, `nanos` can be positive, zero, or negative. If `units` is negative, `nanos` must be negative or zero. For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000."
                              },
                              "units": {
                                "type": "string",
                                "format": "int64",
                                "description": "The whole units of the amount. For example if `currencyCode` is `\"USD\"`, then 1 unit is one US dollar."
                              },
                              "currencyCode": {
                                "type": "string",
                                "description": "The three-letter currency code defined in ISO 4217."
                              }
                            },
                            "description": "The minimum amount of compensation. If left empty, the value is set to zero and the currency code is set to match the currency code of max_compensation."
                          }
                        },
                        "description": "Output only. Annualized base compensation range. Computed as base compensation entry's CompensationEntry.amount times CompensationEntry.expected_units_per_year. See CompensationEntry for explanation on compensation annualization."
                      },
                      "annualizedTotalCompensationRange": {
                        "id": "CompensationRange",
                        "type": "object",
                        "readOnly": true,
                        "properties": {
                          "maxCompensation": {
                            "id": "Money",
                            "type": "object",
                            "properties": {
                              "nanos": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Number of nano (10^-9) units of the amount. The value must be between -999,999,999 and +999,999,999 inclusive. If `units` is positive, `nanos` must be positive or zero. If `units` is zero, `nanos` can be positive, zero, or negative. If `units` is negative, `nanos` must be negative or zero. For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000."
                              },
                              "units": {
                                "type": "string",
                                "format": "int64",
                                "description": "The whole units of the amount. For example if `currencyCode` is `\"USD\"`, then 1 unit is one US dollar."
                              },
                              "currencyCode": {
                                "type": "string",
                                "description": "The three-letter currency code defined in ISO 4217."
                              }
                            },
                            "description": "The maximum amount of compensation. If left empty, the value is set to a maximal compensation value and the currency code is set to match the currency code of min_compensation."
                          },
                          "minCompensation": {
                            "id": "Money",
                            "type": "object",
                            "properties": {
                              "nanos": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Number of nano (10^-9) units of the amount. The value must be between -999,999,999 and +999,999,999 inclusive. If `units` is positive, `nanos` must be positive or zero. If `units` is zero, `nanos` can be positive, zero, or negative. If `units` is negative, `nanos` must be negative or zero. For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000."
                              },
                              "units": {
                                "type": "string",
                                "format": "int64",
                                "description": "The whole units of the amount. For example if `currencyCode` is `\"USD\"`, then 1 unit is one US dollar."
                              },
                              "currencyCode": {
                                "type": "string",
                                "description": "The three-letter currency code defined in ISO 4217."
                              }
                            },
                            "description": "The minimum amount of compensation. If left empty, the value is set to zero and the currency code is set to match the currency code of max_compensation."
                          }
                        },
                        "description": "Output only. Annualized total compensation range. Computed as all compensation entries' CompensationEntry.amount times CompensationEntry.expected_units_per_year. See CompensationEntry for explanation on compensation annualization."
                      }
                    },
                    "description": "Job compensation information (a.k.a. \"pay rate\") i.e., the compensation that will paid to the employee."
                  },
                  "customAttributes": {
                    "type": "object",
                    "description": "A map of fields to hold both filterable and non-filterable custom job attributes that are not covered by the provided structured fields. The keys of the map are strings up to 64 bytes and must match the pattern: a-zA-Z*. For example, key0LikeThis or KEY_1_LIKE_THIS. At most 100 filterable and at most 100 unfilterable keys are supported. For filterable `string_values`, across all keys at most 200 values are allowed, with each string no more than 255 characters. For unfilterable `string_values`, the maximum total size of `string_values` across all keys is 50KB.",
                    "additionalProperties": {
                      "id": "CustomAttribute",
                      "type": "object",
                      "properties": {
                        "filterable": {
                          "type": "boolean",
                          "description": "If the `filterable` flag is true, the custom field values may be used for custom attribute filters JobQuery.custom_attribute_filter. If false, these values may not be used for custom attribute filters. Default is false."
                        },
                        "longValues": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "format": "int64"
                          },
                          "description": "Exactly one of string_values or long_values must be specified. This field is used to perform number range search. (`EQ`, `GT`, `GE`, `LE`, `LT`) over filterable `long_value`. Currently at most 1 long_values is supported."
                        },
                        "stringValues": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "Exactly one of string_values or long_values must be specified. This field is used to perform a string match (`CASE_SENSITIVE_MATCH` or `CASE_INSENSITIVE_MATCH`) search. For filterable `string_value`s, a maximum total number of 200 values is allowed, with each `string_value` has a byte size of no more than 500B. For unfilterable `string_values`, the maximum total byte size of unfilterable `string_values` is 50KB. Empty string isn't allowed."
                        },
                        "keywordSearchable": {
                          "type": "boolean",
                          "description": "If the `keyword_searchable` flag is true, the keywords in custom fields are searchable by keyword match. If false, the values are not searchable by keyword match. Default is false."
                        }
                      },
                      "description": "Custom attribute values that are either filterable or non-filterable."
                    }
                  },
                  "responsibilities": {
                    "type": "string",
                    "description": "A description of job responsibilities. The use of this field is recommended as an alternative to using the more general description field. This field accepts and sanitizes HTML input, and also accepts bold, italic, ordered list, and unordered list markup tags. The maximum number of allowed characters is 10,000."
                  },
                  "postingCreateTime": {
                    "type": "string",
                    "format": "google-datetime",
                    "readOnly": true,
                    "description": "Output only. The timestamp when this job posting was created."
                  },
                  "postingExpireTime": {
                    "type": "string",
                    "format": "google-datetime",
                    "description": "Strongly recommended for the best service experience. The expiration timestamp of the job. After this timestamp, the job is marked as expired, and it no longer appears in search results. The expired job can't be listed by the ListJobs API, but it can be retrieved with the GetJob API or updated with the UpdateJob API or deleted with the DeleteJob API. An expired job can be updated and opened again by using a future expiration timestamp. Updating an expired job fails if there is another existing open job with same company, language_code and requisition_id. The expired jobs are retained in our system for 90 days. However, the overall expired job count cannot exceed 3 times the maximum number of open jobs over previous 7 days. If this threshold is exceeded, expired jobs are cleaned out in order of earliest expire time. Expired jobs are no longer accessible after they are cleaned out. Invalid timestamps are ignored, and treated as expire time not provided. If the timestamp is before the instant request is made, the job is treated as expired immediately on creation. This kind of job can not be updated. And when creating a job with past timestamp, the posting_publish_time must be set before posting_expire_time. The purpose of this feature is to allow other objects, such as Application, to refer a job that didn't exist in the system prior to becoming expired. If you want to modify a job that was expired on creation, delete it and create a new one. If this value isn't provided at the time of job creation or is invalid, the job posting expires after 30 days from the job's creation time. For example, if the job was created on 2017/01/01 13:00AM UTC with an unspecified expiration date, the job expires after 2017/01/31 13:00AM UTC. If this value isn't provided on job update, it depends on the field masks set by UpdateJobRequest.update_mask. If the field masks include job_end_time, or the masks are empty meaning that every field is updated, the job posting expires after 30 days from the job's last update time. Otherwise the expiration date isn't updated."
                  },
                  "postingUpdateTime": {
                    "type": "string",
                    "format": "google-datetime",
                    "readOnly": true,
                    "description": "Output only. The timestamp when this job posting was last updated."
                  },
                  "processingOptions": {
                    "id": "ProcessingOptions",
                    "type": "object",
                    "properties": {
                      "htmlSanitization": {
                        "enum": [
                          "HTML_SANITIZATION_UNSPECIFIED",
                          "HTML_SANITIZATION_DISABLED",
                          "SIMPLE_FORMATTING_ONLY"
                        ],
                        "type": "string",
                        "description": "Option for job HTML content sanitization. Applied fields are: * description * applicationInfo.instruction * incentives * qualifications * responsibilities HTML tags in these fields may be stripped if sanitiazation isn't disabled. Defaults to HtmlSanitization.SIMPLE_FORMATTING_ONLY.",
                        "enumDescriptions": [
                          "Default value.",
                          "Disables sanitization on HTML input.",
                          "Sanitizes HTML input, only accepts bold, italic, ordered list, and unordered list markup tags."
                        ]
                      },
                      "disableStreetAddressResolution": {
                        "type": "boolean",
                        "description": "If set to `true`, the service does not attempt to resolve a more precise address for the job."
                      }
                    },
                    "description": "Options for job processing."
                  },
                  "companyDisplayName": {
                    "type": "string",
                    "readOnly": true,
                    "description": "Output only. Display name of the company listing the job."
                  },
                  "postingPublishTime": {
                    "type": "string",
                    "format": "google-datetime",
                    "description": "The timestamp this job posting was most recently published. The default value is the time the request arrives at the server. Invalid timestamps are ignored."
                  }
                },
                "description": "A Job resource represents a job posting (also referred to as a \"job listing\" or \"job requisition\"). A job belongs to a Company, which is the hiring entity responsible for the job."
              },
              "description": "The Jobs for a given company. The maximum number of items returned is based on the limit field provided in the request."
            },
            "metadata": {
              "id": "ResponseMetadata",
              "type": "object",
              "properties": {
                "requestId": {
                  "type": "string",
                  "description": "A unique id associated with this call. This id is logged for tracking purposes."
                }
              },
              "description": "Additional information for the API invocation, such as the request tracking id."
            },
            "nextPageToken": {
              "type": "string",
              "description": "A token to retrieve the next page of results."
            }
          },
          "description": "List jobs response."
        }
      ]
  projects.tenants.jobs.patch:
    description: |-
      Updates specified job. Typically, updated contents become visible in search results within 10 seconds, but it may take up to 5 minutes.
    versions:
      from: 4.0.0
    link: https://cloud.google.com/talent-solution/job-search/docs/reference/rest/v4/projects.tenants.jobs/patch
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  projects.tenants.jobs.search:
    description: |-
      Searches for jobs using the provided SearchJobsRequest. This call constrains the visibility of jobs present in the database, and only returns jobs that the caller has permission to search against.
    versions:
      from: 4.0.0
    link: https://cloud.google.com/talent-solution/job-search/docs/reference/rest/v4/projects.tenants.jobs/search
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  projects.tenants.jobs.searchForAlert:
    description: |-
      Searches for jobs using the provided SearchJobsRequest. This API call is intended for the use case of targeting passive job seekers (for example, job seekers who have signed up to receive email alerts about potential job opportunities), it has different algorithmic adjustments that are designed to specifically target passive job seekers. This call constrains the visibility of jobs present in the database, and only returns jobs the caller has permission to search against.
    versions:
      from: 4.0.0
    link: https://cloud.google.com/talent-solution/job-search/docs/reference/rest/v4/projects.tenants.jobs/searchForAlert
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  projects.tenants.list:
    description: |-
      Lists all tenants associated with the project.
    versions:
      from: 4.0.0
    link: https://cloud.google.com/talent-solution/job-search/docs/reference/rest/v4/projects.tenants/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "ListTenantsResponse",
          "type": "object",
          "properties": {
            "tenants": {
              "type": "array",
              "items": {
                "id": "Tenant",
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Required during tenant update. The resource name for a tenant. This is generated by the service when a tenant is created. The format is \"projects/{project_id}/tenants/{tenant_id}\", for example, \"projects/foo/tenants/bar\"."
                  },
                  "externalId": {
                    "type": "string",
                    "description": "Required. Client side tenant identifier, used to uniquely identify the tenant. The maximum number of allowed characters is 255."
                  }
                },
                "description": "A Tenant resource represents a tenant in the service. A tenant is a group or entity that shares common access with specific privileges for resources like jobs. Customer may create multiple tenants to provide data isolation for different groups."
              },
              "description": "Tenants for the current client."
            },
            "metadata": {
              "id": "ResponseMetadata",
              "type": "object",
              "properties": {
                "requestId": {
                  "type": "string",
                  "description": "A unique id associated with this call. This id is logged for tracking purposes."
                }
              },
              "description": "Additional information for the API invocation, such as the request tracking id."
            },
            "nextPageToken": {
              "type": "string",
              "description": "A token to retrieve the next page of results."
            }
          },
          "description": "The List tenants response object."
        }
      ]
  projects.tenants.patch:
    description: |-
      Updates specified tenant.
    versions:
      from: 4.0.0
    link: https://cloud.google.com/talent-solution/job-search/docs/reference/rest/v4/projects.tenants/patch
    example:
      inputs: [
        {
          "id": "Tenant",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Required during tenant update. The resource name for a tenant. This is generated by the service when a tenant is created. The format is \"projects/{project_id}/tenants/{tenant_id}\", for example, \"projects/foo/tenants/bar\"."
            },
            "externalId": {
              "type": "string",
              "description": "Required. Client side tenant identifier, used to uniquely identify the tenant. The maximum number of allowed characters is 255."
            }
          },
          "description": "A Tenant resource represents a tenant in the service. A tenant is a group or entity that shares common access with specific privileges for resources like jobs. Customer may create multiple tenants to provide data isolation for different groups."
        }
      ]
      outputs: [
        {}
      ]