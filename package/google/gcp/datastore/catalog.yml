Product:
  name: GCP Datastore
  versions: [1.0.0]
  package: google.gcp.datastore
  description: |-
    Cloud Datastore
  link: https://cloud.google.com/datastore
  contentType: json
Operations:
  projects.allocateIds:
    description: |-
      Allocates IDs for the given keys, which is useful for referencing an entity before it is inserted.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/datastore/docs/reference/data/rest/v1/projects/allocateIds
    example:
      inputs: [
        {
          "id": "AllocateIdsRequest",
          "type": "object",
          "properties": {
            "keys": {
              "type": "array",
              "items": {
                "id": "Key",
                "type": "object",
                "properties": {
                  "path": {
                    "type": "array",
                    "items": {
                      "id": "PathElement",
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "int64",
                          "description": "The auto-allocated ID of the entity. Never equal to zero. Values less than zero are discouraged and may not be supported in the future."
                        },
                        "kind": {
                          "type": "string",
                          "description": "The kind of the entity. A kind matching regex `__.*__` is reserved/read-only. A kind must not contain more than 1500 bytes when UTF-8 encoded. Cannot be `\"\"`."
                        },
                        "name": {
                          "type": "string",
                          "description": "The name of the entity. A name matching regex `__.*__` is reserved/read-only. A name must not be more than 1500 bytes when UTF-8 encoded. Cannot be `\"\"`."
                        }
                      },
                      "description": "A (kind, ID/name) pair used to construct a key path. If either name or ID is set, the element is complete. If neither is set, the element is incomplete."
                    },
                    "description": "The entity path. An entity path consists of one or more elements composed of a kind and a string or numerical identifier, which identify entities. The first element identifies a _root entity_, the second element identifies a _child_ of the root entity, the third element identifies a child of the second entity, and so forth. The entities identified by all prefixes of the path are called the element's _ancestors_. An entity path is always fully complete: *all* of the entity's ancestors are required to be in the path along with the entity identifier itself. The only exception is that in some documented cases, the identifier in the last path element (for the entity) itself may be omitted. For example, the last path element of the key of `Mutation.insert` may have no identifier. A path can never be empty, and a path can have at most 100 elements."
                  },
                  "partitionId": {
                    "id": "PartitionId",
                    "type": "object",
                    "properties": {
                      "projectId": {
                        "type": "string",
                        "description": "The ID of the project to which the entities belong."
                      },
                      "namespaceId": {
                        "type": "string",
                        "description": "If not empty, the ID of the namespace to which the entities belong."
                      }
                    },
                    "description": "Entities are partitioned into subsets, currently identified by a project ID and namespace ID. Queries are scoped to a single partition."
                  }
                },
                "description": "A unique identifier for an entity. If a key's partition ID or any of its path kinds or names are reserved/read-only, the key is reserved/read-only. A reserved/read-only key is forbidden in certain documented contexts."
              },
              "description": "Required. A list of keys with incomplete key paths for which to allocate IDs. No key may be reserved/read-only."
            }
          },
          "description": "The request for Datastore.AllocateIds."
        }
      ]
      outputs: [
        {
          "id": "AllocateIdsResponse",
          "type": "object",
          "properties": {
            "keys": {
              "type": "array",
              "items": {
                "id": "Key",
                "type": "object",
                "properties": {
                  "path": {
                    "type": "array",
                    "items": {
                      "id": "PathElement",
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "int64",
                          "description": "The auto-allocated ID of the entity. Never equal to zero. Values less than zero are discouraged and may not be supported in the future."
                        },
                        "kind": {
                          "type": "string",
                          "description": "The kind of the entity. A kind matching regex `__.*__` is reserved/read-only. A kind must not contain more than 1500 bytes when UTF-8 encoded. Cannot be `\"\"`."
                        },
                        "name": {
                          "type": "string",
                          "description": "The name of the entity. A name matching regex `__.*__` is reserved/read-only. A name must not be more than 1500 bytes when UTF-8 encoded. Cannot be `\"\"`."
                        }
                      },
                      "description": "A (kind, ID/name) pair used to construct a key path. If either name or ID is set, the element is complete. If neither is set, the element is incomplete."
                    },
                    "description": "The entity path. An entity path consists of one or more elements composed of a kind and a string or numerical identifier, which identify entities. The first element identifies a _root entity_, the second element identifies a _child_ of the root entity, the third element identifies a child of the second entity, and so forth. The entities identified by all prefixes of the path are called the element's _ancestors_. An entity path is always fully complete: *all* of the entity's ancestors are required to be in the path along with the entity identifier itself. The only exception is that in some documented cases, the identifier in the last path element (for the entity) itself may be omitted. For example, the last path element of the key of `Mutation.insert` may have no identifier. A path can never be empty, and a path can have at most 100 elements."
                  },
                  "partitionId": {
                    "id": "PartitionId",
                    "type": "object",
                    "properties": {
                      "projectId": {
                        "type": "string",
                        "description": "The ID of the project to which the entities belong."
                      },
                      "namespaceId": {
                        "type": "string",
                        "description": "If not empty, the ID of the namespace to which the entities belong."
                      }
                    },
                    "description": "Entities are partitioned into subsets, currently identified by a project ID and namespace ID. Queries are scoped to a single partition."
                  }
                },
                "description": "A unique identifier for an entity. If a key's partition ID or any of its path kinds or names are reserved/read-only, the key is reserved/read-only. A reserved/read-only key is forbidden in certain documented contexts."
              },
              "description": "The keys specified in the request (in the same order), each with its key path completed with a newly allocated ID."
            }
          },
          "description": "The response for Datastore.AllocateIds."
        }
      ]
  projects.beginTransaction:
    description: |-
      Begins a new transaction.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/datastore/docs/reference/data/rest/v1/projects/beginTransaction
    example:
      inputs: [
        {
          "id": "BeginTransactionRequest",
          "type": "object",
          "properties": {
            "transactionOptions": {
              "id": "TransactionOptions",
              "type": "object",
              "properties": {
                "readOnly": {
                  "id": "ReadOnly",
                  "type": "object",
                  "properties": {},
                  "description": "The transaction should only allow reads."
                },
                "readWrite": {
                  "id": "ReadWrite",
                  "type": "object",
                  "properties": {
                    "previousTransaction": {
                      "type": "string",
                      "format": "byte",
                      "description": "The transaction identifier of the transaction being retried."
                    }
                  },
                  "description": "The transaction should allow both reads and writes."
                }
              },
              "description": "Options for a new transaction."
            }
          },
          "description": "The request for Datastore.BeginTransaction."
        }
      ]
      outputs: [
        {
          "id": "BeginTransactionResponse",
          "type": "object",
          "properties": {
            "transaction": {
              "type": "string",
              "format": "byte",
              "description": "The transaction identifier (always present)."
            }
          },
          "description": "The response for Datastore.BeginTransaction."
        }
      ]
  projects.commit:
    description: |-
      Commits a transaction, optionally creating, deleting or modifying some entities.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/datastore/docs/reference/data/rest/v1/projects/commit
    example:
      inputs: [
        {
          "id": "CommitRequest",
          "type": "object",
          "properties": {
            "mode": {
              "enum": [
                "MODE_UNSPECIFIED",
                "TRANSACTIONAL",
                "NON_TRANSACTIONAL"
              ],
              "type": "string",
              "description": "The type of commit to perform. Defaults to `TRANSACTIONAL`.",
              "enumDescriptions": [
                "Unspecified. This value must not be used.",
                "Transactional: The mutations are either all applied, or none are applied. Learn about transactions [here](https://cloud.google.com/datastore/docs/concepts/transactions).",
                "Non-transactional: The mutations may not apply as all or none."
              ]
            },
            "mutations": {
              "type": "array",
              "items": {
                "id": "Mutation",
                "type": "object",
                "properties": {
                  "delete": {
                    "id": "Key",
                    "type": "object",
                    "properties": {
                      "path": {
                        "type": "array",
                        "items": {
                          "id": "PathElement",
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "int64",
                              "description": "The auto-allocated ID of the entity. Never equal to zero. Values less than zero are discouraged and may not be supported in the future."
                            },
                            "kind": {
                              "type": "string",
                              "description": "The kind of the entity. A kind matching regex `__.*__` is reserved/read-only. A kind must not contain more than 1500 bytes when UTF-8 encoded. Cannot be `\"\"`."
                            },
                            "name": {
                              "type": "string",
                              "description": "The name of the entity. A name matching regex `__.*__` is reserved/read-only. A name must not be more than 1500 bytes when UTF-8 encoded. Cannot be `\"\"`."
                            }
                          },
                          "description": "A (kind, ID/name) pair used to construct a key path. If either name or ID is set, the element is complete. If neither is set, the element is incomplete."
                        },
                        "description": "The entity path. An entity path consists of one or more elements composed of a kind and a string or numerical identifier, which identify entities. The first element identifies a _root entity_, the second element identifies a _child_ of the root entity, the third element identifies a child of the second entity, and so forth. The entities identified by all prefixes of the path are called the element's _ancestors_. An entity path is always fully complete: *all* of the entity's ancestors are required to be in the path along with the entity identifier itself. The only exception is that in some documented cases, the identifier in the last path element (for the entity) itself may be omitted. For example, the last path element of the key of `Mutation.insert` may have no identifier. A path can never be empty, and a path can have at most 100 elements."
                      },
                      "partitionId": {
                        "id": "PartitionId",
                        "type": "object",
                        "properties": {
                          "projectId": {
                            "type": "string",
                            "description": "The ID of the project to which the entities belong."
                          },
                          "namespaceId": {
                            "type": "string",
                            "description": "If not empty, the ID of the namespace to which the entities belong."
                          }
                        },
                        "description": "Entities are partitioned into subsets, currently identified by a project ID and namespace ID. Queries are scoped to a single partition."
                      }
                    },
                    "description": "A unique identifier for an entity. If a key's partition ID or any of its path kinds or names are reserved/read-only, the key is reserved/read-only. A reserved/read-only key is forbidden in certain documented contexts."
                  },
                  "insert": {
                    "id": "Entity",
                    "type": "object",
                    "properties": {
                      "key": {
                        "id": "Key",
                        "type": "object",
                        "properties": {
                          "path": {
                            "type": "array",
                            "items": {
                              "id": "PathElement",
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "format": "int64",
                                  "description": "The auto-allocated ID of the entity. Never equal to zero. Values less than zero are discouraged and may not be supported in the future."
                                },
                                "kind": {
                                  "type": "string",
                                  "description": "The kind of the entity. A kind matching regex `__.*__` is reserved/read-only. A kind must not contain more than 1500 bytes when UTF-8 encoded. Cannot be `\"\"`."
                                },
                                "name": {
                                  "type": "string",
                                  "description": "The name of the entity. A name matching regex `__.*__` is reserved/read-only. A name must not be more than 1500 bytes when UTF-8 encoded. Cannot be `\"\"`."
                                }
                              },
                              "description": "A (kind, ID/name) pair used to construct a key path. If either name or ID is set, the element is complete. If neither is set, the element is incomplete."
                            },
                            "description": "The entity path. An entity path consists of one or more elements composed of a kind and a string or numerical identifier, which identify entities. The first element identifies a _root entity_, the second element identifies a _child_ of the root entity, the third element identifies a child of the second entity, and so forth. The entities identified by all prefixes of the path are called the element's _ancestors_. An entity path is always fully complete: *all* of the entity's ancestors are required to be in the path along with the entity identifier itself. The only exception is that in some documented cases, the identifier in the last path element (for the entity) itself may be omitted. For example, the last path element of the key of `Mutation.insert` may have no identifier. A path can never be empty, and a path can have at most 100 elements."
                          },
                          "partitionId": {
                            "id": "PartitionId",
                            "type": "object",
                            "properties": {
                              "projectId": {
                                "type": "string",
                                "description": "The ID of the project to which the entities belong."
                              },
                              "namespaceId": {
                                "type": "string",
                                "description": "If not empty, the ID of the namespace to which the entities belong."
                              }
                            },
                            "description": "Entities are partitioned into subsets, currently identified by a project ID and namespace ID. Queries are scoped to a single partition."
                          }
                        },
                        "description": "A unique identifier for an entity. If a key's partition ID or any of its path kinds or names are reserved/read-only, the key is reserved/read-only. A reserved/read-only key is forbidden in certain documented contexts."
                      },
                      "properties": {
                        "type": "object",
                        "description": "The entity's properties. The map's keys are property names. A property name matching regex `__.*__` is reserved. A reserved property name is forbidden in certain documented contexts. The name must not contain more than 500 characters. The name cannot be `\"\"`.",
                        "additionalProperties": {
                          "id": "Value",
                          "type": "object",
                          "properties": {
                            "meaning": {
                              "type": "integer",
                              "format": "int32",
                              "description": "The `meaning` field should only be populated for backwards compatibility."
                            },
                            "keyValue": {
                              "id": "Key",
                              "type": "object",
                              "properties": {
                                "path": {
                                  "type": "array",
                                  "items": {
                                    "id": "PathElement",
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "format": "int64",
                                        "description": "The auto-allocated ID of the entity. Never equal to zero. Values less than zero are discouraged and may not be supported in the future."
                                      },
                                      "kind": {
                                        "type": "string",
                                        "description": "The kind of the entity. A kind matching regex `__.*__` is reserved/read-only. A kind must not contain more than 1500 bytes when UTF-8 encoded. Cannot be `\"\"`."
                                      },
                                      "name": {
                                        "type": "string",
                                        "description": "The name of the entity. A name matching regex `__.*__` is reserved/read-only. A name must not be more than 1500 bytes when UTF-8 encoded. Cannot be `\"\"`."
                                      }
                                    },
                                    "description": "A (kind, ID/name) pair used to construct a key path. If either name or ID is set, the element is complete. If neither is set, the element is incomplete."
                                  },
                                  "description": "The entity path. An entity path consists of one or more elements composed of a kind and a string or numerical identifier, which identify entities. The first element identifies a _root entity_, the second element identifies a _child_ of the root entity, the third element identifies a child of the second entity, and so forth. The entities identified by all prefixes of the path are called the element's _ancestors_. An entity path is always fully complete: *all* of the entity's ancestors are required to be in the path along with the entity identifier itself. The only exception is that in some documented cases, the identifier in the last path element (for the entity) itself may be omitted. For example, the last path element of the key of `Mutation.insert` may have no identifier. A path can never be empty, and a path can have at most 100 elements."
                                },
                                "partitionId": {
                                  "id": "PartitionId",
                                  "type": "object",
                                  "properties": {
                                    "projectId": {
                                      "type": "string",
                                      "description": "The ID of the project to which the entities belong."
                                    },
                                    "namespaceId": {
                                      "type": "string",
                                      "description": "If not empty, the ID of the namespace to which the entities belong."
                                    }
                                  },
                                  "description": "Entities are partitioned into subsets, currently identified by a project ID and namespace ID. Queries are scoped to a single partition."
                                }
                              },
                              "description": "A unique identifier for an entity. If a key's partition ID or any of its path kinds or names are reserved/read-only, the key is reserved/read-only. A reserved/read-only key is forbidden in certain documented contexts."
                            },
                            "blobValue": {
                              "type": "string",
                              "format": "byte",
                              "description": "A blob value. May have at most 1,000,000 bytes. When `exclude_from_indexes` is false, may have at most 1500 bytes. In JSON requests, must be base64-encoded."
                            },
                            "nullValue": {
                              "enum": [
                                "NULL_VALUE"
                              ],
                              "type": "string",
                              "description": "A null value.",
                              "enumDescriptions": [
                                "Null value."
                              ]
                            },
                            "arrayValue": {
                              "id": "ArrayValue",
                              "type": "object",
                              "properties": {
                                "values": {
                                  "type": "array",
                                  "items": {},
                                  "description": "Values in the array. The order of values in an array is preserved as long as all values have identical settings for 'exclude_from_indexes'."
                                }
                              },
                              "description": "An array value. Cannot contain another array value. A `Value` instance that sets field `array_value` must not set fields `meaning` or `exclude_from_indexes`."
                            },
                            "doubleValue": {
                              "type": "number",
                              "format": "double",
                              "description": "A double value."
                            },
                            "entityValue": {
                              "id": "Entity",
                              "type": "object",
                              "properties": {},
                              "description": "An entity value. - May have no key. - May have a key with an incomplete key path. - May have a reserved/read-only key."
                            },
                            "stringValue": {
                              "type": "string",
                              "description": "A UTF-8 encoded string value. When `exclude_from_indexes` is false (it is indexed) , may have at most 1500 bytes. Otherwise, may be set to at most 1,000,000 bytes."
                            },
                            "booleanValue": {
                              "type": "boolean",
                              "description": "A boolean value."
                            },
                            "integerValue": {
                              "type": "string",
                              "format": "int64",
                              "description": "An integer value."
                            },
                            "geoPointValue": {
                              "id": "LatLng",
                              "type": "object",
                              "properties": {
                                "latitude": {
                                  "type": "number",
                                  "format": "double",
                                  "description": "The latitude in degrees. It must be in the range [-90.0, +90.0]."
                                },
                                "longitude": {
                                  "type": "number",
                                  "format": "double",
                                  "description": "The longitude in degrees. It must be in the range [-180.0, +180.0]."
                                }
                              },
                              "description": "A geo point value representing a point on the surface of Earth."
                            },
                            "timestampValue": {
                              "type": "string",
                              "format": "google-datetime",
                              "description": "A timestamp value. When stored in the Datastore, precise only to microseconds; any additional precision is rounded down."
                            },
                            "excludeFromIndexes": {
                              "type": "boolean",
                              "description": "If the value should be excluded from all indexes including those defined explicitly."
                            }
                          },
                          "description": "A message that can hold any of the supported value types and associated metadata."
                        }
                      }
                    },
                    "description": "The entity to insert. The entity must not already exist. The entity key's final path element may be incomplete."
                  },
                  "update": {
                    "id": "Entity",
                    "type": "object",
                    "properties": {
                      "key": {
                        "id": "Key",
                        "type": "object",
                        "properties": {
                          "path": {
                            "type": "array",
                            "items": {
                              "id": "PathElement",
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "format": "int64",
                                  "description": "The auto-allocated ID of the entity. Never equal to zero. Values less than zero are discouraged and may not be supported in the future."
                                },
                                "kind": {
                                  "type": "string",
                                  "description": "The kind of the entity. A kind matching regex `__.*__` is reserved/read-only. A kind must not contain more than 1500 bytes when UTF-8 encoded. Cannot be `\"\"`."
                                },
                                "name": {
                                  "type": "string",
                                  "description": "The name of the entity. A name matching regex `__.*__` is reserved/read-only. A name must not be more than 1500 bytes when UTF-8 encoded. Cannot be `\"\"`."
                                }
                              },
                              "description": "A (kind, ID/name) pair used to construct a key path. If either name or ID is set, the element is complete. If neither is set, the element is incomplete."
                            },
                            "description": "The entity path. An entity path consists of one or more elements composed of a kind and a string or numerical identifier, which identify entities. The first element identifies a _root entity_, the second element identifies a _child_ of the root entity, the third element identifies a child of the second entity, and so forth. The entities identified by all prefixes of the path are called the element's _ancestors_. An entity path is always fully complete: *all* of the entity's ancestors are required to be in the path along with the entity identifier itself. The only exception is that in some documented cases, the identifier in the last path element (for the entity) itself may be omitted. For example, the last path element of the key of `Mutation.insert` may have no identifier. A path can never be empty, and a path can have at most 100 elements."
                          },
                          "partitionId": {
                            "id": "PartitionId",
                            "type": "object",
                            "properties": {
                              "projectId": {
                                "type": "string",
                                "description": "The ID of the project to which the entities belong."
                              },
                              "namespaceId": {
                                "type": "string",
                                "description": "If not empty, the ID of the namespace to which the entities belong."
                              }
                            },
                            "description": "Entities are partitioned into subsets, currently identified by a project ID and namespace ID. Queries are scoped to a single partition."
                          }
                        },
                        "description": "A unique identifier for an entity. If a key's partition ID or any of its path kinds or names are reserved/read-only, the key is reserved/read-only. A reserved/read-only key is forbidden in certain documented contexts."
                      },
                      "properties": {
                        "type": "object",
                        "description": "The entity's properties. The map's keys are property names. A property name matching regex `__.*__` is reserved. A reserved property name is forbidden in certain documented contexts. The name must not contain more than 500 characters. The name cannot be `\"\"`.",
                        "additionalProperties": {
                          "id": "Value",
                          "type": "object",
                          "properties": {
                            "meaning": {
                              "type": "integer",
                              "format": "int32",
                              "description": "The `meaning` field should only be populated for backwards compatibility."
                            },
                            "keyValue": {
                              "id": "Key",
                              "type": "object",
                              "properties": {
                                "path": {
                                  "type": "array",
                                  "items": {
                                    "id": "PathElement",
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "format": "int64",
                                        "description": "The auto-allocated ID of the entity. Never equal to zero. Values less than zero are discouraged and may not be supported in the future."
                                      },
                                      "kind": {
                                        "type": "string",
                                        "description": "The kind of the entity. A kind matching regex `__.*__` is reserved/read-only. A kind must not contain more than 1500 bytes when UTF-8 encoded. Cannot be `\"\"`."
                                      },
                                      "name": {
                                        "type": "string",
                                        "description": "The name of the entity. A name matching regex `__.*__` is reserved/read-only. A name must not be more than 1500 bytes when UTF-8 encoded. Cannot be `\"\"`."
                                      }
                                    },
                                    "description": "A (kind, ID/name) pair used to construct a key path. If either name or ID is set, the element is complete. If neither is set, the element is incomplete."
                                  },
                                  "description": "The entity path. An entity path consists of one or more elements composed of a kind and a string or numerical identifier, which identify entities. The first element identifies a _root entity_, the second element identifies a _child_ of the root entity, the third element identifies a child of the second entity, and so forth. The entities identified by all prefixes of the path are called the element's _ancestors_. An entity path is always fully complete: *all* of the entity's ancestors are required to be in the path along with the entity identifier itself. The only exception is that in some documented cases, the identifier in the last path element (for the entity) itself may be omitted. For example, the last path element of the key of `Mutation.insert` may have no identifier. A path can never be empty, and a path can have at most 100 elements."
                                },
                                "partitionId": {
                                  "id": "PartitionId",
                                  "type": "object",
                                  "properties": {
                                    "projectId": {
                                      "type": "string",
                                      "description": "The ID of the project to which the entities belong."
                                    },
                                    "namespaceId": {
                                      "type": "string",
                                      "description": "If not empty, the ID of the namespace to which the entities belong."
                                    }
                                  },
                                  "description": "Entities are partitioned into subsets, currently identified by a project ID and namespace ID. Queries are scoped to a single partition."
                                }
                              },
                              "description": "A unique identifier for an entity. If a key's partition ID or any of its path kinds or names are reserved/read-only, the key is reserved/read-only. A reserved/read-only key is forbidden in certain documented contexts."
                            },
                            "blobValue": {
                              "type": "string",
                              "format": "byte",
                              "description": "A blob value. May have at most 1,000,000 bytes. When `exclude_from_indexes` is false, may have at most 1500 bytes. In JSON requests, must be base64-encoded."
                            },
                            "nullValue": {
                              "enum": [
                                "NULL_VALUE"
                              ],
                              "type": "string",
                              "description": "A null value.",
                              "enumDescriptions": [
                                "Null value."
                              ]
                            },
                            "arrayValue": {
                              "id": "ArrayValue",
                              "type": "object",
                              "properties": {
                                "values": {
                                  "type": "array",
                                  "items": {},
                                  "description": "Values in the array. The order of values in an array is preserved as long as all values have identical settings for 'exclude_from_indexes'."
                                }
                              },
                              "description": "An array value. Cannot contain another array value. A `Value` instance that sets field `array_value` must not set fields `meaning` or `exclude_from_indexes`."
                            },
                            "doubleValue": {
                              "type": "number",
                              "format": "double",
                              "description": "A double value."
                            },
                            "entityValue": {
                              "id": "Entity",
                              "type": "object",
                              "properties": {},
                              "description": "An entity value. - May have no key. - May have a key with an incomplete key path. - May have a reserved/read-only key."
                            },
                            "stringValue": {
                              "type": "string",
                              "description": "A UTF-8 encoded string value. When `exclude_from_indexes` is false (it is indexed) , may have at most 1500 bytes. Otherwise, may be set to at most 1,000,000 bytes."
                            },
                            "booleanValue": {
                              "type": "boolean",
                              "description": "A boolean value."
                            },
                            "integerValue": {
                              "type": "string",
                              "format": "int64",
                              "description": "An integer value."
                            },
                            "geoPointValue": {
                              "id": "LatLng",
                              "type": "object",
                              "properties": {
                                "latitude": {
                                  "type": "number",
                                  "format": "double",
                                  "description": "The latitude in degrees. It must be in the range [-90.0, +90.0]."
                                },
                                "longitude": {
                                  "type": "number",
                                  "format": "double",
                                  "description": "The longitude in degrees. It must be in the range [-180.0, +180.0]."
                                }
                              },
                              "description": "A geo point value representing a point on the surface of Earth."
                            },
                            "timestampValue": {
                              "type": "string",
                              "format": "google-datetime",
                              "description": "A timestamp value. When stored in the Datastore, precise only to microseconds; any additional precision is rounded down."
                            },
                            "excludeFromIndexes": {
                              "type": "boolean",
                              "description": "If the value should be excluded from all indexes including those defined explicitly."
                            }
                          },
                          "description": "A message that can hold any of the supported value types and associated metadata."
                        }
                      }
                    },
                    "description": "The entity to update. The entity must already exist. Must have a complete key path."
                  },
                  "upsert": {
                    "id": "Entity",
                    "type": "object",
                    "properties": {
                      "key": {
                        "id": "Key",
                        "type": "object",
                        "properties": {
                          "path": {
                            "type": "array",
                            "items": {
                              "id": "PathElement",
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "format": "int64",
                                  "description": "The auto-allocated ID of the entity. Never equal to zero. Values less than zero are discouraged and may not be supported in the future."
                                },
                                "kind": {
                                  "type": "string",
                                  "description": "The kind of the entity. A kind matching regex `__.*__` is reserved/read-only. A kind must not contain more than 1500 bytes when UTF-8 encoded. Cannot be `\"\"`."
                                },
                                "name": {
                                  "type": "string",
                                  "description": "The name of the entity. A name matching regex `__.*__` is reserved/read-only. A name must not be more than 1500 bytes when UTF-8 encoded. Cannot be `\"\"`."
                                }
                              },
                              "description": "A (kind, ID/name) pair used to construct a key path. If either name or ID is set, the element is complete. If neither is set, the element is incomplete."
                            },
                            "description": "The entity path. An entity path consists of one or more elements composed of a kind and a string or numerical identifier, which identify entities. The first element identifies a _root entity_, the second element identifies a _child_ of the root entity, the third element identifies a child of the second entity, and so forth. The entities identified by all prefixes of the path are called the element's _ancestors_. An entity path is always fully complete: *all* of the entity's ancestors are required to be in the path along with the entity identifier itself. The only exception is that in some documented cases, the identifier in the last path element (for the entity) itself may be omitted. For example, the last path element of the key of `Mutation.insert` may have no identifier. A path can never be empty, and a path can have at most 100 elements."
                          },
                          "partitionId": {
                            "id": "PartitionId",
                            "type": "object",
                            "properties": {
                              "projectId": {
                                "type": "string",
                                "description": "The ID of the project to which the entities belong."
                              },
                              "namespaceId": {
                                "type": "string",
                                "description": "If not empty, the ID of the namespace to which the entities belong."
                              }
                            },
                            "description": "Entities are partitioned into subsets, currently identified by a project ID and namespace ID. Queries are scoped to a single partition."
                          }
                        },
                        "description": "A unique identifier for an entity. If a key's partition ID or any of its path kinds or names are reserved/read-only, the key is reserved/read-only. A reserved/read-only key is forbidden in certain documented contexts."
                      },
                      "properties": {
                        "type": "object",
                        "description": "The entity's properties. The map's keys are property names. A property name matching regex `__.*__` is reserved. A reserved property name is forbidden in certain documented contexts. The name must not contain more than 500 characters. The name cannot be `\"\"`.",
                        "additionalProperties": {
                          "id": "Value",
                          "type": "object",
                          "properties": {
                            "meaning": {
                              "type": "integer",
                              "format": "int32",
                              "description": "The `meaning` field should only be populated for backwards compatibility."
                            },
                            "keyValue": {
                              "id": "Key",
                              "type": "object",
                              "properties": {
                                "path": {
                                  "type": "array",
                                  "items": {
                                    "id": "PathElement",
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "format": "int64",
                                        "description": "The auto-allocated ID of the entity. Never equal to zero. Values less than zero are discouraged and may not be supported in the future."
                                      },
                                      "kind": {
                                        "type": "string",
                                        "description": "The kind of the entity. A kind matching regex `__.*__` is reserved/read-only. A kind must not contain more than 1500 bytes when UTF-8 encoded. Cannot be `\"\"`."
                                      },
                                      "name": {
                                        "type": "string",
                                        "description": "The name of the entity. A name matching regex `__.*__` is reserved/read-only. A name must not be more than 1500 bytes when UTF-8 encoded. Cannot be `\"\"`."
                                      }
                                    },
                                    "description": "A (kind, ID/name) pair used to construct a key path. If either name or ID is set, the element is complete. If neither is set, the element is incomplete."
                                  },
                                  "description": "The entity path. An entity path consists of one or more elements composed of a kind and a string or numerical identifier, which identify entities. The first element identifies a _root entity_, the second element identifies a _child_ of the root entity, the third element identifies a child of the second entity, and so forth. The entities identified by all prefixes of the path are called the element's _ancestors_. An entity path is always fully complete: *all* of the entity's ancestors are required to be in the path along with the entity identifier itself. The only exception is that in some documented cases, the identifier in the last path element (for the entity) itself may be omitted. For example, the last path element of the key of `Mutation.insert` may have no identifier. A path can never be empty, and a path can have at most 100 elements."
                                },
                                "partitionId": {
                                  "id": "PartitionId",
                                  "type": "object",
                                  "properties": {
                                    "projectId": {
                                      "type": "string",
                                      "description": "The ID of the project to which the entities belong."
                                    },
                                    "namespaceId": {
                                      "type": "string",
                                      "description": "If not empty, the ID of the namespace to which the entities belong."
                                    }
                                  },
                                  "description": "Entities are partitioned into subsets, currently identified by a project ID and namespace ID. Queries are scoped to a single partition."
                                }
                              },
                              "description": "A unique identifier for an entity. If a key's partition ID or any of its path kinds or names are reserved/read-only, the key is reserved/read-only. A reserved/read-only key is forbidden in certain documented contexts."
                            },
                            "blobValue": {
                              "type": "string",
                              "format": "byte",
                              "description": "A blob value. May have at most 1,000,000 bytes. When `exclude_from_indexes` is false, may have at most 1500 bytes. In JSON requests, must be base64-encoded."
                            },
                            "nullValue": {
                              "enum": [
                                "NULL_VALUE"
                              ],
                              "type": "string",
                              "description": "A null value.",
                              "enumDescriptions": [
                                "Null value."
                              ]
                            },
                            "arrayValue": {
                              "id": "ArrayValue",
                              "type": "object",
                              "properties": {
                                "values": {
                                  "type": "array",
                                  "items": {},
                                  "description": "Values in the array. The order of values in an array is preserved as long as all values have identical settings for 'exclude_from_indexes'."
                                }
                              },
                              "description": "An array value. Cannot contain another array value. A `Value` instance that sets field `array_value` must not set fields `meaning` or `exclude_from_indexes`."
                            },
                            "doubleValue": {
                              "type": "number",
                              "format": "double",
                              "description": "A double value."
                            },
                            "entityValue": {
                              "id": "Entity",
                              "type": "object",
                              "properties": {},
                              "description": "An entity value. - May have no key. - May have a key with an incomplete key path. - May have a reserved/read-only key."
                            },
                            "stringValue": {
                              "type": "string",
                              "description": "A UTF-8 encoded string value. When `exclude_from_indexes` is false (it is indexed) , may have at most 1500 bytes. Otherwise, may be set to at most 1,000,000 bytes."
                            },
                            "booleanValue": {
                              "type": "boolean",
                              "description": "A boolean value."
                            },
                            "integerValue": {
                              "type": "string",
                              "format": "int64",
                              "description": "An integer value."
                            },
                            "geoPointValue": {
                              "id": "LatLng",
                              "type": "object",
                              "properties": {
                                "latitude": {
                                  "type": "number",
                                  "format": "double",
                                  "description": "The latitude in degrees. It must be in the range [-90.0, +90.0]."
                                },
                                "longitude": {
                                  "type": "number",
                                  "format": "double",
                                  "description": "The longitude in degrees. It must be in the range [-180.0, +180.0]."
                                }
                              },
                              "description": "A geo point value representing a point on the surface of Earth."
                            },
                            "timestampValue": {
                              "type": "string",
                              "format": "google-datetime",
                              "description": "A timestamp value. When stored in the Datastore, precise only to microseconds; any additional precision is rounded down."
                            },
                            "excludeFromIndexes": {
                              "type": "boolean",
                              "description": "If the value should be excluded from all indexes including those defined explicitly."
                            }
                          },
                          "description": "A message that can hold any of the supported value types and associated metadata."
                        }
                      }
                    },
                    "description": "The entity to upsert. The entity may or may not already exist. The entity key's final path element may be incomplete."
                  },
                  "baseVersion": {
                    "type": "string",
                    "format": "int64",
                    "description": "The version of the entity that this mutation is being applied to. If this does not match the current version on the server, the mutation conflicts."
                  }
                },
                "description": "A mutation to apply to an entity."
              },
              "description": "The mutations to perform. When mode is `TRANSACTIONAL`, mutations affecting a single entity are applied in order. The following sequences of mutations affecting a single entity are not permitted in a single `Commit` request: - `insert` followed by `insert` - `update` followed by `insert` - `upsert` followed by `insert` - `delete` followed by `update` When mode is `NON_TRANSACTIONAL`, no two mutations may affect a single entity."
            },
            "transaction": {
              "type": "string",
              "format": "byte",
              "description": "The identifier of the transaction associated with the commit. A transaction identifier is returned by a call to Datastore.BeginTransaction."
            }
          },
          "description": "The request for Datastore.Commit."
        }
      ]
      outputs: [
        {
          "id": "CommitResponse",
          "type": "object",
          "properties": {
            "indexUpdates": {
              "type": "integer",
              "format": "int32",
              "description": "The number of index entries updated during the commit, or zero if none were updated."
            },
            "mutationResults": {
              "type": "array",
              "items": {
                "id": "MutationResult",
                "type": "object",
                "properties": {
                  "key": {
                    "id": "Key",
                    "type": "object",
                    "properties": {
                      "path": {
                        "type": "array",
                        "items": {
                          "id": "PathElement",
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "int64",
                              "description": "The auto-allocated ID of the entity. Never equal to zero. Values less than zero are discouraged and may not be supported in the future."
                            },
                            "kind": {
                              "type": "string",
                              "description": "The kind of the entity. A kind matching regex `__.*__` is reserved/read-only. A kind must not contain more than 1500 bytes when UTF-8 encoded. Cannot be `\"\"`."
                            },
                            "name": {
                              "type": "string",
                              "description": "The name of the entity. A name matching regex `__.*__` is reserved/read-only. A name must not be more than 1500 bytes when UTF-8 encoded. Cannot be `\"\"`."
                            }
                          },
                          "description": "A (kind, ID/name) pair used to construct a key path. If either name or ID is set, the element is complete. If neither is set, the element is incomplete."
                        },
                        "description": "The entity path. An entity path consists of one or more elements composed of a kind and a string or numerical identifier, which identify entities. The first element identifies a _root entity_, the second element identifies a _child_ of the root entity, the third element identifies a child of the second entity, and so forth. The entities identified by all prefixes of the path are called the element's _ancestors_. An entity path is always fully complete: *all* of the entity's ancestors are required to be in the path along with the entity identifier itself. The only exception is that in some documented cases, the identifier in the last path element (for the entity) itself may be omitted. For example, the last path element of the key of `Mutation.insert` may have no identifier. A path can never be empty, and a path can have at most 100 elements."
                      },
                      "partitionId": {
                        "id": "PartitionId",
                        "type": "object",
                        "properties": {
                          "projectId": {
                            "type": "string",
                            "description": "The ID of the project to which the entities belong."
                          },
                          "namespaceId": {
                            "type": "string",
                            "description": "If not empty, the ID of the namespace to which the entities belong."
                          }
                        },
                        "description": "Entities are partitioned into subsets, currently identified by a project ID and namespace ID. Queries are scoped to a single partition."
                      }
                    },
                    "description": "A unique identifier for an entity. If a key's partition ID or any of its path kinds or names are reserved/read-only, the key is reserved/read-only. A reserved/read-only key is forbidden in certain documented contexts."
                  },
                  "version": {
                    "type": "string",
                    "format": "int64",
                    "description": "The version of the entity on the server after processing the mutation. If the mutation doesn't change anything on the server, then the version will be the version of the current entity or, if no entity is present, a version that is strictly greater than the version of any previous entity and less than the version of any possible future entity."
                  },
                  "conflictDetected": {
                    "type": "boolean",
                    "description": "Whether a conflict was detected for this mutation. Always false when a conflict detection strategy field is not set in the mutation."
                  }
                },
                "description": "The result of applying a mutation."
              },
              "description": "The result of performing the mutations. The i-th mutation result corresponds to the i-th mutation in the request."
            }
          },
          "description": "The response for Datastore.Commit."
        }
      ]
  projects.export:
    description: |-
      Exports a copy of all or a subset of entities from Google Cloud Datastore to another storage system, such as Google Cloud Storage. Recent updates to entities may not be reflected in the export. The export occurs in the background and its progress can be monitored and managed via the Operation resource that is created. The output of an export may only be used once the associated operation is done. If an export operation is cancelled before completion it may leave partial data behind in Google Cloud Storage.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/datastore/docs/reference/data/rest/v1/projects/export
    example:
      inputs: [
        {
          "id": "GoogleDatastoreAdminV1ExportEntitiesRequest",
          "type": "object",
          "properties": {
            "labels": {
              "type": "object",
              "description": "Client-assigned labels.",
              "additionalProperties": {
                "type": "string"
              }
            },
            "entityFilter": {
              "id": "GoogleDatastoreAdminV1EntityFilter",
              "type": "object",
              "properties": {
                "kinds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "If empty, then this represents all kinds."
                },
                "namespaceIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "An empty list represents all namespaces. This is the preferred usage for projects that don't use namespaces. An empty string element represents the default namespace. This should be used if the project has data in non-default namespaces, but doesn't want to include them. Each namespace in this list must be unique."
                }
              },
              "description": "Description of what data from the project is included in the export."
            },
            "outputUrlPrefix": {
              "type": "string",
              "description": "Required. Location for the export metadata and data files. The full resource URL of the external storage location. Currently, only Google Cloud Storage is supported. So output_url_prefix should be of the form: `gs://BUCKET_NAME[/NAMESPACE_PATH]`, where `BUCKET_NAME` is the name of the Cloud Storage bucket and `NAMESPACE_PATH` is an optional Cloud Storage namespace path (this is not a Cloud Datastore namespace). For more information about Cloud Storage namespace paths, see [Object name considerations](https://cloud.google.com/storage/docs/naming#object-considerations). The resulting files will be nested deeper than the specified URL prefix. The final output URL will be provided in the google.datastore.admin.v1.ExportEntitiesResponse.output_url field. That value should be used for subsequent ImportEntities operations. By nesting the data files deeper, the same Cloud Storage bucket can be used in multiple ExportEntities operations without conflict."
            }
          },
          "description": "The request for google.datastore.admin.v1.DatastoreAdmin.ExportEntities."
        }
      ]
      outputs: [
        {
          "id": "GoogleLongrunningOperation",
          "type": "object",
          "properties": {
            "done": {
              "type": "boolean",
              "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available."
            },
            "name": {
              "type": "string",
              "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`."
            },
            "error": {
              "id": "Status",
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The status code, which should be an enum value of google.rpc.Code."
                },
                "details": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  },
                  "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
                },
                "message": {
                  "type": "string",
                  "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                }
              },
              "description": "The error result of the operation in case of failure or cancellation."
            },
            "metadata": {
              "type": "object",
              "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
              "additionalProperties": {
                "type": "any",
                "description": "Properties of the object. Contains field @type with type URL."
              }
            },
            "response": {
              "type": "object",
              "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
              "additionalProperties": {
                "type": "any",
                "description": "Properties of the object. Contains field @type with type URL."
              }
            }
          },
          "description": "This resource represents a long-running operation that is the result of a network API call."
        }
      ]
  projects.import:
    description: |-
      Imports entities into Google Cloud Datastore. Existing entities with the same key are overwritten. The import occurs in the background and its progress can be monitored and managed via the Operation resource that is created. If an ImportEntities operation is cancelled, it is possible that a subset of the data has already been imported to Cloud Datastore.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/datastore/docs/reference/data/rest/v1/projects/import
    example:
      inputs: [
        {
          "id": "GoogleDatastoreAdminV1ImportEntitiesRequest",
          "type": "object",
          "properties": {
            "labels": {
              "type": "object",
              "description": "Client-assigned labels.",
              "additionalProperties": {
                "type": "string"
              }
            },
            "inputUrl": {
              "type": "string",
              "description": "Required. The full resource URL of the external storage location. Currently, only Google Cloud Storage is supported. So input_url should be of the form: `gs://BUCKET_NAME[/NAMESPACE_PATH]/OVERALL_EXPORT_METADATA_FILE`, where `BUCKET_NAME` is the name of the Cloud Storage bucket, `NAMESPACE_PATH` is an optional Cloud Storage namespace path (this is not a Cloud Datastore namespace), and `OVERALL_EXPORT_METADATA_FILE` is the metadata file written by the ExportEntities operation. For more information about Cloud Storage namespace paths, see [Object name considerations](https://cloud.google.com/storage/docs/naming#object-considerations). For more information, see google.datastore.admin.v1.ExportEntitiesResponse.output_url."
            },
            "entityFilter": {
              "id": "GoogleDatastoreAdminV1EntityFilter",
              "type": "object",
              "properties": {
                "kinds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "If empty, then this represents all kinds."
                },
                "namespaceIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "An empty list represents all namespaces. This is the preferred usage for projects that don't use namespaces. An empty string element represents the default namespace. This should be used if the project has data in non-default namespaces, but doesn't want to include them. Each namespace in this list must be unique."
                }
              },
              "description": "Optionally specify which kinds/namespaces are to be imported. If provided, the list must be a subset of the EntityFilter used in creating the export, otherwise a FAILED_PRECONDITION error will be returned. If no filter is specified then all entities from the export are imported."
            }
          },
          "description": "The request for google.datastore.admin.v1.DatastoreAdmin.ImportEntities."
        }
      ]
      outputs: [
        {
          "id": "GoogleLongrunningOperation",
          "type": "object",
          "properties": {
            "done": {
              "type": "boolean",
              "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available."
            },
            "name": {
              "type": "string",
              "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`."
            },
            "error": {
              "id": "Status",
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The status code, which should be an enum value of google.rpc.Code."
                },
                "details": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  },
                  "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
                },
                "message": {
                  "type": "string",
                  "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                }
              },
              "description": "The error result of the operation in case of failure or cancellation."
            },
            "metadata": {
              "type": "object",
              "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
              "additionalProperties": {
                "type": "any",
                "description": "Properties of the object. Contains field @type with type URL."
              }
            },
            "response": {
              "type": "object",
              "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
              "additionalProperties": {
                "type": "any",
                "description": "Properties of the object. Contains field @type with type URL."
              }
            }
          },
          "description": "This resource represents a long-running operation that is the result of a network API call."
        }
      ]
  projects.indexes.create:
    description: |-
      Creates the specified index. A newly created index's initial state is `CREATING`. On completion of the returned google.longrunning.Operation, the state will be `READY`. If the index already exists, the call will return an `ALREADY_EXISTS` status. During index creation, the process could result in an error, in which case the index will move to the `ERROR` state. The process can be recovered by fixing the data that caused the error, removing the index with delete, then re-creating the index with create. Indexes with a single property cannot be created.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/datastore/docs/reference/data/rest/v1/projects.indexes/create
    example:
      inputs: [
        {
          "id": "GoogleDatastoreAdminV1Index",
          "type": "object",
          "properties": {
            "kind": {
              "type": "string",
              "description": "Required. The entity kind to which this index applies."
            },
            "state": {
              "enum": [
                "STATE_UNSPECIFIED",
                "CREATING",
                "READY",
                "DELETING",
                "ERROR"
              ],
              "type": "string",
              "readOnly": true,
              "description": "Output only. The state of the index.",
              "enumDescriptions": [
                "The state is unspecified.",
                "The index is being created, and cannot be used by queries. There is an active long-running operation for the index. The index is updated when writing an entity. Some index data may exist.",
                "The index is ready to be used. The index is updated when writing an entity. The index is fully populated from all stored entities it applies to.",
                "The index is being deleted, and cannot be used by queries. There is an active long-running operation for the index. The index is not updated when writing an entity. Some index data may exist.",
                "The index was being created or deleted, but something went wrong. The index cannot by used by queries. There is no active long-running operation for the index, and the most recently finished long-running operation failed. The index is not updated when writing an entity. Some index data may exist."
              ]
            },
            "indexId": {
              "type": "string",
              "readOnly": true,
              "description": "Output only. The resource ID of the index."
            },
            "ancestor": {
              "enum": [
                "ANCESTOR_MODE_UNSPECIFIED",
                "NONE",
                "ALL_ANCESTORS"
              ],
              "type": "string",
              "description": "Required. The index's ancestor mode. Must not be ANCESTOR_MODE_UNSPECIFIED.",
              "enumDescriptions": [
                "The ancestor mode is unspecified.",
                "Do not include the entity's ancestors in the index.",
                "Include all the entity's ancestors in the index."
              ]
            },
            "projectId": {
              "type": "string",
              "readOnly": true,
              "description": "Output only. Project ID."
            },
            "properties": {
              "type": "array",
              "items": {
                "id": "GoogleDatastoreAdminV1IndexedProperty",
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Required. The property name to index."
                  },
                  "direction": {
                    "enum": [
                      "DIRECTION_UNSPECIFIED",
                      "ASCENDING",
                      "DESCENDING"
                    ],
                    "type": "string",
                    "description": "Required. The indexed property's direction. Must not be DIRECTION_UNSPECIFIED.",
                    "enumDescriptions": [
                      "The direction is unspecified.",
                      "The property's values are indexed so as to support sequencing in ascending order and also query by <, >, <=, >=, and =.",
                      "The property's values are indexed so as to support sequencing in descending order and also query by <, >, <=, >=, and =."
                    ]
                  }
                },
                "description": "A property of an index."
              },
              "description": "Required. An ordered sequence of property names and their index attributes."
            }
          },
          "description": "Datastore composite index definition."
        }
      ]
      outputs: [
        {
          "id": "GoogleLongrunningOperation",
          "type": "object",
          "properties": {
            "done": {
              "type": "boolean",
              "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available."
            },
            "name": {
              "type": "string",
              "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`."
            },
            "error": {
              "id": "Status",
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The status code, which should be an enum value of google.rpc.Code."
                },
                "details": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  },
                  "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
                },
                "message": {
                  "type": "string",
                  "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                }
              },
              "description": "The error result of the operation in case of failure or cancellation."
            },
            "metadata": {
              "type": "object",
              "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
              "additionalProperties": {
                "type": "any",
                "description": "Properties of the object. Contains field @type with type URL."
              }
            },
            "response": {
              "type": "object",
              "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
              "additionalProperties": {
                "type": "any",
                "description": "Properties of the object. Contains field @type with type URL."
              }
            }
          },
          "description": "This resource represents a long-running operation that is the result of a network API call."
        }
      ]
  projects.indexes.delete:
    description: |-
      Deletes an existing index. An index can only be deleted if it is in a `READY` or `ERROR` state. On successful execution of the request, the index will be in a `DELETING` state. And on completion of the returned google.longrunning.Operation, the index will be removed. During index deletion, the process could result in an error, in which case the index will move to the `ERROR` state. The process can be recovered by fixing the data that caused the error, followed by calling delete again.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/datastore/docs/reference/data/rest/v1/projects.indexes/delete
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "GoogleLongrunningOperation",
          "type": "object",
          "properties": {
            "done": {
              "type": "boolean",
              "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available."
            },
            "name": {
              "type": "string",
              "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`."
            },
            "error": {
              "id": "Status",
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The status code, which should be an enum value of google.rpc.Code."
                },
                "details": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  },
                  "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
                },
                "message": {
                  "type": "string",
                  "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                }
              },
              "description": "The error result of the operation in case of failure or cancellation."
            },
            "metadata": {
              "type": "object",
              "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
              "additionalProperties": {
                "type": "any",
                "description": "Properties of the object. Contains field @type with type URL."
              }
            },
            "response": {
              "type": "object",
              "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
              "additionalProperties": {
                "type": "any",
                "description": "Properties of the object. Contains field @type with type URL."
              }
            }
          },
          "description": "This resource represents a long-running operation that is the result of a network API call."
        }
      ]
  projects.indexes.get:
    description: |-
      Gets an index.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/datastore/docs/reference/data/rest/v1/projects.indexes/get
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  projects.indexes.list:
    description: |-
      Lists the indexes that match the specified filters. Datastore uses an eventually consistent query to fetch the list of indexes and may occasionally return stale results.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/datastore/docs/reference/data/rest/v1/projects.indexes/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "GoogleDatastoreAdminV1ListIndexesResponse",
          "type": "object",
          "properties": {
            "indexes": {
              "type": "array",
              "items": {
                "id": "GoogleDatastoreAdminV1Index",
                "type": "object",
                "properties": {
                  "kind": {
                    "type": "string",
                    "description": "Required. The entity kind to which this index applies."
                  },
                  "state": {
                    "enum": [
                      "STATE_UNSPECIFIED",
                      "CREATING",
                      "READY",
                      "DELETING",
                      "ERROR"
                    ],
                    "type": "string",
                    "readOnly": true,
                    "description": "Output only. The state of the index.",
                    "enumDescriptions": [
                      "The state is unspecified.",
                      "The index is being created, and cannot be used by queries. There is an active long-running operation for the index. The index is updated when writing an entity. Some index data may exist.",
                      "The index is ready to be used. The index is updated when writing an entity. The index is fully populated from all stored entities it applies to.",
                      "The index is being deleted, and cannot be used by queries. There is an active long-running operation for the index. The index is not updated when writing an entity. Some index data may exist.",
                      "The index was being created or deleted, but something went wrong. The index cannot by used by queries. There is no active long-running operation for the index, and the most recently finished long-running operation failed. The index is not updated when writing an entity. Some index data may exist."
                    ]
                  },
                  "indexId": {
                    "type": "string",
                    "readOnly": true,
                    "description": "Output only. The resource ID of the index."
                  },
                  "ancestor": {
                    "enum": [
                      "ANCESTOR_MODE_UNSPECIFIED",
                      "NONE",
                      "ALL_ANCESTORS"
                    ],
                    "type": "string",
                    "description": "Required. The index's ancestor mode. Must not be ANCESTOR_MODE_UNSPECIFIED.",
                    "enumDescriptions": [
                      "The ancestor mode is unspecified.",
                      "Do not include the entity's ancestors in the index.",
                      "Include all the entity's ancestors in the index."
                    ]
                  },
                  "projectId": {
                    "type": "string",
                    "readOnly": true,
                    "description": "Output only. Project ID."
                  },
                  "properties": {
                    "type": "array",
                    "items": {
                      "id": "GoogleDatastoreAdminV1IndexedProperty",
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Required. The property name to index."
                        },
                        "direction": {
                          "enum": [
                            "DIRECTION_UNSPECIFIED",
                            "ASCENDING",
                            "DESCENDING"
                          ],
                          "type": "string",
                          "description": "Required. The indexed property's direction. Must not be DIRECTION_UNSPECIFIED.",
                          "enumDescriptions": [
                            "The direction is unspecified.",
                            "The property's values are indexed so as to support sequencing in ascending order and also query by <, >, <=, >=, and =.",
                            "The property's values are indexed so as to support sequencing in descending order and also query by <, >, <=, >=, and =."
                          ]
                        }
                      },
                      "description": "A property of an index."
                    },
                    "description": "Required. An ordered sequence of property names and their index attributes."
                  }
                },
                "description": "Datastore composite index definition."
              },
              "description": "The indexes."
            },
            "nextPageToken": {
              "type": "string",
              "description": "The standard List next-page token."
            }
          },
          "description": "The response for google.datastore.admin.v1.DatastoreAdmin.ListIndexes."
        }
      ]
  projects.lookup:
    description: |-
      Looks up entities by key.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/datastore/docs/reference/data/rest/v1/projects/lookup
    example:
      inputs: [
        {
          "id": "LookupRequest",
          "type": "object",
          "properties": {
            "keys": {
              "type": "array",
              "items": {
                "id": "Key",
                "type": "object",
                "properties": {
                  "path": {
                    "type": "array",
                    "items": {
                      "id": "PathElement",
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "int64",
                          "description": "The auto-allocated ID of the entity. Never equal to zero. Values less than zero are discouraged and may not be supported in the future."
                        },
                        "kind": {
                          "type": "string",
                          "description": "The kind of the entity. A kind matching regex `__.*__` is reserved/read-only. A kind must not contain more than 1500 bytes when UTF-8 encoded. Cannot be `\"\"`."
                        },
                        "name": {
                          "type": "string",
                          "description": "The name of the entity. A name matching regex `__.*__` is reserved/read-only. A name must not be more than 1500 bytes when UTF-8 encoded. Cannot be `\"\"`."
                        }
                      },
                      "description": "A (kind, ID/name) pair used to construct a key path. If either name or ID is set, the element is complete. If neither is set, the element is incomplete."
                    },
                    "description": "The entity path. An entity path consists of one or more elements composed of a kind and a string or numerical identifier, which identify entities. The first element identifies a _root entity_, the second element identifies a _child_ of the root entity, the third element identifies a child of the second entity, and so forth. The entities identified by all prefixes of the path are called the element's _ancestors_. An entity path is always fully complete: *all* of the entity's ancestors are required to be in the path along with the entity identifier itself. The only exception is that in some documented cases, the identifier in the last path element (for the entity) itself may be omitted. For example, the last path element of the key of `Mutation.insert` may have no identifier. A path can never be empty, and a path can have at most 100 elements."
                  },
                  "partitionId": {
                    "id": "PartitionId",
                    "type": "object",
                    "properties": {
                      "projectId": {
                        "type": "string",
                        "description": "The ID of the project to which the entities belong."
                      },
                      "namespaceId": {
                        "type": "string",
                        "description": "If not empty, the ID of the namespace to which the entities belong."
                      }
                    },
                    "description": "Entities are partitioned into subsets, currently identified by a project ID and namespace ID. Queries are scoped to a single partition."
                  }
                },
                "description": "A unique identifier for an entity. If a key's partition ID or any of its path kinds or names are reserved/read-only, the key is reserved/read-only. A reserved/read-only key is forbidden in certain documented contexts."
              },
              "description": "Required. Keys of entities to look up."
            },
            "readOptions": {
              "id": "ReadOptions",
              "type": "object",
              "properties": {
                "transaction": {
                  "type": "string",
                  "format": "byte",
                  "description": "The identifier of the transaction in which to read. A transaction identifier is returned by a call to Datastore.BeginTransaction."
                },
                "readConsistency": {
                  "enum": [
                    "READ_CONSISTENCY_UNSPECIFIED",
                    "STRONG",
                    "EVENTUAL"
                  ],
                  "type": "string",
                  "description": "The non-transactional read consistency to use. Cannot be set to `STRONG` for global queries.",
                  "enumDescriptions": [
                    "Unspecified. This value must not be used.",
                    "Strong consistency.",
                    "Eventual consistency."
                  ]
                }
              },
              "description": "The options for this lookup request."
            }
          },
          "description": "The request for Datastore.Lookup."
        }
      ]
      outputs: [
        {
          "id": "LookupResponse",
          "type": "object",
          "properties": {
            "found": {
              "type": "array",
              "items": {
                "id": "EntityResult",
                "type": "object",
                "properties": {
                  "cursor": {
                    "type": "string",
                    "format": "byte",
                    "description": "A cursor that points to the position after the result entity. Set only when the `EntityResult` is part of a `QueryResultBatch` message."
                  },
                  "entity": {
                    "id": "Entity",
                    "type": "object",
                    "properties": {
                      "key": {
                        "id": "Key",
                        "type": "object",
                        "properties": {
                          "path": {
                            "type": "array",
                            "items": {
                              "id": "PathElement",
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "format": "int64",
                                  "description": "The auto-allocated ID of the entity. Never equal to zero. Values less than zero are discouraged and may not be supported in the future."
                                },
                                "kind": {
                                  "type": "string",
                                  "description": "The kind of the entity. A kind matching regex `__.*__` is reserved/read-only. A kind must not contain more than 1500 bytes when UTF-8 encoded. Cannot be `\"\"`."
                                },
                                "name": {
                                  "type": "string",
                                  "description": "The name of the entity. A name matching regex `__.*__` is reserved/read-only. A name must not be more than 1500 bytes when UTF-8 encoded. Cannot be `\"\"`."
                                }
                              },
                              "description": "A (kind, ID/name) pair used to construct a key path. If either name or ID is set, the element is complete. If neither is set, the element is incomplete."
                            },
                            "description": "The entity path. An entity path consists of one or more elements composed of a kind and a string or numerical identifier, which identify entities. The first element identifies a _root entity_, the second element identifies a _child_ of the root entity, the third element identifies a child of the second entity, and so forth. The entities identified by all prefixes of the path are called the element's _ancestors_. An entity path is always fully complete: *all* of the entity's ancestors are required to be in the path along with the entity identifier itself. The only exception is that in some documented cases, the identifier in the last path element (for the entity) itself may be omitted. For example, the last path element of the key of `Mutation.insert` may have no identifier. A path can never be empty, and a path can have at most 100 elements."
                          },
                          "partitionId": {
                            "id": "PartitionId",
                            "type": "object",
                            "properties": {
                              "projectId": {
                                "type": "string",
                                "description": "The ID of the project to which the entities belong."
                              },
                              "namespaceId": {
                                "type": "string",
                                "description": "If not empty, the ID of the namespace to which the entities belong."
                              }
                            },
                            "description": "Entities are partitioned into subsets, currently identified by a project ID and namespace ID. Queries are scoped to a single partition."
                          }
                        },
                        "description": "A unique identifier for an entity. If a key's partition ID or any of its path kinds or names are reserved/read-only, the key is reserved/read-only. A reserved/read-only key is forbidden in certain documented contexts."
                      },
                      "properties": {
                        "type": "object",
                        "description": "The entity's properties. The map's keys are property names. A property name matching regex `__.*__` is reserved. A reserved property name is forbidden in certain documented contexts. The name must not contain more than 500 characters. The name cannot be `\"\"`.",
                        "additionalProperties": {
                          "id": "Value",
                          "type": "object",
                          "properties": {
                            "meaning": {
                              "type": "integer",
                              "format": "int32",
                              "description": "The `meaning` field should only be populated for backwards compatibility."
                            },
                            "keyValue": {
                              "id": "Key",
                              "type": "object",
                              "properties": {
                                "path": {
                                  "type": "array",
                                  "items": {
                                    "id": "PathElement",
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "format": "int64",
                                        "description": "The auto-allocated ID of the entity. Never equal to zero. Values less than zero are discouraged and may not be supported in the future."
                                      },
                                      "kind": {
                                        "type": "string",
                                        "description": "The kind of the entity. A kind matching regex `__.*__` is reserved/read-only. A kind must not contain more than 1500 bytes when UTF-8 encoded. Cannot be `\"\"`."
                                      },
                                      "name": {
                                        "type": "string",
                                        "description": "The name of the entity. A name matching regex `__.*__` is reserved/read-only. A name must not be more than 1500 bytes when UTF-8 encoded. Cannot be `\"\"`."
                                      }
                                    },
                                    "description": "A (kind, ID/name) pair used to construct a key path. If either name or ID is set, the element is complete. If neither is set, the element is incomplete."
                                  },
                                  "description": "The entity path. An entity path consists of one or more elements composed of a kind and a string or numerical identifier, which identify entities. The first element identifies a _root entity_, the second element identifies a _child_ of the root entity, the third element identifies a child of the second entity, and so forth. The entities identified by all prefixes of the path are called the element's _ancestors_. An entity path is always fully complete: *all* of the entity's ancestors are required to be in the path along with the entity identifier itself. The only exception is that in some documented cases, the identifier in the last path element (for the entity) itself may be omitted. For example, the last path element of the key of `Mutation.insert` may have no identifier. A path can never be empty, and a path can have at most 100 elements."
                                },
                                "partitionId": {
                                  "id": "PartitionId",
                                  "type": "object",
                                  "properties": {
                                    "projectId": {
                                      "type": "string",
                                      "description": "The ID of the project to which the entities belong."
                                    },
                                    "namespaceId": {
                                      "type": "string",
                                      "description": "If not empty, the ID of the namespace to which the entities belong."
                                    }
                                  },
                                  "description": "Entities are partitioned into subsets, currently identified by a project ID and namespace ID. Queries are scoped to a single partition."
                                }
                              },
                              "description": "A unique identifier for an entity. If a key's partition ID or any of its path kinds or names are reserved/read-only, the key is reserved/read-only. A reserved/read-only key is forbidden in certain documented contexts."
                            },
                            "blobValue": {
                              "type": "string",
                              "format": "byte",
                              "description": "A blob value. May have at most 1,000,000 bytes. When `exclude_from_indexes` is false, may have at most 1500 bytes. In JSON requests, must be base64-encoded."
                            },
                            "nullValue": {
                              "enum": [
                                "NULL_VALUE"
                              ],
                              "type": "string",
                              "description": "A null value.",
                              "enumDescriptions": [
                                "Null value."
                              ]
                            },
                            "arrayValue": {
                              "id": "ArrayValue",
                              "type": "object",
                              "properties": {
                                "values": {
                                  "type": "array",
                                  "items": {},
                                  "description": "Values in the array. The order of values in an array is preserved as long as all values have identical settings for 'exclude_from_indexes'."
                                }
                              },
                              "description": "An array value. Cannot contain another array value. A `Value` instance that sets field `array_value` must not set fields `meaning` or `exclude_from_indexes`."
                            },
                            "doubleValue": {
                              "type": "number",
                              "format": "double",
                              "description": "A double value."
                            },
                            "entityValue": {
                              "id": "Entity",
                              "type": "object",
                              "properties": {},
                              "description": "An entity value. - May have no key. - May have a key with an incomplete key path. - May have a reserved/read-only key."
                            },
                            "stringValue": {
                              "type": "string",
                              "description": "A UTF-8 encoded string value. When `exclude_from_indexes` is false (it is indexed) , may have at most 1500 bytes. Otherwise, may be set to at most 1,000,000 bytes."
                            },
                            "booleanValue": {
                              "type": "boolean",
                              "description": "A boolean value."
                            },
                            "integerValue": {
                              "type": "string",
                              "format": "int64",
                              "description": "An integer value."
                            },
                            "geoPointValue": {
                              "id": "LatLng",
                              "type": "object",
                              "properties": {
                                "latitude": {
                                  "type": "number",
                                  "format": "double",
                                  "description": "The latitude in degrees. It must be in the range [-90.0, +90.0]."
                                },
                                "longitude": {
                                  "type": "number",
                                  "format": "double",
                                  "description": "The longitude in degrees. It must be in the range [-180.0, +180.0]."
                                }
                              },
                              "description": "A geo point value representing a point on the surface of Earth."
                            },
                            "timestampValue": {
                              "type": "string",
                              "format": "google-datetime",
                              "description": "A timestamp value. When stored in the Datastore, precise only to microseconds; any additional precision is rounded down."
                            },
                            "excludeFromIndexes": {
                              "type": "boolean",
                              "description": "If the value should be excluded from all indexes including those defined explicitly."
                            }
                          },
                          "description": "A message that can hold any of the supported value types and associated metadata."
                        }
                      }
                    },
                    "description": "The resulting entity."
                  },
                  "version": {
                    "type": "string",
                    "format": "int64",
                    "description": "The version of the entity, a strictly positive number that monotonically increases with changes to the entity. This field is set for `FULL` entity results. For missing entities in `LookupResponse`, this is the version of the snapshot that was used to look up the entity, and it is always set except for eventually consistent reads."
                  }
                },
                "description": "The result of fetching an entity from Datastore."
              },
              "description": "Entities found as `ResultType.FULL` entities. The order of results in this field is undefined and has no relation to the order of the keys in the input."
            },
            "missing": {
              "type": "array",
              "items": {
                "id": "EntityResult",
                "type": "object",
                "properties": {
                  "cursor": {
                    "type": "string",
                    "format": "byte",
                    "description": "A cursor that points to the position after the result entity. Set only when the `EntityResult` is part of a `QueryResultBatch` message."
                  },
                  "entity": {
                    "id": "Entity",
                    "type": "object",
                    "properties": {
                      "key": {
                        "id": "Key",
                        "type": "object",
                        "properties": {
                          "path": {
                            "type": "array",
                            "items": {
                              "id": "PathElement",
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "format": "int64",
                                  "description": "The auto-allocated ID of the entity. Never equal to zero. Values less than zero are discouraged and may not be supported in the future."
                                },
                                "kind": {
                                  "type": "string",
                                  "description": "The kind of the entity. A kind matching regex `__.*__` is reserved/read-only. A kind must not contain more than 1500 bytes when UTF-8 encoded. Cannot be `\"\"`."
                                },
                                "name": {
                                  "type": "string",
                                  "description": "The name of the entity. A name matching regex `__.*__` is reserved/read-only. A name must not be more than 1500 bytes when UTF-8 encoded. Cannot be `\"\"`."
                                }
                              },
                              "description": "A (kind, ID/name) pair used to construct a key path. If either name or ID is set, the element is complete. If neither is set, the element is incomplete."
                            },
                            "description": "The entity path. An entity path consists of one or more elements composed of a kind and a string or numerical identifier, which identify entities. The first element identifies a _root entity_, the second element identifies a _child_ of the root entity, the third element identifies a child of the second entity, and so forth. The entities identified by all prefixes of the path are called the element's _ancestors_. An entity path is always fully complete: *all* of the entity's ancestors are required to be in the path along with the entity identifier itself. The only exception is that in some documented cases, the identifier in the last path element (for the entity) itself may be omitted. For example, the last path element of the key of `Mutation.insert` may have no identifier. A path can never be empty, and a path can have at most 100 elements."
                          },
                          "partitionId": {
                            "id": "PartitionId",
                            "type": "object",
                            "properties": {
                              "projectId": {
                                "type": "string",
                                "description": "The ID of the project to which the entities belong."
                              },
                              "namespaceId": {
                                "type": "string",
                                "description": "If not empty, the ID of the namespace to which the entities belong."
                              }
                            },
                            "description": "Entities are partitioned into subsets, currently identified by a project ID and namespace ID. Queries are scoped to a single partition."
                          }
                        },
                        "description": "A unique identifier for an entity. If a key's partition ID or any of its path kinds or names are reserved/read-only, the key is reserved/read-only. A reserved/read-only key is forbidden in certain documented contexts."
                      },
                      "properties": {
                        "type": "object",
                        "description": "The entity's properties. The map's keys are property names. A property name matching regex `__.*__` is reserved. A reserved property name is forbidden in certain documented contexts. The name must not contain more than 500 characters. The name cannot be `\"\"`.",
                        "additionalProperties": {
                          "id": "Value",
                          "type": "object",
                          "properties": {
                            "meaning": {
                              "type": "integer",
                              "format": "int32",
                              "description": "The `meaning` field should only be populated for backwards compatibility."
                            },
                            "keyValue": {
                              "id": "Key",
                              "type": "object",
                              "properties": {
                                "path": {
                                  "type": "array",
                                  "items": {
                                    "id": "PathElement",
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "format": "int64",
                                        "description": "The auto-allocated ID of the entity. Never equal to zero. Values less than zero are discouraged and may not be supported in the future."
                                      },
                                      "kind": {
                                        "type": "string",
                                        "description": "The kind of the entity. A kind matching regex `__.*__` is reserved/read-only. A kind must not contain more than 1500 bytes when UTF-8 encoded. Cannot be `\"\"`."
                                      },
                                      "name": {
                                        "type": "string",
                                        "description": "The name of the entity. A name matching regex `__.*__` is reserved/read-only. A name must not be more than 1500 bytes when UTF-8 encoded. Cannot be `\"\"`."
                                      }
                                    },
                                    "description": "A (kind, ID/name) pair used to construct a key path. If either name or ID is set, the element is complete. If neither is set, the element is incomplete."
                                  },
                                  "description": "The entity path. An entity path consists of one or more elements composed of a kind and a string or numerical identifier, which identify entities. The first element identifies a _root entity_, the second element identifies a _child_ of the root entity, the third element identifies a child of the second entity, and so forth. The entities identified by all prefixes of the path are called the element's _ancestors_. An entity path is always fully complete: *all* of the entity's ancestors are required to be in the path along with the entity identifier itself. The only exception is that in some documented cases, the identifier in the last path element (for the entity) itself may be omitted. For example, the last path element of the key of `Mutation.insert` may have no identifier. A path can never be empty, and a path can have at most 100 elements."
                                },
                                "partitionId": {
                                  "id": "PartitionId",
                                  "type": "object",
                                  "properties": {
                                    "projectId": {
                                      "type": "string",
                                      "description": "The ID of the project to which the entities belong."
                                    },
                                    "namespaceId": {
                                      "type": "string",
                                      "description": "If not empty, the ID of the namespace to which the entities belong."
                                    }
                                  },
                                  "description": "Entities are partitioned into subsets, currently identified by a project ID and namespace ID. Queries are scoped to a single partition."
                                }
                              },
                              "description": "A unique identifier for an entity. If a key's partition ID or any of its path kinds or names are reserved/read-only, the key is reserved/read-only. A reserved/read-only key is forbidden in certain documented contexts."
                            },
                            "blobValue": {
                              "type": "string",
                              "format": "byte",
                              "description": "A blob value. May have at most 1,000,000 bytes. When `exclude_from_indexes` is false, may have at most 1500 bytes. In JSON requests, must be base64-encoded."
                            },
                            "nullValue": {
                              "enum": [
                                "NULL_VALUE"
                              ],
                              "type": "string",
                              "description": "A null value.",
                              "enumDescriptions": [
                                "Null value."
                              ]
                            },
                            "arrayValue": {
                              "id": "ArrayValue",
                              "type": "object",
                              "properties": {
                                "values": {
                                  "type": "array",
                                  "items": {},
                                  "description": "Values in the array. The order of values in an array is preserved as long as all values have identical settings for 'exclude_from_indexes'."
                                }
                              },
                              "description": "An array value. Cannot contain another array value. A `Value` instance that sets field `array_value` must not set fields `meaning` or `exclude_from_indexes`."
                            },
                            "doubleValue": {
                              "type": "number",
                              "format": "double",
                              "description": "A double value."
                            },
                            "entityValue": {
                              "id": "Entity",
                              "type": "object",
                              "properties": {},
                              "description": "An entity value. - May have no key. - May have a key with an incomplete key path. - May have a reserved/read-only key."
                            },
                            "stringValue": {
                              "type": "string",
                              "description": "A UTF-8 encoded string value. When `exclude_from_indexes` is false (it is indexed) , may have at most 1500 bytes. Otherwise, may be set to at most 1,000,000 bytes."
                            },
                            "booleanValue": {
                              "type": "boolean",
                              "description": "A boolean value."
                            },
                            "integerValue": {
                              "type": "string",
                              "format": "int64",
                              "description": "An integer value."
                            },
                            "geoPointValue": {
                              "id": "LatLng",
                              "type": "object",
                              "properties": {
                                "latitude": {
                                  "type": "number",
                                  "format": "double",
                                  "description": "The latitude in degrees. It must be in the range [-90.0, +90.0]."
                                },
                                "longitude": {
                                  "type": "number",
                                  "format": "double",
                                  "description": "The longitude in degrees. It must be in the range [-180.0, +180.0]."
                                }
                              },
                              "description": "A geo point value representing a point on the surface of Earth."
                            },
                            "timestampValue": {
                              "type": "string",
                              "format": "google-datetime",
                              "description": "A timestamp value. When stored in the Datastore, precise only to microseconds; any additional precision is rounded down."
                            },
                            "excludeFromIndexes": {
                              "type": "boolean",
                              "description": "If the value should be excluded from all indexes including those defined explicitly."
                            }
                          },
                          "description": "A message that can hold any of the supported value types and associated metadata."
                        }
                      }
                    },
                    "description": "The resulting entity."
                  },
                  "version": {
                    "type": "string",
                    "format": "int64",
                    "description": "The version of the entity, a strictly positive number that monotonically increases with changes to the entity. This field is set for `FULL` entity results. For missing entities in `LookupResponse`, this is the version of the snapshot that was used to look up the entity, and it is always set except for eventually consistent reads."
                  }
                },
                "description": "The result of fetching an entity from Datastore."
              },
              "description": "Entities not found as `ResultType.KEY_ONLY` entities. The order of results in this field is undefined and has no relation to the order of the keys in the input."
            },
            "deferred": {
              "type": "array",
              "items": {
                "id": "Key",
                "type": "object",
                "properties": {
                  "path": {
                    "type": "array",
                    "items": {
                      "id": "PathElement",
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "int64",
                          "description": "The auto-allocated ID of the entity. Never equal to zero. Values less than zero are discouraged and may not be supported in the future."
                        },
                        "kind": {
                          "type": "string",
                          "description": "The kind of the entity. A kind matching regex `__.*__` is reserved/read-only. A kind must not contain more than 1500 bytes when UTF-8 encoded. Cannot be `\"\"`."
                        },
                        "name": {
                          "type": "string",
                          "description": "The name of the entity. A name matching regex `__.*__` is reserved/read-only. A name must not be more than 1500 bytes when UTF-8 encoded. Cannot be `\"\"`."
                        }
                      },
                      "description": "A (kind, ID/name) pair used to construct a key path. If either name or ID is set, the element is complete. If neither is set, the element is incomplete."
                    },
                    "description": "The entity path. An entity path consists of one or more elements composed of a kind and a string or numerical identifier, which identify entities. The first element identifies a _root entity_, the second element identifies a _child_ of the root entity, the third element identifies a child of the second entity, and so forth. The entities identified by all prefixes of the path are called the element's _ancestors_. An entity path is always fully complete: *all* of the entity's ancestors are required to be in the path along with the entity identifier itself. The only exception is that in some documented cases, the identifier in the last path element (for the entity) itself may be omitted. For example, the last path element of the key of `Mutation.insert` may have no identifier. A path can never be empty, and a path can have at most 100 elements."
                  },
                  "partitionId": {
                    "id": "PartitionId",
                    "type": "object",
                    "properties": {
                      "projectId": {
                        "type": "string",
                        "description": "The ID of the project to which the entities belong."
                      },
                      "namespaceId": {
                        "type": "string",
                        "description": "If not empty, the ID of the namespace to which the entities belong."
                      }
                    },
                    "description": "Entities are partitioned into subsets, currently identified by a project ID and namespace ID. Queries are scoped to a single partition."
                  }
                },
                "description": "A unique identifier for an entity. If a key's partition ID or any of its path kinds or names are reserved/read-only, the key is reserved/read-only. A reserved/read-only key is forbidden in certain documented contexts."
              },
              "description": "A list of keys that were not looked up due to resource constraints. The order of results in this field is undefined and has no relation to the order of the keys in the input."
            }
          },
          "description": "The response for Datastore.Lookup."
        }
      ]
  projects.operations.cancel:
    description: |-
      Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/datastore/docs/reference/data/rest/v1/projects.operations/cancel
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "Empty",
          "type": "object",
          "properties": {},
          "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`."
        }
      ]
  projects.operations.delete:
    description: |-
      Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/datastore/docs/reference/data/rest/v1/projects.operations/delete
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "Empty",
          "type": "object",
          "properties": {},
          "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`."
        }
      ]
  projects.operations.get:
    description: |-
      Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/datastore/docs/reference/data/rest/v1/projects.operations/get
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "GoogleLongrunningOperation",
          "type": "object",
          "properties": {
            "done": {
              "type": "boolean",
              "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available."
            },
            "name": {
              "type": "string",
              "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`."
            },
            "error": {
              "id": "Status",
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The status code, which should be an enum value of google.rpc.Code."
                },
                "details": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  },
                  "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
                },
                "message": {
                  "type": "string",
                  "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                }
              },
              "description": "The error result of the operation in case of failure or cancellation."
            },
            "metadata": {
              "type": "object",
              "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
              "additionalProperties": {
                "type": "any",
                "description": "Properties of the object. Contains field @type with type URL."
              }
            },
            "response": {
              "type": "object",
              "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
              "additionalProperties": {
                "type": "any",
                "description": "Properties of the object. Contains field @type with type URL."
              }
            }
          },
          "description": "This resource represents a long-running operation that is the result of a network API call."
        }
      ]
  projects.operations.list:
    description: |-
      Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `"/v1/{name=users/*}/operations"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/datastore/docs/reference/data/rest/v1/projects.operations/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "GoogleLongrunningListOperationsResponse",
          "type": "object",
          "properties": {
            "operations": {
              "type": "array",
              "items": {
                "id": "GoogleLongrunningOperation",
                "type": "object",
                "properties": {
                  "done": {
                    "type": "boolean",
                    "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available."
                  },
                  "name": {
                    "type": "string",
                    "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`."
                  },
                  "error": {
                    "id": "Status",
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The status code, which should be an enum value of google.rpc.Code."
                      },
                      "details": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "any",
                            "description": "Properties of the object. Contains field @type with type URL."
                          }
                        },
                        "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
                      },
                      "message": {
                        "type": "string",
                        "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                      }
                    },
                    "description": "The error result of the operation in case of failure or cancellation."
                  },
                  "metadata": {
                    "type": "object",
                    "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  },
                  "response": {
                    "type": "object",
                    "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  }
                },
                "description": "This resource represents a long-running operation that is the result of a network API call."
              },
              "description": "A list of operations that matches the specified filter in the request."
            },
            "nextPageToken": {
              "type": "string",
              "description": "The standard List next-page token."
            }
          },
          "description": "The response message for Operations.ListOperations."
        }
      ]
  projects.reserveIds:
    description: |-
      Prevents the supplied keys' IDs from being auto-allocated by Cloud Datastore.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/datastore/docs/reference/data/rest/v1/projects/reserveIds
    example:
      inputs: [
        {
          "id": "ReserveIdsRequest",
          "type": "object",
          "properties": {
            "keys": {
              "type": "array",
              "items": {
                "id": "Key",
                "type": "object",
                "properties": {
                  "path": {
                    "type": "array",
                    "items": {
                      "id": "PathElement",
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "int64",
                          "description": "The auto-allocated ID of the entity. Never equal to zero. Values less than zero are discouraged and may not be supported in the future."
                        },
                        "kind": {
                          "type": "string",
                          "description": "The kind of the entity. A kind matching regex `__.*__` is reserved/read-only. A kind must not contain more than 1500 bytes when UTF-8 encoded. Cannot be `\"\"`."
                        },
                        "name": {
                          "type": "string",
                          "description": "The name of the entity. A name matching regex `__.*__` is reserved/read-only. A name must not be more than 1500 bytes when UTF-8 encoded. Cannot be `\"\"`."
                        }
                      },
                      "description": "A (kind, ID/name) pair used to construct a key path. If either name or ID is set, the element is complete. If neither is set, the element is incomplete."
                    },
                    "description": "The entity path. An entity path consists of one or more elements composed of a kind and a string or numerical identifier, which identify entities. The first element identifies a _root entity_, the second element identifies a _child_ of the root entity, the third element identifies a child of the second entity, and so forth. The entities identified by all prefixes of the path are called the element's _ancestors_. An entity path is always fully complete: *all* of the entity's ancestors are required to be in the path along with the entity identifier itself. The only exception is that in some documented cases, the identifier in the last path element (for the entity) itself may be omitted. For example, the last path element of the key of `Mutation.insert` may have no identifier. A path can never be empty, and a path can have at most 100 elements."
                  },
                  "partitionId": {
                    "id": "PartitionId",
                    "type": "object",
                    "properties": {
                      "projectId": {
                        "type": "string",
                        "description": "The ID of the project to which the entities belong."
                      },
                      "namespaceId": {
                        "type": "string",
                        "description": "If not empty, the ID of the namespace to which the entities belong."
                      }
                    },
                    "description": "Entities are partitioned into subsets, currently identified by a project ID and namespace ID. Queries are scoped to a single partition."
                  }
                },
                "description": "A unique identifier for an entity. If a key's partition ID or any of its path kinds or names are reserved/read-only, the key is reserved/read-only. A reserved/read-only key is forbidden in certain documented contexts."
              },
              "description": "Required. A list of keys with complete key paths whose numeric IDs should not be auto-allocated."
            },
            "databaseId": {
              "type": "string",
              "description": "If not empty, the ID of the database against which to make the request."
            }
          },
          "description": "The request for Datastore.ReserveIds."
        }
      ]
      outputs: [
        {
          "id": "ReserveIdsResponse",
          "type": "object",
          "properties": {},
          "description": "The response for Datastore.ReserveIds."
        }
      ]
  projects.rollback:
    description: |-
      Rolls back a transaction.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/datastore/docs/reference/data/rest/v1/projects/rollback
    example:
      inputs: [
        {
          "id": "RollbackRequest",
          "type": "object",
          "properties": {
            "transaction": {
              "type": "string",
              "format": "byte",
              "description": "Required. The transaction identifier, returned by a call to Datastore.BeginTransaction."
            }
          },
          "description": "The request for Datastore.Rollback."
        }
      ]
      outputs: [
        {
          "id": "RollbackResponse",
          "type": "object",
          "properties": {},
          "description": "The response for Datastore.Rollback. (an empty message)."
        }
      ]
  projects.runQuery:
    description: |-
      Queries for entities.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/datastore/docs/reference/data/rest/v1/projects/runQuery
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]