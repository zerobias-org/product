Product:
  name: GCP Kubernetes Engine
  versions: [1.0.0-beta1,1.0.0]
  package: google.gcp.kubernetesengine
  description: |-
    Kubernetes Engine
  link: https://cloud.google.com/kubernetes-engine
  contentType: json
Operations:
  projects.locations.list:
    description: |-
      Fetches locations that offer Google Kubernetes Engine.
    versions:
      from: 1.0.0-beta1
    link: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1beta1/projects.locations/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "description": "ListLocationsResponse returns the list of all GKE locations and their recommendation state."
        }
      ]
  projects.aggregated.usableSubnetworks.list:
    description: |-
      Lists subnetworks that are usable for creating clusters in a project.
    versions:
      from: 1.0.0-beta1
    link: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.aggregated.usableSubnetworks/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "ListUsableSubnetworksResponse",
          "type": "object",
          "properties": {
            "subnetworks": {
              "type": "array",
              "items": {
                "id": "UsableSubnetwork",
                "type": "object",
                "properties": {
                  "network": {
                    "type": "string",
                    "description": "Network Name. Example: projects/my-project/global/networks/my-network"
                  },
                  "subnetwork": {
                    "type": "string",
                    "description": "Subnetwork Name. Example: projects/my-project/regions/us-central1/subnetworks/my-subnet"
                  },
                  "ipCidrRange": {
                    "type": "string",
                    "description": "The range of internal addresses that are owned by this subnetwork."
                  },
                  "statusMessage": {
                    "type": "string",
                    "description": "A human readable status message representing the reasons for cases where the caller cannot use the secondary ranges under the subnet. For example if the secondary_ip_ranges is empty due to a permission issue, an insufficient permission message will be given by status_message."
                  },
                  "secondaryIpRanges": {
                    "type": "array",
                    "items": {
                      "id": "UsableSubnetworkSecondaryRange",
                      "type": "object",
                      "properties": {
                        "status": {
                          "enum": [
                            "UNKNOWN",
                            "UNUSED",
                            "IN_USE_SERVICE",
                            "IN_USE_SHAREABLE_POD",
                            "IN_USE_MANAGED_POD"
                          ],
                          "type": "string",
                          "description": "This field is to determine the status of the secondary range programmably.",
                          "enumDescriptions": [
                            "UNKNOWN is the zero value of the Status enum. It's not a valid status.",
                            "UNUSED denotes that this range is unclaimed by any cluster.",
                            "IN_USE_SERVICE denotes that this range is claimed by a cluster for services. It cannot be used for other clusters.",
                            "IN_USE_SHAREABLE_POD denotes this range was created by the network admin and is currently claimed by a cluster for pods. It can only be used by other clusters as a pod range.",
                            "IN_USE_MANAGED_POD denotes this range was created by GKE and is claimed for pods. It cannot be used for other clusters."
                          ]
                        },
                        "rangeName": {
                          "type": "string",
                          "description": "The name associated with this subnetwork secondary range, used when adding an alias IP range to a VM instance."
                        },
                        "ipCidrRange": {
                          "type": "string",
                          "description": "The range of IP addresses belonging to this subnetwork secondary range."
                        }
                      },
                      "description": "Secondary IP range of a usable subnetwork."
                    },
                    "description": "Secondary IP ranges."
                  }
                },
                "description": "UsableSubnetwork resource returns the subnetwork name, its associated network and the primary CIDR range."
              },
              "description": "A list of usable subnetworks in the specified network project."
            },
            "nextPageToken": {
              "type": "string",
              "description": "This token allows you to get the next page of results for list requests. If the number of results is larger than `page_size`, use the `next_page_token` as a value for the query parameter `page_token` in the next request. The value will become empty when there are no more pages."
            }
          },
          "description": "ListUsableSubnetworksResponse is the response of ListUsableSubnetworksRequest."
        }
      ]
  projects.locations.clusters.completeIpRotation:
    description: |-
      Completes master IP rotation.
    versions:
      from: 1.0.0-beta1
    link: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters/completeIpRotation
    example:
      inputs: [
        {
          "id": "CompleteIPRotationRequest",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name (project, location, cluster id) of the cluster to complete IP rotation. Specified in the format `projects/*/locations/*/clusters/*`."
            },
            "zone": {
              "type": "string",
              "description": "Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field."
            },
            "clusterId": {
              "type": "string",
              "description": "Deprecated. The name of the cluster. This field has been deprecated and replaced by the name field."
            },
            "projectId": {
              "type": "string",
              "description": "Deprecated. The Google Developers Console [project ID or project number](https://developers.google.com/console/help/new/#projectnumber). This field has been deprecated and replaced by the name field."
            }
          },
          "description": "CompleteIPRotationRequest moves the cluster master back into single-IP mode."
        }
      ]
      outputs: [
        {
          "id": "Operation",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The server-assigned ID for the operation."
            },
            "zone": {
              "type": "string",
              "description": "The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the operation is taking place. This field is deprecated, use location instead."
            },
            "error": {
              "id": "Status",
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The status code, which should be an enum value of google.rpc.Code."
                },
                "details": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  },
                  "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
                },
                "message": {
                  "type": "string",
                  "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                }
              },
              "description": "The error result of the operation in case of failure."
            },
            "detail": {
              "type": "string",
              "description": "Detailed operation progress, if available."
            },
            "status": {
              "enum": [
                "STATUS_UNSPECIFIED",
                "PENDING",
                "RUNNING",
                "DONE",
                "ABORTING"
              ],
              "type": "string",
              "description": "The current status of the operation.",
              "enumDescriptions": [
                "Not set.",
                "The operation has been created.",
                "The operation is currently running.",
                "The operation is done, either cancelled or completed.",
                "The operation is aborting."
              ]
            },
            "endTime": {
              "type": "string",
              "description": "[Output only] The time the operation completed, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "location": {
              "type": "string",
              "description": "[Output only] The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) or [region](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) in which the cluster resides."
            },
            "progress": {
              "id": "OperationProgress",
              "type": "object",
              "readOnly": true,
              "properties": {
                "name": {
                  "type": "string",
                  "description": "A non-parameterized string describing an operation stage. Unset for single-stage operations."
                },
                "stages": {
                  "type": "array",
                  "items": {
                    "id": "OperationProgress",
                    "type": "object",
                    "properties": {},
                    "description": "Information about operation (or operation stage) progress."
                  },
                  "description": "Substages of an operation or a stage."
                },
                "status": {
                  "enum": [
                    "STATUS_UNSPECIFIED",
                    "PENDING",
                    "RUNNING",
                    "DONE",
                    "ABORTING"
                  ],
                  "type": "string",
                  "description": "Status of an operation stage. Unset for single-stage operations.",
                  "enumDescriptions": [
                    "Not set.",
                    "The operation has been created.",
                    "The operation is currently running.",
                    "The operation is done, either cancelled or completed.",
                    "The operation is aborting."
                  ]
                },
                "metrics": {
                  "type": "array",
                  "items": {
                    "id": "Metric",
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Required. Metric name, e.g., \"nodes total\", \"percent done\"."
                      },
                      "intValue": {
                        "type": "string",
                        "format": "int64",
                        "description": "For metrics with integer value."
                      },
                      "doubleValue": {
                        "type": "number",
                        "format": "double",
                        "description": "For metrics with floating point value."
                      },
                      "stringValue": {
                        "type": "string",
                        "description": "For metrics with custom values (ratios, visual progress, etc.)."
                      }
                    },
                    "description": "Progress metric is (string, int|float|string) pair."
                  },
                  "description": "Progress metric bundle, for example: metrics: [{name: \"nodes done\", int_value: 15}, {name: \"nodes total\", int_value: 32}] or metrics: [{name: \"progress\", double_value: 0.56}, {name: \"progress scale\", double_value: 1.0}]"
                }
              },
              "description": "Output only. [Output only] Progress information for an operation."
            },
            "selfLink": {
              "type": "string",
              "description": "Server-defined URL for the resource."
            },
            "startTime": {
              "type": "string",
              "description": "[Output only] The time the operation started, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "targetLink": {
              "type": "string",
              "description": "Server-defined URL for the target of the operation."
            },
            "operationType": {
              "enum": [
                "TYPE_UNSPECIFIED",
                "CREATE_CLUSTER",
                "DELETE_CLUSTER",
                "UPGRADE_MASTER",
                "UPGRADE_NODES",
                "REPAIR_CLUSTER",
                "UPDATE_CLUSTER",
                "CREATE_NODE_POOL",
                "DELETE_NODE_POOL",
                "SET_NODE_POOL_MANAGEMENT",
                "AUTO_REPAIR_NODES",
                "AUTO_UPGRADE_NODES",
                "SET_LABELS",
                "SET_MASTER_AUTH",
                "SET_NODE_POOL_SIZE",
                "SET_NETWORK_POLICY",
                "SET_MAINTENANCE_POLICY"
              ],
              "type": "string",
              "description": "The operation type.",
              "enumDescriptions": [
                "Not set.",
                "Cluster create.",
                "Cluster delete.",
                "A master upgrade.",
                "A node upgrade.",
                "Cluster repair.",
                "Cluster update.",
                "Node pool create.",
                "Node pool delete.",
                "Set node pool management.",
                "Automatic node pool repair.",
                "Automatic node upgrade.",
                "Set labels.",
                "Set/generate master auth materials",
                "Set node pool size.",
                "Updates network policy for a cluster.",
                "Set the maintenance policy."
              ]
            },
            "statusMessage": {
              "type": "string",
              "readOnly": true,
              "description": "Output only. If an error has occurred, a textual description of the error. Deprecated. Use the field error instead."
            },
            "clusterConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current cluster state. Deprecated. Use field error instead."
            },
            "nodepoolConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current node pool state. Deprecated. Use field error instead."
            }
          },
          "description": "This operation resource represents operations that may have happened or are happening on the cluster. All fields are output only."
        }
      ]
  projects.locations.clusters.create:
    description: |-
      Creates a cluster, consisting of the specified number and type of Google Compute Engine instances. By default, the cluster is created in the project's [default network](https://cloud.google.com/compute/docs/networks-and-firewalls#networks). One firewall is added for the cluster. After cluster creation, the Kubelet creates routes for each node to allow the containers on that node to communicate with all other instances in the cluster. Finally, an entry is added to the project's global metadata indicating which CIDR range the cluster is using.
    versions:
      from: 1.0.0-beta1
    link: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters/create
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  projects.locations.clusters.delete:
    description: |-
      Deletes the cluster, including the Kubernetes endpoint and all worker nodes. Firewalls and routes that were configured during cluster creation are also deleted. Other Google Compute Engine resources that might be in use by the cluster, such as load balancer resources, are not deleted if they weren't present when the cluster was initially created.
    versions:
      from: 1.0.0-beta1
    link: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters/delete
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "Operation",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The server-assigned ID for the operation."
            },
            "zone": {
              "type": "string",
              "description": "The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the operation is taking place. This field is deprecated, use location instead."
            },
            "error": {
              "id": "Status",
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The status code, which should be an enum value of google.rpc.Code."
                },
                "details": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  },
                  "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
                },
                "message": {
                  "type": "string",
                  "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                }
              },
              "description": "The error result of the operation in case of failure."
            },
            "detail": {
              "type": "string",
              "description": "Detailed operation progress, if available."
            },
            "status": {
              "enum": [
                "STATUS_UNSPECIFIED",
                "PENDING",
                "RUNNING",
                "DONE",
                "ABORTING"
              ],
              "type": "string",
              "description": "The current status of the operation.",
              "enumDescriptions": [
                "Not set.",
                "The operation has been created.",
                "The operation is currently running.",
                "The operation is done, either cancelled or completed.",
                "The operation is aborting."
              ]
            },
            "endTime": {
              "type": "string",
              "description": "[Output only] The time the operation completed, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "location": {
              "type": "string",
              "description": "[Output only] The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) or [region](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) in which the cluster resides."
            },
            "progress": {
              "id": "OperationProgress",
              "type": "object",
              "readOnly": true,
              "properties": {
                "name": {
                  "type": "string",
                  "description": "A non-parameterized string describing an operation stage. Unset for single-stage operations."
                },
                "stages": {
                  "type": "array",
                  "items": {
                    "id": "OperationProgress",
                    "type": "object",
                    "properties": {},
                    "description": "Information about operation (or operation stage) progress."
                  },
                  "description": "Substages of an operation or a stage."
                },
                "status": {
                  "enum": [
                    "STATUS_UNSPECIFIED",
                    "PENDING",
                    "RUNNING",
                    "DONE",
                    "ABORTING"
                  ],
                  "type": "string",
                  "description": "Status of an operation stage. Unset for single-stage operations.",
                  "enumDescriptions": [
                    "Not set.",
                    "The operation has been created.",
                    "The operation is currently running.",
                    "The operation is done, either cancelled or completed.",
                    "The operation is aborting."
                  ]
                },
                "metrics": {
                  "type": "array",
                  "items": {
                    "id": "Metric",
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Required. Metric name, e.g., \"nodes total\", \"percent done\"."
                      },
                      "intValue": {
                        "type": "string",
                        "format": "int64",
                        "description": "For metrics with integer value."
                      },
                      "doubleValue": {
                        "type": "number",
                        "format": "double",
                        "description": "For metrics with floating point value."
                      },
                      "stringValue": {
                        "type": "string",
                        "description": "For metrics with custom values (ratios, visual progress, etc.)."
                      }
                    },
                    "description": "Progress metric is (string, int|float|string) pair."
                  },
                  "description": "Progress metric bundle, for example: metrics: [{name: \"nodes done\", int_value: 15}, {name: \"nodes total\", int_value: 32}] or metrics: [{name: \"progress\", double_value: 0.56}, {name: \"progress scale\", double_value: 1.0}]"
                }
              },
              "description": "Output only. [Output only] Progress information for an operation."
            },
            "selfLink": {
              "type": "string",
              "description": "Server-defined URL for the resource."
            },
            "startTime": {
              "type": "string",
              "description": "[Output only] The time the operation started, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "targetLink": {
              "type": "string",
              "description": "Server-defined URL for the target of the operation."
            },
            "operationType": {
              "enum": [
                "TYPE_UNSPECIFIED",
                "CREATE_CLUSTER",
                "DELETE_CLUSTER",
                "UPGRADE_MASTER",
                "UPGRADE_NODES",
                "REPAIR_CLUSTER",
                "UPDATE_CLUSTER",
                "CREATE_NODE_POOL",
                "DELETE_NODE_POOL",
                "SET_NODE_POOL_MANAGEMENT",
                "AUTO_REPAIR_NODES",
                "AUTO_UPGRADE_NODES",
                "SET_LABELS",
                "SET_MASTER_AUTH",
                "SET_NODE_POOL_SIZE",
                "SET_NETWORK_POLICY",
                "SET_MAINTENANCE_POLICY"
              ],
              "type": "string",
              "description": "The operation type.",
              "enumDescriptions": [
                "Not set.",
                "Cluster create.",
                "Cluster delete.",
                "A master upgrade.",
                "A node upgrade.",
                "Cluster repair.",
                "Cluster update.",
                "Node pool create.",
                "Node pool delete.",
                "Set node pool management.",
                "Automatic node pool repair.",
                "Automatic node upgrade.",
                "Set labels.",
                "Set/generate master auth materials",
                "Set node pool size.",
                "Updates network policy for a cluster.",
                "Set the maintenance policy."
              ]
            },
            "statusMessage": {
              "type": "string",
              "readOnly": true,
              "description": "Output only. If an error has occurred, a textual description of the error. Deprecated. Use the field error instead."
            },
            "clusterConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current cluster state. Deprecated. Use field error instead."
            },
            "nodepoolConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current node pool state. Deprecated. Use field error instead."
            }
          },
          "description": "This operation resource represents operations that may have happened or are happening on the cluster. All fields are output only."
        }
      ]
  projects.locations.clusters.get:
    description: |-
      Gets the details of a specific cluster.
    versions:
      from: 1.0.0-beta1
    link: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters/get
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  projects.locations.clusters.getJwks:
    description: |-
      Gets the public component of the cluster signing keys in JSON Web Key format. This API is not yet intended for general use, and is not available for all clusters.
    versions:
      from: 1.0.0-beta1
    link: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters/getJwks
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "GetJSONWebKeysResponse",
          "type": "object",
          "properties": {
            "keys": {
              "type": "array",
              "items": {
                "id": "Jwk",
                "type": "object",
                "properties": {
                  "e": {
                    "type": "string",
                    "description": "Used for RSA keys."
                  },
                  "n": {
                    "type": "string",
                    "description": "Used for RSA keys."
                  },
                  "x": {
                    "type": "string",
                    "description": "Used for ECDSA keys."
                  },
                  "y": {
                    "type": "string",
                    "description": "Used for ECDSA keys."
                  },
                  "alg": {
                    "type": "string",
                    "description": "Algorithm."
                  },
                  "crv": {
                    "type": "string",
                    "description": "Used for ECDSA keys."
                  },
                  "kid": {
                    "type": "string",
                    "description": "Key ID."
                  },
                  "kty": {
                    "type": "string",
                    "description": "Key Type."
                  },
                  "use": {
                    "type": "string",
                    "description": "Permitted uses for the public keys."
                  }
                },
                "description": "Jwk is a JSON Web Key as specified in RFC 7517"
              },
              "description": "The public component of the keys used by the cluster to sign token requests."
            },
            "cacheHeader": {
              "id": "HttpCacheControlResponseHeader",
              "type": "object",
              "properties": {
                "age": {
                  "type": "string",
                  "format": "int64",
                  "description": "14.6 response cache age, in seconds since the response is generated"
                },
                "expires": {
                  "type": "string",
                  "description": "14.21 response cache expires, in RFC 1123 date format"
                },
                "directive": {
                  "type": "string",
                  "description": "14.9 request and response directives"
                }
              },
              "description": "OnePlatform automatically extracts this field and uses it to set the HTTP Cache-Control header."
            }
          },
          "description": "GetJSONWebKeysResponse is a valid JSON Web Key Set as specififed in rfc 7517"
        }
      ]
  projects.locations.clusters.list:
    description: |-
      Lists all clusters owned by a project in either the specified zone or all zones.
    versions:
      from: 1.0.0-beta1
    link: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  projects.locations.clusters.nodePools.create:
    description: |-
      Creates a node pool for a cluster.
    versions:
      from: 1.0.0-beta1
    link: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters.nodePools/create
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  projects.locations.clusters.nodePools.delete:
    description: |-
      Deletes a node pool from a cluster.
    versions:
      from: 1.0.0-beta1
    link: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters.nodePools/delete
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "Operation",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The server-assigned ID for the operation."
            },
            "zone": {
              "type": "string",
              "description": "The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the operation is taking place. This field is deprecated, use location instead."
            },
            "error": {
              "id": "Status",
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The status code, which should be an enum value of google.rpc.Code."
                },
                "details": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  },
                  "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
                },
                "message": {
                  "type": "string",
                  "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                }
              },
              "description": "The error result of the operation in case of failure."
            },
            "detail": {
              "type": "string",
              "description": "Detailed operation progress, if available."
            },
            "status": {
              "enum": [
                "STATUS_UNSPECIFIED",
                "PENDING",
                "RUNNING",
                "DONE",
                "ABORTING"
              ],
              "type": "string",
              "description": "The current status of the operation.",
              "enumDescriptions": [
                "Not set.",
                "The operation has been created.",
                "The operation is currently running.",
                "The operation is done, either cancelled or completed.",
                "The operation is aborting."
              ]
            },
            "endTime": {
              "type": "string",
              "description": "[Output only] The time the operation completed, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "location": {
              "type": "string",
              "description": "[Output only] The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) or [region](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) in which the cluster resides."
            },
            "progress": {
              "id": "OperationProgress",
              "type": "object",
              "readOnly": true,
              "properties": {
                "name": {
                  "type": "string",
                  "description": "A non-parameterized string describing an operation stage. Unset for single-stage operations."
                },
                "stages": {
                  "type": "array",
                  "items": {
                    "id": "OperationProgress",
                    "type": "object",
                    "properties": {},
                    "description": "Information about operation (or operation stage) progress."
                  },
                  "description": "Substages of an operation or a stage."
                },
                "status": {
                  "enum": [
                    "STATUS_UNSPECIFIED",
                    "PENDING",
                    "RUNNING",
                    "DONE",
                    "ABORTING"
                  ],
                  "type": "string",
                  "description": "Status of an operation stage. Unset for single-stage operations.",
                  "enumDescriptions": [
                    "Not set.",
                    "The operation has been created.",
                    "The operation is currently running.",
                    "The operation is done, either cancelled or completed.",
                    "The operation is aborting."
                  ]
                },
                "metrics": {
                  "type": "array",
                  "items": {
                    "id": "Metric",
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Required. Metric name, e.g., \"nodes total\", \"percent done\"."
                      },
                      "intValue": {
                        "type": "string",
                        "format": "int64",
                        "description": "For metrics with integer value."
                      },
                      "doubleValue": {
                        "type": "number",
                        "format": "double",
                        "description": "For metrics with floating point value."
                      },
                      "stringValue": {
                        "type": "string",
                        "description": "For metrics with custom values (ratios, visual progress, etc.)."
                      }
                    },
                    "description": "Progress metric is (string, int|float|string) pair."
                  },
                  "description": "Progress metric bundle, for example: metrics: [{name: \"nodes done\", int_value: 15}, {name: \"nodes total\", int_value: 32}] or metrics: [{name: \"progress\", double_value: 0.56}, {name: \"progress scale\", double_value: 1.0}]"
                }
              },
              "description": "Output only. [Output only] Progress information for an operation."
            },
            "selfLink": {
              "type": "string",
              "description": "Server-defined URL for the resource."
            },
            "startTime": {
              "type": "string",
              "description": "[Output only] The time the operation started, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "targetLink": {
              "type": "string",
              "description": "Server-defined URL for the target of the operation."
            },
            "operationType": {
              "enum": [
                "TYPE_UNSPECIFIED",
                "CREATE_CLUSTER",
                "DELETE_CLUSTER",
                "UPGRADE_MASTER",
                "UPGRADE_NODES",
                "REPAIR_CLUSTER",
                "UPDATE_CLUSTER",
                "CREATE_NODE_POOL",
                "DELETE_NODE_POOL",
                "SET_NODE_POOL_MANAGEMENT",
                "AUTO_REPAIR_NODES",
                "AUTO_UPGRADE_NODES",
                "SET_LABELS",
                "SET_MASTER_AUTH",
                "SET_NODE_POOL_SIZE",
                "SET_NETWORK_POLICY",
                "SET_MAINTENANCE_POLICY"
              ],
              "type": "string",
              "description": "The operation type.",
              "enumDescriptions": [
                "Not set.",
                "Cluster create.",
                "Cluster delete.",
                "A master upgrade.",
                "A node upgrade.",
                "Cluster repair.",
                "Cluster update.",
                "Node pool create.",
                "Node pool delete.",
                "Set node pool management.",
                "Automatic node pool repair.",
                "Automatic node upgrade.",
                "Set labels.",
                "Set/generate master auth materials",
                "Set node pool size.",
                "Updates network policy for a cluster.",
                "Set the maintenance policy."
              ]
            },
            "statusMessage": {
              "type": "string",
              "readOnly": true,
              "description": "Output only. If an error has occurred, a textual description of the error. Deprecated. Use the field error instead."
            },
            "clusterConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current cluster state. Deprecated. Use field error instead."
            },
            "nodepoolConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current node pool state. Deprecated. Use field error instead."
            }
          },
          "description": "This operation resource represents operations that may have happened or are happening on the cluster. All fields are output only."
        }
      ]
  projects.locations.clusters.nodePools.get:
    description: |-
      Retrieves the requested node pool.
    versions:
      from: 1.0.0-beta1
    link: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters.nodePools/get
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "NodePool",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the node pool."
            },
            "config": {
              "id": "NodeConfig",
              "type": "object",
              "properties": {
                "tags": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "The list of instance tags applied to all nodes. Tags are used to identify valid sources or targets for network firewalls and are specified by the client during cluster or node pool creation. Each tag within the list must comply with RFC1035."
                },
                "labels": {
                  "type": "object",
                  "description": "The map of Kubernetes labels (key/value pairs) to be applied to each node. These will added in addition to any default label(s) that Kubernetes may apply to the node. In case of conflict in label keys, the applied set may differ depending on the Kubernetes version -- it's best to assume the behavior is undefined and conflicts should be avoided. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "taints": {
                  "type": "array",
                  "items": {
                    "id": "NodeTaint",
                    "type": "object",
                    "properties": {
                      "key": {
                        "type": "string",
                        "description": "Key for taint."
                      },
                      "value": {
                        "type": "string",
                        "description": "Value for taint."
                      },
                      "effect": {
                        "enum": [
                          "EFFECT_UNSPECIFIED",
                          "NO_SCHEDULE",
                          "PREFER_NO_SCHEDULE",
                          "NO_EXECUTE"
                        ],
                        "type": "string",
                        "description": "Effect for taint.",
                        "enumDescriptions": [
                          "Not set",
                          "NoSchedule",
                          "PreferNoSchedule",
                          "NoExecute"
                        ]
                      }
                    },
                    "description": "Kubernetes taint is comprised of three fields: key, value, and effect. Effect can only be one of three types: NoSchedule, PreferNoSchedule or NoExecute. See [here](https://kubernetes.io/docs/concepts/configuration/taint-and-toleration) for more information, including usage and the valid values."
                  },
                  "description": "List of kubernetes taints to be applied to each node. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/"
                },
                "diskType": {
                  "type": "string",
                  "description": "Type of the disk attached to each node (e.g. 'pd-standard', 'pd-ssd' or 'pd-balanced') If unspecified, the default disk type is 'pd-standard'"
                },
                "metadata": {
                  "type": "object",
                  "description": "The metadata key/value pairs assigned to instances in the cluster. Keys must conform to the regexp `[a-zA-Z0-9-_]+` and be less than 128 bytes in length. These are reflected as part of a URL in the metadata server. Additionally, to avoid ambiguity, keys must not conflict with any other metadata keys for the project or be one of the reserved keys: - \"cluster-location\" - \"cluster-name\" - \"cluster-uid\" - \"configure-sh\" - \"containerd-configure-sh\" - \"enable-os-login\" - \"gci-ensure-gke-docker\" - \"gci-metrics-enabled\" - \"gci-update-strategy\" - \"instance-template\" - \"kube-env\" - \"startup-script\" - \"user-data\" - \"disable-address-manager\" - \"windows-startup-script-ps1\" - \"common-psm1\" - \"k8s-node-setup-psm1\" - \"install-ssh-psm1\" - \"user-profile-psm1\" The following keys are reserved for Windows nodes: - \"serial-port-logging-enable\" Values are free-form strings, and only have meaning as interpreted by the image running in the instance. The only restriction placed on them is that each value's size must be less than or equal to 32 KB. The total size of all keys and values must be less than 512 KB.",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "imageType": {
                  "type": "string",
                  "description": "The image type to use for this node. Note that for a given image type, the latest version of it will be used."
                },
                "nodeGroup": {
                  "type": "string",
                  "description": "Setting this field will assign instances of this pool to run on the specified node group. This is useful for running workloads on [sole tenant nodes](https://cloud.google.com/compute/docs/nodes/sole-tenant-nodes)."
                },
                "diskSizeGb": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB. If unspecified, the default disk size is 100GB."
                },
                "machineType": {
                  "type": "string",
                  "description": "The name of a Google Compute Engine [machine type](https://cloud.google.com/compute/docs/machine-types) If unspecified, the default machine type is `e2-medium`."
                },
                "oauthScopes": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "The set of Google API scopes to be made available on all of the node VMs under the \"default\" service account. The following scopes are recommended, but not required, and by default are not included: * `https://www.googleapis.com/auth/compute` is required for mounting persistent storage on your nodes. * `https://www.googleapis.com/auth/devstorage.read_only` is required for communicating with **gcr.io** (the [Google Container Registry](https://cloud.google.com/container-registry/)). If unspecified, no scopes are added, unless Cloud Logging or Cloud Monitoring are enabled, in which case their required scopes will be added."
                },
                "preemptible": {
                  "type": "boolean",
                  "description": "Whether the nodes are created as preemptible VM instances. See: https://cloud.google.com/compute/docs/instances/preemptible for more information about preemptible VM instances."
                },
                "accelerators": {
                  "type": "array",
                  "items": {
                    "id": "AcceleratorConfig",
                    "type": "object",
                    "properties": {
                      "acceleratorType": {
                        "type": "string",
                        "description": "The accelerator type resource name. List of supported accelerators [here](https://cloud.google.com/compute/docs/gpus)"
                      },
                      "acceleratorCount": {
                        "type": "string",
                        "format": "int64",
                        "description": "The number of the accelerator cards exposed to an instance."
                      }
                    },
                    "description": "AcceleratorConfig represents a Hardware Accelerator request."
                  },
                  "description": "A list of hardware accelerators to be attached to each node. See https://cloud.google.com/compute/docs/gpus for more information about support for GPUs."
                },
                "kubeletConfig": {
                  "id": "NodeKubeletConfig",
                  "type": "object",
                  "properties": {
                    "cpuCfsQuota": {
                      "type": "boolean",
                      "description": "Enable CPU CFS quota enforcement for containers that specify CPU limits. This option is enabled by default which makes kubelet use CFS quota (https://www.kernel.org/doc/Documentation/scheduler/sched-bwc.txt) to enforce container CPU limits. Otherwise, CPU limits will not be enforced at all. Disable this option to mitigate CPU throttling problems while still having your pods to be in Guaranteed QoS class by specifying the CPU limits. The default value is 'true' if unspecified."
                    },
                    "cpuManagerPolicy": {
                      "type": "string",
                      "description": "Control the CPU management policy on the node. See https://kubernetes.io/docs/tasks/administer-cluster/cpu-management-policies/ The following values are allowed. - \"none\": the default, which represents the existing scheduling behavior. - \"static\": allows pods with certain resource characteristics to be granted increased CPU affinity and exclusivity on the node. The default value is 'none' if unspecified."
                    },
                    "cpuCfsQuotaPeriod": {
                      "type": "string",
                      "description": "Set the CPU CFS quota period value 'cpu.cfs_period_us'. The string must be a sequence of decimal numbers, each with optional fraction and a unit suffix, such as \"300ms\". Valid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\". The value must be a positive duration."
                    }
                  },
                  "description": "Node kubelet configs."
                },
                "localSsdCount": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The number of local SSD disks to be attached to the node. The limit for this value is dependent upon the maximum number of disks available on a machine per zone. See: https://cloud.google.com/compute/docs/disks/local-ssd for more information."
                },
                "sandboxConfig": {
                  "id": "SandboxConfig",
                  "type": "object",
                  "properties": {
                    "type": {
                      "enum": [
                        "UNSPECIFIED",
                        "GVISOR"
                      ],
                      "type": "string",
                      "description": "Type of the sandbox to use for the node.",
                      "enumDescriptions": [
                        "Default value. This should not be used.",
                        "Run sandbox using gvisor."
                      ]
                    }
                  },
                  "description": "Sandbox configuration for this node."
                },
                "bootDiskKmsKey": {
                  "type": "string",
                  "description": " The Customer Managed Encryption Key used to encrypt the boot disk attached to each node in the node pool. This should be of the form projects/[KEY_PROJECT_ID]/locations/[LOCATION]/keyRings/[RING_NAME]/cryptoKeys/[KEY_NAME]. For more information about protecting resources with Cloud KMS Keys please see: https://cloud.google.com/compute/docs/disks/customer-managed-encryption"
                },
                "minCpuPlatform": {
                  "type": "string",
                  "description": "Minimum CPU platform to be used by this instance. The instance may be scheduled on the specified or newer CPU platform. Applicable values are the friendly names of CPU platforms, such as `minCpuPlatform: \"Intel Haswell\"` or `minCpuPlatform: \"Intel Sandy Bridge\"`. For more information, read [how to specify min CPU platform](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform)"
                },
                "serviceAccount": {
                  "type": "string",
                  "description": "The Google Cloud Platform Service Account to be used by the node VMs. Specify the email address of the Service Account; otherwise, if no Service Account is specified, the \"default\" service account is used."
                },
                "linuxNodeConfig": {
                  "id": "LinuxNodeConfig",
                  "type": "object",
                  "properties": {
                    "sysctls": {
                      "type": "object",
                      "description": "The Linux kernel parameters to be applied to the nodes and all pods running on the nodes. The following parameters are supported. net.core.netdev_max_backlog net.core.rmem_max net.core.wmem_default net.core.wmem_max net.core.optmem_max net.core.somaxconn net.ipv4.tcp_rmem net.ipv4.tcp_wmem net.ipv4.tcp_tw_reuse",
                      "additionalProperties": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Parameters that can be configured on Linux nodes."
                },
                "reservationAffinity": {
                  "id": "ReservationAffinity",
                  "type": "object",
                  "properties": {
                    "key": {
                      "type": "string",
                      "description": "Corresponds to the label key of a reservation resource. To target a SPECIFIC_RESERVATION by name, specify \"googleapis.com/reservation-name\" as the key and specify the name of your reservation as its value."
                    },
                    "values": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Corresponds to the label value(s) of reservation resource(s)."
                    },
                    "consumeReservationType": {
                      "enum": [
                        "UNSPECIFIED",
                        "NO_RESERVATION",
                        "ANY_RESERVATION",
                        "SPECIFIC_RESERVATION"
                      ],
                      "type": "string",
                      "description": "Corresponds to the type of reservation consumption.",
                      "enumDescriptions": [
                        "Default value. This should not be used.",
                        "Do not consume from any reserved capacity.",
                        "Consume any reservation available.",
                        "Must consume from a specific reservation. Must specify key value fields for specifying the reservations."
                      ]
                    }
                  },
                  "description": "The optional reservation affinity. Setting this field will apply the specified [Zonal Compute Reservation](https://cloud.google.com/compute/docs/instances/reserving-zonal-resources) to this node pool."
                },
                "shieldedInstanceConfig": {
                  "id": "ShieldedInstanceConfig",
                  "type": "object",
                  "properties": {
                    "enableSecureBoot": {
                      "type": "boolean",
                      "description": "Defines whether the instance has Secure Boot enabled. Secure Boot helps ensure that the system only runs authentic software by verifying the digital signature of all boot components, and halting the boot process if signature verification fails."
                    },
                    "enableIntegrityMonitoring": {
                      "type": "boolean",
                      "description": "Defines whether the instance has integrity monitoring enabled. Enables monitoring and attestation of the boot integrity of the instance. The attestation is performed against the integrity policy baseline. This baseline is initially derived from the implicitly trusted boot image when the instance is created."
                    }
                  },
                  "description": "Shielded Instance options."
                },
                "workloadMetadataConfig": {
                  "id": "WorkloadMetadataConfig",
                  "type": "object",
                  "properties": {
                    "mode": {
                      "enum": [
                        "MODE_UNSPECIFIED",
                        "GCE_METADATA",
                        "GKE_METADATA"
                      ],
                      "type": "string",
                      "description": "Mode is the configuration for how to expose metadata to workloads running on the node pool.",
                      "enumDescriptions": [
                        "Not set.",
                        "Expose all Compute Engine metadata to pods.",
                        "Run the GKE Metadata Server on this node. The GKE Metadata Server exposes a metadata API to workloads that is compatible with the V1 Compute Metadata APIs exposed by the Compute Engine and App Engine Metadata Servers. This feature can only be enabled if Workload Identity is enabled at the cluster level."
                      ]
                    }
                  },
                  "description": "The workload metadata configuration for this node."
                }
              },
              "description": "The node configuration of the pool."
            },
            "status": {
              "enum": [
                "STATUS_UNSPECIFIED",
                "PROVISIONING",
                "RUNNING",
                "RUNNING_WITH_ERROR",
                "RECONCILING",
                "STOPPING",
                "ERROR"
              ],
              "type": "string",
              "description": "[Output only] The status of the nodes in this pool instance.",
              "enumDescriptions": [
                "Not set.",
                "The PROVISIONING state indicates the node pool is being created.",
                "The RUNNING state indicates the node pool has been created and is fully usable.",
                "The RUNNING_WITH_ERROR state indicates the node pool has been created and is partially usable. Some error state has occurred and some functionality may be impaired. Customer may need to reissue a request or trigger a new update.",
                "The RECONCILING state indicates that some work is actively being done on the node pool, such as upgrading node software. Details can be found in the `statusMessage` field.",
                "The STOPPING state indicates the node pool is being deleted.",
                "The ERROR state indicates the node pool may be unusable. Details can be found in the `statusMessage` field."
              ]
            },
            "version": {
              "type": "string",
              "description": "The version of the Kubernetes of this node."
            },
            "selfLink": {
              "type": "string",
              "description": "[Output only] Server-defined URL for the resource."
            },
            "locations": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "The list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the NodePool's nodes should be located. If this value is unspecified during node pool creation, the [Cluster.Locations](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters#Cluster.FIELDS.locations) value will be used, instead. Warning: changing node pool locations will result in nodes being added and/or removed."
            },
            "conditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current node pool state."
            },
            "management": {
              "id": "NodeManagement",
              "type": "object",
              "properties": {
                "autoRepair": {
                  "type": "boolean",
                  "description": "A flag that specifies whether the node auto-repair is enabled for the node pool. If enabled, the nodes in this node pool will be monitored and, if they fail health checks too many times, an automatic repair action will be triggered."
                },
                "autoUpgrade": {
                  "type": "boolean",
                  "description": "A flag that specifies whether node auto-upgrade is enabled for the node pool. If enabled, node auto-upgrade helps keep the nodes in your node pool up to date with the latest release version of Kubernetes."
                },
                "upgradeOptions": {
                  "id": "AutoUpgradeOptions",
                  "type": "object",
                  "properties": {
                    "description": {
                      "type": "string",
                      "description": "[Output only] This field is set when upgrades are about to commence with the description of the upgrade."
                    },
                    "autoUpgradeStartTime": {
                      "type": "string",
                      "description": "[Output only] This field is set when upgrades are about to commence with the approximate start time for the upgrades, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
                    }
                  },
                  "description": "Specifies the Auto Upgrade knobs for the node pool."
                }
              },
              "description": "NodeManagement configuration for this NodePool."
            },
            "autoscaling": {
              "id": "NodePoolAutoscaling",
              "type": "object",
              "properties": {
                "enabled": {
                  "type": "boolean",
                  "description": "Is autoscaling enabled for this node pool."
                },
                "maxNodeCount": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Maximum number of nodes in the NodePool. Must be >= min_node_count. There has to enough quota to scale up the cluster."
                },
                "minNodeCount": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Minimum number of nodes in the NodePool. Must be >= 1 and <= max_node_count."
                },
                "autoprovisioned": {
                  "type": "boolean",
                  "description": "Can this node pool be deleted automatically."
                }
              },
              "description": "Autoscaler configuration for this NodePool. Autoscaler is enabled only if a valid configuration is present."
            },
            "statusMessage": {
              "type": "string",
              "description": "[Output only] Deprecated. Use conditions instead. Additional information about the current status of this node pool instance, if available."
            },
            "podIpv4CidrSize": {
              "type": "integer",
              "format": "int32",
              "description": "[Output only] The pod CIDR block size per node in this node pool."
            },
            "upgradeSettings": {
              "id": "UpgradeSettings",
              "type": "object",
              "properties": {
                "maxSurge": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The maximum number of nodes that can be created beyond the current size of the node pool during the upgrade process."
                },
                "maxUnavailable": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The maximum number of nodes that can be simultaneously unavailable during the upgrade process. A node is considered available if its status is Ready."
                }
              },
              "description": "Upgrade settings control disruption and speed of the upgrade."
            },
            "initialNodeCount": {
              "type": "integer",
              "format": "int32",
              "description": "The initial node count for the pool. You must ensure that your Compute Engine [resource quota](https://cloud.google.com/compute/quotas) is sufficient for this number of instances. You must also have available firewall and routes quota."
            },
            "instanceGroupUrls": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "[Output only] The resource URLs of the [managed instance groups](https://cloud.google.com/compute/docs/instance-groups/creating-groups-of-managed-instances) associated with this node pool."
            },
            "maxPodsConstraint": {
              "id": "MaxPodsConstraint",
              "type": "object",
              "properties": {
                "maxPodsPerNode": {
                  "type": "string",
                  "format": "int64",
                  "description": "Constraint enforced on the max num of pods per node."
                }
              },
              "description": "The constraint on the maximum number of pods that can be run simultaneously on a node in the node pool."
            }
          },
          "description": "NodePool contains the name and configuration for a cluster's node pool. Node pools are a set of nodes (i.e. VM's), with a common configuration and specification, under the control of the cluster master. They may have a set of Kubernetes labels applied to them, which may be used to reference them during pod scheduling. They may also be resized up or down, to accommodate the workload."
        }
      ]
  projects.locations.clusters.nodePools.list:
    description: |-
      Lists the node pools for a cluster.
    versions:
      from: 1.0.0-beta1
    link: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters.nodePools/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "ListNodePoolsResponse",
          "type": "object",
          "properties": {
            "nodePools": {
              "type": "array",
              "items": {
                "id": "NodePool",
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the node pool."
                  },
                  "config": {
                    "id": "NodeConfig",
                    "type": "object",
                    "properties": {
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "The list of instance tags applied to all nodes. Tags are used to identify valid sources or targets for network firewalls and are specified by the client during cluster or node pool creation. Each tag within the list must comply with RFC1035."
                      },
                      "labels": {
                        "type": "object",
                        "description": "The map of Kubernetes labels (key/value pairs) to be applied to each node. These will added in addition to any default label(s) that Kubernetes may apply to the node. In case of conflict in label keys, the applied set may differ depending on the Kubernetes version -- it's best to assume the behavior is undefined and conflicts should be avoided. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "taints": {
                        "type": "array",
                        "items": {
                          "id": "NodeTaint",
                          "type": "object",
                          "properties": {
                            "key": {
                              "type": "string",
                              "description": "Key for taint."
                            },
                            "value": {
                              "type": "string",
                              "description": "Value for taint."
                            },
                            "effect": {
                              "enum": [
                                "EFFECT_UNSPECIFIED",
                                "NO_SCHEDULE",
                                "PREFER_NO_SCHEDULE",
                                "NO_EXECUTE"
                              ],
                              "type": "string",
                              "description": "Effect for taint.",
                              "enumDescriptions": [
                                "Not set",
                                "NoSchedule",
                                "PreferNoSchedule",
                                "NoExecute"
                              ]
                            }
                          },
                          "description": "Kubernetes taint is comprised of three fields: key, value, and effect. Effect can only be one of three types: NoSchedule, PreferNoSchedule or NoExecute. See [here](https://kubernetes.io/docs/concepts/configuration/taint-and-toleration) for more information, including usage and the valid values."
                        },
                        "description": "List of kubernetes taints to be applied to each node. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/"
                      },
                      "diskType": {
                        "type": "string",
                        "description": "Type of the disk attached to each node (e.g. 'pd-standard', 'pd-ssd' or 'pd-balanced') If unspecified, the default disk type is 'pd-standard'"
                      },
                      "metadata": {
                        "type": "object",
                        "description": "The metadata key/value pairs assigned to instances in the cluster. Keys must conform to the regexp `[a-zA-Z0-9-_]+` and be less than 128 bytes in length. These are reflected as part of a URL in the metadata server. Additionally, to avoid ambiguity, keys must not conflict with any other metadata keys for the project or be one of the reserved keys: - \"cluster-location\" - \"cluster-name\" - \"cluster-uid\" - \"configure-sh\" - \"containerd-configure-sh\" - \"enable-os-login\" - \"gci-ensure-gke-docker\" - \"gci-metrics-enabled\" - \"gci-update-strategy\" - \"instance-template\" - \"kube-env\" - \"startup-script\" - \"user-data\" - \"disable-address-manager\" - \"windows-startup-script-ps1\" - \"common-psm1\" - \"k8s-node-setup-psm1\" - \"install-ssh-psm1\" - \"user-profile-psm1\" The following keys are reserved for Windows nodes: - \"serial-port-logging-enable\" Values are free-form strings, and only have meaning as interpreted by the image running in the instance. The only restriction placed on them is that each value's size must be less than or equal to 32 KB. The total size of all keys and values must be less than 512 KB.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "imageType": {
                        "type": "string",
                        "description": "The image type to use for this node. Note that for a given image type, the latest version of it will be used."
                      },
                      "nodeGroup": {
                        "type": "string",
                        "description": "Setting this field will assign instances of this pool to run on the specified node group. This is useful for running workloads on [sole tenant nodes](https://cloud.google.com/compute/docs/nodes/sole-tenant-nodes)."
                      },
                      "diskSizeGb": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB. If unspecified, the default disk size is 100GB."
                      },
                      "machineType": {
                        "type": "string",
                        "description": "The name of a Google Compute Engine [machine type](https://cloud.google.com/compute/docs/machine-types) If unspecified, the default machine type is `e2-medium`."
                      },
                      "oauthScopes": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "The set of Google API scopes to be made available on all of the node VMs under the \"default\" service account. The following scopes are recommended, but not required, and by default are not included: * `https://www.googleapis.com/auth/compute` is required for mounting persistent storage on your nodes. * `https://www.googleapis.com/auth/devstorage.read_only` is required for communicating with **gcr.io** (the [Google Container Registry](https://cloud.google.com/container-registry/)). If unspecified, no scopes are added, unless Cloud Logging or Cloud Monitoring are enabled, in which case their required scopes will be added."
                      },
                      "preemptible": {
                        "type": "boolean",
                        "description": "Whether the nodes are created as preemptible VM instances. See: https://cloud.google.com/compute/docs/instances/preemptible for more information about preemptible VM instances."
                      },
                      "accelerators": {
                        "type": "array",
                        "items": {
                          "id": "AcceleratorConfig",
                          "type": "object",
                          "properties": {
                            "acceleratorType": {
                              "type": "string",
                              "description": "The accelerator type resource name. List of supported accelerators [here](https://cloud.google.com/compute/docs/gpus)"
                            },
                            "acceleratorCount": {
                              "type": "string",
                              "format": "int64",
                              "description": "The number of the accelerator cards exposed to an instance."
                            }
                          },
                          "description": "AcceleratorConfig represents a Hardware Accelerator request."
                        },
                        "description": "A list of hardware accelerators to be attached to each node. See https://cloud.google.com/compute/docs/gpus for more information about support for GPUs."
                      },
                      "kubeletConfig": {
                        "id": "NodeKubeletConfig",
                        "type": "object",
                        "properties": {
                          "cpuCfsQuota": {
                            "type": "boolean",
                            "description": "Enable CPU CFS quota enforcement for containers that specify CPU limits. This option is enabled by default which makes kubelet use CFS quota (https://www.kernel.org/doc/Documentation/scheduler/sched-bwc.txt) to enforce container CPU limits. Otherwise, CPU limits will not be enforced at all. Disable this option to mitigate CPU throttling problems while still having your pods to be in Guaranteed QoS class by specifying the CPU limits. The default value is 'true' if unspecified."
                          },
                          "cpuManagerPolicy": {
                            "type": "string",
                            "description": "Control the CPU management policy on the node. See https://kubernetes.io/docs/tasks/administer-cluster/cpu-management-policies/ The following values are allowed. - \"none\": the default, which represents the existing scheduling behavior. - \"static\": allows pods with certain resource characteristics to be granted increased CPU affinity and exclusivity on the node. The default value is 'none' if unspecified."
                          },
                          "cpuCfsQuotaPeriod": {
                            "type": "string",
                            "description": "Set the CPU CFS quota period value 'cpu.cfs_period_us'. The string must be a sequence of decimal numbers, each with optional fraction and a unit suffix, such as \"300ms\". Valid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\". The value must be a positive duration."
                          }
                        },
                        "description": "Node kubelet configs."
                      },
                      "localSsdCount": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The number of local SSD disks to be attached to the node. The limit for this value is dependent upon the maximum number of disks available on a machine per zone. See: https://cloud.google.com/compute/docs/disks/local-ssd for more information."
                      },
                      "sandboxConfig": {
                        "id": "SandboxConfig",
                        "type": "object",
                        "properties": {
                          "type": {
                            "enum": [
                              "UNSPECIFIED",
                              "GVISOR"
                            ],
                            "type": "string",
                            "description": "Type of the sandbox to use for the node.",
                            "enumDescriptions": [
                              "Default value. This should not be used.",
                              "Run sandbox using gvisor."
                            ]
                          }
                        },
                        "description": "Sandbox configuration for this node."
                      },
                      "bootDiskKmsKey": {
                        "type": "string",
                        "description": " The Customer Managed Encryption Key used to encrypt the boot disk attached to each node in the node pool. This should be of the form projects/[KEY_PROJECT_ID]/locations/[LOCATION]/keyRings/[RING_NAME]/cryptoKeys/[KEY_NAME]. For more information about protecting resources with Cloud KMS Keys please see: https://cloud.google.com/compute/docs/disks/customer-managed-encryption"
                      },
                      "minCpuPlatform": {
                        "type": "string",
                        "description": "Minimum CPU platform to be used by this instance. The instance may be scheduled on the specified or newer CPU platform. Applicable values are the friendly names of CPU platforms, such as `minCpuPlatform: \"Intel Haswell\"` or `minCpuPlatform: \"Intel Sandy Bridge\"`. For more information, read [how to specify min CPU platform](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform)"
                      },
                      "serviceAccount": {
                        "type": "string",
                        "description": "The Google Cloud Platform Service Account to be used by the node VMs. Specify the email address of the Service Account; otherwise, if no Service Account is specified, the \"default\" service account is used."
                      },
                      "linuxNodeConfig": {
                        "id": "LinuxNodeConfig",
                        "type": "object",
                        "properties": {
                          "sysctls": {
                            "type": "object",
                            "description": "The Linux kernel parameters to be applied to the nodes and all pods running on the nodes. The following parameters are supported. net.core.netdev_max_backlog net.core.rmem_max net.core.wmem_default net.core.wmem_max net.core.optmem_max net.core.somaxconn net.ipv4.tcp_rmem net.ipv4.tcp_wmem net.ipv4.tcp_tw_reuse",
                            "additionalProperties": {
                              "type": "string"
                            }
                          }
                        },
                        "description": "Parameters that can be configured on Linux nodes."
                      },
                      "reservationAffinity": {
                        "id": "ReservationAffinity",
                        "type": "object",
                        "properties": {
                          "key": {
                            "type": "string",
                            "description": "Corresponds to the label key of a reservation resource. To target a SPECIFIC_RESERVATION by name, specify \"googleapis.com/reservation-name\" as the key and specify the name of your reservation as its value."
                          },
                          "values": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "Corresponds to the label value(s) of reservation resource(s)."
                          },
                          "consumeReservationType": {
                            "enum": [
                              "UNSPECIFIED",
                              "NO_RESERVATION",
                              "ANY_RESERVATION",
                              "SPECIFIC_RESERVATION"
                            ],
                            "type": "string",
                            "description": "Corresponds to the type of reservation consumption.",
                            "enumDescriptions": [
                              "Default value. This should not be used.",
                              "Do not consume from any reserved capacity.",
                              "Consume any reservation available.",
                              "Must consume from a specific reservation. Must specify key value fields for specifying the reservations."
                            ]
                          }
                        },
                        "description": "The optional reservation affinity. Setting this field will apply the specified [Zonal Compute Reservation](https://cloud.google.com/compute/docs/instances/reserving-zonal-resources) to this node pool."
                      },
                      "shieldedInstanceConfig": {
                        "id": "ShieldedInstanceConfig",
                        "type": "object",
                        "properties": {
                          "enableSecureBoot": {
                            "type": "boolean",
                            "description": "Defines whether the instance has Secure Boot enabled. Secure Boot helps ensure that the system only runs authentic software by verifying the digital signature of all boot components, and halting the boot process if signature verification fails."
                          },
                          "enableIntegrityMonitoring": {
                            "type": "boolean",
                            "description": "Defines whether the instance has integrity monitoring enabled. Enables monitoring and attestation of the boot integrity of the instance. The attestation is performed against the integrity policy baseline. This baseline is initially derived from the implicitly trusted boot image when the instance is created."
                          }
                        },
                        "description": "Shielded Instance options."
                      },
                      "workloadMetadataConfig": {
                        "id": "WorkloadMetadataConfig",
                        "type": "object",
                        "properties": {
                          "mode": {
                            "enum": [
                              "MODE_UNSPECIFIED",
                              "GCE_METADATA",
                              "GKE_METADATA"
                            ],
                            "type": "string",
                            "description": "Mode is the configuration for how to expose metadata to workloads running on the node pool.",
                            "enumDescriptions": [
                              "Not set.",
                              "Expose all Compute Engine metadata to pods.",
                              "Run the GKE Metadata Server on this node. The GKE Metadata Server exposes a metadata API to workloads that is compatible with the V1 Compute Metadata APIs exposed by the Compute Engine and App Engine Metadata Servers. This feature can only be enabled if Workload Identity is enabled at the cluster level."
                            ]
                          }
                        },
                        "description": "The workload metadata configuration for this node."
                      }
                    },
                    "description": "The node configuration of the pool."
                  },
                  "status": {
                    "enum": [
                      "STATUS_UNSPECIFIED",
                      "PROVISIONING",
                      "RUNNING",
                      "RUNNING_WITH_ERROR",
                      "RECONCILING",
                      "STOPPING",
                      "ERROR"
                    ],
                    "type": "string",
                    "description": "[Output only] The status of the nodes in this pool instance.",
                    "enumDescriptions": [
                      "Not set.",
                      "The PROVISIONING state indicates the node pool is being created.",
                      "The RUNNING state indicates the node pool has been created and is fully usable.",
                      "The RUNNING_WITH_ERROR state indicates the node pool has been created and is partially usable. Some error state has occurred and some functionality may be impaired. Customer may need to reissue a request or trigger a new update.",
                      "The RECONCILING state indicates that some work is actively being done on the node pool, such as upgrading node software. Details can be found in the `statusMessage` field.",
                      "The STOPPING state indicates the node pool is being deleted.",
                      "The ERROR state indicates the node pool may be unusable. Details can be found in the `statusMessage` field."
                    ]
                  },
                  "version": {
                    "type": "string",
                    "description": "The version of the Kubernetes of this node."
                  },
                  "selfLink": {
                    "type": "string",
                    "description": "[Output only] Server-defined URL for the resource."
                  },
                  "locations": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "The list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the NodePool's nodes should be located. If this value is unspecified during node pool creation, the [Cluster.Locations](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters#Cluster.FIELDS.locations) value will be used, instead. Warning: changing node pool locations will result in nodes being added and/or removed."
                  },
                  "conditions": {
                    "type": "array",
                    "items": {
                      "id": "StatusCondition",
                      "type": "object",
                      "properties": {
                        "code": {
                          "enum": [
                            "UNKNOWN",
                            "GCE_STOCKOUT",
                            "GKE_SERVICE_ACCOUNT_DELETED",
                            "GCE_QUOTA_EXCEEDED",
                            "SET_BY_OPERATOR",
                            "CLOUD_KMS_KEY_ERROR"
                          ],
                          "type": "string",
                          "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                          "enumDescriptions": [
                            "UNKNOWN indicates a generic condition.",
                            "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                            "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                            "Google Compute Engine quota was exceeded.",
                            "Cluster state was manually changed by an SRE due to a system logic error.",
                            "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                          ]
                        },
                        "message": {
                          "type": "string",
                          "description": "Human-friendly representation of the condition"
                        },
                        "canonicalCode": {
                          "enum": [
                            "OK",
                            "CANCELLED",
                            "UNKNOWN",
                            "INVALID_ARGUMENT",
                            "DEADLINE_EXCEEDED",
                            "NOT_FOUND",
                            "ALREADY_EXISTS",
                            "PERMISSION_DENIED",
                            "UNAUTHENTICATED",
                            "RESOURCE_EXHAUSTED",
                            "FAILED_PRECONDITION",
                            "ABORTED",
                            "OUT_OF_RANGE",
                            "UNIMPLEMENTED",
                            "INTERNAL",
                            "UNAVAILABLE",
                            "DATA_LOSS"
                          ],
                          "type": "string",
                          "description": "Canonical code of the condition.",
                          "enumDescriptions": [
                            "Not an error; returned on success HTTP Mapping: 200 OK",
                            "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                            "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                            "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                            "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                            "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                            "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                            "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                            "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                            "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                            "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                            "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                            "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                            "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                            "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                            "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                            "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                          ]
                        }
                      },
                      "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
                    },
                    "description": "Which conditions caused the current node pool state."
                  },
                  "management": {
                    "id": "NodeManagement",
                    "type": "object",
                    "properties": {
                      "autoRepair": {
                        "type": "boolean",
                        "description": "A flag that specifies whether the node auto-repair is enabled for the node pool. If enabled, the nodes in this node pool will be monitored and, if they fail health checks too many times, an automatic repair action will be triggered."
                      },
                      "autoUpgrade": {
                        "type": "boolean",
                        "description": "A flag that specifies whether node auto-upgrade is enabled for the node pool. If enabled, node auto-upgrade helps keep the nodes in your node pool up to date with the latest release version of Kubernetes."
                      },
                      "upgradeOptions": {
                        "id": "AutoUpgradeOptions",
                        "type": "object",
                        "properties": {
                          "description": {
                            "type": "string",
                            "description": "[Output only] This field is set when upgrades are about to commence with the description of the upgrade."
                          },
                          "autoUpgradeStartTime": {
                            "type": "string",
                            "description": "[Output only] This field is set when upgrades are about to commence with the approximate start time for the upgrades, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
                          }
                        },
                        "description": "Specifies the Auto Upgrade knobs for the node pool."
                      }
                    },
                    "description": "NodeManagement configuration for this NodePool."
                  },
                  "autoscaling": {
                    "id": "NodePoolAutoscaling",
                    "type": "object",
                    "properties": {
                      "enabled": {
                        "type": "boolean",
                        "description": "Is autoscaling enabled for this node pool."
                      },
                      "maxNodeCount": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Maximum number of nodes in the NodePool. Must be >= min_node_count. There has to enough quota to scale up the cluster."
                      },
                      "minNodeCount": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Minimum number of nodes in the NodePool. Must be >= 1 and <= max_node_count."
                      },
                      "autoprovisioned": {
                        "type": "boolean",
                        "description": "Can this node pool be deleted automatically."
                      }
                    },
                    "description": "Autoscaler configuration for this NodePool. Autoscaler is enabled only if a valid configuration is present."
                  },
                  "statusMessage": {
                    "type": "string",
                    "description": "[Output only] Deprecated. Use conditions instead. Additional information about the current status of this node pool instance, if available."
                  },
                  "podIpv4CidrSize": {
                    "type": "integer",
                    "format": "int32",
                    "description": "[Output only] The pod CIDR block size per node in this node pool."
                  },
                  "upgradeSettings": {
                    "id": "UpgradeSettings",
                    "type": "object",
                    "properties": {
                      "maxSurge": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The maximum number of nodes that can be created beyond the current size of the node pool during the upgrade process."
                      },
                      "maxUnavailable": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The maximum number of nodes that can be simultaneously unavailable during the upgrade process. A node is considered available if its status is Ready."
                      }
                    },
                    "description": "Upgrade settings control disruption and speed of the upgrade."
                  },
                  "initialNodeCount": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The initial node count for the pool. You must ensure that your Compute Engine [resource quota](https://cloud.google.com/compute/quotas) is sufficient for this number of instances. You must also have available firewall and routes quota."
                  },
                  "instanceGroupUrls": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "[Output only] The resource URLs of the [managed instance groups](https://cloud.google.com/compute/docs/instance-groups/creating-groups-of-managed-instances) associated with this node pool."
                  },
                  "maxPodsConstraint": {
                    "id": "MaxPodsConstraint",
                    "type": "object",
                    "properties": {
                      "maxPodsPerNode": {
                        "type": "string",
                        "format": "int64",
                        "description": "Constraint enforced on the max num of pods per node."
                      }
                    },
                    "description": "The constraint on the maximum number of pods that can be run simultaneously on a node in the node pool."
                  }
                },
                "description": "NodePool contains the name and configuration for a cluster's node pool. Node pools are a set of nodes (i.e. VM's), with a common configuration and specification, under the control of the cluster master. They may have a set of Kubernetes labels applied to them, which may be used to reference them during pod scheduling. They may also be resized up or down, to accommodate the workload."
              },
              "description": "A list of node pools for a cluster."
            }
          },
          "description": "ListNodePoolsResponse is the result of ListNodePoolsRequest."
        }
      ]
  projects.locations.clusters.nodePools.rollback:
    description: |-
      Rolls back a previously Aborted or Failed NodePool upgrade. This makes no changes if the last upgrade successfully completed.
    versions:
      from: 1.0.0-beta1
    link: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters.nodePools/rollback
    example:
      inputs: [
        {
          "id": "RollbackNodePoolUpgradeRequest",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name (project, location, cluster, node pool id) of the node poll to rollback upgrade. Specified in the format `projects/*/locations/*/clusters/*/nodePools/*`."
            },
            "zone": {
              "type": "string",
              "description": "Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field."
            },
            "clusterId": {
              "type": "string",
              "description": "Deprecated. The name of the cluster to rollback. This field has been deprecated and replaced by the name field."
            },
            "projectId": {
              "type": "string",
              "description": "Deprecated. The Google Developers Console [project ID or project number](https://support.google.com/cloud/answer/6158840). This field has been deprecated and replaced by the name field."
            },
            "nodePoolId": {
              "type": "string",
              "description": "Deprecated. The name of the node pool to rollback. This field has been deprecated and replaced by the name field."
            }
          },
          "description": "RollbackNodePoolUpgradeRequest rollbacks the previously Aborted or Failed NodePool upgrade. This will be an no-op if the last upgrade successfully completed."
        }
      ]
      outputs: [
        {
          "id": "Operation",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The server-assigned ID for the operation."
            },
            "zone": {
              "type": "string",
              "description": "The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the operation is taking place. This field is deprecated, use location instead."
            },
            "error": {
              "id": "Status",
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The status code, which should be an enum value of google.rpc.Code."
                },
                "details": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  },
                  "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
                },
                "message": {
                  "type": "string",
                  "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                }
              },
              "description": "The error result of the operation in case of failure."
            },
            "detail": {
              "type": "string",
              "description": "Detailed operation progress, if available."
            },
            "status": {
              "enum": [
                "STATUS_UNSPECIFIED",
                "PENDING",
                "RUNNING",
                "DONE",
                "ABORTING"
              ],
              "type": "string",
              "description": "The current status of the operation.",
              "enumDescriptions": [
                "Not set.",
                "The operation has been created.",
                "The operation is currently running.",
                "The operation is done, either cancelled or completed.",
                "The operation is aborting."
              ]
            },
            "endTime": {
              "type": "string",
              "description": "[Output only] The time the operation completed, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "location": {
              "type": "string",
              "description": "[Output only] The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) or [region](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) in which the cluster resides."
            },
            "progress": {
              "id": "OperationProgress",
              "type": "object",
              "readOnly": true,
              "properties": {
                "name": {
                  "type": "string",
                  "description": "A non-parameterized string describing an operation stage. Unset for single-stage operations."
                },
                "stages": {
                  "type": "array",
                  "items": {
                    "id": "OperationProgress",
                    "type": "object",
                    "properties": {},
                    "description": "Information about operation (or operation stage) progress."
                  },
                  "description": "Substages of an operation or a stage."
                },
                "status": {
                  "enum": [
                    "STATUS_UNSPECIFIED",
                    "PENDING",
                    "RUNNING",
                    "DONE",
                    "ABORTING"
                  ],
                  "type": "string",
                  "description": "Status of an operation stage. Unset for single-stage operations.",
                  "enumDescriptions": [
                    "Not set.",
                    "The operation has been created.",
                    "The operation is currently running.",
                    "The operation is done, either cancelled or completed.",
                    "The operation is aborting."
                  ]
                },
                "metrics": {
                  "type": "array",
                  "items": {
                    "id": "Metric",
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Required. Metric name, e.g., \"nodes total\", \"percent done\"."
                      },
                      "intValue": {
                        "type": "string",
                        "format": "int64",
                        "description": "For metrics with integer value."
                      },
                      "doubleValue": {
                        "type": "number",
                        "format": "double",
                        "description": "For metrics with floating point value."
                      },
                      "stringValue": {
                        "type": "string",
                        "description": "For metrics with custom values (ratios, visual progress, etc.)."
                      }
                    },
                    "description": "Progress metric is (string, int|float|string) pair."
                  },
                  "description": "Progress metric bundle, for example: metrics: [{name: \"nodes done\", int_value: 15}, {name: \"nodes total\", int_value: 32}] or metrics: [{name: \"progress\", double_value: 0.56}, {name: \"progress scale\", double_value: 1.0}]"
                }
              },
              "description": "Output only. [Output only] Progress information for an operation."
            },
            "selfLink": {
              "type": "string",
              "description": "Server-defined URL for the resource."
            },
            "startTime": {
              "type": "string",
              "description": "[Output only] The time the operation started, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "targetLink": {
              "type": "string",
              "description": "Server-defined URL for the target of the operation."
            },
            "operationType": {
              "enum": [
                "TYPE_UNSPECIFIED",
                "CREATE_CLUSTER",
                "DELETE_CLUSTER",
                "UPGRADE_MASTER",
                "UPGRADE_NODES",
                "REPAIR_CLUSTER",
                "UPDATE_CLUSTER",
                "CREATE_NODE_POOL",
                "DELETE_NODE_POOL",
                "SET_NODE_POOL_MANAGEMENT",
                "AUTO_REPAIR_NODES",
                "AUTO_UPGRADE_NODES",
                "SET_LABELS",
                "SET_MASTER_AUTH",
                "SET_NODE_POOL_SIZE",
                "SET_NETWORK_POLICY",
                "SET_MAINTENANCE_POLICY"
              ],
              "type": "string",
              "description": "The operation type.",
              "enumDescriptions": [
                "Not set.",
                "Cluster create.",
                "Cluster delete.",
                "A master upgrade.",
                "A node upgrade.",
                "Cluster repair.",
                "Cluster update.",
                "Node pool create.",
                "Node pool delete.",
                "Set node pool management.",
                "Automatic node pool repair.",
                "Automatic node upgrade.",
                "Set labels.",
                "Set/generate master auth materials",
                "Set node pool size.",
                "Updates network policy for a cluster.",
                "Set the maintenance policy."
              ]
            },
            "statusMessage": {
              "type": "string",
              "readOnly": true,
              "description": "Output only. If an error has occurred, a textual description of the error. Deprecated. Use the field error instead."
            },
            "clusterConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current cluster state. Deprecated. Use field error instead."
            },
            "nodepoolConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current node pool state. Deprecated. Use field error instead."
            }
          },
          "description": "This operation resource represents operations that may have happened or are happening on the cluster. All fields are output only."
        }
      ]
  projects.locations.clusters.nodePools.setAutoscaling:
    description: |-
      Sets the autoscaling settings for the specified node pool.
    versions:
      from: 1.0.0-beta1
    link: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters.nodePools/setAutoscaling
    example:
      inputs: [
        {
          "id": "SetNodePoolAutoscalingRequest",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name (project, location, cluster, node pool) of the node pool to set autoscaler settings. Specified in the format `projects/*/locations/*/clusters/*/nodePools/*`."
            },
            "zone": {
              "type": "string",
              "description": "Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field."
            },
            "clusterId": {
              "type": "string",
              "description": "Deprecated. The name of the cluster to upgrade. This field has been deprecated and replaced by the name field."
            },
            "projectId": {
              "type": "string",
              "description": "Deprecated. The Google Developers Console [project ID or project number](https://support.google.com/cloud/answer/6158840). This field has been deprecated and replaced by the name field."
            },
            "nodePoolId": {
              "type": "string",
              "description": "Deprecated. The name of the node pool to upgrade. This field has been deprecated and replaced by the name field."
            },
            "autoscaling": {
              "id": "NodePoolAutoscaling",
              "type": "object",
              "properties": {
                "enabled": {
                  "type": "boolean",
                  "description": "Is autoscaling enabled for this node pool."
                },
                "maxNodeCount": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Maximum number of nodes in the NodePool. Must be >= min_node_count. There has to enough quota to scale up the cluster."
                },
                "minNodeCount": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Minimum number of nodes in the NodePool. Must be >= 1 and <= max_node_count."
                },
                "autoprovisioned": {
                  "type": "boolean",
                  "description": "Can this node pool be deleted automatically."
                }
              },
              "description": "Required. Autoscaling configuration for the node pool."
            }
          },
          "description": "SetNodePoolAutoscalingRequest sets the autoscaler settings of a node pool."
        }
      ]
      outputs: [
        {
          "id": "Operation",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The server-assigned ID for the operation."
            },
            "zone": {
              "type": "string",
              "description": "The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the operation is taking place. This field is deprecated, use location instead."
            },
            "error": {
              "id": "Status",
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The status code, which should be an enum value of google.rpc.Code."
                },
                "details": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  },
                  "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
                },
                "message": {
                  "type": "string",
                  "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                }
              },
              "description": "The error result of the operation in case of failure."
            },
            "detail": {
              "type": "string",
              "description": "Detailed operation progress, if available."
            },
            "status": {
              "enum": [
                "STATUS_UNSPECIFIED",
                "PENDING",
                "RUNNING",
                "DONE",
                "ABORTING"
              ],
              "type": "string",
              "description": "The current status of the operation.",
              "enumDescriptions": [
                "Not set.",
                "The operation has been created.",
                "The operation is currently running.",
                "The operation is done, either cancelled or completed.",
                "The operation is aborting."
              ]
            },
            "endTime": {
              "type": "string",
              "description": "[Output only] The time the operation completed, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "location": {
              "type": "string",
              "description": "[Output only] The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) or [region](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) in which the cluster resides."
            },
            "progress": {
              "id": "OperationProgress",
              "type": "object",
              "readOnly": true,
              "properties": {
                "name": {
                  "type": "string",
                  "description": "A non-parameterized string describing an operation stage. Unset for single-stage operations."
                },
                "stages": {
                  "type": "array",
                  "items": {
                    "id": "OperationProgress",
                    "type": "object",
                    "properties": {},
                    "description": "Information about operation (or operation stage) progress."
                  },
                  "description": "Substages of an operation or a stage."
                },
                "status": {
                  "enum": [
                    "STATUS_UNSPECIFIED",
                    "PENDING",
                    "RUNNING",
                    "DONE",
                    "ABORTING"
                  ],
                  "type": "string",
                  "description": "Status of an operation stage. Unset for single-stage operations.",
                  "enumDescriptions": [
                    "Not set.",
                    "The operation has been created.",
                    "The operation is currently running.",
                    "The operation is done, either cancelled or completed.",
                    "The operation is aborting."
                  ]
                },
                "metrics": {
                  "type": "array",
                  "items": {
                    "id": "Metric",
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Required. Metric name, e.g., \"nodes total\", \"percent done\"."
                      },
                      "intValue": {
                        "type": "string",
                        "format": "int64",
                        "description": "For metrics with integer value."
                      },
                      "doubleValue": {
                        "type": "number",
                        "format": "double",
                        "description": "For metrics with floating point value."
                      },
                      "stringValue": {
                        "type": "string",
                        "description": "For metrics with custom values (ratios, visual progress, etc.)."
                      }
                    },
                    "description": "Progress metric is (string, int|float|string) pair."
                  },
                  "description": "Progress metric bundle, for example: metrics: [{name: \"nodes done\", int_value: 15}, {name: \"nodes total\", int_value: 32}] or metrics: [{name: \"progress\", double_value: 0.56}, {name: \"progress scale\", double_value: 1.0}]"
                }
              },
              "description": "Output only. [Output only] Progress information for an operation."
            },
            "selfLink": {
              "type": "string",
              "description": "Server-defined URL for the resource."
            },
            "startTime": {
              "type": "string",
              "description": "[Output only] The time the operation started, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "targetLink": {
              "type": "string",
              "description": "Server-defined URL for the target of the operation."
            },
            "operationType": {
              "enum": [
                "TYPE_UNSPECIFIED",
                "CREATE_CLUSTER",
                "DELETE_CLUSTER",
                "UPGRADE_MASTER",
                "UPGRADE_NODES",
                "REPAIR_CLUSTER",
                "UPDATE_CLUSTER",
                "CREATE_NODE_POOL",
                "DELETE_NODE_POOL",
                "SET_NODE_POOL_MANAGEMENT",
                "AUTO_REPAIR_NODES",
                "AUTO_UPGRADE_NODES",
                "SET_LABELS",
                "SET_MASTER_AUTH",
                "SET_NODE_POOL_SIZE",
                "SET_NETWORK_POLICY",
                "SET_MAINTENANCE_POLICY"
              ],
              "type": "string",
              "description": "The operation type.",
              "enumDescriptions": [
                "Not set.",
                "Cluster create.",
                "Cluster delete.",
                "A master upgrade.",
                "A node upgrade.",
                "Cluster repair.",
                "Cluster update.",
                "Node pool create.",
                "Node pool delete.",
                "Set node pool management.",
                "Automatic node pool repair.",
                "Automatic node upgrade.",
                "Set labels.",
                "Set/generate master auth materials",
                "Set node pool size.",
                "Updates network policy for a cluster.",
                "Set the maintenance policy."
              ]
            },
            "statusMessage": {
              "type": "string",
              "readOnly": true,
              "description": "Output only. If an error has occurred, a textual description of the error. Deprecated. Use the field error instead."
            },
            "clusterConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current cluster state. Deprecated. Use field error instead."
            },
            "nodepoolConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current node pool state. Deprecated. Use field error instead."
            }
          },
          "description": "This operation resource represents operations that may have happened or are happening on the cluster. All fields are output only."
        }
      ]
  projects.locations.clusters.nodePools.setManagement:
    description: |-
      Sets the NodeManagement options for a node pool.
    versions:
      from: 1.0.0-beta1
    link: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters.nodePools/setManagement
    example:
      inputs: [
        {
          "id": "SetNodePoolManagementRequest",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name (project, location, cluster, node pool id) of the node pool to set management properties. Specified in the format `projects/*/locations/*/clusters/*/nodePools/*`."
            },
            "zone": {
              "type": "string",
              "description": "Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field."
            },
            "clusterId": {
              "type": "string",
              "description": "Deprecated. The name of the cluster to update. This field has been deprecated and replaced by the name field."
            },
            "projectId": {
              "type": "string",
              "description": "Deprecated. The Google Developers Console [project ID or project number](https://support.google.com/cloud/answer/6158840). This field has been deprecated and replaced by the name field."
            },
            "management": {
              "id": "NodeManagement",
              "type": "object",
              "properties": {
                "autoRepair": {
                  "type": "boolean",
                  "description": "A flag that specifies whether the node auto-repair is enabled for the node pool. If enabled, the nodes in this node pool will be monitored and, if they fail health checks too many times, an automatic repair action will be triggered."
                },
                "autoUpgrade": {
                  "type": "boolean",
                  "description": "A flag that specifies whether node auto-upgrade is enabled for the node pool. If enabled, node auto-upgrade helps keep the nodes in your node pool up to date with the latest release version of Kubernetes."
                },
                "upgradeOptions": {
                  "id": "AutoUpgradeOptions",
                  "type": "object",
                  "properties": {
                    "description": {
                      "type": "string",
                      "description": "[Output only] This field is set when upgrades are about to commence with the description of the upgrade."
                    },
                    "autoUpgradeStartTime": {
                      "type": "string",
                      "description": "[Output only] This field is set when upgrades are about to commence with the approximate start time for the upgrades, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
                    }
                  },
                  "description": "Specifies the Auto Upgrade knobs for the node pool."
                }
              },
              "description": "Required. NodeManagement configuration for the node pool."
            },
            "nodePoolId": {
              "type": "string",
              "description": "Deprecated. The name of the node pool to update. This field has been deprecated and replaced by the name field."
            }
          },
          "description": "SetNodePoolManagementRequest sets the node management properties of a node pool."
        }
      ]
      outputs: [
        {
          "id": "Operation",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The server-assigned ID for the operation."
            },
            "zone": {
              "type": "string",
              "description": "The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the operation is taking place. This field is deprecated, use location instead."
            },
            "error": {
              "id": "Status",
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The status code, which should be an enum value of google.rpc.Code."
                },
                "details": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  },
                  "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
                },
                "message": {
                  "type": "string",
                  "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                }
              },
              "description": "The error result of the operation in case of failure."
            },
            "detail": {
              "type": "string",
              "description": "Detailed operation progress, if available."
            },
            "status": {
              "enum": [
                "STATUS_UNSPECIFIED",
                "PENDING",
                "RUNNING",
                "DONE",
                "ABORTING"
              ],
              "type": "string",
              "description": "The current status of the operation.",
              "enumDescriptions": [
                "Not set.",
                "The operation has been created.",
                "The operation is currently running.",
                "The operation is done, either cancelled or completed.",
                "The operation is aborting."
              ]
            },
            "endTime": {
              "type": "string",
              "description": "[Output only] The time the operation completed, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "location": {
              "type": "string",
              "description": "[Output only] The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) or [region](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) in which the cluster resides."
            },
            "progress": {
              "id": "OperationProgress",
              "type": "object",
              "readOnly": true,
              "properties": {
                "name": {
                  "type": "string",
                  "description": "A non-parameterized string describing an operation stage. Unset for single-stage operations."
                },
                "stages": {
                  "type": "array",
                  "items": {
                    "id": "OperationProgress",
                    "type": "object",
                    "properties": {},
                    "description": "Information about operation (or operation stage) progress."
                  },
                  "description": "Substages of an operation or a stage."
                },
                "status": {
                  "enum": [
                    "STATUS_UNSPECIFIED",
                    "PENDING",
                    "RUNNING",
                    "DONE",
                    "ABORTING"
                  ],
                  "type": "string",
                  "description": "Status of an operation stage. Unset for single-stage operations.",
                  "enumDescriptions": [
                    "Not set.",
                    "The operation has been created.",
                    "The operation is currently running.",
                    "The operation is done, either cancelled or completed.",
                    "The operation is aborting."
                  ]
                },
                "metrics": {
                  "type": "array",
                  "items": {
                    "id": "Metric",
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Required. Metric name, e.g., \"nodes total\", \"percent done\"."
                      },
                      "intValue": {
                        "type": "string",
                        "format": "int64",
                        "description": "For metrics with integer value."
                      },
                      "doubleValue": {
                        "type": "number",
                        "format": "double",
                        "description": "For metrics with floating point value."
                      },
                      "stringValue": {
                        "type": "string",
                        "description": "For metrics with custom values (ratios, visual progress, etc.)."
                      }
                    },
                    "description": "Progress metric is (string, int|float|string) pair."
                  },
                  "description": "Progress metric bundle, for example: metrics: [{name: \"nodes done\", int_value: 15}, {name: \"nodes total\", int_value: 32}] or metrics: [{name: \"progress\", double_value: 0.56}, {name: \"progress scale\", double_value: 1.0}]"
                }
              },
              "description": "Output only. [Output only] Progress information for an operation."
            },
            "selfLink": {
              "type": "string",
              "description": "Server-defined URL for the resource."
            },
            "startTime": {
              "type": "string",
              "description": "[Output only] The time the operation started, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "targetLink": {
              "type": "string",
              "description": "Server-defined URL for the target of the operation."
            },
            "operationType": {
              "enum": [
                "TYPE_UNSPECIFIED",
                "CREATE_CLUSTER",
                "DELETE_CLUSTER",
                "UPGRADE_MASTER",
                "UPGRADE_NODES",
                "REPAIR_CLUSTER",
                "UPDATE_CLUSTER",
                "CREATE_NODE_POOL",
                "DELETE_NODE_POOL",
                "SET_NODE_POOL_MANAGEMENT",
                "AUTO_REPAIR_NODES",
                "AUTO_UPGRADE_NODES",
                "SET_LABELS",
                "SET_MASTER_AUTH",
                "SET_NODE_POOL_SIZE",
                "SET_NETWORK_POLICY",
                "SET_MAINTENANCE_POLICY"
              ],
              "type": "string",
              "description": "The operation type.",
              "enumDescriptions": [
                "Not set.",
                "Cluster create.",
                "Cluster delete.",
                "A master upgrade.",
                "A node upgrade.",
                "Cluster repair.",
                "Cluster update.",
                "Node pool create.",
                "Node pool delete.",
                "Set node pool management.",
                "Automatic node pool repair.",
                "Automatic node upgrade.",
                "Set labels.",
                "Set/generate master auth materials",
                "Set node pool size.",
                "Updates network policy for a cluster.",
                "Set the maintenance policy."
              ]
            },
            "statusMessage": {
              "type": "string",
              "readOnly": true,
              "description": "Output only. If an error has occurred, a textual description of the error. Deprecated. Use the field error instead."
            },
            "clusterConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current cluster state. Deprecated. Use field error instead."
            },
            "nodepoolConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current node pool state. Deprecated. Use field error instead."
            }
          },
          "description": "This operation resource represents operations that may have happened or are happening on the cluster. All fields are output only."
        }
      ]
  projects.locations.clusters.nodePools.setSize:
    description: |-
      Sets the size for a specific node pool. The new size will be used for all replicas, including future replicas created by modifying NodePool.locations.
    versions:
      from: 1.0.0-beta1
    link: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters.nodePools/setSize
    example:
      inputs: [
        {
          "id": "SetNodePoolSizeRequest",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name (project, location, cluster, node pool id) of the node pool to set size. Specified in the format `projects/*/locations/*/clusters/*/nodePools/*`."
            },
            "zone": {
              "type": "string",
              "description": "Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field."
            },
            "clusterId": {
              "type": "string",
              "description": "Deprecated. The name of the cluster to update. This field has been deprecated and replaced by the name field."
            },
            "nodeCount": {
              "type": "integer",
              "format": "int32",
              "description": "Required. The desired node count for the pool."
            },
            "projectId": {
              "type": "string",
              "description": "Deprecated. The Google Developers Console [project ID or project number](https://support.google.com/cloud/answer/6158840). This field has been deprecated and replaced by the name field."
            },
            "nodePoolId": {
              "type": "string",
              "description": "Deprecated. The name of the node pool to update. This field has been deprecated and replaced by the name field."
            }
          },
          "description": "SetNodePoolSizeRequest sets the size of a node pool."
        }
      ]
      outputs: [
        {
          "id": "Operation",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The server-assigned ID for the operation."
            },
            "zone": {
              "type": "string",
              "description": "The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the operation is taking place. This field is deprecated, use location instead."
            },
            "error": {
              "id": "Status",
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The status code, which should be an enum value of google.rpc.Code."
                },
                "details": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  },
                  "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
                },
                "message": {
                  "type": "string",
                  "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                }
              },
              "description": "The error result of the operation in case of failure."
            },
            "detail": {
              "type": "string",
              "description": "Detailed operation progress, if available."
            },
            "status": {
              "enum": [
                "STATUS_UNSPECIFIED",
                "PENDING",
                "RUNNING",
                "DONE",
                "ABORTING"
              ],
              "type": "string",
              "description": "The current status of the operation.",
              "enumDescriptions": [
                "Not set.",
                "The operation has been created.",
                "The operation is currently running.",
                "The operation is done, either cancelled or completed.",
                "The operation is aborting."
              ]
            },
            "endTime": {
              "type": "string",
              "description": "[Output only] The time the operation completed, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "location": {
              "type": "string",
              "description": "[Output only] The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) or [region](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) in which the cluster resides."
            },
            "progress": {
              "id": "OperationProgress",
              "type": "object",
              "readOnly": true,
              "properties": {
                "name": {
                  "type": "string",
                  "description": "A non-parameterized string describing an operation stage. Unset for single-stage operations."
                },
                "stages": {
                  "type": "array",
                  "items": {
                    "id": "OperationProgress",
                    "type": "object",
                    "properties": {},
                    "description": "Information about operation (or operation stage) progress."
                  },
                  "description": "Substages of an operation or a stage."
                },
                "status": {
                  "enum": [
                    "STATUS_UNSPECIFIED",
                    "PENDING",
                    "RUNNING",
                    "DONE",
                    "ABORTING"
                  ],
                  "type": "string",
                  "description": "Status of an operation stage. Unset for single-stage operations.",
                  "enumDescriptions": [
                    "Not set.",
                    "The operation has been created.",
                    "The operation is currently running.",
                    "The operation is done, either cancelled or completed.",
                    "The operation is aborting."
                  ]
                },
                "metrics": {
                  "type": "array",
                  "items": {
                    "id": "Metric",
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Required. Metric name, e.g., \"nodes total\", \"percent done\"."
                      },
                      "intValue": {
                        "type": "string",
                        "format": "int64",
                        "description": "For metrics with integer value."
                      },
                      "doubleValue": {
                        "type": "number",
                        "format": "double",
                        "description": "For metrics with floating point value."
                      },
                      "stringValue": {
                        "type": "string",
                        "description": "For metrics with custom values (ratios, visual progress, etc.)."
                      }
                    },
                    "description": "Progress metric is (string, int|float|string) pair."
                  },
                  "description": "Progress metric bundle, for example: metrics: [{name: \"nodes done\", int_value: 15}, {name: \"nodes total\", int_value: 32}] or metrics: [{name: \"progress\", double_value: 0.56}, {name: \"progress scale\", double_value: 1.0}]"
                }
              },
              "description": "Output only. [Output only] Progress information for an operation."
            },
            "selfLink": {
              "type": "string",
              "description": "Server-defined URL for the resource."
            },
            "startTime": {
              "type": "string",
              "description": "[Output only] The time the operation started, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "targetLink": {
              "type": "string",
              "description": "Server-defined URL for the target of the operation."
            },
            "operationType": {
              "enum": [
                "TYPE_UNSPECIFIED",
                "CREATE_CLUSTER",
                "DELETE_CLUSTER",
                "UPGRADE_MASTER",
                "UPGRADE_NODES",
                "REPAIR_CLUSTER",
                "UPDATE_CLUSTER",
                "CREATE_NODE_POOL",
                "DELETE_NODE_POOL",
                "SET_NODE_POOL_MANAGEMENT",
                "AUTO_REPAIR_NODES",
                "AUTO_UPGRADE_NODES",
                "SET_LABELS",
                "SET_MASTER_AUTH",
                "SET_NODE_POOL_SIZE",
                "SET_NETWORK_POLICY",
                "SET_MAINTENANCE_POLICY"
              ],
              "type": "string",
              "description": "The operation type.",
              "enumDescriptions": [
                "Not set.",
                "Cluster create.",
                "Cluster delete.",
                "A master upgrade.",
                "A node upgrade.",
                "Cluster repair.",
                "Cluster update.",
                "Node pool create.",
                "Node pool delete.",
                "Set node pool management.",
                "Automatic node pool repair.",
                "Automatic node upgrade.",
                "Set labels.",
                "Set/generate master auth materials",
                "Set node pool size.",
                "Updates network policy for a cluster.",
                "Set the maintenance policy."
              ]
            },
            "statusMessage": {
              "type": "string",
              "readOnly": true,
              "description": "Output only. If an error has occurred, a textual description of the error. Deprecated. Use the field error instead."
            },
            "clusterConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current cluster state. Deprecated. Use field error instead."
            },
            "nodepoolConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current node pool state. Deprecated. Use field error instead."
            }
          },
          "description": "This operation resource represents operations that may have happened or are happening on the cluster. All fields are output only."
        }
      ]
  projects.locations.clusters.nodePools.update:
    description: |-
      Updates the version and/or image type for the specified node pool.
    versions:
      from: 1.0.0-beta1
    link: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters.nodePools/update
    example:
      inputs: [
        {
          "id": "UpdateNodePoolRequest",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name (project, location, cluster, node pool) of the node pool to update. Specified in the format `projects/*/locations/*/clusters/*/nodePools/*`."
            },
            "zone": {
              "type": "string",
              "description": "Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field."
            },
            "clusterId": {
              "type": "string",
              "description": "Deprecated. The name of the cluster to upgrade. This field has been deprecated and replaced by the name field."
            },
            "imageType": {
              "type": "string",
              "description": "Required. The desired image type for the node pool."
            },
            "locations": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "The desired list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the node pool's nodes should be located. Changing the locations for a node pool will result in nodes being either created or removed from the node pool, depending on whether locations are being added or removed."
            },
            "projectId": {
              "type": "string",
              "description": "Deprecated. The Google Developers Console [project ID or project number](https://support.google.com/cloud/answer/6158840). This field has been deprecated and replaced by the name field."
            },
            "nodePoolId": {
              "type": "string",
              "description": "Deprecated. The name of the node pool to upgrade. This field has been deprecated and replaced by the name field."
            },
            "nodeVersion": {
              "type": "string",
              "description": "Required. The Kubernetes version to change the nodes to (typically an upgrade). Users may specify either explicit versions offered by Kubernetes Engine or version aliases, which have the following behavior: - \"latest\": picks the highest valid Kubernetes version - \"1.X\": picks the highest valid patch+gke.N patch in the 1.X version - \"1.X.Y\": picks the highest valid gke.N patch in the 1.X.Y version - \"1.X.Y-gke.N\": picks an explicit Kubernetes version - \"-\": picks the Kubernetes master version"
            },
            "kubeletConfig": {
              "id": "NodeKubeletConfig",
              "type": "object",
              "properties": {
                "cpuCfsQuota": {
                  "type": "boolean",
                  "description": "Enable CPU CFS quota enforcement for containers that specify CPU limits. This option is enabled by default which makes kubelet use CFS quota (https://www.kernel.org/doc/Documentation/scheduler/sched-bwc.txt) to enforce container CPU limits. Otherwise, CPU limits will not be enforced at all. Disable this option to mitigate CPU throttling problems while still having your pods to be in Guaranteed QoS class by specifying the CPU limits. The default value is 'true' if unspecified."
                },
                "cpuManagerPolicy": {
                  "type": "string",
                  "description": "Control the CPU management policy on the node. See https://kubernetes.io/docs/tasks/administer-cluster/cpu-management-policies/ The following values are allowed. - \"none\": the default, which represents the existing scheduling behavior. - \"static\": allows pods with certain resource characteristics to be granted increased CPU affinity and exclusivity on the node. The default value is 'none' if unspecified."
                },
                "cpuCfsQuotaPeriod": {
                  "type": "string",
                  "description": "Set the CPU CFS quota period value 'cpu.cfs_period_us'. The string must be a sequence of decimal numbers, each with optional fraction and a unit suffix, such as \"300ms\". Valid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\". The value must be a positive duration."
                }
              },
              "description": "Node kubelet configs."
            },
            "linuxNodeConfig": {
              "id": "LinuxNodeConfig",
              "type": "object",
              "properties": {
                "sysctls": {
                  "type": "object",
                  "description": "The Linux kernel parameters to be applied to the nodes and all pods running on the nodes. The following parameters are supported. net.core.netdev_max_backlog net.core.rmem_max net.core.wmem_default net.core.wmem_max net.core.optmem_max net.core.somaxconn net.ipv4.tcp_rmem net.ipv4.tcp_wmem net.ipv4.tcp_tw_reuse",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              },
              "description": "Parameters that can be configured on Linux nodes."
            },
            "upgradeSettings": {
              "id": "UpgradeSettings",
              "type": "object",
              "properties": {
                "maxSurge": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The maximum number of nodes that can be created beyond the current size of the node pool during the upgrade process."
                },
                "maxUnavailable": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The maximum number of nodes that can be simultaneously unavailable during the upgrade process. A node is considered available if its status is Ready."
                }
              },
              "description": "Upgrade settings control disruption and speed of the upgrade."
            },
            "workloadMetadataConfig": {
              "id": "WorkloadMetadataConfig",
              "type": "object",
              "properties": {
                "mode": {
                  "enum": [
                    "MODE_UNSPECIFIED",
                    "GCE_METADATA",
                    "GKE_METADATA"
                  ],
                  "type": "string",
                  "description": "Mode is the configuration for how to expose metadata to workloads running on the node pool.",
                  "enumDescriptions": [
                    "Not set.",
                    "Expose all Compute Engine metadata to pods.",
                    "Run the GKE Metadata Server on this node. The GKE Metadata Server exposes a metadata API to workloads that is compatible with the V1 Compute Metadata APIs exposed by the Compute Engine and App Engine Metadata Servers. This feature can only be enabled if Workload Identity is enabled at the cluster level."
                  ]
                }
              },
              "description": "The desired workload metadata config for the node pool."
            }
          },
          "description": "UpdateNodePoolRequests update a node pool's image and/or version."
        }
      ]
      outputs: [
        {
          "id": "Operation",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The server-assigned ID for the operation."
            },
            "zone": {
              "type": "string",
              "description": "The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the operation is taking place. This field is deprecated, use location instead."
            },
            "error": {
              "id": "Status",
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The status code, which should be an enum value of google.rpc.Code."
                },
                "details": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  },
                  "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
                },
                "message": {
                  "type": "string",
                  "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                }
              },
              "description": "The error result of the operation in case of failure."
            },
            "detail": {
              "type": "string",
              "description": "Detailed operation progress, if available."
            },
            "status": {
              "enum": [
                "STATUS_UNSPECIFIED",
                "PENDING",
                "RUNNING",
                "DONE",
                "ABORTING"
              ],
              "type": "string",
              "description": "The current status of the operation.",
              "enumDescriptions": [
                "Not set.",
                "The operation has been created.",
                "The operation is currently running.",
                "The operation is done, either cancelled or completed.",
                "The operation is aborting."
              ]
            },
            "endTime": {
              "type": "string",
              "description": "[Output only] The time the operation completed, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "location": {
              "type": "string",
              "description": "[Output only] The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) or [region](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) in which the cluster resides."
            },
            "progress": {
              "id": "OperationProgress",
              "type": "object",
              "readOnly": true,
              "properties": {
                "name": {
                  "type": "string",
                  "description": "A non-parameterized string describing an operation stage. Unset for single-stage operations."
                },
                "stages": {
                  "type": "array",
                  "items": {
                    "id": "OperationProgress",
                    "type": "object",
                    "properties": {},
                    "description": "Information about operation (or operation stage) progress."
                  },
                  "description": "Substages of an operation or a stage."
                },
                "status": {
                  "enum": [
                    "STATUS_UNSPECIFIED",
                    "PENDING",
                    "RUNNING",
                    "DONE",
                    "ABORTING"
                  ],
                  "type": "string",
                  "description": "Status of an operation stage. Unset for single-stage operations.",
                  "enumDescriptions": [
                    "Not set.",
                    "The operation has been created.",
                    "The operation is currently running.",
                    "The operation is done, either cancelled or completed.",
                    "The operation is aborting."
                  ]
                },
                "metrics": {
                  "type": "array",
                  "items": {
                    "id": "Metric",
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Required. Metric name, e.g., \"nodes total\", \"percent done\"."
                      },
                      "intValue": {
                        "type": "string",
                        "format": "int64",
                        "description": "For metrics with integer value."
                      },
                      "doubleValue": {
                        "type": "number",
                        "format": "double",
                        "description": "For metrics with floating point value."
                      },
                      "stringValue": {
                        "type": "string",
                        "description": "For metrics with custom values (ratios, visual progress, etc.)."
                      }
                    },
                    "description": "Progress metric is (string, int|float|string) pair."
                  },
                  "description": "Progress metric bundle, for example: metrics: [{name: \"nodes done\", int_value: 15}, {name: \"nodes total\", int_value: 32}] or metrics: [{name: \"progress\", double_value: 0.56}, {name: \"progress scale\", double_value: 1.0}]"
                }
              },
              "description": "Output only. [Output only] Progress information for an operation."
            },
            "selfLink": {
              "type": "string",
              "description": "Server-defined URL for the resource."
            },
            "startTime": {
              "type": "string",
              "description": "[Output only] The time the operation started, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "targetLink": {
              "type": "string",
              "description": "Server-defined URL for the target of the operation."
            },
            "operationType": {
              "enum": [
                "TYPE_UNSPECIFIED",
                "CREATE_CLUSTER",
                "DELETE_CLUSTER",
                "UPGRADE_MASTER",
                "UPGRADE_NODES",
                "REPAIR_CLUSTER",
                "UPDATE_CLUSTER",
                "CREATE_NODE_POOL",
                "DELETE_NODE_POOL",
                "SET_NODE_POOL_MANAGEMENT",
                "AUTO_REPAIR_NODES",
                "AUTO_UPGRADE_NODES",
                "SET_LABELS",
                "SET_MASTER_AUTH",
                "SET_NODE_POOL_SIZE",
                "SET_NETWORK_POLICY",
                "SET_MAINTENANCE_POLICY"
              ],
              "type": "string",
              "description": "The operation type.",
              "enumDescriptions": [
                "Not set.",
                "Cluster create.",
                "Cluster delete.",
                "A master upgrade.",
                "A node upgrade.",
                "Cluster repair.",
                "Cluster update.",
                "Node pool create.",
                "Node pool delete.",
                "Set node pool management.",
                "Automatic node pool repair.",
                "Automatic node upgrade.",
                "Set labels.",
                "Set/generate master auth materials",
                "Set node pool size.",
                "Updates network policy for a cluster.",
                "Set the maintenance policy."
              ]
            },
            "statusMessage": {
              "type": "string",
              "readOnly": true,
              "description": "Output only. If an error has occurred, a textual description of the error. Deprecated. Use the field error instead."
            },
            "clusterConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current cluster state. Deprecated. Use field error instead."
            },
            "nodepoolConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current node pool state. Deprecated. Use field error instead."
            }
          },
          "description": "This operation resource represents operations that may have happened or are happening on the cluster. All fields are output only."
        }
      ]
  projects.locations.clusters.setAddons:
    description: |-
      Sets the addons for a specific cluster.
    versions:
      from: 1.0.0-beta1
    link: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters/setAddons
    example:
      inputs: [
        {
          "id": "SetAddonsConfigRequest",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name (project, location, cluster) of the cluster to set addons. Specified in the format `projects/*/locations/*/clusters/*`."
            },
            "zone": {
              "type": "string",
              "description": "Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field."
            },
            "clusterId": {
              "type": "string",
              "description": "Deprecated. The name of the cluster to upgrade. This field has been deprecated and replaced by the name field."
            },
            "projectId": {
              "type": "string",
              "description": "Deprecated. The Google Developers Console [project ID or project number](https://support.google.com/cloud/answer/6158840). This field has been deprecated and replaced by the name field."
            },
            "addonsConfig": {
              "id": "AddonsConfig",
              "type": "object",
              "properties": {
                "cloudRunConfig": {
                  "id": "CloudRunConfig",
                  "type": "object",
                  "properties": {
                    "disabled": {
                      "type": "boolean",
                      "description": "Whether Cloud Run addon is enabled for this cluster."
                    },
                    "loadBalancerType": {
                      "enum": [
                        "LOAD_BALANCER_TYPE_UNSPECIFIED",
                        "LOAD_BALANCER_TYPE_EXTERNAL",
                        "LOAD_BALANCER_TYPE_INTERNAL"
                      ],
                      "type": "string",
                      "description": "Which load balancer type is installed for Cloud Run.",
                      "enumDescriptions": [
                        "Load balancer type for Cloud Run is unspecified.",
                        "Install external load balancer for Cloud Run.",
                        "Install internal load balancer for Cloud Run."
                      ]
                    }
                  },
                  "description": "Configuration for the Cloud Run addon, which allows the user to use a managed Knative service."
                },
                "dnsCacheConfig": {
                  "id": "DnsCacheConfig",
                  "type": "object",
                  "properties": {
                    "enabled": {
                      "type": "boolean",
                      "description": "Whether NodeLocal DNSCache is enabled for this cluster."
                    }
                  },
                  "description": "Configuration for NodeLocalDNS, a dns cache running on cluster nodes"
                },
                "httpLoadBalancing": {
                  "id": "HttpLoadBalancing",
                  "type": "object",
                  "properties": {
                    "disabled": {
                      "type": "boolean",
                      "description": "Whether the HTTP Load Balancing controller is enabled in the cluster. When enabled, it runs a small pod in the cluster that manages the load balancers."
                    }
                  },
                  "description": "Configuration for the HTTP (L7) load balancing controller addon, which makes it easy to set up HTTP load balancers for services in a cluster."
                },
                "kubernetesDashboard": {
                  "id": "KubernetesDashboard",
                  "type": "object",
                  "properties": {
                    "disabled": {
                      "type": "boolean",
                      "description": "Whether the Kubernetes Dashboard is enabled for this cluster."
                    }
                  },
                  "description": "Configuration for the Kubernetes Dashboard. This addon is deprecated, and will be disabled in 1.15. It is recommended to use the Cloud Console to manage and monitor your Kubernetes clusters, workloads and applications. For more information, see: https://cloud.google.com/kubernetes-engine/docs/concepts/dashboards"
                },
                "networkPolicyConfig": {
                  "id": "NetworkPolicyConfig",
                  "type": "object",
                  "properties": {
                    "disabled": {
                      "type": "boolean",
                      "description": "Whether NetworkPolicy is enabled for this cluster."
                    }
                  },
                  "description": "Configuration for NetworkPolicy. This only tracks whether the addon is enabled or not on the Master, it does not track whether network policy is enabled for the nodes."
                },
                "configConnectorConfig": {
                  "id": "ConfigConnectorConfig",
                  "type": "object",
                  "properties": {
                    "enabled": {
                      "type": "boolean",
                      "description": "Whether Cloud Connector is enabled for this cluster."
                    }
                  },
                  "description": "Configuration for the ConfigConnector add-on, a Kubernetes extension to manage hosted GCP services through the Kubernetes API"
                },
                "horizontalPodAutoscaling": {
                  "id": "HorizontalPodAutoscaling",
                  "type": "object",
                  "properties": {
                    "disabled": {
                      "type": "boolean",
                      "description": "Whether the Horizontal Pod Autoscaling feature is enabled in the cluster. When enabled, it ensures that metrics are collected into Stackdriver Monitoring."
                    }
                  },
                  "description": "Configuration for the horizontal pod autoscaling feature, which increases or decreases the number of replica pods a replication controller has based on the resource usage of the existing pods."
                },
                "gcePersistentDiskCsiDriverConfig": {
                  "id": "GcePersistentDiskCsiDriverConfig",
                  "type": "object",
                  "properties": {
                    "enabled": {
                      "type": "boolean",
                      "description": "Whether the Compute Engine PD CSI driver is enabled for this cluster."
                    }
                  },
                  "description": "Configuration for the Compute Engine Persistent Disk CSI driver."
                }
              },
              "description": "Required. The desired configurations for the various addons available to run in the cluster."
            }
          },
          "description": "SetAddonsConfigRequest sets the addons associated with the cluster."
        }
      ]
      outputs: [
        {
          "id": "Operation",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The server-assigned ID for the operation."
            },
            "zone": {
              "type": "string",
              "description": "The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the operation is taking place. This field is deprecated, use location instead."
            },
            "error": {
              "id": "Status",
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The status code, which should be an enum value of google.rpc.Code."
                },
                "details": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  },
                  "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
                },
                "message": {
                  "type": "string",
                  "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                }
              },
              "description": "The error result of the operation in case of failure."
            },
            "detail": {
              "type": "string",
              "description": "Detailed operation progress, if available."
            },
            "status": {
              "enum": [
                "STATUS_UNSPECIFIED",
                "PENDING",
                "RUNNING",
                "DONE",
                "ABORTING"
              ],
              "type": "string",
              "description": "The current status of the operation.",
              "enumDescriptions": [
                "Not set.",
                "The operation has been created.",
                "The operation is currently running.",
                "The operation is done, either cancelled or completed.",
                "The operation is aborting."
              ]
            },
            "endTime": {
              "type": "string",
              "description": "[Output only] The time the operation completed, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "location": {
              "type": "string",
              "description": "[Output only] The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) or [region](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) in which the cluster resides."
            },
            "progress": {
              "id": "OperationProgress",
              "type": "object",
              "readOnly": true,
              "properties": {
                "name": {
                  "type": "string",
                  "description": "A non-parameterized string describing an operation stage. Unset for single-stage operations."
                },
                "stages": {
                  "type": "array",
                  "items": {
                    "id": "OperationProgress",
                    "type": "object",
                    "properties": {},
                    "description": "Information about operation (or operation stage) progress."
                  },
                  "description": "Substages of an operation or a stage."
                },
                "status": {
                  "enum": [
                    "STATUS_UNSPECIFIED",
                    "PENDING",
                    "RUNNING",
                    "DONE",
                    "ABORTING"
                  ],
                  "type": "string",
                  "description": "Status of an operation stage. Unset for single-stage operations.",
                  "enumDescriptions": [
                    "Not set.",
                    "The operation has been created.",
                    "The operation is currently running.",
                    "The operation is done, either cancelled or completed.",
                    "The operation is aborting."
                  ]
                },
                "metrics": {
                  "type": "array",
                  "items": {
                    "id": "Metric",
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Required. Metric name, e.g., \"nodes total\", \"percent done\"."
                      },
                      "intValue": {
                        "type": "string",
                        "format": "int64",
                        "description": "For metrics with integer value."
                      },
                      "doubleValue": {
                        "type": "number",
                        "format": "double",
                        "description": "For metrics with floating point value."
                      },
                      "stringValue": {
                        "type": "string",
                        "description": "For metrics with custom values (ratios, visual progress, etc.)."
                      }
                    },
                    "description": "Progress metric is (string, int|float|string) pair."
                  },
                  "description": "Progress metric bundle, for example: metrics: [{name: \"nodes done\", int_value: 15}, {name: \"nodes total\", int_value: 32}] or metrics: [{name: \"progress\", double_value: 0.56}, {name: \"progress scale\", double_value: 1.0}]"
                }
              },
              "description": "Output only. [Output only] Progress information for an operation."
            },
            "selfLink": {
              "type": "string",
              "description": "Server-defined URL for the resource."
            },
            "startTime": {
              "type": "string",
              "description": "[Output only] The time the operation started, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "targetLink": {
              "type": "string",
              "description": "Server-defined URL for the target of the operation."
            },
            "operationType": {
              "enum": [
                "TYPE_UNSPECIFIED",
                "CREATE_CLUSTER",
                "DELETE_CLUSTER",
                "UPGRADE_MASTER",
                "UPGRADE_NODES",
                "REPAIR_CLUSTER",
                "UPDATE_CLUSTER",
                "CREATE_NODE_POOL",
                "DELETE_NODE_POOL",
                "SET_NODE_POOL_MANAGEMENT",
                "AUTO_REPAIR_NODES",
                "AUTO_UPGRADE_NODES",
                "SET_LABELS",
                "SET_MASTER_AUTH",
                "SET_NODE_POOL_SIZE",
                "SET_NETWORK_POLICY",
                "SET_MAINTENANCE_POLICY"
              ],
              "type": "string",
              "description": "The operation type.",
              "enumDescriptions": [
                "Not set.",
                "Cluster create.",
                "Cluster delete.",
                "A master upgrade.",
                "A node upgrade.",
                "Cluster repair.",
                "Cluster update.",
                "Node pool create.",
                "Node pool delete.",
                "Set node pool management.",
                "Automatic node pool repair.",
                "Automatic node upgrade.",
                "Set labels.",
                "Set/generate master auth materials",
                "Set node pool size.",
                "Updates network policy for a cluster.",
                "Set the maintenance policy."
              ]
            },
            "statusMessage": {
              "type": "string",
              "readOnly": true,
              "description": "Output only. If an error has occurred, a textual description of the error. Deprecated. Use the field error instead."
            },
            "clusterConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current cluster state. Deprecated. Use field error instead."
            },
            "nodepoolConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current node pool state. Deprecated. Use field error instead."
            }
          },
          "description": "This operation resource represents operations that may have happened or are happening on the cluster. All fields are output only."
        }
      ]
  projects.locations.clusters.setLegacyAbac:
    description: |-
      Enables or disables the ABAC authorization mechanism on a cluster.
    versions:
      from: 1.0.0-beta1
    link: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters/setLegacyAbac
    example:
      inputs: [
        {
          "id": "SetLegacyAbacRequest",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name (project, location, cluster id) of the cluster to set legacy abac. Specified in the format `projects/*/locations/*/clusters/*`."
            },
            "zone": {
              "type": "string",
              "description": "Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field."
            },
            "enabled": {
              "type": "boolean",
              "description": "Required. Whether ABAC authorization will be enabled in the cluster."
            },
            "clusterId": {
              "type": "string",
              "description": "Deprecated. The name of the cluster to update. This field has been deprecated and replaced by the name field."
            },
            "projectId": {
              "type": "string",
              "description": "Deprecated. The Google Developers Console [project ID or project number](https://support.google.com/cloud/answer/6158840). This field has been deprecated and replaced by the name field."
            }
          },
          "description": "SetLegacyAbacRequest enables or disables the ABAC authorization mechanism for a cluster."
        }
      ]
      outputs: [
        {
          "id": "Operation",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The server-assigned ID for the operation."
            },
            "zone": {
              "type": "string",
              "description": "The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the operation is taking place. This field is deprecated, use location instead."
            },
            "error": {
              "id": "Status",
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The status code, which should be an enum value of google.rpc.Code."
                },
                "details": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  },
                  "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
                },
                "message": {
                  "type": "string",
                  "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                }
              },
              "description": "The error result of the operation in case of failure."
            },
            "detail": {
              "type": "string",
              "description": "Detailed operation progress, if available."
            },
            "status": {
              "enum": [
                "STATUS_UNSPECIFIED",
                "PENDING",
                "RUNNING",
                "DONE",
                "ABORTING"
              ],
              "type": "string",
              "description": "The current status of the operation.",
              "enumDescriptions": [
                "Not set.",
                "The operation has been created.",
                "The operation is currently running.",
                "The operation is done, either cancelled or completed.",
                "The operation is aborting."
              ]
            },
            "endTime": {
              "type": "string",
              "description": "[Output only] The time the operation completed, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "location": {
              "type": "string",
              "description": "[Output only] The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) or [region](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) in which the cluster resides."
            },
            "progress": {
              "id": "OperationProgress",
              "type": "object",
              "readOnly": true,
              "properties": {
                "name": {
                  "type": "string",
                  "description": "A non-parameterized string describing an operation stage. Unset for single-stage operations."
                },
                "stages": {
                  "type": "array",
                  "items": {
                    "id": "OperationProgress",
                    "type": "object",
                    "properties": {},
                    "description": "Information about operation (or operation stage) progress."
                  },
                  "description": "Substages of an operation or a stage."
                },
                "status": {
                  "enum": [
                    "STATUS_UNSPECIFIED",
                    "PENDING",
                    "RUNNING",
                    "DONE",
                    "ABORTING"
                  ],
                  "type": "string",
                  "description": "Status of an operation stage. Unset for single-stage operations.",
                  "enumDescriptions": [
                    "Not set.",
                    "The operation has been created.",
                    "The operation is currently running.",
                    "The operation is done, either cancelled or completed.",
                    "The operation is aborting."
                  ]
                },
                "metrics": {
                  "type": "array",
                  "items": {
                    "id": "Metric",
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Required. Metric name, e.g., \"nodes total\", \"percent done\"."
                      },
                      "intValue": {
                        "type": "string",
                        "format": "int64",
                        "description": "For metrics with integer value."
                      },
                      "doubleValue": {
                        "type": "number",
                        "format": "double",
                        "description": "For metrics with floating point value."
                      },
                      "stringValue": {
                        "type": "string",
                        "description": "For metrics with custom values (ratios, visual progress, etc.)."
                      }
                    },
                    "description": "Progress metric is (string, int|float|string) pair."
                  },
                  "description": "Progress metric bundle, for example: metrics: [{name: \"nodes done\", int_value: 15}, {name: \"nodes total\", int_value: 32}] or metrics: [{name: \"progress\", double_value: 0.56}, {name: \"progress scale\", double_value: 1.0}]"
                }
              },
              "description": "Output only. [Output only] Progress information for an operation."
            },
            "selfLink": {
              "type": "string",
              "description": "Server-defined URL for the resource."
            },
            "startTime": {
              "type": "string",
              "description": "[Output only] The time the operation started, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "targetLink": {
              "type": "string",
              "description": "Server-defined URL for the target of the operation."
            },
            "operationType": {
              "enum": [
                "TYPE_UNSPECIFIED",
                "CREATE_CLUSTER",
                "DELETE_CLUSTER",
                "UPGRADE_MASTER",
                "UPGRADE_NODES",
                "REPAIR_CLUSTER",
                "UPDATE_CLUSTER",
                "CREATE_NODE_POOL",
                "DELETE_NODE_POOL",
                "SET_NODE_POOL_MANAGEMENT",
                "AUTO_REPAIR_NODES",
                "AUTO_UPGRADE_NODES",
                "SET_LABELS",
                "SET_MASTER_AUTH",
                "SET_NODE_POOL_SIZE",
                "SET_NETWORK_POLICY",
                "SET_MAINTENANCE_POLICY"
              ],
              "type": "string",
              "description": "The operation type.",
              "enumDescriptions": [
                "Not set.",
                "Cluster create.",
                "Cluster delete.",
                "A master upgrade.",
                "A node upgrade.",
                "Cluster repair.",
                "Cluster update.",
                "Node pool create.",
                "Node pool delete.",
                "Set node pool management.",
                "Automatic node pool repair.",
                "Automatic node upgrade.",
                "Set labels.",
                "Set/generate master auth materials",
                "Set node pool size.",
                "Updates network policy for a cluster.",
                "Set the maintenance policy."
              ]
            },
            "statusMessage": {
              "type": "string",
              "readOnly": true,
              "description": "Output only. If an error has occurred, a textual description of the error. Deprecated. Use the field error instead."
            },
            "clusterConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current cluster state. Deprecated. Use field error instead."
            },
            "nodepoolConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current node pool state. Deprecated. Use field error instead."
            }
          },
          "description": "This operation resource represents operations that may have happened or are happening on the cluster. All fields are output only."
        }
      ]
  projects.locations.clusters.setLocations:
    description: |-
      Sets the locations for a specific cluster. Deprecated. Use [projects.locations.clusters.update](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters/update) instead.
    versions:
      from: 1.0.0-beta1
    link: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters/setLocations
    example:
      inputs: [
        {
          "id": "SetLocationsRequest",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name (project, location, cluster) of the cluster to set locations. Specified in the format `projects/*/locations/*/clusters/*`."
            },
            "zone": {
              "type": "string",
              "description": "Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field."
            },
            "clusterId": {
              "type": "string",
              "description": "Deprecated. The name of the cluster to upgrade. This field has been deprecated and replaced by the name field."
            },
            "locations": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Required. The desired list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the cluster's nodes should be located. Changing the locations a cluster is in will result in nodes being either created or removed from the cluster, depending on whether locations are being added or removed. This list must always include the cluster's primary zone."
            },
            "projectId": {
              "type": "string",
              "description": "Deprecated. The Google Developers Console [project ID or project number](https://support.google.com/cloud/answer/6158840). This field has been deprecated and replaced by the name field."
            }
          },
          "description": "SetLocationsRequest sets the locations of the cluster."
        }
      ]
      outputs: [
        {
          "id": "Operation",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The server-assigned ID for the operation."
            },
            "zone": {
              "type": "string",
              "description": "The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the operation is taking place. This field is deprecated, use location instead."
            },
            "error": {
              "id": "Status",
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The status code, which should be an enum value of google.rpc.Code."
                },
                "details": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  },
                  "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
                },
                "message": {
                  "type": "string",
                  "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                }
              },
              "description": "The error result of the operation in case of failure."
            },
            "detail": {
              "type": "string",
              "description": "Detailed operation progress, if available."
            },
            "status": {
              "enum": [
                "STATUS_UNSPECIFIED",
                "PENDING",
                "RUNNING",
                "DONE",
                "ABORTING"
              ],
              "type": "string",
              "description": "The current status of the operation.",
              "enumDescriptions": [
                "Not set.",
                "The operation has been created.",
                "The operation is currently running.",
                "The operation is done, either cancelled or completed.",
                "The operation is aborting."
              ]
            },
            "endTime": {
              "type": "string",
              "description": "[Output only] The time the operation completed, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "location": {
              "type": "string",
              "description": "[Output only] The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) or [region](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) in which the cluster resides."
            },
            "progress": {
              "id": "OperationProgress",
              "type": "object",
              "readOnly": true,
              "properties": {
                "name": {
                  "type": "string",
                  "description": "A non-parameterized string describing an operation stage. Unset for single-stage operations."
                },
                "stages": {
                  "type": "array",
                  "items": {
                    "id": "OperationProgress",
                    "type": "object",
                    "properties": {},
                    "description": "Information about operation (or operation stage) progress."
                  },
                  "description": "Substages of an operation or a stage."
                },
                "status": {
                  "enum": [
                    "STATUS_UNSPECIFIED",
                    "PENDING",
                    "RUNNING",
                    "DONE",
                    "ABORTING"
                  ],
                  "type": "string",
                  "description": "Status of an operation stage. Unset for single-stage operations.",
                  "enumDescriptions": [
                    "Not set.",
                    "The operation has been created.",
                    "The operation is currently running.",
                    "The operation is done, either cancelled or completed.",
                    "The operation is aborting."
                  ]
                },
                "metrics": {
                  "type": "array",
                  "items": {
                    "id": "Metric",
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Required. Metric name, e.g., \"nodes total\", \"percent done\"."
                      },
                      "intValue": {
                        "type": "string",
                        "format": "int64",
                        "description": "For metrics with integer value."
                      },
                      "doubleValue": {
                        "type": "number",
                        "format": "double",
                        "description": "For metrics with floating point value."
                      },
                      "stringValue": {
                        "type": "string",
                        "description": "For metrics with custom values (ratios, visual progress, etc.)."
                      }
                    },
                    "description": "Progress metric is (string, int|float|string) pair."
                  },
                  "description": "Progress metric bundle, for example: metrics: [{name: \"nodes done\", int_value: 15}, {name: \"nodes total\", int_value: 32}] or metrics: [{name: \"progress\", double_value: 0.56}, {name: \"progress scale\", double_value: 1.0}]"
                }
              },
              "description": "Output only. [Output only] Progress information for an operation."
            },
            "selfLink": {
              "type": "string",
              "description": "Server-defined URL for the resource."
            },
            "startTime": {
              "type": "string",
              "description": "[Output only] The time the operation started, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "targetLink": {
              "type": "string",
              "description": "Server-defined URL for the target of the operation."
            },
            "operationType": {
              "enum": [
                "TYPE_UNSPECIFIED",
                "CREATE_CLUSTER",
                "DELETE_CLUSTER",
                "UPGRADE_MASTER",
                "UPGRADE_NODES",
                "REPAIR_CLUSTER",
                "UPDATE_CLUSTER",
                "CREATE_NODE_POOL",
                "DELETE_NODE_POOL",
                "SET_NODE_POOL_MANAGEMENT",
                "AUTO_REPAIR_NODES",
                "AUTO_UPGRADE_NODES",
                "SET_LABELS",
                "SET_MASTER_AUTH",
                "SET_NODE_POOL_SIZE",
                "SET_NETWORK_POLICY",
                "SET_MAINTENANCE_POLICY"
              ],
              "type": "string",
              "description": "The operation type.",
              "enumDescriptions": [
                "Not set.",
                "Cluster create.",
                "Cluster delete.",
                "A master upgrade.",
                "A node upgrade.",
                "Cluster repair.",
                "Cluster update.",
                "Node pool create.",
                "Node pool delete.",
                "Set node pool management.",
                "Automatic node pool repair.",
                "Automatic node upgrade.",
                "Set labels.",
                "Set/generate master auth materials",
                "Set node pool size.",
                "Updates network policy for a cluster.",
                "Set the maintenance policy."
              ]
            },
            "statusMessage": {
              "type": "string",
              "readOnly": true,
              "description": "Output only. If an error has occurred, a textual description of the error. Deprecated. Use the field error instead."
            },
            "clusterConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current cluster state. Deprecated. Use field error instead."
            },
            "nodepoolConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current node pool state. Deprecated. Use field error instead."
            }
          },
          "description": "This operation resource represents operations that may have happened or are happening on the cluster. All fields are output only."
        }
      ]
  projects.locations.clusters.setLogging:
    description: |-
      Sets the logging service for a specific cluster.
    versions:
      from: 1.0.0-beta1
    link: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters/setLogging
    example:
      inputs: [
        {
          "id": "SetLoggingServiceRequest",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name (project, location, cluster) of the cluster to set logging. Specified in the format `projects/*/locations/*/clusters/*`."
            },
            "zone": {
              "type": "string",
              "description": "Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field."
            },
            "clusterId": {
              "type": "string",
              "description": "Deprecated. The name of the cluster to upgrade. This field has been deprecated and replaced by the name field."
            },
            "projectId": {
              "type": "string",
              "description": "Deprecated. The Google Developers Console [project ID or project number](https://support.google.com/cloud/answer/6158840). This field has been deprecated and replaced by the name field."
            },
            "loggingService": {
              "type": "string",
              "description": "Required. The logging service the cluster should use to write logs. Currently available options: * `logging.googleapis.com/kubernetes` - The Cloud Logging service with a Kubernetes-native resource model * `logging.googleapis.com` - The legacy Cloud Logging service (no longer available as of GKE 1.15). * `none` - no logs will be exported from the cluster. If left as an empty string,`logging.googleapis.com/kubernetes` will be used for GKE 1.14+ or `logging.googleapis.com` for earlier versions."
            }
          },
          "description": "SetLoggingServiceRequest sets the logging service of a cluster."
        }
      ]
      outputs: [
        {
          "id": "Operation",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The server-assigned ID for the operation."
            },
            "zone": {
              "type": "string",
              "description": "The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the operation is taking place. This field is deprecated, use location instead."
            },
            "error": {
              "id": "Status",
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The status code, which should be an enum value of google.rpc.Code."
                },
                "details": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  },
                  "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
                },
                "message": {
                  "type": "string",
                  "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                }
              },
              "description": "The error result of the operation in case of failure."
            },
            "detail": {
              "type": "string",
              "description": "Detailed operation progress, if available."
            },
            "status": {
              "enum": [
                "STATUS_UNSPECIFIED",
                "PENDING",
                "RUNNING",
                "DONE",
                "ABORTING"
              ],
              "type": "string",
              "description": "The current status of the operation.",
              "enumDescriptions": [
                "Not set.",
                "The operation has been created.",
                "The operation is currently running.",
                "The operation is done, either cancelled or completed.",
                "The operation is aborting."
              ]
            },
            "endTime": {
              "type": "string",
              "description": "[Output only] The time the operation completed, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "location": {
              "type": "string",
              "description": "[Output only] The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) or [region](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) in which the cluster resides."
            },
            "progress": {
              "id": "OperationProgress",
              "type": "object",
              "readOnly": true,
              "properties": {
                "name": {
                  "type": "string",
                  "description": "A non-parameterized string describing an operation stage. Unset for single-stage operations."
                },
                "stages": {
                  "type": "array",
                  "items": {
                    "id": "OperationProgress",
                    "type": "object",
                    "properties": {},
                    "description": "Information about operation (or operation stage) progress."
                  },
                  "description": "Substages of an operation or a stage."
                },
                "status": {
                  "enum": [
                    "STATUS_UNSPECIFIED",
                    "PENDING",
                    "RUNNING",
                    "DONE",
                    "ABORTING"
                  ],
                  "type": "string",
                  "description": "Status of an operation stage. Unset for single-stage operations.",
                  "enumDescriptions": [
                    "Not set.",
                    "The operation has been created.",
                    "The operation is currently running.",
                    "The operation is done, either cancelled or completed.",
                    "The operation is aborting."
                  ]
                },
                "metrics": {
                  "type": "array",
                  "items": {
                    "id": "Metric",
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Required. Metric name, e.g., \"nodes total\", \"percent done\"."
                      },
                      "intValue": {
                        "type": "string",
                        "format": "int64",
                        "description": "For metrics with integer value."
                      },
                      "doubleValue": {
                        "type": "number",
                        "format": "double",
                        "description": "For metrics with floating point value."
                      },
                      "stringValue": {
                        "type": "string",
                        "description": "For metrics with custom values (ratios, visual progress, etc.)."
                      }
                    },
                    "description": "Progress metric is (string, int|float|string) pair."
                  },
                  "description": "Progress metric bundle, for example: metrics: [{name: \"nodes done\", int_value: 15}, {name: \"nodes total\", int_value: 32}] or metrics: [{name: \"progress\", double_value: 0.56}, {name: \"progress scale\", double_value: 1.0}]"
                }
              },
              "description": "Output only. [Output only] Progress information for an operation."
            },
            "selfLink": {
              "type": "string",
              "description": "Server-defined URL for the resource."
            },
            "startTime": {
              "type": "string",
              "description": "[Output only] The time the operation started, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "targetLink": {
              "type": "string",
              "description": "Server-defined URL for the target of the operation."
            },
            "operationType": {
              "enum": [
                "TYPE_UNSPECIFIED",
                "CREATE_CLUSTER",
                "DELETE_CLUSTER",
                "UPGRADE_MASTER",
                "UPGRADE_NODES",
                "REPAIR_CLUSTER",
                "UPDATE_CLUSTER",
                "CREATE_NODE_POOL",
                "DELETE_NODE_POOL",
                "SET_NODE_POOL_MANAGEMENT",
                "AUTO_REPAIR_NODES",
                "AUTO_UPGRADE_NODES",
                "SET_LABELS",
                "SET_MASTER_AUTH",
                "SET_NODE_POOL_SIZE",
                "SET_NETWORK_POLICY",
                "SET_MAINTENANCE_POLICY"
              ],
              "type": "string",
              "description": "The operation type.",
              "enumDescriptions": [
                "Not set.",
                "Cluster create.",
                "Cluster delete.",
                "A master upgrade.",
                "A node upgrade.",
                "Cluster repair.",
                "Cluster update.",
                "Node pool create.",
                "Node pool delete.",
                "Set node pool management.",
                "Automatic node pool repair.",
                "Automatic node upgrade.",
                "Set labels.",
                "Set/generate master auth materials",
                "Set node pool size.",
                "Updates network policy for a cluster.",
                "Set the maintenance policy."
              ]
            },
            "statusMessage": {
              "type": "string",
              "readOnly": true,
              "description": "Output only. If an error has occurred, a textual description of the error. Deprecated. Use the field error instead."
            },
            "clusterConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current cluster state. Deprecated. Use field error instead."
            },
            "nodepoolConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current node pool state. Deprecated. Use field error instead."
            }
          },
          "description": "This operation resource represents operations that may have happened or are happening on the cluster. All fields are output only."
        }
      ]
  projects.locations.clusters.setMaintenancePolicy:
    description: |-
      Sets the maintenance policy for a cluster.
    versions:
      from: 1.0.0-beta1
    link: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters/setMaintenancePolicy
    example:
      inputs: [
        {
          "id": "SetMaintenancePolicyRequest",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name (project, location, cluster id) of the cluster to set maintenance policy. Specified in the format `projects/*/locations/*/clusters/*`."
            },
            "zone": {
              "type": "string",
              "description": "Required. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides."
            },
            "clusterId": {
              "type": "string",
              "description": "Required. The name of the cluster to update."
            },
            "projectId": {
              "type": "string",
              "description": "Required. The Google Developers Console [project ID or project number](https://support.google.com/cloud/answer/6158840)."
            },
            "maintenancePolicy": {
              "id": "MaintenancePolicy",
              "type": "object",
              "properties": {
                "window": {
                  "id": "MaintenanceWindow",
                  "type": "object",
                  "properties": {
                    "recurringWindow": {
                      "id": "RecurringTimeWindow",
                      "type": "object",
                      "properties": {
                        "window": {
                          "id": "TimeWindow",
                          "type": "object",
                          "properties": {
                            "endTime": {
                              "type": "string",
                              "format": "google-datetime",
                              "description": "The time that the window ends. The end time should take place after the start time."
                            },
                            "startTime": {
                              "type": "string",
                              "format": "google-datetime",
                              "description": "The time that the window first starts."
                            }
                          },
                          "description": "Represents an arbitrary window of time."
                        },
                        "recurrence": {
                          "type": "string",
                          "description": "An RRULE (https://tools.ietf.org/html/rfc5545#section-3.8.5.3) for how this window reccurs. They go on for the span of time between the start and end time. For example, to have something repeat every weekday, you'd use: `FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR` To repeat some window daily (equivalent to the DailyMaintenanceWindow): `FREQ=DAILY` For the first weekend of every month: `FREQ=MONTHLY;BYSETPOS=1;BYDAY=SA,SU` This specifies how frequently the window starts. Eg, if you wanted to have a 9-5 UTC-4 window every weekday, you'd use something like: ``` start time = 2019-01-01T09:00:00-0400 end time = 2019-01-01T17:00:00-0400 recurrence = FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR ``` Windows can span multiple days. Eg, to make the window encompass every weekend from midnight Saturday till the last minute of Sunday UTC: ``` start time = 2019-01-05T00:00:00Z end time = 2019-01-07T23:59:00Z recurrence = FREQ=WEEKLY;BYDAY=SA ``` Note the start and end time's specific dates are largely arbitrary except to specify duration of the window and when it first starts. The FREQ values of HOURLY, MINUTELY, and SECONDLY are not supported."
                        }
                      },
                      "description": "RecurringWindow specifies some number of recurring time periods for maintenance to occur. The time windows may be overlapping. If no maintenance windows are set, maintenance can occur at any time."
                    },
                    "maintenanceExclusions": {
                      "type": "object",
                      "description": "Exceptions to maintenance window. Non-emergency maintenance should not occur in these windows.",
                      "additionalProperties": {
                        "id": "TimeWindow",
                        "type": "object",
                        "properties": {
                          "endTime": {
                            "type": "string",
                            "format": "google-datetime",
                            "description": "The time that the window ends. The end time should take place after the start time."
                          },
                          "startTime": {
                            "type": "string",
                            "format": "google-datetime",
                            "description": "The time that the window first starts."
                          }
                        },
                        "description": "Represents an arbitrary window of time."
                      }
                    },
                    "dailyMaintenanceWindow": {
                      "id": "DailyMaintenanceWindow",
                      "type": "object",
                      "properties": {
                        "duration": {
                          "type": "string",
                          "description": "[Output only] Duration of the time window, automatically chosen to be smallest possible in the given scenario. Duration will be in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format \"PTnHnMnS\"."
                        },
                        "startTime": {
                          "type": "string",
                          "description": "Time within the maintenance window to start the maintenance operations. Time format should be in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format \"HH:MM\", where HH : [00-23] and MM : [00-59] GMT."
                        }
                      },
                      "description": "DailyMaintenanceWindow specifies a daily maintenance operation window."
                    }
                  },
                  "description": "Specifies the maintenance window in which maintenance may be performed."
                },
                "resourceVersion": {
                  "type": "string",
                  "description": "A hash identifying the version of this policy, so that updates to fields of the policy won't accidentally undo intermediate changes (and so that users of the API unaware of some fields won't accidentally remove other fields). Make a `get()` request to the cluster to get the current resource version and include it with requests to set the policy."
                }
              },
              "description": "Required. The maintenance policy to be set for the cluster. An empty field clears the existing maintenance policy."
            }
          },
          "description": "SetMaintenancePolicyRequest sets the maintenance policy for a cluster."
        }
      ]
      outputs: [
        {
          "id": "Operation",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The server-assigned ID for the operation."
            },
            "zone": {
              "type": "string",
              "description": "The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the operation is taking place. This field is deprecated, use location instead."
            },
            "error": {
              "id": "Status",
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The status code, which should be an enum value of google.rpc.Code."
                },
                "details": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  },
                  "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
                },
                "message": {
                  "type": "string",
                  "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                }
              },
              "description": "The error result of the operation in case of failure."
            },
            "detail": {
              "type": "string",
              "description": "Detailed operation progress, if available."
            },
            "status": {
              "enum": [
                "STATUS_UNSPECIFIED",
                "PENDING",
                "RUNNING",
                "DONE",
                "ABORTING"
              ],
              "type": "string",
              "description": "The current status of the operation.",
              "enumDescriptions": [
                "Not set.",
                "The operation has been created.",
                "The operation is currently running.",
                "The operation is done, either cancelled or completed.",
                "The operation is aborting."
              ]
            },
            "endTime": {
              "type": "string",
              "description": "[Output only] The time the operation completed, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "location": {
              "type": "string",
              "description": "[Output only] The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) or [region](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) in which the cluster resides."
            },
            "progress": {
              "id": "OperationProgress",
              "type": "object",
              "readOnly": true,
              "properties": {
                "name": {
                  "type": "string",
                  "description": "A non-parameterized string describing an operation stage. Unset for single-stage operations."
                },
                "stages": {
                  "type": "array",
                  "items": {
                    "id": "OperationProgress",
                    "type": "object",
                    "properties": {},
                    "description": "Information about operation (or operation stage) progress."
                  },
                  "description": "Substages of an operation or a stage."
                },
                "status": {
                  "enum": [
                    "STATUS_UNSPECIFIED",
                    "PENDING",
                    "RUNNING",
                    "DONE",
                    "ABORTING"
                  ],
                  "type": "string",
                  "description": "Status of an operation stage. Unset for single-stage operations.",
                  "enumDescriptions": [
                    "Not set.",
                    "The operation has been created.",
                    "The operation is currently running.",
                    "The operation is done, either cancelled or completed.",
                    "The operation is aborting."
                  ]
                },
                "metrics": {
                  "type": "array",
                  "items": {
                    "id": "Metric",
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Required. Metric name, e.g., \"nodes total\", \"percent done\"."
                      },
                      "intValue": {
                        "type": "string",
                        "format": "int64",
                        "description": "For metrics with integer value."
                      },
                      "doubleValue": {
                        "type": "number",
                        "format": "double",
                        "description": "For metrics with floating point value."
                      },
                      "stringValue": {
                        "type": "string",
                        "description": "For metrics with custom values (ratios, visual progress, etc.)."
                      }
                    },
                    "description": "Progress metric is (string, int|float|string) pair."
                  },
                  "description": "Progress metric bundle, for example: metrics: [{name: \"nodes done\", int_value: 15}, {name: \"nodes total\", int_value: 32}] or metrics: [{name: \"progress\", double_value: 0.56}, {name: \"progress scale\", double_value: 1.0}]"
                }
              },
              "description": "Output only. [Output only] Progress information for an operation."
            },
            "selfLink": {
              "type": "string",
              "description": "Server-defined URL for the resource."
            },
            "startTime": {
              "type": "string",
              "description": "[Output only] The time the operation started, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "targetLink": {
              "type": "string",
              "description": "Server-defined URL for the target of the operation."
            },
            "operationType": {
              "enum": [
                "TYPE_UNSPECIFIED",
                "CREATE_CLUSTER",
                "DELETE_CLUSTER",
                "UPGRADE_MASTER",
                "UPGRADE_NODES",
                "REPAIR_CLUSTER",
                "UPDATE_CLUSTER",
                "CREATE_NODE_POOL",
                "DELETE_NODE_POOL",
                "SET_NODE_POOL_MANAGEMENT",
                "AUTO_REPAIR_NODES",
                "AUTO_UPGRADE_NODES",
                "SET_LABELS",
                "SET_MASTER_AUTH",
                "SET_NODE_POOL_SIZE",
                "SET_NETWORK_POLICY",
                "SET_MAINTENANCE_POLICY"
              ],
              "type": "string",
              "description": "The operation type.",
              "enumDescriptions": [
                "Not set.",
                "Cluster create.",
                "Cluster delete.",
                "A master upgrade.",
                "A node upgrade.",
                "Cluster repair.",
                "Cluster update.",
                "Node pool create.",
                "Node pool delete.",
                "Set node pool management.",
                "Automatic node pool repair.",
                "Automatic node upgrade.",
                "Set labels.",
                "Set/generate master auth materials",
                "Set node pool size.",
                "Updates network policy for a cluster.",
                "Set the maintenance policy."
              ]
            },
            "statusMessage": {
              "type": "string",
              "readOnly": true,
              "description": "Output only. If an error has occurred, a textual description of the error. Deprecated. Use the field error instead."
            },
            "clusterConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current cluster state. Deprecated. Use field error instead."
            },
            "nodepoolConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current node pool state. Deprecated. Use field error instead."
            }
          },
          "description": "This operation resource represents operations that may have happened or are happening on the cluster. All fields are output only."
        }
      ]
  projects.locations.clusters.setMasterAuth:
    description: |-
      Sets master auth materials. Currently supports changing the admin password or a specific cluster, either via password generation or explicitly setting the password.
    versions:
      from: 1.0.0-beta1
    link: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters/setMasterAuth
    example:
      inputs: [
        {
          "id": "SetMasterAuthRequest",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name (project, location, cluster) of the cluster to set auth. Specified in the format `projects/*/locations/*/clusters/*`."
            },
            "zone": {
              "type": "string",
              "description": "Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field."
            },
            "action": {
              "enum": [
                "UNKNOWN",
                "SET_PASSWORD",
                "GENERATE_PASSWORD",
                "SET_USERNAME"
              ],
              "type": "string",
              "description": "Required. The exact form of action to be taken on the master auth.",
              "enumDescriptions": [
                "Operation is unknown and will error out.",
                "Set the password to a user generated value.",
                "Generate a new password and set it to that.",
                "Set the username. If an empty username is provided, basic authentication is disabled for the cluster. If a non-empty username is provided, basic authentication is enabled, with either a provided password or a generated one."
              ]
            },
            "update": {
              "id": "MasterAuth",
              "type": "object",
              "properties": {
                "password": {
                  "type": "string",
                  "description": "The password to use for HTTP basic authentication to the master endpoint. Because the master endpoint is open to the Internet, you should create a strong password. If a password is provided for cluster creation, username must be non-empty. Warning: basic authentication is deprecated, and will be removed in GKE control plane versions 1.19 and newer. For a list of recommended authentication methods, see: https://cloud.google.com/kubernetes-engine/docs/how-to/api-server-authentication"
                },
                "username": {
                  "type": "string",
                  "description": "The username to use for HTTP basic authentication to the master endpoint. For clusters v1.6.0 and later, basic authentication can be disabled by leaving username unspecified (or setting it to the empty string). Warning: basic authentication is deprecated, and will be removed in GKE control plane versions 1.19 and newer. For a list of recommended authentication methods, see: https://cloud.google.com/kubernetes-engine/docs/how-to/api-server-authentication"
                },
                "clientKey": {
                  "type": "string",
                  "description": "[Output only] Base64-encoded private key used by clients to authenticate to the cluster endpoint."
                },
                "clientCertificate": {
                  "type": "string",
                  "description": "[Output only] Base64-encoded public certificate used by clients to authenticate to the cluster endpoint."
                },
                "clusterCaCertificate": {
                  "type": "string",
                  "description": "[Output only] Base64-encoded public certificate that is the root of trust for the cluster."
                },
                "clientCertificateConfig": {
                  "id": "ClientCertificateConfig",
                  "type": "object",
                  "properties": {
                    "issueClientCertificate": {
                      "type": "boolean",
                      "description": "Issue a client certificate."
                    }
                  },
                  "description": "Configuration for client certificate authentication on the cluster. For clusters before v1.12, if no configuration is specified, a client certificate is issued."
                }
              },
              "description": "Required. A description of the update."
            },
            "clusterId": {
              "type": "string",
              "description": "Deprecated. The name of the cluster to upgrade. This field has been deprecated and replaced by the name field."
            },
            "projectId": {
              "type": "string",
              "description": "Deprecated. The Google Developers Console [project ID or project number](https://support.google.com/cloud/answer/6158840). This field has been deprecated and replaced by the name field."
            }
          },
          "description": "SetMasterAuthRequest updates the admin password of a cluster."
        }
      ]
      outputs: [
        {
          "id": "Operation",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The server-assigned ID for the operation."
            },
            "zone": {
              "type": "string",
              "description": "The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the operation is taking place. This field is deprecated, use location instead."
            },
            "error": {
              "id": "Status",
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The status code, which should be an enum value of google.rpc.Code."
                },
                "details": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  },
                  "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
                },
                "message": {
                  "type": "string",
                  "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                }
              },
              "description": "The error result of the operation in case of failure."
            },
            "detail": {
              "type": "string",
              "description": "Detailed operation progress, if available."
            },
            "status": {
              "enum": [
                "STATUS_UNSPECIFIED",
                "PENDING",
                "RUNNING",
                "DONE",
                "ABORTING"
              ],
              "type": "string",
              "description": "The current status of the operation.",
              "enumDescriptions": [
                "Not set.",
                "The operation has been created.",
                "The operation is currently running.",
                "The operation is done, either cancelled or completed.",
                "The operation is aborting."
              ]
            },
            "endTime": {
              "type": "string",
              "description": "[Output only] The time the operation completed, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "location": {
              "type": "string",
              "description": "[Output only] The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) or [region](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) in which the cluster resides."
            },
            "progress": {
              "id": "OperationProgress",
              "type": "object",
              "readOnly": true,
              "properties": {
                "name": {
                  "type": "string",
                  "description": "A non-parameterized string describing an operation stage. Unset for single-stage operations."
                },
                "stages": {
                  "type": "array",
                  "items": {
                    "id": "OperationProgress",
                    "type": "object",
                    "properties": {},
                    "description": "Information about operation (or operation stage) progress."
                  },
                  "description": "Substages of an operation or a stage."
                },
                "status": {
                  "enum": [
                    "STATUS_UNSPECIFIED",
                    "PENDING",
                    "RUNNING",
                    "DONE",
                    "ABORTING"
                  ],
                  "type": "string",
                  "description": "Status of an operation stage. Unset for single-stage operations.",
                  "enumDescriptions": [
                    "Not set.",
                    "The operation has been created.",
                    "The operation is currently running.",
                    "The operation is done, either cancelled or completed.",
                    "The operation is aborting."
                  ]
                },
                "metrics": {
                  "type": "array",
                  "items": {
                    "id": "Metric",
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Required. Metric name, e.g., \"nodes total\", \"percent done\"."
                      },
                      "intValue": {
                        "type": "string",
                        "format": "int64",
                        "description": "For metrics with integer value."
                      },
                      "doubleValue": {
                        "type": "number",
                        "format": "double",
                        "description": "For metrics with floating point value."
                      },
                      "stringValue": {
                        "type": "string",
                        "description": "For metrics with custom values (ratios, visual progress, etc.)."
                      }
                    },
                    "description": "Progress metric is (string, int|float|string) pair."
                  },
                  "description": "Progress metric bundle, for example: metrics: [{name: \"nodes done\", int_value: 15}, {name: \"nodes total\", int_value: 32}] or metrics: [{name: \"progress\", double_value: 0.56}, {name: \"progress scale\", double_value: 1.0}]"
                }
              },
              "description": "Output only. [Output only] Progress information for an operation."
            },
            "selfLink": {
              "type": "string",
              "description": "Server-defined URL for the resource."
            },
            "startTime": {
              "type": "string",
              "description": "[Output only] The time the operation started, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "targetLink": {
              "type": "string",
              "description": "Server-defined URL for the target of the operation."
            },
            "operationType": {
              "enum": [
                "TYPE_UNSPECIFIED",
                "CREATE_CLUSTER",
                "DELETE_CLUSTER",
                "UPGRADE_MASTER",
                "UPGRADE_NODES",
                "REPAIR_CLUSTER",
                "UPDATE_CLUSTER",
                "CREATE_NODE_POOL",
                "DELETE_NODE_POOL",
                "SET_NODE_POOL_MANAGEMENT",
                "AUTO_REPAIR_NODES",
                "AUTO_UPGRADE_NODES",
                "SET_LABELS",
                "SET_MASTER_AUTH",
                "SET_NODE_POOL_SIZE",
                "SET_NETWORK_POLICY",
                "SET_MAINTENANCE_POLICY"
              ],
              "type": "string",
              "description": "The operation type.",
              "enumDescriptions": [
                "Not set.",
                "Cluster create.",
                "Cluster delete.",
                "A master upgrade.",
                "A node upgrade.",
                "Cluster repair.",
                "Cluster update.",
                "Node pool create.",
                "Node pool delete.",
                "Set node pool management.",
                "Automatic node pool repair.",
                "Automatic node upgrade.",
                "Set labels.",
                "Set/generate master auth materials",
                "Set node pool size.",
                "Updates network policy for a cluster.",
                "Set the maintenance policy."
              ]
            },
            "statusMessage": {
              "type": "string",
              "readOnly": true,
              "description": "Output only. If an error has occurred, a textual description of the error. Deprecated. Use the field error instead."
            },
            "clusterConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current cluster state. Deprecated. Use field error instead."
            },
            "nodepoolConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current node pool state. Deprecated. Use field error instead."
            }
          },
          "description": "This operation resource represents operations that may have happened or are happening on the cluster. All fields are output only."
        }
      ]
  projects.locations.clusters.setMonitoring:
    description: |-
      Sets the monitoring service for a specific cluster.
    versions:
      from: 1.0.0-beta1
    link: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters/setMonitoring
    example:
      inputs: [
        {
          "id": "SetMonitoringServiceRequest",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name (project, location, cluster) of the cluster to set monitoring. Specified in the format `projects/*/locations/*/clusters/*`."
            },
            "zone": {
              "type": "string",
              "description": "Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field."
            },
            "clusterId": {
              "type": "string",
              "description": "Deprecated. The name of the cluster to upgrade. This field has been deprecated and replaced by the name field."
            },
            "projectId": {
              "type": "string",
              "description": "Deprecated. The Google Developers Console [project ID or project number](https://support.google.com/cloud/answer/6158840). This field has been deprecated and replaced by the name field."
            },
            "monitoringService": {
              "type": "string",
              "description": "Required. The monitoring service the cluster should use to write metrics. Currently available options: * \"monitoring.googleapis.com/kubernetes\" - The Cloud Monitoring service with a Kubernetes-native resource model * `monitoring.googleapis.com` - The legacy Cloud Monitoring service (no longer available as of GKE 1.15). * `none` - No metrics will be exported from the cluster. If left as an empty string,`monitoring.googleapis.com/kubernetes` will be used for GKE 1.14+ or `monitoring.googleapis.com` for earlier versions."
            }
          },
          "description": "SetMonitoringServiceRequest sets the monitoring service of a cluster."
        }
      ]
      outputs: [
        {
          "id": "Operation",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The server-assigned ID for the operation."
            },
            "zone": {
              "type": "string",
              "description": "The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the operation is taking place. This field is deprecated, use location instead."
            },
            "error": {
              "id": "Status",
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The status code, which should be an enum value of google.rpc.Code."
                },
                "details": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  },
                  "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
                },
                "message": {
                  "type": "string",
                  "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                }
              },
              "description": "The error result of the operation in case of failure."
            },
            "detail": {
              "type": "string",
              "description": "Detailed operation progress, if available."
            },
            "status": {
              "enum": [
                "STATUS_UNSPECIFIED",
                "PENDING",
                "RUNNING",
                "DONE",
                "ABORTING"
              ],
              "type": "string",
              "description": "The current status of the operation.",
              "enumDescriptions": [
                "Not set.",
                "The operation has been created.",
                "The operation is currently running.",
                "The operation is done, either cancelled or completed.",
                "The operation is aborting."
              ]
            },
            "endTime": {
              "type": "string",
              "description": "[Output only] The time the operation completed, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "location": {
              "type": "string",
              "description": "[Output only] The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) or [region](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) in which the cluster resides."
            },
            "progress": {
              "id": "OperationProgress",
              "type": "object",
              "readOnly": true,
              "properties": {
                "name": {
                  "type": "string",
                  "description": "A non-parameterized string describing an operation stage. Unset for single-stage operations."
                },
                "stages": {
                  "type": "array",
                  "items": {
                    "id": "OperationProgress",
                    "type": "object",
                    "properties": {},
                    "description": "Information about operation (or operation stage) progress."
                  },
                  "description": "Substages of an operation or a stage."
                },
                "status": {
                  "enum": [
                    "STATUS_UNSPECIFIED",
                    "PENDING",
                    "RUNNING",
                    "DONE",
                    "ABORTING"
                  ],
                  "type": "string",
                  "description": "Status of an operation stage. Unset for single-stage operations.",
                  "enumDescriptions": [
                    "Not set.",
                    "The operation has been created.",
                    "The operation is currently running.",
                    "The operation is done, either cancelled or completed.",
                    "The operation is aborting."
                  ]
                },
                "metrics": {
                  "type": "array",
                  "items": {
                    "id": "Metric",
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Required. Metric name, e.g., \"nodes total\", \"percent done\"."
                      },
                      "intValue": {
                        "type": "string",
                        "format": "int64",
                        "description": "For metrics with integer value."
                      },
                      "doubleValue": {
                        "type": "number",
                        "format": "double",
                        "description": "For metrics with floating point value."
                      },
                      "stringValue": {
                        "type": "string",
                        "description": "For metrics with custom values (ratios, visual progress, etc.)."
                      }
                    },
                    "description": "Progress metric is (string, int|float|string) pair."
                  },
                  "description": "Progress metric bundle, for example: metrics: [{name: \"nodes done\", int_value: 15}, {name: \"nodes total\", int_value: 32}] or metrics: [{name: \"progress\", double_value: 0.56}, {name: \"progress scale\", double_value: 1.0}]"
                }
              },
              "description": "Output only. [Output only] Progress information for an operation."
            },
            "selfLink": {
              "type": "string",
              "description": "Server-defined URL for the resource."
            },
            "startTime": {
              "type": "string",
              "description": "[Output only] The time the operation started, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "targetLink": {
              "type": "string",
              "description": "Server-defined URL for the target of the operation."
            },
            "operationType": {
              "enum": [
                "TYPE_UNSPECIFIED",
                "CREATE_CLUSTER",
                "DELETE_CLUSTER",
                "UPGRADE_MASTER",
                "UPGRADE_NODES",
                "REPAIR_CLUSTER",
                "UPDATE_CLUSTER",
                "CREATE_NODE_POOL",
                "DELETE_NODE_POOL",
                "SET_NODE_POOL_MANAGEMENT",
                "AUTO_REPAIR_NODES",
                "AUTO_UPGRADE_NODES",
                "SET_LABELS",
                "SET_MASTER_AUTH",
                "SET_NODE_POOL_SIZE",
                "SET_NETWORK_POLICY",
                "SET_MAINTENANCE_POLICY"
              ],
              "type": "string",
              "description": "The operation type.",
              "enumDescriptions": [
                "Not set.",
                "Cluster create.",
                "Cluster delete.",
                "A master upgrade.",
                "A node upgrade.",
                "Cluster repair.",
                "Cluster update.",
                "Node pool create.",
                "Node pool delete.",
                "Set node pool management.",
                "Automatic node pool repair.",
                "Automatic node upgrade.",
                "Set labels.",
                "Set/generate master auth materials",
                "Set node pool size.",
                "Updates network policy for a cluster.",
                "Set the maintenance policy."
              ]
            },
            "statusMessage": {
              "type": "string",
              "readOnly": true,
              "description": "Output only. If an error has occurred, a textual description of the error. Deprecated. Use the field error instead."
            },
            "clusterConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current cluster state. Deprecated. Use field error instead."
            },
            "nodepoolConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current node pool state. Deprecated. Use field error instead."
            }
          },
          "description": "This operation resource represents operations that may have happened or are happening on the cluster. All fields are output only."
        }
      ]
  projects.locations.clusters.setNetworkPolicy:
    description: |-
      Enables or disables Network Policy for a cluster.
    versions:
      from: 1.0.0-beta1
    link: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters/setNetworkPolicy
    example:
      inputs: [
        {
          "id": "SetNetworkPolicyRequest",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name (project, location, cluster id) of the cluster to set networking policy. Specified in the format `projects/*/locations/*/clusters/*`."
            },
            "zone": {
              "type": "string",
              "description": "Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field."
            },
            "clusterId": {
              "type": "string",
              "description": "Deprecated. The name of the cluster. This field has been deprecated and replaced by the name field."
            },
            "projectId": {
              "type": "string",
              "description": "Deprecated. The Google Developers Console [project ID or project number](https://developers.google.com/console/help/new/#projectnumber). This field has been deprecated and replaced by the name field."
            },
            "networkPolicy": {
              "id": "NetworkPolicy",
              "type": "object",
              "properties": {
                "enabled": {
                  "type": "boolean",
                  "description": "Whether network policy is enabled on the cluster."
                },
                "provider": {
                  "enum": [
                    "PROVIDER_UNSPECIFIED",
                    "CALICO"
                  ],
                  "type": "string",
                  "description": "The selected network policy provider.",
                  "enumDescriptions": [
                    "Not set",
                    "Tigera (Calico Felix)."
                  ]
                }
              },
              "description": "Required. Configuration options for the NetworkPolicy feature."
            }
          },
          "description": "SetNetworkPolicyRequest enables/disables network policy for a cluster."
        }
      ]
      outputs: [
        {
          "id": "Operation",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The server-assigned ID for the operation."
            },
            "zone": {
              "type": "string",
              "description": "The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the operation is taking place. This field is deprecated, use location instead."
            },
            "error": {
              "id": "Status",
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The status code, which should be an enum value of google.rpc.Code."
                },
                "details": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  },
                  "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
                },
                "message": {
                  "type": "string",
                  "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                }
              },
              "description": "The error result of the operation in case of failure."
            },
            "detail": {
              "type": "string",
              "description": "Detailed operation progress, if available."
            },
            "status": {
              "enum": [
                "STATUS_UNSPECIFIED",
                "PENDING",
                "RUNNING",
                "DONE",
                "ABORTING"
              ],
              "type": "string",
              "description": "The current status of the operation.",
              "enumDescriptions": [
                "Not set.",
                "The operation has been created.",
                "The operation is currently running.",
                "The operation is done, either cancelled or completed.",
                "The operation is aborting."
              ]
            },
            "endTime": {
              "type": "string",
              "description": "[Output only] The time the operation completed, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "location": {
              "type": "string",
              "description": "[Output only] The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) or [region](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) in which the cluster resides."
            },
            "progress": {
              "id": "OperationProgress",
              "type": "object",
              "readOnly": true,
              "properties": {
                "name": {
                  "type": "string",
                  "description": "A non-parameterized string describing an operation stage. Unset for single-stage operations."
                },
                "stages": {
                  "type": "array",
                  "items": {
                    "id": "OperationProgress",
                    "type": "object",
                    "properties": {},
                    "description": "Information about operation (or operation stage) progress."
                  },
                  "description": "Substages of an operation or a stage."
                },
                "status": {
                  "enum": [
                    "STATUS_UNSPECIFIED",
                    "PENDING",
                    "RUNNING",
                    "DONE",
                    "ABORTING"
                  ],
                  "type": "string",
                  "description": "Status of an operation stage. Unset for single-stage operations.",
                  "enumDescriptions": [
                    "Not set.",
                    "The operation has been created.",
                    "The operation is currently running.",
                    "The operation is done, either cancelled or completed.",
                    "The operation is aborting."
                  ]
                },
                "metrics": {
                  "type": "array",
                  "items": {
                    "id": "Metric",
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Required. Metric name, e.g., \"nodes total\", \"percent done\"."
                      },
                      "intValue": {
                        "type": "string",
                        "format": "int64",
                        "description": "For metrics with integer value."
                      },
                      "doubleValue": {
                        "type": "number",
                        "format": "double",
                        "description": "For metrics with floating point value."
                      },
                      "stringValue": {
                        "type": "string",
                        "description": "For metrics with custom values (ratios, visual progress, etc.)."
                      }
                    },
                    "description": "Progress metric is (string, int|float|string) pair."
                  },
                  "description": "Progress metric bundle, for example: metrics: [{name: \"nodes done\", int_value: 15}, {name: \"nodes total\", int_value: 32}] or metrics: [{name: \"progress\", double_value: 0.56}, {name: \"progress scale\", double_value: 1.0}]"
                }
              },
              "description": "Output only. [Output only] Progress information for an operation."
            },
            "selfLink": {
              "type": "string",
              "description": "Server-defined URL for the resource."
            },
            "startTime": {
              "type": "string",
              "description": "[Output only] The time the operation started, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "targetLink": {
              "type": "string",
              "description": "Server-defined URL for the target of the operation."
            },
            "operationType": {
              "enum": [
                "TYPE_UNSPECIFIED",
                "CREATE_CLUSTER",
                "DELETE_CLUSTER",
                "UPGRADE_MASTER",
                "UPGRADE_NODES",
                "REPAIR_CLUSTER",
                "UPDATE_CLUSTER",
                "CREATE_NODE_POOL",
                "DELETE_NODE_POOL",
                "SET_NODE_POOL_MANAGEMENT",
                "AUTO_REPAIR_NODES",
                "AUTO_UPGRADE_NODES",
                "SET_LABELS",
                "SET_MASTER_AUTH",
                "SET_NODE_POOL_SIZE",
                "SET_NETWORK_POLICY",
                "SET_MAINTENANCE_POLICY"
              ],
              "type": "string",
              "description": "The operation type.",
              "enumDescriptions": [
                "Not set.",
                "Cluster create.",
                "Cluster delete.",
                "A master upgrade.",
                "A node upgrade.",
                "Cluster repair.",
                "Cluster update.",
                "Node pool create.",
                "Node pool delete.",
                "Set node pool management.",
                "Automatic node pool repair.",
                "Automatic node upgrade.",
                "Set labels.",
                "Set/generate master auth materials",
                "Set node pool size.",
                "Updates network policy for a cluster.",
                "Set the maintenance policy."
              ]
            },
            "statusMessage": {
              "type": "string",
              "readOnly": true,
              "description": "Output only. If an error has occurred, a textual description of the error. Deprecated. Use the field error instead."
            },
            "clusterConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current cluster state. Deprecated. Use field error instead."
            },
            "nodepoolConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current node pool state. Deprecated. Use field error instead."
            }
          },
          "description": "This operation resource represents operations that may have happened or are happening on the cluster. All fields are output only."
        }
      ]
  projects.locations.clusters.setResourceLabels:
    description: |-
      Sets labels on a cluster.
    versions:
      from: 1.0.0-beta1
    link: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters/setResourceLabels
    example:
      inputs: [
        {
          "id": "SetLabelsRequest",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name (project, location, cluster id) of the cluster to set labels. Specified in the format `projects/*/locations/*/clusters/*`."
            },
            "zone": {
              "type": "string",
              "description": "Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field."
            },
            "clusterId": {
              "type": "string",
              "description": "Deprecated. The name of the cluster. This field has been deprecated and replaced by the name field."
            },
            "projectId": {
              "type": "string",
              "description": "Deprecated. The Google Developers Console [project ID or project number](https://developers.google.com/console/help/new/#projectnumber). This field has been deprecated and replaced by the name field."
            },
            "resourceLabels": {
              "type": "object",
              "description": "Required. The labels to set for that cluster.",
              "additionalProperties": {
                "type": "string"
              }
            },
            "labelFingerprint": {
              "type": "string",
              "description": "Required. The fingerprint of the previous set of labels for this resource, used to detect conflicts. The fingerprint is initially generated by Kubernetes Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash when updating or changing labels. Make a `get()` request to the resource to get the latest fingerprint."
            }
          },
          "description": "SetLabelsRequest sets the Google Cloud Platform labels on a Google Container Engine cluster, which will in turn set them for Google Compute Engine resources used by that cluster"
        }
      ]
      outputs: [
        {
          "id": "Operation",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The server-assigned ID for the operation."
            },
            "zone": {
              "type": "string",
              "description": "The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the operation is taking place. This field is deprecated, use location instead."
            },
            "error": {
              "id": "Status",
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The status code, which should be an enum value of google.rpc.Code."
                },
                "details": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  },
                  "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
                },
                "message": {
                  "type": "string",
                  "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                }
              },
              "description": "The error result of the operation in case of failure."
            },
            "detail": {
              "type": "string",
              "description": "Detailed operation progress, if available."
            },
            "status": {
              "enum": [
                "STATUS_UNSPECIFIED",
                "PENDING",
                "RUNNING",
                "DONE",
                "ABORTING"
              ],
              "type": "string",
              "description": "The current status of the operation.",
              "enumDescriptions": [
                "Not set.",
                "The operation has been created.",
                "The operation is currently running.",
                "The operation is done, either cancelled or completed.",
                "The operation is aborting."
              ]
            },
            "endTime": {
              "type": "string",
              "description": "[Output only] The time the operation completed, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "location": {
              "type": "string",
              "description": "[Output only] The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) or [region](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) in which the cluster resides."
            },
            "progress": {
              "id": "OperationProgress",
              "type": "object",
              "readOnly": true,
              "properties": {
                "name": {
                  "type": "string",
                  "description": "A non-parameterized string describing an operation stage. Unset for single-stage operations."
                },
                "stages": {
                  "type": "array",
                  "items": {
                    "id": "OperationProgress",
                    "type": "object",
                    "properties": {},
                    "description": "Information about operation (or operation stage) progress."
                  },
                  "description": "Substages of an operation or a stage."
                },
                "status": {
                  "enum": [
                    "STATUS_UNSPECIFIED",
                    "PENDING",
                    "RUNNING",
                    "DONE",
                    "ABORTING"
                  ],
                  "type": "string",
                  "description": "Status of an operation stage. Unset for single-stage operations.",
                  "enumDescriptions": [
                    "Not set.",
                    "The operation has been created.",
                    "The operation is currently running.",
                    "The operation is done, either cancelled or completed.",
                    "The operation is aborting."
                  ]
                },
                "metrics": {
                  "type": "array",
                  "items": {
                    "id": "Metric",
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Required. Metric name, e.g., \"nodes total\", \"percent done\"."
                      },
                      "intValue": {
                        "type": "string",
                        "format": "int64",
                        "description": "For metrics with integer value."
                      },
                      "doubleValue": {
                        "type": "number",
                        "format": "double",
                        "description": "For metrics with floating point value."
                      },
                      "stringValue": {
                        "type": "string",
                        "description": "For metrics with custom values (ratios, visual progress, etc.)."
                      }
                    },
                    "description": "Progress metric is (string, int|float|string) pair."
                  },
                  "description": "Progress metric bundle, for example: metrics: [{name: \"nodes done\", int_value: 15}, {name: \"nodes total\", int_value: 32}] or metrics: [{name: \"progress\", double_value: 0.56}, {name: \"progress scale\", double_value: 1.0}]"
                }
              },
              "description": "Output only. [Output only] Progress information for an operation."
            },
            "selfLink": {
              "type": "string",
              "description": "Server-defined URL for the resource."
            },
            "startTime": {
              "type": "string",
              "description": "[Output only] The time the operation started, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "targetLink": {
              "type": "string",
              "description": "Server-defined URL for the target of the operation."
            },
            "operationType": {
              "enum": [
                "TYPE_UNSPECIFIED",
                "CREATE_CLUSTER",
                "DELETE_CLUSTER",
                "UPGRADE_MASTER",
                "UPGRADE_NODES",
                "REPAIR_CLUSTER",
                "UPDATE_CLUSTER",
                "CREATE_NODE_POOL",
                "DELETE_NODE_POOL",
                "SET_NODE_POOL_MANAGEMENT",
                "AUTO_REPAIR_NODES",
                "AUTO_UPGRADE_NODES",
                "SET_LABELS",
                "SET_MASTER_AUTH",
                "SET_NODE_POOL_SIZE",
                "SET_NETWORK_POLICY",
                "SET_MAINTENANCE_POLICY"
              ],
              "type": "string",
              "description": "The operation type.",
              "enumDescriptions": [
                "Not set.",
                "Cluster create.",
                "Cluster delete.",
                "A master upgrade.",
                "A node upgrade.",
                "Cluster repair.",
                "Cluster update.",
                "Node pool create.",
                "Node pool delete.",
                "Set node pool management.",
                "Automatic node pool repair.",
                "Automatic node upgrade.",
                "Set labels.",
                "Set/generate master auth materials",
                "Set node pool size.",
                "Updates network policy for a cluster.",
                "Set the maintenance policy."
              ]
            },
            "statusMessage": {
              "type": "string",
              "readOnly": true,
              "description": "Output only. If an error has occurred, a textual description of the error. Deprecated. Use the field error instead."
            },
            "clusterConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current cluster state. Deprecated. Use field error instead."
            },
            "nodepoolConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current node pool state. Deprecated. Use field error instead."
            }
          },
          "description": "This operation resource represents operations that may have happened or are happening on the cluster. All fields are output only."
        }
      ]
  projects.locations.clusters.startIpRotation:
    description: |-
      Starts master IP rotation.
    versions:
      from: 1.0.0-beta1
    link: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters/startIpRotation
    example:
      inputs: [
        {
          "id": "StartIPRotationRequest",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name (project, location, cluster id) of the cluster to start IP rotation. Specified in the format `projects/*/locations/*/clusters/*`."
            },
            "zone": {
              "type": "string",
              "description": "Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field."
            },
            "clusterId": {
              "type": "string",
              "description": "Deprecated. The name of the cluster. This field has been deprecated and replaced by the name field."
            },
            "projectId": {
              "type": "string",
              "description": "Deprecated. The Google Developers Console [project ID or project number](https://developers.google.com/console/help/new/#projectnumber). This field has been deprecated and replaced by the name field."
            },
            "rotateCredentials": {
              "type": "boolean",
              "description": "Whether to rotate credentials during IP rotation."
            }
          },
          "description": "StartIPRotationRequest creates a new IP for the cluster and then performs a node upgrade on each node pool to point to the new IP."
        }
      ]
      outputs: [
        {
          "id": "Operation",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The server-assigned ID for the operation."
            },
            "zone": {
              "type": "string",
              "description": "The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the operation is taking place. This field is deprecated, use location instead."
            },
            "error": {
              "id": "Status",
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The status code, which should be an enum value of google.rpc.Code."
                },
                "details": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  },
                  "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
                },
                "message": {
                  "type": "string",
                  "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                }
              },
              "description": "The error result of the operation in case of failure."
            },
            "detail": {
              "type": "string",
              "description": "Detailed operation progress, if available."
            },
            "status": {
              "enum": [
                "STATUS_UNSPECIFIED",
                "PENDING",
                "RUNNING",
                "DONE",
                "ABORTING"
              ],
              "type": "string",
              "description": "The current status of the operation.",
              "enumDescriptions": [
                "Not set.",
                "The operation has been created.",
                "The operation is currently running.",
                "The operation is done, either cancelled or completed.",
                "The operation is aborting."
              ]
            },
            "endTime": {
              "type": "string",
              "description": "[Output only] The time the operation completed, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "location": {
              "type": "string",
              "description": "[Output only] The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) or [region](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) in which the cluster resides."
            },
            "progress": {
              "id": "OperationProgress",
              "type": "object",
              "readOnly": true,
              "properties": {
                "name": {
                  "type": "string",
                  "description": "A non-parameterized string describing an operation stage. Unset for single-stage operations."
                },
                "stages": {
                  "type": "array",
                  "items": {
                    "id": "OperationProgress",
                    "type": "object",
                    "properties": {},
                    "description": "Information about operation (or operation stage) progress."
                  },
                  "description": "Substages of an operation or a stage."
                },
                "status": {
                  "enum": [
                    "STATUS_UNSPECIFIED",
                    "PENDING",
                    "RUNNING",
                    "DONE",
                    "ABORTING"
                  ],
                  "type": "string",
                  "description": "Status of an operation stage. Unset for single-stage operations.",
                  "enumDescriptions": [
                    "Not set.",
                    "The operation has been created.",
                    "The operation is currently running.",
                    "The operation is done, either cancelled or completed.",
                    "The operation is aborting."
                  ]
                },
                "metrics": {
                  "type": "array",
                  "items": {
                    "id": "Metric",
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Required. Metric name, e.g., \"nodes total\", \"percent done\"."
                      },
                      "intValue": {
                        "type": "string",
                        "format": "int64",
                        "description": "For metrics with integer value."
                      },
                      "doubleValue": {
                        "type": "number",
                        "format": "double",
                        "description": "For metrics with floating point value."
                      },
                      "stringValue": {
                        "type": "string",
                        "description": "For metrics with custom values (ratios, visual progress, etc.)."
                      }
                    },
                    "description": "Progress metric is (string, int|float|string) pair."
                  },
                  "description": "Progress metric bundle, for example: metrics: [{name: \"nodes done\", int_value: 15}, {name: \"nodes total\", int_value: 32}] or metrics: [{name: \"progress\", double_value: 0.56}, {name: \"progress scale\", double_value: 1.0}]"
                }
              },
              "description": "Output only. [Output only] Progress information for an operation."
            },
            "selfLink": {
              "type": "string",
              "description": "Server-defined URL for the resource."
            },
            "startTime": {
              "type": "string",
              "description": "[Output only] The time the operation started, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "targetLink": {
              "type": "string",
              "description": "Server-defined URL for the target of the operation."
            },
            "operationType": {
              "enum": [
                "TYPE_UNSPECIFIED",
                "CREATE_CLUSTER",
                "DELETE_CLUSTER",
                "UPGRADE_MASTER",
                "UPGRADE_NODES",
                "REPAIR_CLUSTER",
                "UPDATE_CLUSTER",
                "CREATE_NODE_POOL",
                "DELETE_NODE_POOL",
                "SET_NODE_POOL_MANAGEMENT",
                "AUTO_REPAIR_NODES",
                "AUTO_UPGRADE_NODES",
                "SET_LABELS",
                "SET_MASTER_AUTH",
                "SET_NODE_POOL_SIZE",
                "SET_NETWORK_POLICY",
                "SET_MAINTENANCE_POLICY"
              ],
              "type": "string",
              "description": "The operation type.",
              "enumDescriptions": [
                "Not set.",
                "Cluster create.",
                "Cluster delete.",
                "A master upgrade.",
                "A node upgrade.",
                "Cluster repair.",
                "Cluster update.",
                "Node pool create.",
                "Node pool delete.",
                "Set node pool management.",
                "Automatic node pool repair.",
                "Automatic node upgrade.",
                "Set labels.",
                "Set/generate master auth materials",
                "Set node pool size.",
                "Updates network policy for a cluster.",
                "Set the maintenance policy."
              ]
            },
            "statusMessage": {
              "type": "string",
              "readOnly": true,
              "description": "Output only. If an error has occurred, a textual description of the error. Deprecated. Use the field error instead."
            },
            "clusterConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current cluster state. Deprecated. Use field error instead."
            },
            "nodepoolConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current node pool state. Deprecated. Use field error instead."
            }
          },
          "description": "This operation resource represents operations that may have happened or are happening on the cluster. All fields are output only."
        }
      ]
  projects.locations.clusters.update:
    description: |-
      Updates the settings of a specific cluster.
    versions:
      from: 1.0.0-beta1
    link: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters/update
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  projects.locations.clusters.updateMaster:
    description: |-
      Updates the master for a specific cluster.
    versions:
      from: 1.0.0-beta1
    link: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters/updateMaster
    example:
      inputs: [
        {
          "id": "UpdateMasterRequest",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name (project, location, cluster) of the cluster to update. Specified in the format `projects/*/locations/*/clusters/*`."
            },
            "zone": {
              "type": "string",
              "description": "Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field."
            },
            "clusterId": {
              "type": "string",
              "description": "Deprecated. The name of the cluster to upgrade. This field has been deprecated and replaced by the name field."
            },
            "projectId": {
              "type": "string",
              "description": "Deprecated. The Google Developers Console [project ID or project number](https://support.google.com/cloud/answer/6158840). This field has been deprecated and replaced by the name field."
            },
            "masterVersion": {
              "type": "string",
              "description": "Required. The Kubernetes version to change the master to. Users may specify either explicit versions offered by Kubernetes Engine or version aliases, which have the following behavior: - \"latest\": picks the highest valid Kubernetes version - \"1.X\": picks the highest valid patch+gke.N patch in the 1.X version - \"1.X.Y\": picks the highest valid gke.N patch in the 1.X.Y version - \"1.X.Y-gke.N\": picks an explicit Kubernetes version - \"-\": picks the default Kubernetes version"
            }
          },
          "description": "UpdateMasterRequest updates the master of the cluster."
        }
      ]
      outputs: [
        {
          "id": "Operation",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The server-assigned ID for the operation."
            },
            "zone": {
              "type": "string",
              "description": "The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the operation is taking place. This field is deprecated, use location instead."
            },
            "error": {
              "id": "Status",
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The status code, which should be an enum value of google.rpc.Code."
                },
                "details": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  },
                  "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
                },
                "message": {
                  "type": "string",
                  "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                }
              },
              "description": "The error result of the operation in case of failure."
            },
            "detail": {
              "type": "string",
              "description": "Detailed operation progress, if available."
            },
            "status": {
              "enum": [
                "STATUS_UNSPECIFIED",
                "PENDING",
                "RUNNING",
                "DONE",
                "ABORTING"
              ],
              "type": "string",
              "description": "The current status of the operation.",
              "enumDescriptions": [
                "Not set.",
                "The operation has been created.",
                "The operation is currently running.",
                "The operation is done, either cancelled or completed.",
                "The operation is aborting."
              ]
            },
            "endTime": {
              "type": "string",
              "description": "[Output only] The time the operation completed, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "location": {
              "type": "string",
              "description": "[Output only] The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) or [region](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) in which the cluster resides."
            },
            "progress": {
              "id": "OperationProgress",
              "type": "object",
              "readOnly": true,
              "properties": {
                "name": {
                  "type": "string",
                  "description": "A non-parameterized string describing an operation stage. Unset for single-stage operations."
                },
                "stages": {
                  "type": "array",
                  "items": {
                    "id": "OperationProgress",
                    "type": "object",
                    "properties": {},
                    "description": "Information about operation (or operation stage) progress."
                  },
                  "description": "Substages of an operation or a stage."
                },
                "status": {
                  "enum": [
                    "STATUS_UNSPECIFIED",
                    "PENDING",
                    "RUNNING",
                    "DONE",
                    "ABORTING"
                  ],
                  "type": "string",
                  "description": "Status of an operation stage. Unset for single-stage operations.",
                  "enumDescriptions": [
                    "Not set.",
                    "The operation has been created.",
                    "The operation is currently running.",
                    "The operation is done, either cancelled or completed.",
                    "The operation is aborting."
                  ]
                },
                "metrics": {
                  "type": "array",
                  "items": {
                    "id": "Metric",
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Required. Metric name, e.g., \"nodes total\", \"percent done\"."
                      },
                      "intValue": {
                        "type": "string",
                        "format": "int64",
                        "description": "For metrics with integer value."
                      },
                      "doubleValue": {
                        "type": "number",
                        "format": "double",
                        "description": "For metrics with floating point value."
                      },
                      "stringValue": {
                        "type": "string",
                        "description": "For metrics with custom values (ratios, visual progress, etc.)."
                      }
                    },
                    "description": "Progress metric is (string, int|float|string) pair."
                  },
                  "description": "Progress metric bundle, for example: metrics: [{name: \"nodes done\", int_value: 15}, {name: \"nodes total\", int_value: 32}] or metrics: [{name: \"progress\", double_value: 0.56}, {name: \"progress scale\", double_value: 1.0}]"
                }
              },
              "description": "Output only. [Output only] Progress information for an operation."
            },
            "selfLink": {
              "type": "string",
              "description": "Server-defined URL for the resource."
            },
            "startTime": {
              "type": "string",
              "description": "[Output only] The time the operation started, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "targetLink": {
              "type": "string",
              "description": "Server-defined URL for the target of the operation."
            },
            "operationType": {
              "enum": [
                "TYPE_UNSPECIFIED",
                "CREATE_CLUSTER",
                "DELETE_CLUSTER",
                "UPGRADE_MASTER",
                "UPGRADE_NODES",
                "REPAIR_CLUSTER",
                "UPDATE_CLUSTER",
                "CREATE_NODE_POOL",
                "DELETE_NODE_POOL",
                "SET_NODE_POOL_MANAGEMENT",
                "AUTO_REPAIR_NODES",
                "AUTO_UPGRADE_NODES",
                "SET_LABELS",
                "SET_MASTER_AUTH",
                "SET_NODE_POOL_SIZE",
                "SET_NETWORK_POLICY",
                "SET_MAINTENANCE_POLICY"
              ],
              "type": "string",
              "description": "The operation type.",
              "enumDescriptions": [
                "Not set.",
                "Cluster create.",
                "Cluster delete.",
                "A master upgrade.",
                "A node upgrade.",
                "Cluster repair.",
                "Cluster update.",
                "Node pool create.",
                "Node pool delete.",
                "Set node pool management.",
                "Automatic node pool repair.",
                "Automatic node upgrade.",
                "Set labels.",
                "Set/generate master auth materials",
                "Set node pool size.",
                "Updates network policy for a cluster.",
                "Set the maintenance policy."
              ]
            },
            "statusMessage": {
              "type": "string",
              "readOnly": true,
              "description": "Output only. If an error has occurred, a textual description of the error. Deprecated. Use the field error instead."
            },
            "clusterConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current cluster state. Deprecated. Use field error instead."
            },
            "nodepoolConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current node pool state. Deprecated. Use field error instead."
            }
          },
          "description": "This operation resource represents operations that may have happened or are happening on the cluster. All fields are output only."
        }
      ]
  projects.locations.clusters.well-known.getOpenid-configuration:
    description: |-
      Gets the OIDC discovery document for the cluster. See the [OpenID Connect Discovery 1.0 specification](https://openid.net/specs/openid-connect-discovery-1_0.html) for details. This API is not yet intended for general use, and is not available for all clusters.
    versions:
      from: 1.0.0-beta1
    link: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters.well-known.getOpenid/configuration
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "GetOpenIDConfigResponse",
          "type": "object",
          "properties": {
            "issuer": {
              "type": "string",
              "description": "OIDC Issuer."
            },
            "jwks_uri": {
              "type": "string",
              "description": "JSON Web Key uri."
            },
            "cacheHeader": {
              "id": "HttpCacheControlResponseHeader",
              "type": "object",
              "properties": {
                "age": {
                  "type": "string",
                  "format": "int64",
                  "description": "14.6 response cache age, in seconds since the response is generated"
                },
                "expires": {
                  "type": "string",
                  "description": "14.21 response cache expires, in RFC 1123 date format"
                },
                "directive": {
                  "type": "string",
                  "description": "14.9 request and response directives"
                }
              },
              "description": "OnePlatform automatically extracts this field and uses it to set the HTTP Cache-Control header."
            },
            "grant_types": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Supported grant types."
            },
            "claims_supported": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Supported claims."
            },
            "subject_types_supported": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Supported subject types."
            },
            "response_types_supported": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Supported response types."
            },
            "id_token_signing_alg_values_supported": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "supported ID Token signing Algorithms."
            }
          },
          "description": "GetOpenIDConfigResponse is an OIDC discovery document for the cluster. See the OpenID Connect Discovery 1.0 specification for details."
        }
      ]
  projects.locations.getServerConfig:
    description: |-
      Returns configuration info about the Google Kubernetes Engine service.
    versions:
      from: 1.0.0-beta1
    link: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations/getServerConfig
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "ServerConfig",
          "type": "object",
          "properties": {
            "channels": {
              "type": "array",
              "items": {
                "id": "ReleaseChannelConfig",
                "type": "object",
                "properties": {
                  "channel": {
                    "enum": [
                      "UNSPECIFIED",
                      "RAPID",
                      "REGULAR",
                      "STABLE"
                    ],
                    "type": "string",
                    "description": "The release channel this configuration applies to.",
                    "enumDescriptions": [
                      "No channel specified.",
                      "RAPID channel is offered on an early access basis for customers who want to test new releases. WARNING: Versions available in the RAPID Channel may be subject to unresolved issues with no known workaround and are not subject to any SLAs.",
                      "Clusters subscribed to REGULAR receive versions that are considered GA quality. REGULAR is intended for production users who want to take advantage of new features.",
                      "Clusters subscribed to STABLE receive versions that are known to be stable and reliable in production."
                    ]
                  },
                  "validVersions": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "List of valid versions for the channel."
                  },
                  "defaultVersion": {
                    "type": "string",
                    "description": "The default version for newly created clusters on the channel."
                  }
                },
                "description": "ReleaseChannelConfig exposes configuration for a release channel."
              },
              "description": "List of release channel configurations."
            },
            "validImageTypes": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "List of valid image types."
            },
            "defaultImageType": {
              "type": "string",
              "description": "Default image type."
            },
            "validNodeVersions": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "List of valid node upgrade target versions, in descending order."
            },
            "validMasterVersions": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "List of valid master versions, in descending order."
            },
            "defaultClusterVersion": {
              "type": "string",
              "description": "Version of Kubernetes the service deploys by default."
            }
          },
          "description": "Kubernetes Engine service configuration."
        }
      ]
  projects.locations.operations.cancel:
    description: |-
      Cancels the specified operation.
    versions:
      from: 1.0.0-beta1
    link: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.operations/cancel
    example:
      inputs: [
        {
          "id": "CancelOperationRequest",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name (project, location, operation id) of the operation to cancel. Specified in the format `projects/*/locations/*/operations/*`."
            },
            "zone": {
              "type": "string",
              "description": "Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the operation resides. This field has been deprecated and replaced by the name field."
            },
            "projectId": {
              "type": "string",
              "description": "Deprecated. The Google Developers Console [project ID or project number](https://support.google.com/cloud/answer/6158840). This field has been deprecated and replaced by the name field."
            },
            "operationId": {
              "type": "string",
              "description": "Deprecated. The server-assigned `name` of the operation. This field has been deprecated and replaced by the name field."
            }
          },
          "description": "CancelOperationRequest cancels a single operation."
        }
      ]
      outputs: [
        {
          "id": "Empty",
          "type": "object",
          "properties": {},
          "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`."
        }
      ]
  projects.locations.operations.get:
    description: |-
      Gets the specified operation.
    versions:
      from: 1.0.0-beta1
    link: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.operations/get
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "Operation",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The server-assigned ID for the operation."
            },
            "zone": {
              "type": "string",
              "description": "The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the operation is taking place. This field is deprecated, use location instead."
            },
            "error": {
              "id": "Status",
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The status code, which should be an enum value of google.rpc.Code."
                },
                "details": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  },
                  "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
                },
                "message": {
                  "type": "string",
                  "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                }
              },
              "description": "The error result of the operation in case of failure."
            },
            "detail": {
              "type": "string",
              "description": "Detailed operation progress, if available."
            },
            "status": {
              "enum": [
                "STATUS_UNSPECIFIED",
                "PENDING",
                "RUNNING",
                "DONE",
                "ABORTING"
              ],
              "type": "string",
              "description": "The current status of the operation.",
              "enumDescriptions": [
                "Not set.",
                "The operation has been created.",
                "The operation is currently running.",
                "The operation is done, either cancelled or completed.",
                "The operation is aborting."
              ]
            },
            "endTime": {
              "type": "string",
              "description": "[Output only] The time the operation completed, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "location": {
              "type": "string",
              "description": "[Output only] The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) or [region](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) in which the cluster resides."
            },
            "progress": {
              "id": "OperationProgress",
              "type": "object",
              "readOnly": true,
              "properties": {
                "name": {
                  "type": "string",
                  "description": "A non-parameterized string describing an operation stage. Unset for single-stage operations."
                },
                "stages": {
                  "type": "array",
                  "items": {
                    "id": "OperationProgress",
                    "type": "object",
                    "properties": {},
                    "description": "Information about operation (or operation stage) progress."
                  },
                  "description": "Substages of an operation or a stage."
                },
                "status": {
                  "enum": [
                    "STATUS_UNSPECIFIED",
                    "PENDING",
                    "RUNNING",
                    "DONE",
                    "ABORTING"
                  ],
                  "type": "string",
                  "description": "Status of an operation stage. Unset for single-stage operations.",
                  "enumDescriptions": [
                    "Not set.",
                    "The operation has been created.",
                    "The operation is currently running.",
                    "The operation is done, either cancelled or completed.",
                    "The operation is aborting."
                  ]
                },
                "metrics": {
                  "type": "array",
                  "items": {
                    "id": "Metric",
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Required. Metric name, e.g., \"nodes total\", \"percent done\"."
                      },
                      "intValue": {
                        "type": "string",
                        "format": "int64",
                        "description": "For metrics with integer value."
                      },
                      "doubleValue": {
                        "type": "number",
                        "format": "double",
                        "description": "For metrics with floating point value."
                      },
                      "stringValue": {
                        "type": "string",
                        "description": "For metrics with custom values (ratios, visual progress, etc.)."
                      }
                    },
                    "description": "Progress metric is (string, int|float|string) pair."
                  },
                  "description": "Progress metric bundle, for example: metrics: [{name: \"nodes done\", int_value: 15}, {name: \"nodes total\", int_value: 32}] or metrics: [{name: \"progress\", double_value: 0.56}, {name: \"progress scale\", double_value: 1.0}]"
                }
              },
              "description": "Output only. [Output only] Progress information for an operation."
            },
            "selfLink": {
              "type": "string",
              "description": "Server-defined URL for the resource."
            },
            "startTime": {
              "type": "string",
              "description": "[Output only] The time the operation started, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "targetLink": {
              "type": "string",
              "description": "Server-defined URL for the target of the operation."
            },
            "operationType": {
              "enum": [
                "TYPE_UNSPECIFIED",
                "CREATE_CLUSTER",
                "DELETE_CLUSTER",
                "UPGRADE_MASTER",
                "UPGRADE_NODES",
                "REPAIR_CLUSTER",
                "UPDATE_CLUSTER",
                "CREATE_NODE_POOL",
                "DELETE_NODE_POOL",
                "SET_NODE_POOL_MANAGEMENT",
                "AUTO_REPAIR_NODES",
                "AUTO_UPGRADE_NODES",
                "SET_LABELS",
                "SET_MASTER_AUTH",
                "SET_NODE_POOL_SIZE",
                "SET_NETWORK_POLICY",
                "SET_MAINTENANCE_POLICY"
              ],
              "type": "string",
              "description": "The operation type.",
              "enumDescriptions": [
                "Not set.",
                "Cluster create.",
                "Cluster delete.",
                "A master upgrade.",
                "A node upgrade.",
                "Cluster repair.",
                "Cluster update.",
                "Node pool create.",
                "Node pool delete.",
                "Set node pool management.",
                "Automatic node pool repair.",
                "Automatic node upgrade.",
                "Set labels.",
                "Set/generate master auth materials",
                "Set node pool size.",
                "Updates network policy for a cluster.",
                "Set the maintenance policy."
              ]
            },
            "statusMessage": {
              "type": "string",
              "readOnly": true,
              "description": "Output only. If an error has occurred, a textual description of the error. Deprecated. Use the field error instead."
            },
            "clusterConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current cluster state. Deprecated. Use field error instead."
            },
            "nodepoolConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current node pool state. Deprecated. Use field error instead."
            }
          },
          "description": "This operation resource represents operations that may have happened or are happening on the cluster. All fields are output only."
        }
      ]
  projects.locations.operations.list:
    description: |-
      Lists all operations in a project in a specific zone or all zones.
    versions:
      from: 1.0.0-beta1
    link: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.operations/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "ListOperationsResponse",
          "type": "object",
          "properties": {
            "operations": {
              "type": "array",
              "items": {
                "id": "Operation",
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The server-assigned ID for the operation."
                  },
                  "zone": {
                    "type": "string",
                    "description": "The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the operation is taking place. This field is deprecated, use location instead."
                  },
                  "error": {
                    "id": "Status",
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The status code, which should be an enum value of google.rpc.Code."
                      },
                      "details": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "any",
                            "description": "Properties of the object. Contains field @type with type URL."
                          }
                        },
                        "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
                      },
                      "message": {
                        "type": "string",
                        "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                      }
                    },
                    "description": "The error result of the operation in case of failure."
                  },
                  "detail": {
                    "type": "string",
                    "description": "Detailed operation progress, if available."
                  },
                  "status": {
                    "enum": [
                      "STATUS_UNSPECIFIED",
                      "PENDING",
                      "RUNNING",
                      "DONE",
                      "ABORTING"
                    ],
                    "type": "string",
                    "description": "The current status of the operation.",
                    "enumDescriptions": [
                      "Not set.",
                      "The operation has been created.",
                      "The operation is currently running.",
                      "The operation is done, either cancelled or completed.",
                      "The operation is aborting."
                    ]
                  },
                  "endTime": {
                    "type": "string",
                    "description": "[Output only] The time the operation completed, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
                  },
                  "location": {
                    "type": "string",
                    "description": "[Output only] The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) or [region](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) in which the cluster resides."
                  },
                  "progress": {
                    "id": "OperationProgress",
                    "type": "object",
                    "readOnly": true,
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "A non-parameterized string describing an operation stage. Unset for single-stage operations."
                      },
                      "stages": {
                        "type": "array",
                        "items": {
                          "id": "OperationProgress",
                          "type": "object",
                          "properties": {},
                          "description": "Information about operation (or operation stage) progress."
                        },
                        "description": "Substages of an operation or a stage."
                      },
                      "status": {
                        "enum": [
                          "STATUS_UNSPECIFIED",
                          "PENDING",
                          "RUNNING",
                          "DONE",
                          "ABORTING"
                        ],
                        "type": "string",
                        "description": "Status of an operation stage. Unset for single-stage operations.",
                        "enumDescriptions": [
                          "Not set.",
                          "The operation has been created.",
                          "The operation is currently running.",
                          "The operation is done, either cancelled or completed.",
                          "The operation is aborting."
                        ]
                      },
                      "metrics": {
                        "type": "array",
                        "items": {
                          "id": "Metric",
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "Required. Metric name, e.g., \"nodes total\", \"percent done\"."
                            },
                            "intValue": {
                              "type": "string",
                              "format": "int64",
                              "description": "For metrics with integer value."
                            },
                            "doubleValue": {
                              "type": "number",
                              "format": "double",
                              "description": "For metrics with floating point value."
                            },
                            "stringValue": {
                              "type": "string",
                              "description": "For metrics with custom values (ratios, visual progress, etc.)."
                            }
                          },
                          "description": "Progress metric is (string, int|float|string) pair."
                        },
                        "description": "Progress metric bundle, for example: metrics: [{name: \"nodes done\", int_value: 15}, {name: \"nodes total\", int_value: 32}] or metrics: [{name: \"progress\", double_value: 0.56}, {name: \"progress scale\", double_value: 1.0}]"
                      }
                    },
                    "description": "Output only. [Output only] Progress information for an operation."
                  },
                  "selfLink": {
                    "type": "string",
                    "description": "Server-defined URL for the resource."
                  },
                  "startTime": {
                    "type": "string",
                    "description": "[Output only] The time the operation started, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
                  },
                  "targetLink": {
                    "type": "string",
                    "description": "Server-defined URL for the target of the operation."
                  },
                  "operationType": {
                    "enum": [
                      "TYPE_UNSPECIFIED",
                      "CREATE_CLUSTER",
                      "DELETE_CLUSTER",
                      "UPGRADE_MASTER",
                      "UPGRADE_NODES",
                      "REPAIR_CLUSTER",
                      "UPDATE_CLUSTER",
                      "CREATE_NODE_POOL",
                      "DELETE_NODE_POOL",
                      "SET_NODE_POOL_MANAGEMENT",
                      "AUTO_REPAIR_NODES",
                      "AUTO_UPGRADE_NODES",
                      "SET_LABELS",
                      "SET_MASTER_AUTH",
                      "SET_NODE_POOL_SIZE",
                      "SET_NETWORK_POLICY",
                      "SET_MAINTENANCE_POLICY"
                    ],
                    "type": "string",
                    "description": "The operation type.",
                    "enumDescriptions": [
                      "Not set.",
                      "Cluster create.",
                      "Cluster delete.",
                      "A master upgrade.",
                      "A node upgrade.",
                      "Cluster repair.",
                      "Cluster update.",
                      "Node pool create.",
                      "Node pool delete.",
                      "Set node pool management.",
                      "Automatic node pool repair.",
                      "Automatic node upgrade.",
                      "Set labels.",
                      "Set/generate master auth materials",
                      "Set node pool size.",
                      "Updates network policy for a cluster.",
                      "Set the maintenance policy."
                    ]
                  },
                  "statusMessage": {
                    "type": "string",
                    "readOnly": true,
                    "description": "Output only. If an error has occurred, a textual description of the error. Deprecated. Use the field error instead."
                  },
                  "clusterConditions": {
                    "type": "array",
                    "items": {
                      "id": "StatusCondition",
                      "type": "object",
                      "properties": {
                        "code": {
                          "enum": [
                            "UNKNOWN",
                            "GCE_STOCKOUT",
                            "GKE_SERVICE_ACCOUNT_DELETED",
                            "GCE_QUOTA_EXCEEDED",
                            "SET_BY_OPERATOR",
                            "CLOUD_KMS_KEY_ERROR"
                          ],
                          "type": "string",
                          "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                          "enumDescriptions": [
                            "UNKNOWN indicates a generic condition.",
                            "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                            "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                            "Google Compute Engine quota was exceeded.",
                            "Cluster state was manually changed by an SRE due to a system logic error.",
                            "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                          ]
                        },
                        "message": {
                          "type": "string",
                          "description": "Human-friendly representation of the condition"
                        },
                        "canonicalCode": {
                          "enum": [
                            "OK",
                            "CANCELLED",
                            "UNKNOWN",
                            "INVALID_ARGUMENT",
                            "DEADLINE_EXCEEDED",
                            "NOT_FOUND",
                            "ALREADY_EXISTS",
                            "PERMISSION_DENIED",
                            "UNAUTHENTICATED",
                            "RESOURCE_EXHAUSTED",
                            "FAILED_PRECONDITION",
                            "ABORTED",
                            "OUT_OF_RANGE",
                            "UNIMPLEMENTED",
                            "INTERNAL",
                            "UNAVAILABLE",
                            "DATA_LOSS"
                          ],
                          "type": "string",
                          "description": "Canonical code of the condition.",
                          "enumDescriptions": [
                            "Not an error; returned on success HTTP Mapping: 200 OK",
                            "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                            "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                            "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                            "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                            "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                            "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                            "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                            "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                            "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                            "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                            "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                            "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                            "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                            "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                            "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                            "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                          ]
                        }
                      },
                      "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
                    },
                    "description": "Which conditions caused the current cluster state. Deprecated. Use field error instead."
                  },
                  "nodepoolConditions": {
                    "type": "array",
                    "items": {
                      "id": "StatusCondition",
                      "type": "object",
                      "properties": {
                        "code": {
                          "enum": [
                            "UNKNOWN",
                            "GCE_STOCKOUT",
                            "GKE_SERVICE_ACCOUNT_DELETED",
                            "GCE_QUOTA_EXCEEDED",
                            "SET_BY_OPERATOR",
                            "CLOUD_KMS_KEY_ERROR"
                          ],
                          "type": "string",
                          "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                          "enumDescriptions": [
                            "UNKNOWN indicates a generic condition.",
                            "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                            "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                            "Google Compute Engine quota was exceeded.",
                            "Cluster state was manually changed by an SRE due to a system logic error.",
                            "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                          ]
                        },
                        "message": {
                          "type": "string",
                          "description": "Human-friendly representation of the condition"
                        },
                        "canonicalCode": {
                          "enum": [
                            "OK",
                            "CANCELLED",
                            "UNKNOWN",
                            "INVALID_ARGUMENT",
                            "DEADLINE_EXCEEDED",
                            "NOT_FOUND",
                            "ALREADY_EXISTS",
                            "PERMISSION_DENIED",
                            "UNAUTHENTICATED",
                            "RESOURCE_EXHAUSTED",
                            "FAILED_PRECONDITION",
                            "ABORTED",
                            "OUT_OF_RANGE",
                            "UNIMPLEMENTED",
                            "INTERNAL",
                            "UNAVAILABLE",
                            "DATA_LOSS"
                          ],
                          "type": "string",
                          "description": "Canonical code of the condition.",
                          "enumDescriptions": [
                            "Not an error; returned on success HTTP Mapping: 200 OK",
                            "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                            "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                            "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                            "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                            "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                            "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                            "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                            "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                            "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                            "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                            "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                            "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                            "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                            "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                            "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                            "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                          ]
                        }
                      },
                      "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
                    },
                    "description": "Which conditions caused the current node pool state. Deprecated. Use field error instead."
                  }
                },
                "description": "This operation resource represents operations that may have happened or are happening on the cluster. All fields are output only."
              },
              "description": "A list of operations in the project in the specified zone."
            },
            "missingZones": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "If any zones are listed here, the list of operations returned may be missing the operations from those zones."
            }
          },
          "description": "ListOperationsResponse is the result of ListOperationsRequest."
        }
      ]
  projects.zones.clusters.addons:
    description: |-
      Sets the addons for a specific cluster.
    versions:
      from: 1.0.0-beta1
    link: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.zones.clusters/addons
    example:
      inputs: [
        {
          "id": "SetAddonsConfigRequest",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name (project, location, cluster) of the cluster to set addons. Specified in the format `projects/*/locations/*/clusters/*`."
            },
            "zone": {
              "type": "string",
              "description": "Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field."
            },
            "clusterId": {
              "type": "string",
              "description": "Deprecated. The name of the cluster to upgrade. This field has been deprecated and replaced by the name field."
            },
            "projectId": {
              "type": "string",
              "description": "Deprecated. The Google Developers Console [project ID or project number](https://support.google.com/cloud/answer/6158840). This field has been deprecated and replaced by the name field."
            },
            "addonsConfig": {
              "id": "AddonsConfig",
              "type": "object",
              "properties": {
                "cloudRunConfig": {
                  "id": "CloudRunConfig",
                  "type": "object",
                  "properties": {
                    "disabled": {
                      "type": "boolean",
                      "description": "Whether Cloud Run addon is enabled for this cluster."
                    },
                    "loadBalancerType": {
                      "enum": [
                        "LOAD_BALANCER_TYPE_UNSPECIFIED",
                        "LOAD_BALANCER_TYPE_EXTERNAL",
                        "LOAD_BALANCER_TYPE_INTERNAL"
                      ],
                      "type": "string",
                      "description": "Which load balancer type is installed for Cloud Run.",
                      "enumDescriptions": [
                        "Load balancer type for Cloud Run is unspecified.",
                        "Install external load balancer for Cloud Run.",
                        "Install internal load balancer for Cloud Run."
                      ]
                    }
                  },
                  "description": "Configuration for the Cloud Run addon, which allows the user to use a managed Knative service."
                },
                "dnsCacheConfig": {
                  "id": "DnsCacheConfig",
                  "type": "object",
                  "properties": {
                    "enabled": {
                      "type": "boolean",
                      "description": "Whether NodeLocal DNSCache is enabled for this cluster."
                    }
                  },
                  "description": "Configuration for NodeLocalDNS, a dns cache running on cluster nodes"
                },
                "httpLoadBalancing": {
                  "id": "HttpLoadBalancing",
                  "type": "object",
                  "properties": {
                    "disabled": {
                      "type": "boolean",
                      "description": "Whether the HTTP Load Balancing controller is enabled in the cluster. When enabled, it runs a small pod in the cluster that manages the load balancers."
                    }
                  },
                  "description": "Configuration for the HTTP (L7) load balancing controller addon, which makes it easy to set up HTTP load balancers for services in a cluster."
                },
                "kubernetesDashboard": {
                  "id": "KubernetesDashboard",
                  "type": "object",
                  "properties": {
                    "disabled": {
                      "type": "boolean",
                      "description": "Whether the Kubernetes Dashboard is enabled for this cluster."
                    }
                  },
                  "description": "Configuration for the Kubernetes Dashboard. This addon is deprecated, and will be disabled in 1.15. It is recommended to use the Cloud Console to manage and monitor your Kubernetes clusters, workloads and applications. For more information, see: https://cloud.google.com/kubernetes-engine/docs/concepts/dashboards"
                },
                "networkPolicyConfig": {
                  "id": "NetworkPolicyConfig",
                  "type": "object",
                  "properties": {
                    "disabled": {
                      "type": "boolean",
                      "description": "Whether NetworkPolicy is enabled for this cluster."
                    }
                  },
                  "description": "Configuration for NetworkPolicy. This only tracks whether the addon is enabled or not on the Master, it does not track whether network policy is enabled for the nodes."
                },
                "configConnectorConfig": {
                  "id": "ConfigConnectorConfig",
                  "type": "object",
                  "properties": {
                    "enabled": {
                      "type": "boolean",
                      "description": "Whether Cloud Connector is enabled for this cluster."
                    }
                  },
                  "description": "Configuration for the ConfigConnector add-on, a Kubernetes extension to manage hosted GCP services through the Kubernetes API"
                },
                "horizontalPodAutoscaling": {
                  "id": "HorizontalPodAutoscaling",
                  "type": "object",
                  "properties": {
                    "disabled": {
                      "type": "boolean",
                      "description": "Whether the Horizontal Pod Autoscaling feature is enabled in the cluster. When enabled, it ensures that metrics are collected into Stackdriver Monitoring."
                    }
                  },
                  "description": "Configuration for the horizontal pod autoscaling feature, which increases or decreases the number of replica pods a replication controller has based on the resource usage of the existing pods."
                },
                "gcePersistentDiskCsiDriverConfig": {
                  "id": "GcePersistentDiskCsiDriverConfig",
                  "type": "object",
                  "properties": {
                    "enabled": {
                      "type": "boolean",
                      "description": "Whether the Compute Engine PD CSI driver is enabled for this cluster."
                    }
                  },
                  "description": "Configuration for the Compute Engine Persistent Disk CSI driver."
                }
              },
              "description": "Required. The desired configurations for the various addons available to run in the cluster."
            }
          },
          "description": "SetAddonsConfigRequest sets the addons associated with the cluster."
        }
      ]
      outputs: [
        {
          "id": "Operation",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The server-assigned ID for the operation."
            },
            "zone": {
              "type": "string",
              "description": "The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the operation is taking place. This field is deprecated, use location instead."
            },
            "error": {
              "id": "Status",
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The status code, which should be an enum value of google.rpc.Code."
                },
                "details": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  },
                  "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
                },
                "message": {
                  "type": "string",
                  "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                }
              },
              "description": "The error result of the operation in case of failure."
            },
            "detail": {
              "type": "string",
              "description": "Detailed operation progress, if available."
            },
            "status": {
              "enum": [
                "STATUS_UNSPECIFIED",
                "PENDING",
                "RUNNING",
                "DONE",
                "ABORTING"
              ],
              "type": "string",
              "description": "The current status of the operation.",
              "enumDescriptions": [
                "Not set.",
                "The operation has been created.",
                "The operation is currently running.",
                "The operation is done, either cancelled or completed.",
                "The operation is aborting."
              ]
            },
            "endTime": {
              "type": "string",
              "description": "[Output only] The time the operation completed, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "location": {
              "type": "string",
              "description": "[Output only] The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) or [region](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) in which the cluster resides."
            },
            "progress": {
              "id": "OperationProgress",
              "type": "object",
              "readOnly": true,
              "properties": {
                "name": {
                  "type": "string",
                  "description": "A non-parameterized string describing an operation stage. Unset for single-stage operations."
                },
                "stages": {
                  "type": "array",
                  "items": {
                    "id": "OperationProgress",
                    "type": "object",
                    "properties": {},
                    "description": "Information about operation (or operation stage) progress."
                  },
                  "description": "Substages of an operation or a stage."
                },
                "status": {
                  "enum": [
                    "STATUS_UNSPECIFIED",
                    "PENDING",
                    "RUNNING",
                    "DONE",
                    "ABORTING"
                  ],
                  "type": "string",
                  "description": "Status of an operation stage. Unset for single-stage operations.",
                  "enumDescriptions": [
                    "Not set.",
                    "The operation has been created.",
                    "The operation is currently running.",
                    "The operation is done, either cancelled or completed.",
                    "The operation is aborting."
                  ]
                },
                "metrics": {
                  "type": "array",
                  "items": {
                    "id": "Metric",
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Required. Metric name, e.g., \"nodes total\", \"percent done\"."
                      },
                      "intValue": {
                        "type": "string",
                        "format": "int64",
                        "description": "For metrics with integer value."
                      },
                      "doubleValue": {
                        "type": "number",
                        "format": "double",
                        "description": "For metrics with floating point value."
                      },
                      "stringValue": {
                        "type": "string",
                        "description": "For metrics with custom values (ratios, visual progress, etc.)."
                      }
                    },
                    "description": "Progress metric is (string, int|float|string) pair."
                  },
                  "description": "Progress metric bundle, for example: metrics: [{name: \"nodes done\", int_value: 15}, {name: \"nodes total\", int_value: 32}] or metrics: [{name: \"progress\", double_value: 0.56}, {name: \"progress scale\", double_value: 1.0}]"
                }
              },
              "description": "Output only. [Output only] Progress information for an operation."
            },
            "selfLink": {
              "type": "string",
              "description": "Server-defined URL for the resource."
            },
            "startTime": {
              "type": "string",
              "description": "[Output only] The time the operation started, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "targetLink": {
              "type": "string",
              "description": "Server-defined URL for the target of the operation."
            },
            "operationType": {
              "enum": [
                "TYPE_UNSPECIFIED",
                "CREATE_CLUSTER",
                "DELETE_CLUSTER",
                "UPGRADE_MASTER",
                "UPGRADE_NODES",
                "REPAIR_CLUSTER",
                "UPDATE_CLUSTER",
                "CREATE_NODE_POOL",
                "DELETE_NODE_POOL",
                "SET_NODE_POOL_MANAGEMENT",
                "AUTO_REPAIR_NODES",
                "AUTO_UPGRADE_NODES",
                "SET_LABELS",
                "SET_MASTER_AUTH",
                "SET_NODE_POOL_SIZE",
                "SET_NETWORK_POLICY",
                "SET_MAINTENANCE_POLICY"
              ],
              "type": "string",
              "description": "The operation type.",
              "enumDescriptions": [
                "Not set.",
                "Cluster create.",
                "Cluster delete.",
                "A master upgrade.",
                "A node upgrade.",
                "Cluster repair.",
                "Cluster update.",
                "Node pool create.",
                "Node pool delete.",
                "Set node pool management.",
                "Automatic node pool repair.",
                "Automatic node upgrade.",
                "Set labels.",
                "Set/generate master auth materials",
                "Set node pool size.",
                "Updates network policy for a cluster.",
                "Set the maintenance policy."
              ]
            },
            "statusMessage": {
              "type": "string",
              "readOnly": true,
              "description": "Output only. If an error has occurred, a textual description of the error. Deprecated. Use the field error instead."
            },
            "clusterConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current cluster state. Deprecated. Use field error instead."
            },
            "nodepoolConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current node pool state. Deprecated. Use field error instead."
            }
          },
          "description": "This operation resource represents operations that may have happened or are happening on the cluster. All fields are output only."
        }
      ]
  projects.zones.clusters.completeIpRotation:
    description: |-
      Completes master IP rotation.
    versions:
      from: 1.0.0-beta1
    link: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.zones.clusters/completeIpRotation
    example:
      inputs: [
        {
          "id": "CompleteIPRotationRequest",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name (project, location, cluster id) of the cluster to complete IP rotation. Specified in the format `projects/*/locations/*/clusters/*`."
            },
            "zone": {
              "type": "string",
              "description": "Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field."
            },
            "clusterId": {
              "type": "string",
              "description": "Deprecated. The name of the cluster. This field has been deprecated and replaced by the name field."
            },
            "projectId": {
              "type": "string",
              "description": "Deprecated. The Google Developers Console [project ID or project number](https://developers.google.com/console/help/new/#projectnumber). This field has been deprecated and replaced by the name field."
            }
          },
          "description": "CompleteIPRotationRequest moves the cluster master back into single-IP mode."
        }
      ]
      outputs: [
        {
          "id": "Operation",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The server-assigned ID for the operation."
            },
            "zone": {
              "type": "string",
              "description": "The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the operation is taking place. This field is deprecated, use location instead."
            },
            "error": {
              "id": "Status",
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The status code, which should be an enum value of google.rpc.Code."
                },
                "details": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  },
                  "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
                },
                "message": {
                  "type": "string",
                  "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                }
              },
              "description": "The error result of the operation in case of failure."
            },
            "detail": {
              "type": "string",
              "description": "Detailed operation progress, if available."
            },
            "status": {
              "enum": [
                "STATUS_UNSPECIFIED",
                "PENDING",
                "RUNNING",
                "DONE",
                "ABORTING"
              ],
              "type": "string",
              "description": "The current status of the operation.",
              "enumDescriptions": [
                "Not set.",
                "The operation has been created.",
                "The operation is currently running.",
                "The operation is done, either cancelled or completed.",
                "The operation is aborting."
              ]
            },
            "endTime": {
              "type": "string",
              "description": "[Output only] The time the operation completed, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "location": {
              "type": "string",
              "description": "[Output only] The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) or [region](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) in which the cluster resides."
            },
            "progress": {
              "id": "OperationProgress",
              "type": "object",
              "readOnly": true,
              "properties": {
                "name": {
                  "type": "string",
                  "description": "A non-parameterized string describing an operation stage. Unset for single-stage operations."
                },
                "stages": {
                  "type": "array",
                  "items": {
                    "id": "OperationProgress",
                    "type": "object",
                    "properties": {},
                    "description": "Information about operation (or operation stage) progress."
                  },
                  "description": "Substages of an operation or a stage."
                },
                "status": {
                  "enum": [
                    "STATUS_UNSPECIFIED",
                    "PENDING",
                    "RUNNING",
                    "DONE",
                    "ABORTING"
                  ],
                  "type": "string",
                  "description": "Status of an operation stage. Unset for single-stage operations.",
                  "enumDescriptions": [
                    "Not set.",
                    "The operation has been created.",
                    "The operation is currently running.",
                    "The operation is done, either cancelled or completed.",
                    "The operation is aborting."
                  ]
                },
                "metrics": {
                  "type": "array",
                  "items": {
                    "id": "Metric",
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Required. Metric name, e.g., \"nodes total\", \"percent done\"."
                      },
                      "intValue": {
                        "type": "string",
                        "format": "int64",
                        "description": "For metrics with integer value."
                      },
                      "doubleValue": {
                        "type": "number",
                        "format": "double",
                        "description": "For metrics with floating point value."
                      },
                      "stringValue": {
                        "type": "string",
                        "description": "For metrics with custom values (ratios, visual progress, etc.)."
                      }
                    },
                    "description": "Progress metric is (string, int|float|string) pair."
                  },
                  "description": "Progress metric bundle, for example: metrics: [{name: \"nodes done\", int_value: 15}, {name: \"nodes total\", int_value: 32}] or metrics: [{name: \"progress\", double_value: 0.56}, {name: \"progress scale\", double_value: 1.0}]"
                }
              },
              "description": "Output only. [Output only] Progress information for an operation."
            },
            "selfLink": {
              "type": "string",
              "description": "Server-defined URL for the resource."
            },
            "startTime": {
              "type": "string",
              "description": "[Output only] The time the operation started, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "targetLink": {
              "type": "string",
              "description": "Server-defined URL for the target of the operation."
            },
            "operationType": {
              "enum": [
                "TYPE_UNSPECIFIED",
                "CREATE_CLUSTER",
                "DELETE_CLUSTER",
                "UPGRADE_MASTER",
                "UPGRADE_NODES",
                "REPAIR_CLUSTER",
                "UPDATE_CLUSTER",
                "CREATE_NODE_POOL",
                "DELETE_NODE_POOL",
                "SET_NODE_POOL_MANAGEMENT",
                "AUTO_REPAIR_NODES",
                "AUTO_UPGRADE_NODES",
                "SET_LABELS",
                "SET_MASTER_AUTH",
                "SET_NODE_POOL_SIZE",
                "SET_NETWORK_POLICY",
                "SET_MAINTENANCE_POLICY"
              ],
              "type": "string",
              "description": "The operation type.",
              "enumDescriptions": [
                "Not set.",
                "Cluster create.",
                "Cluster delete.",
                "A master upgrade.",
                "A node upgrade.",
                "Cluster repair.",
                "Cluster update.",
                "Node pool create.",
                "Node pool delete.",
                "Set node pool management.",
                "Automatic node pool repair.",
                "Automatic node upgrade.",
                "Set labels.",
                "Set/generate master auth materials",
                "Set node pool size.",
                "Updates network policy for a cluster.",
                "Set the maintenance policy."
              ]
            },
            "statusMessage": {
              "type": "string",
              "readOnly": true,
              "description": "Output only. If an error has occurred, a textual description of the error. Deprecated. Use the field error instead."
            },
            "clusterConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current cluster state. Deprecated. Use field error instead."
            },
            "nodepoolConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current node pool state. Deprecated. Use field error instead."
            }
          },
          "description": "This operation resource represents operations that may have happened or are happening on the cluster. All fields are output only."
        }
      ]
  projects.zones.clusters.create:
    description: |-
      Creates a cluster, consisting of the specified number and type of Google Compute Engine instances. By default, the cluster is created in the project's [default network](https://cloud.google.com/compute/docs/networks-and-firewalls#networks). One firewall is added for the cluster. After cluster creation, the Kubelet creates routes for each node to allow the containers on that node to communicate with all other instances in the cluster. Finally, an entry is added to the project's global metadata indicating which CIDR range the cluster is using.
    versions:
      from: 1.0.0-beta1
    link: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.zones.clusters/create
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  projects.zones.clusters.delete:
    description: |-
      Deletes the cluster, including the Kubernetes endpoint and all worker nodes. Firewalls and routes that were configured during cluster creation are also deleted. Other Google Compute Engine resources that might be in use by the cluster, such as load balancer resources, are not deleted if they weren't present when the cluster was initially created.
    versions:
      from: 1.0.0-beta1
    link: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.zones.clusters/delete
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "Operation",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The server-assigned ID for the operation."
            },
            "zone": {
              "type": "string",
              "description": "The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the operation is taking place. This field is deprecated, use location instead."
            },
            "error": {
              "id": "Status",
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The status code, which should be an enum value of google.rpc.Code."
                },
                "details": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  },
                  "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
                },
                "message": {
                  "type": "string",
                  "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                }
              },
              "description": "The error result of the operation in case of failure."
            },
            "detail": {
              "type": "string",
              "description": "Detailed operation progress, if available."
            },
            "status": {
              "enum": [
                "STATUS_UNSPECIFIED",
                "PENDING",
                "RUNNING",
                "DONE",
                "ABORTING"
              ],
              "type": "string",
              "description": "The current status of the operation.",
              "enumDescriptions": [
                "Not set.",
                "The operation has been created.",
                "The operation is currently running.",
                "The operation is done, either cancelled or completed.",
                "The operation is aborting."
              ]
            },
            "endTime": {
              "type": "string",
              "description": "[Output only] The time the operation completed, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "location": {
              "type": "string",
              "description": "[Output only] The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) or [region](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) in which the cluster resides."
            },
            "progress": {
              "id": "OperationProgress",
              "type": "object",
              "readOnly": true,
              "properties": {
                "name": {
                  "type": "string",
                  "description": "A non-parameterized string describing an operation stage. Unset for single-stage operations."
                },
                "stages": {
                  "type": "array",
                  "items": {
                    "id": "OperationProgress",
                    "type": "object",
                    "properties": {},
                    "description": "Information about operation (or operation stage) progress."
                  },
                  "description": "Substages of an operation or a stage."
                },
                "status": {
                  "enum": [
                    "STATUS_UNSPECIFIED",
                    "PENDING",
                    "RUNNING",
                    "DONE",
                    "ABORTING"
                  ],
                  "type": "string",
                  "description": "Status of an operation stage. Unset for single-stage operations.",
                  "enumDescriptions": [
                    "Not set.",
                    "The operation has been created.",
                    "The operation is currently running.",
                    "The operation is done, either cancelled or completed.",
                    "The operation is aborting."
                  ]
                },
                "metrics": {
                  "type": "array",
                  "items": {
                    "id": "Metric",
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Required. Metric name, e.g., \"nodes total\", \"percent done\"."
                      },
                      "intValue": {
                        "type": "string",
                        "format": "int64",
                        "description": "For metrics with integer value."
                      },
                      "doubleValue": {
                        "type": "number",
                        "format": "double",
                        "description": "For metrics with floating point value."
                      },
                      "stringValue": {
                        "type": "string",
                        "description": "For metrics with custom values (ratios, visual progress, etc.)."
                      }
                    },
                    "description": "Progress metric is (string, int|float|string) pair."
                  },
                  "description": "Progress metric bundle, for example: metrics: [{name: \"nodes done\", int_value: 15}, {name: \"nodes total\", int_value: 32}] or metrics: [{name: \"progress\", double_value: 0.56}, {name: \"progress scale\", double_value: 1.0}]"
                }
              },
              "description": "Output only. [Output only] Progress information for an operation."
            },
            "selfLink": {
              "type": "string",
              "description": "Server-defined URL for the resource."
            },
            "startTime": {
              "type": "string",
              "description": "[Output only] The time the operation started, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "targetLink": {
              "type": "string",
              "description": "Server-defined URL for the target of the operation."
            },
            "operationType": {
              "enum": [
                "TYPE_UNSPECIFIED",
                "CREATE_CLUSTER",
                "DELETE_CLUSTER",
                "UPGRADE_MASTER",
                "UPGRADE_NODES",
                "REPAIR_CLUSTER",
                "UPDATE_CLUSTER",
                "CREATE_NODE_POOL",
                "DELETE_NODE_POOL",
                "SET_NODE_POOL_MANAGEMENT",
                "AUTO_REPAIR_NODES",
                "AUTO_UPGRADE_NODES",
                "SET_LABELS",
                "SET_MASTER_AUTH",
                "SET_NODE_POOL_SIZE",
                "SET_NETWORK_POLICY",
                "SET_MAINTENANCE_POLICY"
              ],
              "type": "string",
              "description": "The operation type.",
              "enumDescriptions": [
                "Not set.",
                "Cluster create.",
                "Cluster delete.",
                "A master upgrade.",
                "A node upgrade.",
                "Cluster repair.",
                "Cluster update.",
                "Node pool create.",
                "Node pool delete.",
                "Set node pool management.",
                "Automatic node pool repair.",
                "Automatic node upgrade.",
                "Set labels.",
                "Set/generate master auth materials",
                "Set node pool size.",
                "Updates network policy for a cluster.",
                "Set the maintenance policy."
              ]
            },
            "statusMessage": {
              "type": "string",
              "readOnly": true,
              "description": "Output only. If an error has occurred, a textual description of the error. Deprecated. Use the field error instead."
            },
            "clusterConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current cluster state. Deprecated. Use field error instead."
            },
            "nodepoolConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current node pool state. Deprecated. Use field error instead."
            }
          },
          "description": "This operation resource represents operations that may have happened or are happening on the cluster. All fields are output only."
        }
      ]
  projects.zones.clusters.get:
    description: |-
      Gets the details of a specific cluster.
    versions:
      from: 1.0.0-beta1
    link: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.zones.clusters/get
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  projects.zones.clusters.legacyAbac:
    description: |-
      Enables or disables the ABAC authorization mechanism on a cluster.
    versions:
      from: 1.0.0-beta1
    link: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.zones.clusters/legacyAbac
    example:
      inputs: [
        {
          "id": "SetLegacyAbacRequest",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name (project, location, cluster id) of the cluster to set legacy abac. Specified in the format `projects/*/locations/*/clusters/*`."
            },
            "zone": {
              "type": "string",
              "description": "Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field."
            },
            "enabled": {
              "type": "boolean",
              "description": "Required. Whether ABAC authorization will be enabled in the cluster."
            },
            "clusterId": {
              "type": "string",
              "description": "Deprecated. The name of the cluster to update. This field has been deprecated and replaced by the name field."
            },
            "projectId": {
              "type": "string",
              "description": "Deprecated. The Google Developers Console [project ID or project number](https://support.google.com/cloud/answer/6158840). This field has been deprecated and replaced by the name field."
            }
          },
          "description": "SetLegacyAbacRequest enables or disables the ABAC authorization mechanism for a cluster."
        }
      ]
      outputs: [
        {
          "id": "Operation",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The server-assigned ID for the operation."
            },
            "zone": {
              "type": "string",
              "description": "The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the operation is taking place. This field is deprecated, use location instead."
            },
            "error": {
              "id": "Status",
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The status code, which should be an enum value of google.rpc.Code."
                },
                "details": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  },
                  "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
                },
                "message": {
                  "type": "string",
                  "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                }
              },
              "description": "The error result of the operation in case of failure."
            },
            "detail": {
              "type": "string",
              "description": "Detailed operation progress, if available."
            },
            "status": {
              "enum": [
                "STATUS_UNSPECIFIED",
                "PENDING",
                "RUNNING",
                "DONE",
                "ABORTING"
              ],
              "type": "string",
              "description": "The current status of the operation.",
              "enumDescriptions": [
                "Not set.",
                "The operation has been created.",
                "The operation is currently running.",
                "The operation is done, either cancelled or completed.",
                "The operation is aborting."
              ]
            },
            "endTime": {
              "type": "string",
              "description": "[Output only] The time the operation completed, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "location": {
              "type": "string",
              "description": "[Output only] The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) or [region](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) in which the cluster resides."
            },
            "progress": {
              "id": "OperationProgress",
              "type": "object",
              "readOnly": true,
              "properties": {
                "name": {
                  "type": "string",
                  "description": "A non-parameterized string describing an operation stage. Unset for single-stage operations."
                },
                "stages": {
                  "type": "array",
                  "items": {
                    "id": "OperationProgress",
                    "type": "object",
                    "properties": {},
                    "description": "Information about operation (or operation stage) progress."
                  },
                  "description": "Substages of an operation or a stage."
                },
                "status": {
                  "enum": [
                    "STATUS_UNSPECIFIED",
                    "PENDING",
                    "RUNNING",
                    "DONE",
                    "ABORTING"
                  ],
                  "type": "string",
                  "description": "Status of an operation stage. Unset for single-stage operations.",
                  "enumDescriptions": [
                    "Not set.",
                    "The operation has been created.",
                    "The operation is currently running.",
                    "The operation is done, either cancelled or completed.",
                    "The operation is aborting."
                  ]
                },
                "metrics": {
                  "type": "array",
                  "items": {
                    "id": "Metric",
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Required. Metric name, e.g., \"nodes total\", \"percent done\"."
                      },
                      "intValue": {
                        "type": "string",
                        "format": "int64",
                        "description": "For metrics with integer value."
                      },
                      "doubleValue": {
                        "type": "number",
                        "format": "double",
                        "description": "For metrics with floating point value."
                      },
                      "stringValue": {
                        "type": "string",
                        "description": "For metrics with custom values (ratios, visual progress, etc.)."
                      }
                    },
                    "description": "Progress metric is (string, int|float|string) pair."
                  },
                  "description": "Progress metric bundle, for example: metrics: [{name: \"nodes done\", int_value: 15}, {name: \"nodes total\", int_value: 32}] or metrics: [{name: \"progress\", double_value: 0.56}, {name: \"progress scale\", double_value: 1.0}]"
                }
              },
              "description": "Output only. [Output only] Progress information for an operation."
            },
            "selfLink": {
              "type": "string",
              "description": "Server-defined URL for the resource."
            },
            "startTime": {
              "type": "string",
              "description": "[Output only] The time the operation started, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "targetLink": {
              "type": "string",
              "description": "Server-defined URL for the target of the operation."
            },
            "operationType": {
              "enum": [
                "TYPE_UNSPECIFIED",
                "CREATE_CLUSTER",
                "DELETE_CLUSTER",
                "UPGRADE_MASTER",
                "UPGRADE_NODES",
                "REPAIR_CLUSTER",
                "UPDATE_CLUSTER",
                "CREATE_NODE_POOL",
                "DELETE_NODE_POOL",
                "SET_NODE_POOL_MANAGEMENT",
                "AUTO_REPAIR_NODES",
                "AUTO_UPGRADE_NODES",
                "SET_LABELS",
                "SET_MASTER_AUTH",
                "SET_NODE_POOL_SIZE",
                "SET_NETWORK_POLICY",
                "SET_MAINTENANCE_POLICY"
              ],
              "type": "string",
              "description": "The operation type.",
              "enumDescriptions": [
                "Not set.",
                "Cluster create.",
                "Cluster delete.",
                "A master upgrade.",
                "A node upgrade.",
                "Cluster repair.",
                "Cluster update.",
                "Node pool create.",
                "Node pool delete.",
                "Set node pool management.",
                "Automatic node pool repair.",
                "Automatic node upgrade.",
                "Set labels.",
                "Set/generate master auth materials",
                "Set node pool size.",
                "Updates network policy for a cluster.",
                "Set the maintenance policy."
              ]
            },
            "statusMessage": {
              "type": "string",
              "readOnly": true,
              "description": "Output only. If an error has occurred, a textual description of the error. Deprecated. Use the field error instead."
            },
            "clusterConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current cluster state. Deprecated. Use field error instead."
            },
            "nodepoolConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current node pool state. Deprecated. Use field error instead."
            }
          },
          "description": "This operation resource represents operations that may have happened or are happening on the cluster. All fields are output only."
        }
      ]
  projects.zones.clusters.list:
    description: |-
      Lists all clusters owned by a project in either the specified zone or all zones.
    versions:
      from: 1.0.0-beta1
    link: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.zones.clusters/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  projects.zones.clusters.locations:
    description: |-
      Sets the locations for a specific cluster. Deprecated. Use [projects.locations.clusters.update](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters/update) instead.
    versions:
      from: 1.0.0-beta1
    link: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.zones.clusters/locations
    example:
      inputs: [
        {
          "id": "SetLocationsRequest",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name (project, location, cluster) of the cluster to set locations. Specified in the format `projects/*/locations/*/clusters/*`."
            },
            "zone": {
              "type": "string",
              "description": "Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field."
            },
            "clusterId": {
              "type": "string",
              "description": "Deprecated. The name of the cluster to upgrade. This field has been deprecated and replaced by the name field."
            },
            "locations": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Required. The desired list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the cluster's nodes should be located. Changing the locations a cluster is in will result in nodes being either created or removed from the cluster, depending on whether locations are being added or removed. This list must always include the cluster's primary zone."
            },
            "projectId": {
              "type": "string",
              "description": "Deprecated. The Google Developers Console [project ID or project number](https://support.google.com/cloud/answer/6158840). This field has been deprecated and replaced by the name field."
            }
          },
          "description": "SetLocationsRequest sets the locations of the cluster."
        }
      ]
      outputs: [
        {
          "id": "Operation",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The server-assigned ID for the operation."
            },
            "zone": {
              "type": "string",
              "description": "The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the operation is taking place. This field is deprecated, use location instead."
            },
            "error": {
              "id": "Status",
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The status code, which should be an enum value of google.rpc.Code."
                },
                "details": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  },
                  "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
                },
                "message": {
                  "type": "string",
                  "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                }
              },
              "description": "The error result of the operation in case of failure."
            },
            "detail": {
              "type": "string",
              "description": "Detailed operation progress, if available."
            },
            "status": {
              "enum": [
                "STATUS_UNSPECIFIED",
                "PENDING",
                "RUNNING",
                "DONE",
                "ABORTING"
              ],
              "type": "string",
              "description": "The current status of the operation.",
              "enumDescriptions": [
                "Not set.",
                "The operation has been created.",
                "The operation is currently running.",
                "The operation is done, either cancelled or completed.",
                "The operation is aborting."
              ]
            },
            "endTime": {
              "type": "string",
              "description": "[Output only] The time the operation completed, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "location": {
              "type": "string",
              "description": "[Output only] The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) or [region](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) in which the cluster resides."
            },
            "progress": {
              "id": "OperationProgress",
              "type": "object",
              "readOnly": true,
              "properties": {
                "name": {
                  "type": "string",
                  "description": "A non-parameterized string describing an operation stage. Unset for single-stage operations."
                },
                "stages": {
                  "type": "array",
                  "items": {
                    "id": "OperationProgress",
                    "type": "object",
                    "properties": {},
                    "description": "Information about operation (or operation stage) progress."
                  },
                  "description": "Substages of an operation or a stage."
                },
                "status": {
                  "enum": [
                    "STATUS_UNSPECIFIED",
                    "PENDING",
                    "RUNNING",
                    "DONE",
                    "ABORTING"
                  ],
                  "type": "string",
                  "description": "Status of an operation stage. Unset for single-stage operations.",
                  "enumDescriptions": [
                    "Not set.",
                    "The operation has been created.",
                    "The operation is currently running.",
                    "The operation is done, either cancelled or completed.",
                    "The operation is aborting."
                  ]
                },
                "metrics": {
                  "type": "array",
                  "items": {
                    "id": "Metric",
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Required. Metric name, e.g., \"nodes total\", \"percent done\"."
                      },
                      "intValue": {
                        "type": "string",
                        "format": "int64",
                        "description": "For metrics with integer value."
                      },
                      "doubleValue": {
                        "type": "number",
                        "format": "double",
                        "description": "For metrics with floating point value."
                      },
                      "stringValue": {
                        "type": "string",
                        "description": "For metrics with custom values (ratios, visual progress, etc.)."
                      }
                    },
                    "description": "Progress metric is (string, int|float|string) pair."
                  },
                  "description": "Progress metric bundle, for example: metrics: [{name: \"nodes done\", int_value: 15}, {name: \"nodes total\", int_value: 32}] or metrics: [{name: \"progress\", double_value: 0.56}, {name: \"progress scale\", double_value: 1.0}]"
                }
              },
              "description": "Output only. [Output only] Progress information for an operation."
            },
            "selfLink": {
              "type": "string",
              "description": "Server-defined URL for the resource."
            },
            "startTime": {
              "type": "string",
              "description": "[Output only] The time the operation started, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "targetLink": {
              "type": "string",
              "description": "Server-defined URL for the target of the operation."
            },
            "operationType": {
              "enum": [
                "TYPE_UNSPECIFIED",
                "CREATE_CLUSTER",
                "DELETE_CLUSTER",
                "UPGRADE_MASTER",
                "UPGRADE_NODES",
                "REPAIR_CLUSTER",
                "UPDATE_CLUSTER",
                "CREATE_NODE_POOL",
                "DELETE_NODE_POOL",
                "SET_NODE_POOL_MANAGEMENT",
                "AUTO_REPAIR_NODES",
                "AUTO_UPGRADE_NODES",
                "SET_LABELS",
                "SET_MASTER_AUTH",
                "SET_NODE_POOL_SIZE",
                "SET_NETWORK_POLICY",
                "SET_MAINTENANCE_POLICY"
              ],
              "type": "string",
              "description": "The operation type.",
              "enumDescriptions": [
                "Not set.",
                "Cluster create.",
                "Cluster delete.",
                "A master upgrade.",
                "A node upgrade.",
                "Cluster repair.",
                "Cluster update.",
                "Node pool create.",
                "Node pool delete.",
                "Set node pool management.",
                "Automatic node pool repair.",
                "Automatic node upgrade.",
                "Set labels.",
                "Set/generate master auth materials",
                "Set node pool size.",
                "Updates network policy for a cluster.",
                "Set the maintenance policy."
              ]
            },
            "statusMessage": {
              "type": "string",
              "readOnly": true,
              "description": "Output only. If an error has occurred, a textual description of the error. Deprecated. Use the field error instead."
            },
            "clusterConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current cluster state. Deprecated. Use field error instead."
            },
            "nodepoolConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current node pool state. Deprecated. Use field error instead."
            }
          },
          "description": "This operation resource represents operations that may have happened or are happening on the cluster. All fields are output only."
        }
      ]
  projects.zones.clusters.logging:
    description: |-
      Sets the logging service for a specific cluster.
    versions:
      from: 1.0.0-beta1
    link: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.zones.clusters/logging
    example:
      inputs: [
        {
          "id": "SetLoggingServiceRequest",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name (project, location, cluster) of the cluster to set logging. Specified in the format `projects/*/locations/*/clusters/*`."
            },
            "zone": {
              "type": "string",
              "description": "Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field."
            },
            "clusterId": {
              "type": "string",
              "description": "Deprecated. The name of the cluster to upgrade. This field has been deprecated and replaced by the name field."
            },
            "projectId": {
              "type": "string",
              "description": "Deprecated. The Google Developers Console [project ID or project number](https://support.google.com/cloud/answer/6158840). This field has been deprecated and replaced by the name field."
            },
            "loggingService": {
              "type": "string",
              "description": "Required. The logging service the cluster should use to write logs. Currently available options: * `logging.googleapis.com/kubernetes` - The Cloud Logging service with a Kubernetes-native resource model * `logging.googleapis.com` - The legacy Cloud Logging service (no longer available as of GKE 1.15). * `none` - no logs will be exported from the cluster. If left as an empty string,`logging.googleapis.com/kubernetes` will be used for GKE 1.14+ or `logging.googleapis.com` for earlier versions."
            }
          },
          "description": "SetLoggingServiceRequest sets the logging service of a cluster."
        }
      ]
      outputs: [
        {
          "id": "Operation",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The server-assigned ID for the operation."
            },
            "zone": {
              "type": "string",
              "description": "The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the operation is taking place. This field is deprecated, use location instead."
            },
            "error": {
              "id": "Status",
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The status code, which should be an enum value of google.rpc.Code."
                },
                "details": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  },
                  "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
                },
                "message": {
                  "type": "string",
                  "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                }
              },
              "description": "The error result of the operation in case of failure."
            },
            "detail": {
              "type": "string",
              "description": "Detailed operation progress, if available."
            },
            "status": {
              "enum": [
                "STATUS_UNSPECIFIED",
                "PENDING",
                "RUNNING",
                "DONE",
                "ABORTING"
              ],
              "type": "string",
              "description": "The current status of the operation.",
              "enumDescriptions": [
                "Not set.",
                "The operation has been created.",
                "The operation is currently running.",
                "The operation is done, either cancelled or completed.",
                "The operation is aborting."
              ]
            },
            "endTime": {
              "type": "string",
              "description": "[Output only] The time the operation completed, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "location": {
              "type": "string",
              "description": "[Output only] The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) or [region](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) in which the cluster resides."
            },
            "progress": {
              "id": "OperationProgress",
              "type": "object",
              "readOnly": true,
              "properties": {
                "name": {
                  "type": "string",
                  "description": "A non-parameterized string describing an operation stage. Unset for single-stage operations."
                },
                "stages": {
                  "type": "array",
                  "items": {
                    "id": "OperationProgress",
                    "type": "object",
                    "properties": {},
                    "description": "Information about operation (or operation stage) progress."
                  },
                  "description": "Substages of an operation or a stage."
                },
                "status": {
                  "enum": [
                    "STATUS_UNSPECIFIED",
                    "PENDING",
                    "RUNNING",
                    "DONE",
                    "ABORTING"
                  ],
                  "type": "string",
                  "description": "Status of an operation stage. Unset for single-stage operations.",
                  "enumDescriptions": [
                    "Not set.",
                    "The operation has been created.",
                    "The operation is currently running.",
                    "The operation is done, either cancelled or completed.",
                    "The operation is aborting."
                  ]
                },
                "metrics": {
                  "type": "array",
                  "items": {
                    "id": "Metric",
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Required. Metric name, e.g., \"nodes total\", \"percent done\"."
                      },
                      "intValue": {
                        "type": "string",
                        "format": "int64",
                        "description": "For metrics with integer value."
                      },
                      "doubleValue": {
                        "type": "number",
                        "format": "double",
                        "description": "For metrics with floating point value."
                      },
                      "stringValue": {
                        "type": "string",
                        "description": "For metrics with custom values (ratios, visual progress, etc.)."
                      }
                    },
                    "description": "Progress metric is (string, int|float|string) pair."
                  },
                  "description": "Progress metric bundle, for example: metrics: [{name: \"nodes done\", int_value: 15}, {name: \"nodes total\", int_value: 32}] or metrics: [{name: \"progress\", double_value: 0.56}, {name: \"progress scale\", double_value: 1.0}]"
                }
              },
              "description": "Output only. [Output only] Progress information for an operation."
            },
            "selfLink": {
              "type": "string",
              "description": "Server-defined URL for the resource."
            },
            "startTime": {
              "type": "string",
              "description": "[Output only] The time the operation started, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "targetLink": {
              "type": "string",
              "description": "Server-defined URL for the target of the operation."
            },
            "operationType": {
              "enum": [
                "TYPE_UNSPECIFIED",
                "CREATE_CLUSTER",
                "DELETE_CLUSTER",
                "UPGRADE_MASTER",
                "UPGRADE_NODES",
                "REPAIR_CLUSTER",
                "UPDATE_CLUSTER",
                "CREATE_NODE_POOL",
                "DELETE_NODE_POOL",
                "SET_NODE_POOL_MANAGEMENT",
                "AUTO_REPAIR_NODES",
                "AUTO_UPGRADE_NODES",
                "SET_LABELS",
                "SET_MASTER_AUTH",
                "SET_NODE_POOL_SIZE",
                "SET_NETWORK_POLICY",
                "SET_MAINTENANCE_POLICY"
              ],
              "type": "string",
              "description": "The operation type.",
              "enumDescriptions": [
                "Not set.",
                "Cluster create.",
                "Cluster delete.",
                "A master upgrade.",
                "A node upgrade.",
                "Cluster repair.",
                "Cluster update.",
                "Node pool create.",
                "Node pool delete.",
                "Set node pool management.",
                "Automatic node pool repair.",
                "Automatic node upgrade.",
                "Set labels.",
                "Set/generate master auth materials",
                "Set node pool size.",
                "Updates network policy for a cluster.",
                "Set the maintenance policy."
              ]
            },
            "statusMessage": {
              "type": "string",
              "readOnly": true,
              "description": "Output only. If an error has occurred, a textual description of the error. Deprecated. Use the field error instead."
            },
            "clusterConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current cluster state. Deprecated. Use field error instead."
            },
            "nodepoolConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current node pool state. Deprecated. Use field error instead."
            }
          },
          "description": "This operation resource represents operations that may have happened or are happening on the cluster. All fields are output only."
        }
      ]
  projects.zones.clusters.master:
    description: |-
      Updates the master for a specific cluster.
    versions:
      from: 1.0.0-beta1
    link: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.zones.clusters/master
    example:
      inputs: [
        {
          "id": "UpdateMasterRequest",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name (project, location, cluster) of the cluster to update. Specified in the format `projects/*/locations/*/clusters/*`."
            },
            "zone": {
              "type": "string",
              "description": "Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field."
            },
            "clusterId": {
              "type": "string",
              "description": "Deprecated. The name of the cluster to upgrade. This field has been deprecated and replaced by the name field."
            },
            "projectId": {
              "type": "string",
              "description": "Deprecated. The Google Developers Console [project ID or project number](https://support.google.com/cloud/answer/6158840). This field has been deprecated and replaced by the name field."
            },
            "masterVersion": {
              "type": "string",
              "description": "Required. The Kubernetes version to change the master to. Users may specify either explicit versions offered by Kubernetes Engine or version aliases, which have the following behavior: - \"latest\": picks the highest valid Kubernetes version - \"1.X\": picks the highest valid patch+gke.N patch in the 1.X version - \"1.X.Y\": picks the highest valid gke.N patch in the 1.X.Y version - \"1.X.Y-gke.N\": picks an explicit Kubernetes version - \"-\": picks the default Kubernetes version"
            }
          },
          "description": "UpdateMasterRequest updates the master of the cluster."
        }
      ]
      outputs: [
        {
          "id": "Operation",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The server-assigned ID for the operation."
            },
            "zone": {
              "type": "string",
              "description": "The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the operation is taking place. This field is deprecated, use location instead."
            },
            "error": {
              "id": "Status",
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The status code, which should be an enum value of google.rpc.Code."
                },
                "details": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  },
                  "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
                },
                "message": {
                  "type": "string",
                  "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                }
              },
              "description": "The error result of the operation in case of failure."
            },
            "detail": {
              "type": "string",
              "description": "Detailed operation progress, if available."
            },
            "status": {
              "enum": [
                "STATUS_UNSPECIFIED",
                "PENDING",
                "RUNNING",
                "DONE",
                "ABORTING"
              ],
              "type": "string",
              "description": "The current status of the operation.",
              "enumDescriptions": [
                "Not set.",
                "The operation has been created.",
                "The operation is currently running.",
                "The operation is done, either cancelled or completed.",
                "The operation is aborting."
              ]
            },
            "endTime": {
              "type": "string",
              "description": "[Output only] The time the operation completed, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "location": {
              "type": "string",
              "description": "[Output only] The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) or [region](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) in which the cluster resides."
            },
            "progress": {
              "id": "OperationProgress",
              "type": "object",
              "readOnly": true,
              "properties": {
                "name": {
                  "type": "string",
                  "description": "A non-parameterized string describing an operation stage. Unset for single-stage operations."
                },
                "stages": {
                  "type": "array",
                  "items": {
                    "id": "OperationProgress",
                    "type": "object",
                    "properties": {},
                    "description": "Information about operation (or operation stage) progress."
                  },
                  "description": "Substages of an operation or a stage."
                },
                "status": {
                  "enum": [
                    "STATUS_UNSPECIFIED",
                    "PENDING",
                    "RUNNING",
                    "DONE",
                    "ABORTING"
                  ],
                  "type": "string",
                  "description": "Status of an operation stage. Unset for single-stage operations.",
                  "enumDescriptions": [
                    "Not set.",
                    "The operation has been created.",
                    "The operation is currently running.",
                    "The operation is done, either cancelled or completed.",
                    "The operation is aborting."
                  ]
                },
                "metrics": {
                  "type": "array",
                  "items": {
                    "id": "Metric",
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Required. Metric name, e.g., \"nodes total\", \"percent done\"."
                      },
                      "intValue": {
                        "type": "string",
                        "format": "int64",
                        "description": "For metrics with integer value."
                      },
                      "doubleValue": {
                        "type": "number",
                        "format": "double",
                        "description": "For metrics with floating point value."
                      },
                      "stringValue": {
                        "type": "string",
                        "description": "For metrics with custom values (ratios, visual progress, etc.)."
                      }
                    },
                    "description": "Progress metric is (string, int|float|string) pair."
                  },
                  "description": "Progress metric bundle, for example: metrics: [{name: \"nodes done\", int_value: 15}, {name: \"nodes total\", int_value: 32}] or metrics: [{name: \"progress\", double_value: 0.56}, {name: \"progress scale\", double_value: 1.0}]"
                }
              },
              "description": "Output only. [Output only] Progress information for an operation."
            },
            "selfLink": {
              "type": "string",
              "description": "Server-defined URL for the resource."
            },
            "startTime": {
              "type": "string",
              "description": "[Output only] The time the operation started, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "targetLink": {
              "type": "string",
              "description": "Server-defined URL for the target of the operation."
            },
            "operationType": {
              "enum": [
                "TYPE_UNSPECIFIED",
                "CREATE_CLUSTER",
                "DELETE_CLUSTER",
                "UPGRADE_MASTER",
                "UPGRADE_NODES",
                "REPAIR_CLUSTER",
                "UPDATE_CLUSTER",
                "CREATE_NODE_POOL",
                "DELETE_NODE_POOL",
                "SET_NODE_POOL_MANAGEMENT",
                "AUTO_REPAIR_NODES",
                "AUTO_UPGRADE_NODES",
                "SET_LABELS",
                "SET_MASTER_AUTH",
                "SET_NODE_POOL_SIZE",
                "SET_NETWORK_POLICY",
                "SET_MAINTENANCE_POLICY"
              ],
              "type": "string",
              "description": "The operation type.",
              "enumDescriptions": [
                "Not set.",
                "Cluster create.",
                "Cluster delete.",
                "A master upgrade.",
                "A node upgrade.",
                "Cluster repair.",
                "Cluster update.",
                "Node pool create.",
                "Node pool delete.",
                "Set node pool management.",
                "Automatic node pool repair.",
                "Automatic node upgrade.",
                "Set labels.",
                "Set/generate master auth materials",
                "Set node pool size.",
                "Updates network policy for a cluster.",
                "Set the maintenance policy."
              ]
            },
            "statusMessage": {
              "type": "string",
              "readOnly": true,
              "description": "Output only. If an error has occurred, a textual description of the error. Deprecated. Use the field error instead."
            },
            "clusterConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current cluster state. Deprecated. Use field error instead."
            },
            "nodepoolConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current node pool state. Deprecated. Use field error instead."
            }
          },
          "description": "This operation resource represents operations that may have happened or are happening on the cluster. All fields are output only."
        }
      ]
  projects.zones.clusters.monitoring:
    description: |-
      Sets the monitoring service for a specific cluster.
    versions:
      from: 1.0.0-beta1
    link: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.zones.clusters/monitoring
    example:
      inputs: [
        {
          "id": "SetMonitoringServiceRequest",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name (project, location, cluster) of the cluster to set monitoring. Specified in the format `projects/*/locations/*/clusters/*`."
            },
            "zone": {
              "type": "string",
              "description": "Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field."
            },
            "clusterId": {
              "type": "string",
              "description": "Deprecated. The name of the cluster to upgrade. This field has been deprecated and replaced by the name field."
            },
            "projectId": {
              "type": "string",
              "description": "Deprecated. The Google Developers Console [project ID or project number](https://support.google.com/cloud/answer/6158840). This field has been deprecated and replaced by the name field."
            },
            "monitoringService": {
              "type": "string",
              "description": "Required. The monitoring service the cluster should use to write metrics. Currently available options: * \"monitoring.googleapis.com/kubernetes\" - The Cloud Monitoring service with a Kubernetes-native resource model * `monitoring.googleapis.com` - The legacy Cloud Monitoring service (no longer available as of GKE 1.15). * `none` - No metrics will be exported from the cluster. If left as an empty string,`monitoring.googleapis.com/kubernetes` will be used for GKE 1.14+ or `monitoring.googleapis.com` for earlier versions."
            }
          },
          "description": "SetMonitoringServiceRequest sets the monitoring service of a cluster."
        }
      ]
      outputs: [
        {
          "id": "Operation",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The server-assigned ID for the operation."
            },
            "zone": {
              "type": "string",
              "description": "The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the operation is taking place. This field is deprecated, use location instead."
            },
            "error": {
              "id": "Status",
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The status code, which should be an enum value of google.rpc.Code."
                },
                "details": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  },
                  "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
                },
                "message": {
                  "type": "string",
                  "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                }
              },
              "description": "The error result of the operation in case of failure."
            },
            "detail": {
              "type": "string",
              "description": "Detailed operation progress, if available."
            },
            "status": {
              "enum": [
                "STATUS_UNSPECIFIED",
                "PENDING",
                "RUNNING",
                "DONE",
                "ABORTING"
              ],
              "type": "string",
              "description": "The current status of the operation.",
              "enumDescriptions": [
                "Not set.",
                "The operation has been created.",
                "The operation is currently running.",
                "The operation is done, either cancelled or completed.",
                "The operation is aborting."
              ]
            },
            "endTime": {
              "type": "string",
              "description": "[Output only] The time the operation completed, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "location": {
              "type": "string",
              "description": "[Output only] The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) or [region](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) in which the cluster resides."
            },
            "progress": {
              "id": "OperationProgress",
              "type": "object",
              "readOnly": true,
              "properties": {
                "name": {
                  "type": "string",
                  "description": "A non-parameterized string describing an operation stage. Unset for single-stage operations."
                },
                "stages": {
                  "type": "array",
                  "items": {
                    "id": "OperationProgress",
                    "type": "object",
                    "properties": {},
                    "description": "Information about operation (or operation stage) progress."
                  },
                  "description": "Substages of an operation or a stage."
                },
                "status": {
                  "enum": [
                    "STATUS_UNSPECIFIED",
                    "PENDING",
                    "RUNNING",
                    "DONE",
                    "ABORTING"
                  ],
                  "type": "string",
                  "description": "Status of an operation stage. Unset for single-stage operations.",
                  "enumDescriptions": [
                    "Not set.",
                    "The operation has been created.",
                    "The operation is currently running.",
                    "The operation is done, either cancelled or completed.",
                    "The operation is aborting."
                  ]
                },
                "metrics": {
                  "type": "array",
                  "items": {
                    "id": "Metric",
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Required. Metric name, e.g., \"nodes total\", \"percent done\"."
                      },
                      "intValue": {
                        "type": "string",
                        "format": "int64",
                        "description": "For metrics with integer value."
                      },
                      "doubleValue": {
                        "type": "number",
                        "format": "double",
                        "description": "For metrics with floating point value."
                      },
                      "stringValue": {
                        "type": "string",
                        "description": "For metrics with custom values (ratios, visual progress, etc.)."
                      }
                    },
                    "description": "Progress metric is (string, int|float|string) pair."
                  },
                  "description": "Progress metric bundle, for example: metrics: [{name: \"nodes done\", int_value: 15}, {name: \"nodes total\", int_value: 32}] or metrics: [{name: \"progress\", double_value: 0.56}, {name: \"progress scale\", double_value: 1.0}]"
                }
              },
              "description": "Output only. [Output only] Progress information for an operation."
            },
            "selfLink": {
              "type": "string",
              "description": "Server-defined URL for the resource."
            },
            "startTime": {
              "type": "string",
              "description": "[Output only] The time the operation started, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "targetLink": {
              "type": "string",
              "description": "Server-defined URL for the target of the operation."
            },
            "operationType": {
              "enum": [
                "TYPE_UNSPECIFIED",
                "CREATE_CLUSTER",
                "DELETE_CLUSTER",
                "UPGRADE_MASTER",
                "UPGRADE_NODES",
                "REPAIR_CLUSTER",
                "UPDATE_CLUSTER",
                "CREATE_NODE_POOL",
                "DELETE_NODE_POOL",
                "SET_NODE_POOL_MANAGEMENT",
                "AUTO_REPAIR_NODES",
                "AUTO_UPGRADE_NODES",
                "SET_LABELS",
                "SET_MASTER_AUTH",
                "SET_NODE_POOL_SIZE",
                "SET_NETWORK_POLICY",
                "SET_MAINTENANCE_POLICY"
              ],
              "type": "string",
              "description": "The operation type.",
              "enumDescriptions": [
                "Not set.",
                "Cluster create.",
                "Cluster delete.",
                "A master upgrade.",
                "A node upgrade.",
                "Cluster repair.",
                "Cluster update.",
                "Node pool create.",
                "Node pool delete.",
                "Set node pool management.",
                "Automatic node pool repair.",
                "Automatic node upgrade.",
                "Set labels.",
                "Set/generate master auth materials",
                "Set node pool size.",
                "Updates network policy for a cluster.",
                "Set the maintenance policy."
              ]
            },
            "statusMessage": {
              "type": "string",
              "readOnly": true,
              "description": "Output only. If an error has occurred, a textual description of the error. Deprecated. Use the field error instead."
            },
            "clusterConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current cluster state. Deprecated. Use field error instead."
            },
            "nodepoolConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current node pool state. Deprecated. Use field error instead."
            }
          },
          "description": "This operation resource represents operations that may have happened or are happening on the cluster. All fields are output only."
        }
      ]
  projects.zones.clusters.nodePools.autoscaling:
    description: |-
      Sets the autoscaling settings for the specified node pool.
    versions:
      from: 1.0.0-beta1
    link: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.zones.clusters.nodePools/autoscaling
    example:
      inputs: [
        {
          "id": "SetNodePoolAutoscalingRequest",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name (project, location, cluster, node pool) of the node pool to set autoscaler settings. Specified in the format `projects/*/locations/*/clusters/*/nodePools/*`."
            },
            "zone": {
              "type": "string",
              "description": "Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field."
            },
            "clusterId": {
              "type": "string",
              "description": "Deprecated. The name of the cluster to upgrade. This field has been deprecated and replaced by the name field."
            },
            "projectId": {
              "type": "string",
              "description": "Deprecated. The Google Developers Console [project ID or project number](https://support.google.com/cloud/answer/6158840). This field has been deprecated and replaced by the name field."
            },
            "nodePoolId": {
              "type": "string",
              "description": "Deprecated. The name of the node pool to upgrade. This field has been deprecated and replaced by the name field."
            },
            "autoscaling": {
              "id": "NodePoolAutoscaling",
              "type": "object",
              "properties": {
                "enabled": {
                  "type": "boolean",
                  "description": "Is autoscaling enabled for this node pool."
                },
                "maxNodeCount": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Maximum number of nodes in the NodePool. Must be >= min_node_count. There has to enough quota to scale up the cluster."
                },
                "minNodeCount": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Minimum number of nodes in the NodePool. Must be >= 1 and <= max_node_count."
                },
                "autoprovisioned": {
                  "type": "boolean",
                  "description": "Can this node pool be deleted automatically."
                }
              },
              "description": "Required. Autoscaling configuration for the node pool."
            }
          },
          "description": "SetNodePoolAutoscalingRequest sets the autoscaler settings of a node pool."
        }
      ]
      outputs: [
        {
          "id": "Operation",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The server-assigned ID for the operation."
            },
            "zone": {
              "type": "string",
              "description": "The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the operation is taking place. This field is deprecated, use location instead."
            },
            "error": {
              "id": "Status",
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The status code, which should be an enum value of google.rpc.Code."
                },
                "details": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  },
                  "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
                },
                "message": {
                  "type": "string",
                  "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                }
              },
              "description": "The error result of the operation in case of failure."
            },
            "detail": {
              "type": "string",
              "description": "Detailed operation progress, if available."
            },
            "status": {
              "enum": [
                "STATUS_UNSPECIFIED",
                "PENDING",
                "RUNNING",
                "DONE",
                "ABORTING"
              ],
              "type": "string",
              "description": "The current status of the operation.",
              "enumDescriptions": [
                "Not set.",
                "The operation has been created.",
                "The operation is currently running.",
                "The operation is done, either cancelled or completed.",
                "The operation is aborting."
              ]
            },
            "endTime": {
              "type": "string",
              "description": "[Output only] The time the operation completed, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "location": {
              "type": "string",
              "description": "[Output only] The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) or [region](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) in which the cluster resides."
            },
            "progress": {
              "id": "OperationProgress",
              "type": "object",
              "readOnly": true,
              "properties": {
                "name": {
                  "type": "string",
                  "description": "A non-parameterized string describing an operation stage. Unset for single-stage operations."
                },
                "stages": {
                  "type": "array",
                  "items": {
                    "id": "OperationProgress",
                    "type": "object",
                    "properties": {},
                    "description": "Information about operation (or operation stage) progress."
                  },
                  "description": "Substages of an operation or a stage."
                },
                "status": {
                  "enum": [
                    "STATUS_UNSPECIFIED",
                    "PENDING",
                    "RUNNING",
                    "DONE",
                    "ABORTING"
                  ],
                  "type": "string",
                  "description": "Status of an operation stage. Unset for single-stage operations.",
                  "enumDescriptions": [
                    "Not set.",
                    "The operation has been created.",
                    "The operation is currently running.",
                    "The operation is done, either cancelled or completed.",
                    "The operation is aborting."
                  ]
                },
                "metrics": {
                  "type": "array",
                  "items": {
                    "id": "Metric",
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Required. Metric name, e.g., \"nodes total\", \"percent done\"."
                      },
                      "intValue": {
                        "type": "string",
                        "format": "int64",
                        "description": "For metrics with integer value."
                      },
                      "doubleValue": {
                        "type": "number",
                        "format": "double",
                        "description": "For metrics with floating point value."
                      },
                      "stringValue": {
                        "type": "string",
                        "description": "For metrics with custom values (ratios, visual progress, etc.)."
                      }
                    },
                    "description": "Progress metric is (string, int|float|string) pair."
                  },
                  "description": "Progress metric bundle, for example: metrics: [{name: \"nodes done\", int_value: 15}, {name: \"nodes total\", int_value: 32}] or metrics: [{name: \"progress\", double_value: 0.56}, {name: \"progress scale\", double_value: 1.0}]"
                }
              },
              "description": "Output only. [Output only] Progress information for an operation."
            },
            "selfLink": {
              "type": "string",
              "description": "Server-defined URL for the resource."
            },
            "startTime": {
              "type": "string",
              "description": "[Output only] The time the operation started, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "targetLink": {
              "type": "string",
              "description": "Server-defined URL for the target of the operation."
            },
            "operationType": {
              "enum": [
                "TYPE_UNSPECIFIED",
                "CREATE_CLUSTER",
                "DELETE_CLUSTER",
                "UPGRADE_MASTER",
                "UPGRADE_NODES",
                "REPAIR_CLUSTER",
                "UPDATE_CLUSTER",
                "CREATE_NODE_POOL",
                "DELETE_NODE_POOL",
                "SET_NODE_POOL_MANAGEMENT",
                "AUTO_REPAIR_NODES",
                "AUTO_UPGRADE_NODES",
                "SET_LABELS",
                "SET_MASTER_AUTH",
                "SET_NODE_POOL_SIZE",
                "SET_NETWORK_POLICY",
                "SET_MAINTENANCE_POLICY"
              ],
              "type": "string",
              "description": "The operation type.",
              "enumDescriptions": [
                "Not set.",
                "Cluster create.",
                "Cluster delete.",
                "A master upgrade.",
                "A node upgrade.",
                "Cluster repair.",
                "Cluster update.",
                "Node pool create.",
                "Node pool delete.",
                "Set node pool management.",
                "Automatic node pool repair.",
                "Automatic node upgrade.",
                "Set labels.",
                "Set/generate master auth materials",
                "Set node pool size.",
                "Updates network policy for a cluster.",
                "Set the maintenance policy."
              ]
            },
            "statusMessage": {
              "type": "string",
              "readOnly": true,
              "description": "Output only. If an error has occurred, a textual description of the error. Deprecated. Use the field error instead."
            },
            "clusterConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current cluster state. Deprecated. Use field error instead."
            },
            "nodepoolConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current node pool state. Deprecated. Use field error instead."
            }
          },
          "description": "This operation resource represents operations that may have happened or are happening on the cluster. All fields are output only."
        }
      ]
  projects.zones.clusters.nodePools.create:
    description: |-
      Creates a node pool for a cluster.
    versions:
      from: 1.0.0-beta1
    link: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.zones.clusters.nodePools/create
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  projects.zones.clusters.nodePools.delete:
    description: |-
      Deletes a node pool from a cluster.
    versions:
      from: 1.0.0-beta1
    link: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.zones.clusters.nodePools/delete
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "Operation",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The server-assigned ID for the operation."
            },
            "zone": {
              "type": "string",
              "description": "The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the operation is taking place. This field is deprecated, use location instead."
            },
            "error": {
              "id": "Status",
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The status code, which should be an enum value of google.rpc.Code."
                },
                "details": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  },
                  "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
                },
                "message": {
                  "type": "string",
                  "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                }
              },
              "description": "The error result of the operation in case of failure."
            },
            "detail": {
              "type": "string",
              "description": "Detailed operation progress, if available."
            },
            "status": {
              "enum": [
                "STATUS_UNSPECIFIED",
                "PENDING",
                "RUNNING",
                "DONE",
                "ABORTING"
              ],
              "type": "string",
              "description": "The current status of the operation.",
              "enumDescriptions": [
                "Not set.",
                "The operation has been created.",
                "The operation is currently running.",
                "The operation is done, either cancelled or completed.",
                "The operation is aborting."
              ]
            },
            "endTime": {
              "type": "string",
              "description": "[Output only] The time the operation completed, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "location": {
              "type": "string",
              "description": "[Output only] The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) or [region](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) in which the cluster resides."
            },
            "progress": {
              "id": "OperationProgress",
              "type": "object",
              "readOnly": true,
              "properties": {
                "name": {
                  "type": "string",
                  "description": "A non-parameterized string describing an operation stage. Unset for single-stage operations."
                },
                "stages": {
                  "type": "array",
                  "items": {
                    "id": "OperationProgress",
                    "type": "object",
                    "properties": {},
                    "description": "Information about operation (or operation stage) progress."
                  },
                  "description": "Substages of an operation or a stage."
                },
                "status": {
                  "enum": [
                    "STATUS_UNSPECIFIED",
                    "PENDING",
                    "RUNNING",
                    "DONE",
                    "ABORTING"
                  ],
                  "type": "string",
                  "description": "Status of an operation stage. Unset for single-stage operations.",
                  "enumDescriptions": [
                    "Not set.",
                    "The operation has been created.",
                    "The operation is currently running.",
                    "The operation is done, either cancelled or completed.",
                    "The operation is aborting."
                  ]
                },
                "metrics": {
                  "type": "array",
                  "items": {
                    "id": "Metric",
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Required. Metric name, e.g., \"nodes total\", \"percent done\"."
                      },
                      "intValue": {
                        "type": "string",
                        "format": "int64",
                        "description": "For metrics with integer value."
                      },
                      "doubleValue": {
                        "type": "number",
                        "format": "double",
                        "description": "For metrics with floating point value."
                      },
                      "stringValue": {
                        "type": "string",
                        "description": "For metrics with custom values (ratios, visual progress, etc.)."
                      }
                    },
                    "description": "Progress metric is (string, int|float|string) pair."
                  },
                  "description": "Progress metric bundle, for example: metrics: [{name: \"nodes done\", int_value: 15}, {name: \"nodes total\", int_value: 32}] or metrics: [{name: \"progress\", double_value: 0.56}, {name: \"progress scale\", double_value: 1.0}]"
                }
              },
              "description": "Output only. [Output only] Progress information for an operation."
            },
            "selfLink": {
              "type": "string",
              "description": "Server-defined URL for the resource."
            },
            "startTime": {
              "type": "string",
              "description": "[Output only] The time the operation started, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "targetLink": {
              "type": "string",
              "description": "Server-defined URL for the target of the operation."
            },
            "operationType": {
              "enum": [
                "TYPE_UNSPECIFIED",
                "CREATE_CLUSTER",
                "DELETE_CLUSTER",
                "UPGRADE_MASTER",
                "UPGRADE_NODES",
                "REPAIR_CLUSTER",
                "UPDATE_CLUSTER",
                "CREATE_NODE_POOL",
                "DELETE_NODE_POOL",
                "SET_NODE_POOL_MANAGEMENT",
                "AUTO_REPAIR_NODES",
                "AUTO_UPGRADE_NODES",
                "SET_LABELS",
                "SET_MASTER_AUTH",
                "SET_NODE_POOL_SIZE",
                "SET_NETWORK_POLICY",
                "SET_MAINTENANCE_POLICY"
              ],
              "type": "string",
              "description": "The operation type.",
              "enumDescriptions": [
                "Not set.",
                "Cluster create.",
                "Cluster delete.",
                "A master upgrade.",
                "A node upgrade.",
                "Cluster repair.",
                "Cluster update.",
                "Node pool create.",
                "Node pool delete.",
                "Set node pool management.",
                "Automatic node pool repair.",
                "Automatic node upgrade.",
                "Set labels.",
                "Set/generate master auth materials",
                "Set node pool size.",
                "Updates network policy for a cluster.",
                "Set the maintenance policy."
              ]
            },
            "statusMessage": {
              "type": "string",
              "readOnly": true,
              "description": "Output only. If an error has occurred, a textual description of the error. Deprecated. Use the field error instead."
            },
            "clusterConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current cluster state. Deprecated. Use field error instead."
            },
            "nodepoolConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current node pool state. Deprecated. Use field error instead."
            }
          },
          "description": "This operation resource represents operations that may have happened or are happening on the cluster. All fields are output only."
        }
      ]
  projects.zones.clusters.nodePools.get:
    description: |-
      Retrieves the requested node pool.
    versions:
      from: 1.0.0-beta1
    link: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.zones.clusters.nodePools/get
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "NodePool",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the node pool."
            },
            "config": {
              "id": "NodeConfig",
              "type": "object",
              "properties": {
                "tags": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "The list of instance tags applied to all nodes. Tags are used to identify valid sources or targets for network firewalls and are specified by the client during cluster or node pool creation. Each tag within the list must comply with RFC1035."
                },
                "labels": {
                  "type": "object",
                  "description": "The map of Kubernetes labels (key/value pairs) to be applied to each node. These will added in addition to any default label(s) that Kubernetes may apply to the node. In case of conflict in label keys, the applied set may differ depending on the Kubernetes version -- it's best to assume the behavior is undefined and conflicts should be avoided. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "taints": {
                  "type": "array",
                  "items": {
                    "id": "NodeTaint",
                    "type": "object",
                    "properties": {
                      "key": {
                        "type": "string",
                        "description": "Key for taint."
                      },
                      "value": {
                        "type": "string",
                        "description": "Value for taint."
                      },
                      "effect": {
                        "enum": [
                          "EFFECT_UNSPECIFIED",
                          "NO_SCHEDULE",
                          "PREFER_NO_SCHEDULE",
                          "NO_EXECUTE"
                        ],
                        "type": "string",
                        "description": "Effect for taint.",
                        "enumDescriptions": [
                          "Not set",
                          "NoSchedule",
                          "PreferNoSchedule",
                          "NoExecute"
                        ]
                      }
                    },
                    "description": "Kubernetes taint is comprised of three fields: key, value, and effect. Effect can only be one of three types: NoSchedule, PreferNoSchedule or NoExecute. See [here](https://kubernetes.io/docs/concepts/configuration/taint-and-toleration) for more information, including usage and the valid values."
                  },
                  "description": "List of kubernetes taints to be applied to each node. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/"
                },
                "diskType": {
                  "type": "string",
                  "description": "Type of the disk attached to each node (e.g. 'pd-standard', 'pd-ssd' or 'pd-balanced') If unspecified, the default disk type is 'pd-standard'"
                },
                "metadata": {
                  "type": "object",
                  "description": "The metadata key/value pairs assigned to instances in the cluster. Keys must conform to the regexp `[a-zA-Z0-9-_]+` and be less than 128 bytes in length. These are reflected as part of a URL in the metadata server. Additionally, to avoid ambiguity, keys must not conflict with any other metadata keys for the project or be one of the reserved keys: - \"cluster-location\" - \"cluster-name\" - \"cluster-uid\" - \"configure-sh\" - \"containerd-configure-sh\" - \"enable-os-login\" - \"gci-ensure-gke-docker\" - \"gci-metrics-enabled\" - \"gci-update-strategy\" - \"instance-template\" - \"kube-env\" - \"startup-script\" - \"user-data\" - \"disable-address-manager\" - \"windows-startup-script-ps1\" - \"common-psm1\" - \"k8s-node-setup-psm1\" - \"install-ssh-psm1\" - \"user-profile-psm1\" The following keys are reserved for Windows nodes: - \"serial-port-logging-enable\" Values are free-form strings, and only have meaning as interpreted by the image running in the instance. The only restriction placed on them is that each value's size must be less than or equal to 32 KB. The total size of all keys and values must be less than 512 KB.",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "imageType": {
                  "type": "string",
                  "description": "The image type to use for this node. Note that for a given image type, the latest version of it will be used."
                },
                "nodeGroup": {
                  "type": "string",
                  "description": "Setting this field will assign instances of this pool to run on the specified node group. This is useful for running workloads on [sole tenant nodes](https://cloud.google.com/compute/docs/nodes/sole-tenant-nodes)."
                },
                "diskSizeGb": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB. If unspecified, the default disk size is 100GB."
                },
                "machineType": {
                  "type": "string",
                  "description": "The name of a Google Compute Engine [machine type](https://cloud.google.com/compute/docs/machine-types) If unspecified, the default machine type is `e2-medium`."
                },
                "oauthScopes": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "The set of Google API scopes to be made available on all of the node VMs under the \"default\" service account. The following scopes are recommended, but not required, and by default are not included: * `https://www.googleapis.com/auth/compute` is required for mounting persistent storage on your nodes. * `https://www.googleapis.com/auth/devstorage.read_only` is required for communicating with **gcr.io** (the [Google Container Registry](https://cloud.google.com/container-registry/)). If unspecified, no scopes are added, unless Cloud Logging or Cloud Monitoring are enabled, in which case their required scopes will be added."
                },
                "preemptible": {
                  "type": "boolean",
                  "description": "Whether the nodes are created as preemptible VM instances. See: https://cloud.google.com/compute/docs/instances/preemptible for more information about preemptible VM instances."
                },
                "accelerators": {
                  "type": "array",
                  "items": {
                    "id": "AcceleratorConfig",
                    "type": "object",
                    "properties": {
                      "acceleratorType": {
                        "type": "string",
                        "description": "The accelerator type resource name. List of supported accelerators [here](https://cloud.google.com/compute/docs/gpus)"
                      },
                      "acceleratorCount": {
                        "type": "string",
                        "format": "int64",
                        "description": "The number of the accelerator cards exposed to an instance."
                      }
                    },
                    "description": "AcceleratorConfig represents a Hardware Accelerator request."
                  },
                  "description": "A list of hardware accelerators to be attached to each node. See https://cloud.google.com/compute/docs/gpus for more information about support for GPUs."
                },
                "kubeletConfig": {
                  "id": "NodeKubeletConfig",
                  "type": "object",
                  "properties": {
                    "cpuCfsQuota": {
                      "type": "boolean",
                      "description": "Enable CPU CFS quota enforcement for containers that specify CPU limits. This option is enabled by default which makes kubelet use CFS quota (https://www.kernel.org/doc/Documentation/scheduler/sched-bwc.txt) to enforce container CPU limits. Otherwise, CPU limits will not be enforced at all. Disable this option to mitigate CPU throttling problems while still having your pods to be in Guaranteed QoS class by specifying the CPU limits. The default value is 'true' if unspecified."
                    },
                    "cpuManagerPolicy": {
                      "type": "string",
                      "description": "Control the CPU management policy on the node. See https://kubernetes.io/docs/tasks/administer-cluster/cpu-management-policies/ The following values are allowed. - \"none\": the default, which represents the existing scheduling behavior. - \"static\": allows pods with certain resource characteristics to be granted increased CPU affinity and exclusivity on the node. The default value is 'none' if unspecified."
                    },
                    "cpuCfsQuotaPeriod": {
                      "type": "string",
                      "description": "Set the CPU CFS quota period value 'cpu.cfs_period_us'. The string must be a sequence of decimal numbers, each with optional fraction and a unit suffix, such as \"300ms\". Valid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\". The value must be a positive duration."
                    }
                  },
                  "description": "Node kubelet configs."
                },
                "localSsdCount": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The number of local SSD disks to be attached to the node. The limit for this value is dependent upon the maximum number of disks available on a machine per zone. See: https://cloud.google.com/compute/docs/disks/local-ssd for more information."
                },
                "sandboxConfig": {
                  "id": "SandboxConfig",
                  "type": "object",
                  "properties": {
                    "type": {
                      "enum": [
                        "UNSPECIFIED",
                        "GVISOR"
                      ],
                      "type": "string",
                      "description": "Type of the sandbox to use for the node.",
                      "enumDescriptions": [
                        "Default value. This should not be used.",
                        "Run sandbox using gvisor."
                      ]
                    }
                  },
                  "description": "Sandbox configuration for this node."
                },
                "bootDiskKmsKey": {
                  "type": "string",
                  "description": " The Customer Managed Encryption Key used to encrypt the boot disk attached to each node in the node pool. This should be of the form projects/[KEY_PROJECT_ID]/locations/[LOCATION]/keyRings/[RING_NAME]/cryptoKeys/[KEY_NAME]. For more information about protecting resources with Cloud KMS Keys please see: https://cloud.google.com/compute/docs/disks/customer-managed-encryption"
                },
                "minCpuPlatform": {
                  "type": "string",
                  "description": "Minimum CPU platform to be used by this instance. The instance may be scheduled on the specified or newer CPU platform. Applicable values are the friendly names of CPU platforms, such as `minCpuPlatform: \"Intel Haswell\"` or `minCpuPlatform: \"Intel Sandy Bridge\"`. For more information, read [how to specify min CPU platform](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform)"
                },
                "serviceAccount": {
                  "type": "string",
                  "description": "The Google Cloud Platform Service Account to be used by the node VMs. Specify the email address of the Service Account; otherwise, if no Service Account is specified, the \"default\" service account is used."
                },
                "linuxNodeConfig": {
                  "id": "LinuxNodeConfig",
                  "type": "object",
                  "properties": {
                    "sysctls": {
                      "type": "object",
                      "description": "The Linux kernel parameters to be applied to the nodes and all pods running on the nodes. The following parameters are supported. net.core.netdev_max_backlog net.core.rmem_max net.core.wmem_default net.core.wmem_max net.core.optmem_max net.core.somaxconn net.ipv4.tcp_rmem net.ipv4.tcp_wmem net.ipv4.tcp_tw_reuse",
                      "additionalProperties": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Parameters that can be configured on Linux nodes."
                },
                "reservationAffinity": {
                  "id": "ReservationAffinity",
                  "type": "object",
                  "properties": {
                    "key": {
                      "type": "string",
                      "description": "Corresponds to the label key of a reservation resource. To target a SPECIFIC_RESERVATION by name, specify \"googleapis.com/reservation-name\" as the key and specify the name of your reservation as its value."
                    },
                    "values": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Corresponds to the label value(s) of reservation resource(s)."
                    },
                    "consumeReservationType": {
                      "enum": [
                        "UNSPECIFIED",
                        "NO_RESERVATION",
                        "ANY_RESERVATION",
                        "SPECIFIC_RESERVATION"
                      ],
                      "type": "string",
                      "description": "Corresponds to the type of reservation consumption.",
                      "enumDescriptions": [
                        "Default value. This should not be used.",
                        "Do not consume from any reserved capacity.",
                        "Consume any reservation available.",
                        "Must consume from a specific reservation. Must specify key value fields for specifying the reservations."
                      ]
                    }
                  },
                  "description": "The optional reservation affinity. Setting this field will apply the specified [Zonal Compute Reservation](https://cloud.google.com/compute/docs/instances/reserving-zonal-resources) to this node pool."
                },
                "shieldedInstanceConfig": {
                  "id": "ShieldedInstanceConfig",
                  "type": "object",
                  "properties": {
                    "enableSecureBoot": {
                      "type": "boolean",
                      "description": "Defines whether the instance has Secure Boot enabled. Secure Boot helps ensure that the system only runs authentic software by verifying the digital signature of all boot components, and halting the boot process if signature verification fails."
                    },
                    "enableIntegrityMonitoring": {
                      "type": "boolean",
                      "description": "Defines whether the instance has integrity monitoring enabled. Enables monitoring and attestation of the boot integrity of the instance. The attestation is performed against the integrity policy baseline. This baseline is initially derived from the implicitly trusted boot image when the instance is created."
                    }
                  },
                  "description": "Shielded Instance options."
                },
                "workloadMetadataConfig": {
                  "id": "WorkloadMetadataConfig",
                  "type": "object",
                  "properties": {
                    "mode": {
                      "enum": [
                        "MODE_UNSPECIFIED",
                        "GCE_METADATA",
                        "GKE_METADATA"
                      ],
                      "type": "string",
                      "description": "Mode is the configuration for how to expose metadata to workloads running on the node pool.",
                      "enumDescriptions": [
                        "Not set.",
                        "Expose all Compute Engine metadata to pods.",
                        "Run the GKE Metadata Server on this node. The GKE Metadata Server exposes a metadata API to workloads that is compatible with the V1 Compute Metadata APIs exposed by the Compute Engine and App Engine Metadata Servers. This feature can only be enabled if Workload Identity is enabled at the cluster level."
                      ]
                    }
                  },
                  "description": "The workload metadata configuration for this node."
                }
              },
              "description": "The node configuration of the pool."
            },
            "status": {
              "enum": [
                "STATUS_UNSPECIFIED",
                "PROVISIONING",
                "RUNNING",
                "RUNNING_WITH_ERROR",
                "RECONCILING",
                "STOPPING",
                "ERROR"
              ],
              "type": "string",
              "description": "[Output only] The status of the nodes in this pool instance.",
              "enumDescriptions": [
                "Not set.",
                "The PROVISIONING state indicates the node pool is being created.",
                "The RUNNING state indicates the node pool has been created and is fully usable.",
                "The RUNNING_WITH_ERROR state indicates the node pool has been created and is partially usable. Some error state has occurred and some functionality may be impaired. Customer may need to reissue a request or trigger a new update.",
                "The RECONCILING state indicates that some work is actively being done on the node pool, such as upgrading node software. Details can be found in the `statusMessage` field.",
                "The STOPPING state indicates the node pool is being deleted.",
                "The ERROR state indicates the node pool may be unusable. Details can be found in the `statusMessage` field."
              ]
            },
            "version": {
              "type": "string",
              "description": "The version of the Kubernetes of this node."
            },
            "selfLink": {
              "type": "string",
              "description": "[Output only] Server-defined URL for the resource."
            },
            "locations": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "The list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the NodePool's nodes should be located. If this value is unspecified during node pool creation, the [Cluster.Locations](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters#Cluster.FIELDS.locations) value will be used, instead. Warning: changing node pool locations will result in nodes being added and/or removed."
            },
            "conditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current node pool state."
            },
            "management": {
              "id": "NodeManagement",
              "type": "object",
              "properties": {
                "autoRepair": {
                  "type": "boolean",
                  "description": "A flag that specifies whether the node auto-repair is enabled for the node pool. If enabled, the nodes in this node pool will be monitored and, if they fail health checks too many times, an automatic repair action will be triggered."
                },
                "autoUpgrade": {
                  "type": "boolean",
                  "description": "A flag that specifies whether node auto-upgrade is enabled for the node pool. If enabled, node auto-upgrade helps keep the nodes in your node pool up to date with the latest release version of Kubernetes."
                },
                "upgradeOptions": {
                  "id": "AutoUpgradeOptions",
                  "type": "object",
                  "properties": {
                    "description": {
                      "type": "string",
                      "description": "[Output only] This field is set when upgrades are about to commence with the description of the upgrade."
                    },
                    "autoUpgradeStartTime": {
                      "type": "string",
                      "description": "[Output only] This field is set when upgrades are about to commence with the approximate start time for the upgrades, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
                    }
                  },
                  "description": "Specifies the Auto Upgrade knobs for the node pool."
                }
              },
              "description": "NodeManagement configuration for this NodePool."
            },
            "autoscaling": {
              "id": "NodePoolAutoscaling",
              "type": "object",
              "properties": {
                "enabled": {
                  "type": "boolean",
                  "description": "Is autoscaling enabled for this node pool."
                },
                "maxNodeCount": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Maximum number of nodes in the NodePool. Must be >= min_node_count. There has to enough quota to scale up the cluster."
                },
                "minNodeCount": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Minimum number of nodes in the NodePool. Must be >= 1 and <= max_node_count."
                },
                "autoprovisioned": {
                  "type": "boolean",
                  "description": "Can this node pool be deleted automatically."
                }
              },
              "description": "Autoscaler configuration for this NodePool. Autoscaler is enabled only if a valid configuration is present."
            },
            "statusMessage": {
              "type": "string",
              "description": "[Output only] Deprecated. Use conditions instead. Additional information about the current status of this node pool instance, if available."
            },
            "podIpv4CidrSize": {
              "type": "integer",
              "format": "int32",
              "description": "[Output only] The pod CIDR block size per node in this node pool."
            },
            "upgradeSettings": {
              "id": "UpgradeSettings",
              "type": "object",
              "properties": {
                "maxSurge": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The maximum number of nodes that can be created beyond the current size of the node pool during the upgrade process."
                },
                "maxUnavailable": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The maximum number of nodes that can be simultaneously unavailable during the upgrade process. A node is considered available if its status is Ready."
                }
              },
              "description": "Upgrade settings control disruption and speed of the upgrade."
            },
            "initialNodeCount": {
              "type": "integer",
              "format": "int32",
              "description": "The initial node count for the pool. You must ensure that your Compute Engine [resource quota](https://cloud.google.com/compute/quotas) is sufficient for this number of instances. You must also have available firewall and routes quota."
            },
            "instanceGroupUrls": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "[Output only] The resource URLs of the [managed instance groups](https://cloud.google.com/compute/docs/instance-groups/creating-groups-of-managed-instances) associated with this node pool."
            },
            "maxPodsConstraint": {
              "id": "MaxPodsConstraint",
              "type": "object",
              "properties": {
                "maxPodsPerNode": {
                  "type": "string",
                  "format": "int64",
                  "description": "Constraint enforced on the max num of pods per node."
                }
              },
              "description": "The constraint on the maximum number of pods that can be run simultaneously on a node in the node pool."
            }
          },
          "description": "NodePool contains the name and configuration for a cluster's node pool. Node pools are a set of nodes (i.e. VM's), with a common configuration and specification, under the control of the cluster master. They may have a set of Kubernetes labels applied to them, which may be used to reference them during pod scheduling. They may also be resized up or down, to accommodate the workload."
        }
      ]
  projects.zones.clusters.nodePools.list:
    description: |-
      Lists the node pools for a cluster.
    versions:
      from: 1.0.0-beta1
    link: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.zones.clusters.nodePools/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "ListNodePoolsResponse",
          "type": "object",
          "properties": {
            "nodePools": {
              "type": "array",
              "items": {
                "id": "NodePool",
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the node pool."
                  },
                  "config": {
                    "id": "NodeConfig",
                    "type": "object",
                    "properties": {
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "The list of instance tags applied to all nodes. Tags are used to identify valid sources or targets for network firewalls and are specified by the client during cluster or node pool creation. Each tag within the list must comply with RFC1035."
                      },
                      "labels": {
                        "type": "object",
                        "description": "The map of Kubernetes labels (key/value pairs) to be applied to each node. These will added in addition to any default label(s) that Kubernetes may apply to the node. In case of conflict in label keys, the applied set may differ depending on the Kubernetes version -- it's best to assume the behavior is undefined and conflicts should be avoided. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "taints": {
                        "type": "array",
                        "items": {
                          "id": "NodeTaint",
                          "type": "object",
                          "properties": {
                            "key": {
                              "type": "string",
                              "description": "Key for taint."
                            },
                            "value": {
                              "type": "string",
                              "description": "Value for taint."
                            },
                            "effect": {
                              "enum": [
                                "EFFECT_UNSPECIFIED",
                                "NO_SCHEDULE",
                                "PREFER_NO_SCHEDULE",
                                "NO_EXECUTE"
                              ],
                              "type": "string",
                              "description": "Effect for taint.",
                              "enumDescriptions": [
                                "Not set",
                                "NoSchedule",
                                "PreferNoSchedule",
                                "NoExecute"
                              ]
                            }
                          },
                          "description": "Kubernetes taint is comprised of three fields: key, value, and effect. Effect can only be one of three types: NoSchedule, PreferNoSchedule or NoExecute. See [here](https://kubernetes.io/docs/concepts/configuration/taint-and-toleration) for more information, including usage and the valid values."
                        },
                        "description": "List of kubernetes taints to be applied to each node. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/"
                      },
                      "diskType": {
                        "type": "string",
                        "description": "Type of the disk attached to each node (e.g. 'pd-standard', 'pd-ssd' or 'pd-balanced') If unspecified, the default disk type is 'pd-standard'"
                      },
                      "metadata": {
                        "type": "object",
                        "description": "The metadata key/value pairs assigned to instances in the cluster. Keys must conform to the regexp `[a-zA-Z0-9-_]+` and be less than 128 bytes in length. These are reflected as part of a URL in the metadata server. Additionally, to avoid ambiguity, keys must not conflict with any other metadata keys for the project or be one of the reserved keys: - \"cluster-location\" - \"cluster-name\" - \"cluster-uid\" - \"configure-sh\" - \"containerd-configure-sh\" - \"enable-os-login\" - \"gci-ensure-gke-docker\" - \"gci-metrics-enabled\" - \"gci-update-strategy\" - \"instance-template\" - \"kube-env\" - \"startup-script\" - \"user-data\" - \"disable-address-manager\" - \"windows-startup-script-ps1\" - \"common-psm1\" - \"k8s-node-setup-psm1\" - \"install-ssh-psm1\" - \"user-profile-psm1\" The following keys are reserved for Windows nodes: - \"serial-port-logging-enable\" Values are free-form strings, and only have meaning as interpreted by the image running in the instance. The only restriction placed on them is that each value's size must be less than or equal to 32 KB. The total size of all keys and values must be less than 512 KB.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "imageType": {
                        "type": "string",
                        "description": "The image type to use for this node. Note that for a given image type, the latest version of it will be used."
                      },
                      "nodeGroup": {
                        "type": "string",
                        "description": "Setting this field will assign instances of this pool to run on the specified node group. This is useful for running workloads on [sole tenant nodes](https://cloud.google.com/compute/docs/nodes/sole-tenant-nodes)."
                      },
                      "diskSizeGb": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB. If unspecified, the default disk size is 100GB."
                      },
                      "machineType": {
                        "type": "string",
                        "description": "The name of a Google Compute Engine [machine type](https://cloud.google.com/compute/docs/machine-types) If unspecified, the default machine type is `e2-medium`."
                      },
                      "oauthScopes": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "The set of Google API scopes to be made available on all of the node VMs under the \"default\" service account. The following scopes are recommended, but not required, and by default are not included: * `https://www.googleapis.com/auth/compute` is required for mounting persistent storage on your nodes. * `https://www.googleapis.com/auth/devstorage.read_only` is required for communicating with **gcr.io** (the [Google Container Registry](https://cloud.google.com/container-registry/)). If unspecified, no scopes are added, unless Cloud Logging or Cloud Monitoring are enabled, in which case their required scopes will be added."
                      },
                      "preemptible": {
                        "type": "boolean",
                        "description": "Whether the nodes are created as preemptible VM instances. See: https://cloud.google.com/compute/docs/instances/preemptible for more information about preemptible VM instances."
                      },
                      "accelerators": {
                        "type": "array",
                        "items": {
                          "id": "AcceleratorConfig",
                          "type": "object",
                          "properties": {
                            "acceleratorType": {
                              "type": "string",
                              "description": "The accelerator type resource name. List of supported accelerators [here](https://cloud.google.com/compute/docs/gpus)"
                            },
                            "acceleratorCount": {
                              "type": "string",
                              "format": "int64",
                              "description": "The number of the accelerator cards exposed to an instance."
                            }
                          },
                          "description": "AcceleratorConfig represents a Hardware Accelerator request."
                        },
                        "description": "A list of hardware accelerators to be attached to each node. See https://cloud.google.com/compute/docs/gpus for more information about support for GPUs."
                      },
                      "kubeletConfig": {
                        "id": "NodeKubeletConfig",
                        "type": "object",
                        "properties": {
                          "cpuCfsQuota": {
                            "type": "boolean",
                            "description": "Enable CPU CFS quota enforcement for containers that specify CPU limits. This option is enabled by default which makes kubelet use CFS quota (https://www.kernel.org/doc/Documentation/scheduler/sched-bwc.txt) to enforce container CPU limits. Otherwise, CPU limits will not be enforced at all. Disable this option to mitigate CPU throttling problems while still having your pods to be in Guaranteed QoS class by specifying the CPU limits. The default value is 'true' if unspecified."
                          },
                          "cpuManagerPolicy": {
                            "type": "string",
                            "description": "Control the CPU management policy on the node. See https://kubernetes.io/docs/tasks/administer-cluster/cpu-management-policies/ The following values are allowed. - \"none\": the default, which represents the existing scheduling behavior. - \"static\": allows pods with certain resource characteristics to be granted increased CPU affinity and exclusivity on the node. The default value is 'none' if unspecified."
                          },
                          "cpuCfsQuotaPeriod": {
                            "type": "string",
                            "description": "Set the CPU CFS quota period value 'cpu.cfs_period_us'. The string must be a sequence of decimal numbers, each with optional fraction and a unit suffix, such as \"300ms\". Valid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\". The value must be a positive duration."
                          }
                        },
                        "description": "Node kubelet configs."
                      },
                      "localSsdCount": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The number of local SSD disks to be attached to the node. The limit for this value is dependent upon the maximum number of disks available on a machine per zone. See: https://cloud.google.com/compute/docs/disks/local-ssd for more information."
                      },
                      "sandboxConfig": {
                        "id": "SandboxConfig",
                        "type": "object",
                        "properties": {
                          "type": {
                            "enum": [
                              "UNSPECIFIED",
                              "GVISOR"
                            ],
                            "type": "string",
                            "description": "Type of the sandbox to use for the node.",
                            "enumDescriptions": [
                              "Default value. This should not be used.",
                              "Run sandbox using gvisor."
                            ]
                          }
                        },
                        "description": "Sandbox configuration for this node."
                      },
                      "bootDiskKmsKey": {
                        "type": "string",
                        "description": " The Customer Managed Encryption Key used to encrypt the boot disk attached to each node in the node pool. This should be of the form projects/[KEY_PROJECT_ID]/locations/[LOCATION]/keyRings/[RING_NAME]/cryptoKeys/[KEY_NAME]. For more information about protecting resources with Cloud KMS Keys please see: https://cloud.google.com/compute/docs/disks/customer-managed-encryption"
                      },
                      "minCpuPlatform": {
                        "type": "string",
                        "description": "Minimum CPU platform to be used by this instance. The instance may be scheduled on the specified or newer CPU platform. Applicable values are the friendly names of CPU platforms, such as `minCpuPlatform: \"Intel Haswell\"` or `minCpuPlatform: \"Intel Sandy Bridge\"`. For more information, read [how to specify min CPU platform](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform)"
                      },
                      "serviceAccount": {
                        "type": "string",
                        "description": "The Google Cloud Platform Service Account to be used by the node VMs. Specify the email address of the Service Account; otherwise, if no Service Account is specified, the \"default\" service account is used."
                      },
                      "linuxNodeConfig": {
                        "id": "LinuxNodeConfig",
                        "type": "object",
                        "properties": {
                          "sysctls": {
                            "type": "object",
                            "description": "The Linux kernel parameters to be applied to the nodes and all pods running on the nodes. The following parameters are supported. net.core.netdev_max_backlog net.core.rmem_max net.core.wmem_default net.core.wmem_max net.core.optmem_max net.core.somaxconn net.ipv4.tcp_rmem net.ipv4.tcp_wmem net.ipv4.tcp_tw_reuse",
                            "additionalProperties": {
                              "type": "string"
                            }
                          }
                        },
                        "description": "Parameters that can be configured on Linux nodes."
                      },
                      "reservationAffinity": {
                        "id": "ReservationAffinity",
                        "type": "object",
                        "properties": {
                          "key": {
                            "type": "string",
                            "description": "Corresponds to the label key of a reservation resource. To target a SPECIFIC_RESERVATION by name, specify \"googleapis.com/reservation-name\" as the key and specify the name of your reservation as its value."
                          },
                          "values": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "Corresponds to the label value(s) of reservation resource(s)."
                          },
                          "consumeReservationType": {
                            "enum": [
                              "UNSPECIFIED",
                              "NO_RESERVATION",
                              "ANY_RESERVATION",
                              "SPECIFIC_RESERVATION"
                            ],
                            "type": "string",
                            "description": "Corresponds to the type of reservation consumption.",
                            "enumDescriptions": [
                              "Default value. This should not be used.",
                              "Do not consume from any reserved capacity.",
                              "Consume any reservation available.",
                              "Must consume from a specific reservation. Must specify key value fields for specifying the reservations."
                            ]
                          }
                        },
                        "description": "The optional reservation affinity. Setting this field will apply the specified [Zonal Compute Reservation](https://cloud.google.com/compute/docs/instances/reserving-zonal-resources) to this node pool."
                      },
                      "shieldedInstanceConfig": {
                        "id": "ShieldedInstanceConfig",
                        "type": "object",
                        "properties": {
                          "enableSecureBoot": {
                            "type": "boolean",
                            "description": "Defines whether the instance has Secure Boot enabled. Secure Boot helps ensure that the system only runs authentic software by verifying the digital signature of all boot components, and halting the boot process if signature verification fails."
                          },
                          "enableIntegrityMonitoring": {
                            "type": "boolean",
                            "description": "Defines whether the instance has integrity monitoring enabled. Enables monitoring and attestation of the boot integrity of the instance. The attestation is performed against the integrity policy baseline. This baseline is initially derived from the implicitly trusted boot image when the instance is created."
                          }
                        },
                        "description": "Shielded Instance options."
                      },
                      "workloadMetadataConfig": {
                        "id": "WorkloadMetadataConfig",
                        "type": "object",
                        "properties": {
                          "mode": {
                            "enum": [
                              "MODE_UNSPECIFIED",
                              "GCE_METADATA",
                              "GKE_METADATA"
                            ],
                            "type": "string",
                            "description": "Mode is the configuration for how to expose metadata to workloads running on the node pool.",
                            "enumDescriptions": [
                              "Not set.",
                              "Expose all Compute Engine metadata to pods.",
                              "Run the GKE Metadata Server on this node. The GKE Metadata Server exposes a metadata API to workloads that is compatible with the V1 Compute Metadata APIs exposed by the Compute Engine and App Engine Metadata Servers. This feature can only be enabled if Workload Identity is enabled at the cluster level."
                            ]
                          }
                        },
                        "description": "The workload metadata configuration for this node."
                      }
                    },
                    "description": "The node configuration of the pool."
                  },
                  "status": {
                    "enum": [
                      "STATUS_UNSPECIFIED",
                      "PROVISIONING",
                      "RUNNING",
                      "RUNNING_WITH_ERROR",
                      "RECONCILING",
                      "STOPPING",
                      "ERROR"
                    ],
                    "type": "string",
                    "description": "[Output only] The status of the nodes in this pool instance.",
                    "enumDescriptions": [
                      "Not set.",
                      "The PROVISIONING state indicates the node pool is being created.",
                      "The RUNNING state indicates the node pool has been created and is fully usable.",
                      "The RUNNING_WITH_ERROR state indicates the node pool has been created and is partially usable. Some error state has occurred and some functionality may be impaired. Customer may need to reissue a request or trigger a new update.",
                      "The RECONCILING state indicates that some work is actively being done on the node pool, such as upgrading node software. Details can be found in the `statusMessage` field.",
                      "The STOPPING state indicates the node pool is being deleted.",
                      "The ERROR state indicates the node pool may be unusable. Details can be found in the `statusMessage` field."
                    ]
                  },
                  "version": {
                    "type": "string",
                    "description": "The version of the Kubernetes of this node."
                  },
                  "selfLink": {
                    "type": "string",
                    "description": "[Output only] Server-defined URL for the resource."
                  },
                  "locations": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "The list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the NodePool's nodes should be located. If this value is unspecified during node pool creation, the [Cluster.Locations](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters#Cluster.FIELDS.locations) value will be used, instead. Warning: changing node pool locations will result in nodes being added and/or removed."
                  },
                  "conditions": {
                    "type": "array",
                    "items": {
                      "id": "StatusCondition",
                      "type": "object",
                      "properties": {
                        "code": {
                          "enum": [
                            "UNKNOWN",
                            "GCE_STOCKOUT",
                            "GKE_SERVICE_ACCOUNT_DELETED",
                            "GCE_QUOTA_EXCEEDED",
                            "SET_BY_OPERATOR",
                            "CLOUD_KMS_KEY_ERROR"
                          ],
                          "type": "string",
                          "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                          "enumDescriptions": [
                            "UNKNOWN indicates a generic condition.",
                            "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                            "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                            "Google Compute Engine quota was exceeded.",
                            "Cluster state was manually changed by an SRE due to a system logic error.",
                            "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                          ]
                        },
                        "message": {
                          "type": "string",
                          "description": "Human-friendly representation of the condition"
                        },
                        "canonicalCode": {
                          "enum": [
                            "OK",
                            "CANCELLED",
                            "UNKNOWN",
                            "INVALID_ARGUMENT",
                            "DEADLINE_EXCEEDED",
                            "NOT_FOUND",
                            "ALREADY_EXISTS",
                            "PERMISSION_DENIED",
                            "UNAUTHENTICATED",
                            "RESOURCE_EXHAUSTED",
                            "FAILED_PRECONDITION",
                            "ABORTED",
                            "OUT_OF_RANGE",
                            "UNIMPLEMENTED",
                            "INTERNAL",
                            "UNAVAILABLE",
                            "DATA_LOSS"
                          ],
                          "type": "string",
                          "description": "Canonical code of the condition.",
                          "enumDescriptions": [
                            "Not an error; returned on success HTTP Mapping: 200 OK",
                            "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                            "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                            "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                            "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                            "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                            "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                            "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                            "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                            "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                            "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                            "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                            "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                            "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                            "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                            "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                            "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                          ]
                        }
                      },
                      "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
                    },
                    "description": "Which conditions caused the current node pool state."
                  },
                  "management": {
                    "id": "NodeManagement",
                    "type": "object",
                    "properties": {
                      "autoRepair": {
                        "type": "boolean",
                        "description": "A flag that specifies whether the node auto-repair is enabled for the node pool. If enabled, the nodes in this node pool will be monitored and, if they fail health checks too many times, an automatic repair action will be triggered."
                      },
                      "autoUpgrade": {
                        "type": "boolean",
                        "description": "A flag that specifies whether node auto-upgrade is enabled for the node pool. If enabled, node auto-upgrade helps keep the nodes in your node pool up to date with the latest release version of Kubernetes."
                      },
                      "upgradeOptions": {
                        "id": "AutoUpgradeOptions",
                        "type": "object",
                        "properties": {
                          "description": {
                            "type": "string",
                            "description": "[Output only] This field is set when upgrades are about to commence with the description of the upgrade."
                          },
                          "autoUpgradeStartTime": {
                            "type": "string",
                            "description": "[Output only] This field is set when upgrades are about to commence with the approximate start time for the upgrades, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
                          }
                        },
                        "description": "Specifies the Auto Upgrade knobs for the node pool."
                      }
                    },
                    "description": "NodeManagement configuration for this NodePool."
                  },
                  "autoscaling": {
                    "id": "NodePoolAutoscaling",
                    "type": "object",
                    "properties": {
                      "enabled": {
                        "type": "boolean",
                        "description": "Is autoscaling enabled for this node pool."
                      },
                      "maxNodeCount": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Maximum number of nodes in the NodePool. Must be >= min_node_count. There has to enough quota to scale up the cluster."
                      },
                      "minNodeCount": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Minimum number of nodes in the NodePool. Must be >= 1 and <= max_node_count."
                      },
                      "autoprovisioned": {
                        "type": "boolean",
                        "description": "Can this node pool be deleted automatically."
                      }
                    },
                    "description": "Autoscaler configuration for this NodePool. Autoscaler is enabled only if a valid configuration is present."
                  },
                  "statusMessage": {
                    "type": "string",
                    "description": "[Output only] Deprecated. Use conditions instead. Additional information about the current status of this node pool instance, if available."
                  },
                  "podIpv4CidrSize": {
                    "type": "integer",
                    "format": "int32",
                    "description": "[Output only] The pod CIDR block size per node in this node pool."
                  },
                  "upgradeSettings": {
                    "id": "UpgradeSettings",
                    "type": "object",
                    "properties": {
                      "maxSurge": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The maximum number of nodes that can be created beyond the current size of the node pool during the upgrade process."
                      },
                      "maxUnavailable": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The maximum number of nodes that can be simultaneously unavailable during the upgrade process. A node is considered available if its status is Ready."
                      }
                    },
                    "description": "Upgrade settings control disruption and speed of the upgrade."
                  },
                  "initialNodeCount": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The initial node count for the pool. You must ensure that your Compute Engine [resource quota](https://cloud.google.com/compute/quotas) is sufficient for this number of instances. You must also have available firewall and routes quota."
                  },
                  "instanceGroupUrls": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "[Output only] The resource URLs of the [managed instance groups](https://cloud.google.com/compute/docs/instance-groups/creating-groups-of-managed-instances) associated with this node pool."
                  },
                  "maxPodsConstraint": {
                    "id": "MaxPodsConstraint",
                    "type": "object",
                    "properties": {
                      "maxPodsPerNode": {
                        "type": "string",
                        "format": "int64",
                        "description": "Constraint enforced on the max num of pods per node."
                      }
                    },
                    "description": "The constraint on the maximum number of pods that can be run simultaneously on a node in the node pool."
                  }
                },
                "description": "NodePool contains the name and configuration for a cluster's node pool. Node pools are a set of nodes (i.e. VM's), with a common configuration and specification, under the control of the cluster master. They may have a set of Kubernetes labels applied to them, which may be used to reference them during pod scheduling. They may also be resized up or down, to accommodate the workload."
              },
              "description": "A list of node pools for a cluster."
            }
          },
          "description": "ListNodePoolsResponse is the result of ListNodePoolsRequest."
        }
      ]
  projects.zones.clusters.nodePools.rollback:
    description: |-
      Rolls back a previously Aborted or Failed NodePool upgrade. This makes no changes if the last upgrade successfully completed.
    versions:
      from: 1.0.0-beta1
    link: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.zones.clusters.nodePools/rollback
    example:
      inputs: [
        {
          "id": "RollbackNodePoolUpgradeRequest",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name (project, location, cluster, node pool id) of the node poll to rollback upgrade. Specified in the format `projects/*/locations/*/clusters/*/nodePools/*`."
            },
            "zone": {
              "type": "string",
              "description": "Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field."
            },
            "clusterId": {
              "type": "string",
              "description": "Deprecated. The name of the cluster to rollback. This field has been deprecated and replaced by the name field."
            },
            "projectId": {
              "type": "string",
              "description": "Deprecated. The Google Developers Console [project ID or project number](https://support.google.com/cloud/answer/6158840). This field has been deprecated and replaced by the name field."
            },
            "nodePoolId": {
              "type": "string",
              "description": "Deprecated. The name of the node pool to rollback. This field has been deprecated and replaced by the name field."
            }
          },
          "description": "RollbackNodePoolUpgradeRequest rollbacks the previously Aborted or Failed NodePool upgrade. This will be an no-op if the last upgrade successfully completed."
        }
      ]
      outputs: [
        {
          "id": "Operation",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The server-assigned ID for the operation."
            },
            "zone": {
              "type": "string",
              "description": "The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the operation is taking place. This field is deprecated, use location instead."
            },
            "error": {
              "id": "Status",
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The status code, which should be an enum value of google.rpc.Code."
                },
                "details": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  },
                  "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
                },
                "message": {
                  "type": "string",
                  "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                }
              },
              "description": "The error result of the operation in case of failure."
            },
            "detail": {
              "type": "string",
              "description": "Detailed operation progress, if available."
            },
            "status": {
              "enum": [
                "STATUS_UNSPECIFIED",
                "PENDING",
                "RUNNING",
                "DONE",
                "ABORTING"
              ],
              "type": "string",
              "description": "The current status of the operation.",
              "enumDescriptions": [
                "Not set.",
                "The operation has been created.",
                "The operation is currently running.",
                "The operation is done, either cancelled or completed.",
                "The operation is aborting."
              ]
            },
            "endTime": {
              "type": "string",
              "description": "[Output only] The time the operation completed, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "location": {
              "type": "string",
              "description": "[Output only] The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) or [region](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) in which the cluster resides."
            },
            "progress": {
              "id": "OperationProgress",
              "type": "object",
              "readOnly": true,
              "properties": {
                "name": {
                  "type": "string",
                  "description": "A non-parameterized string describing an operation stage. Unset for single-stage operations."
                },
                "stages": {
                  "type": "array",
                  "items": {
                    "id": "OperationProgress",
                    "type": "object",
                    "properties": {},
                    "description": "Information about operation (or operation stage) progress."
                  },
                  "description": "Substages of an operation or a stage."
                },
                "status": {
                  "enum": [
                    "STATUS_UNSPECIFIED",
                    "PENDING",
                    "RUNNING",
                    "DONE",
                    "ABORTING"
                  ],
                  "type": "string",
                  "description": "Status of an operation stage. Unset for single-stage operations.",
                  "enumDescriptions": [
                    "Not set.",
                    "The operation has been created.",
                    "The operation is currently running.",
                    "The operation is done, either cancelled or completed.",
                    "The operation is aborting."
                  ]
                },
                "metrics": {
                  "type": "array",
                  "items": {
                    "id": "Metric",
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Required. Metric name, e.g., \"nodes total\", \"percent done\"."
                      },
                      "intValue": {
                        "type": "string",
                        "format": "int64",
                        "description": "For metrics with integer value."
                      },
                      "doubleValue": {
                        "type": "number",
                        "format": "double",
                        "description": "For metrics with floating point value."
                      },
                      "stringValue": {
                        "type": "string",
                        "description": "For metrics with custom values (ratios, visual progress, etc.)."
                      }
                    },
                    "description": "Progress metric is (string, int|float|string) pair."
                  },
                  "description": "Progress metric bundle, for example: metrics: [{name: \"nodes done\", int_value: 15}, {name: \"nodes total\", int_value: 32}] or metrics: [{name: \"progress\", double_value: 0.56}, {name: \"progress scale\", double_value: 1.0}]"
                }
              },
              "description": "Output only. [Output only] Progress information for an operation."
            },
            "selfLink": {
              "type": "string",
              "description": "Server-defined URL for the resource."
            },
            "startTime": {
              "type": "string",
              "description": "[Output only] The time the operation started, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "targetLink": {
              "type": "string",
              "description": "Server-defined URL for the target of the operation."
            },
            "operationType": {
              "enum": [
                "TYPE_UNSPECIFIED",
                "CREATE_CLUSTER",
                "DELETE_CLUSTER",
                "UPGRADE_MASTER",
                "UPGRADE_NODES",
                "REPAIR_CLUSTER",
                "UPDATE_CLUSTER",
                "CREATE_NODE_POOL",
                "DELETE_NODE_POOL",
                "SET_NODE_POOL_MANAGEMENT",
                "AUTO_REPAIR_NODES",
                "AUTO_UPGRADE_NODES",
                "SET_LABELS",
                "SET_MASTER_AUTH",
                "SET_NODE_POOL_SIZE",
                "SET_NETWORK_POLICY",
                "SET_MAINTENANCE_POLICY"
              ],
              "type": "string",
              "description": "The operation type.",
              "enumDescriptions": [
                "Not set.",
                "Cluster create.",
                "Cluster delete.",
                "A master upgrade.",
                "A node upgrade.",
                "Cluster repair.",
                "Cluster update.",
                "Node pool create.",
                "Node pool delete.",
                "Set node pool management.",
                "Automatic node pool repair.",
                "Automatic node upgrade.",
                "Set labels.",
                "Set/generate master auth materials",
                "Set node pool size.",
                "Updates network policy for a cluster.",
                "Set the maintenance policy."
              ]
            },
            "statusMessage": {
              "type": "string",
              "readOnly": true,
              "description": "Output only. If an error has occurred, a textual description of the error. Deprecated. Use the field error instead."
            },
            "clusterConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current cluster state. Deprecated. Use field error instead."
            },
            "nodepoolConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current node pool state. Deprecated. Use field error instead."
            }
          },
          "description": "This operation resource represents operations that may have happened or are happening on the cluster. All fields are output only."
        }
      ]
  projects.zones.clusters.nodePools.setManagement:
    description: |-
      Sets the NodeManagement options for a node pool.
    versions:
      from: 1.0.0-beta1
    link: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.zones.clusters.nodePools/setManagement
    example:
      inputs: [
        {
          "id": "SetNodePoolManagementRequest",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name (project, location, cluster, node pool id) of the node pool to set management properties. Specified in the format `projects/*/locations/*/clusters/*/nodePools/*`."
            },
            "zone": {
              "type": "string",
              "description": "Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field."
            },
            "clusterId": {
              "type": "string",
              "description": "Deprecated. The name of the cluster to update. This field has been deprecated and replaced by the name field."
            },
            "projectId": {
              "type": "string",
              "description": "Deprecated. The Google Developers Console [project ID or project number](https://support.google.com/cloud/answer/6158840). This field has been deprecated and replaced by the name field."
            },
            "management": {
              "id": "NodeManagement",
              "type": "object",
              "properties": {
                "autoRepair": {
                  "type": "boolean",
                  "description": "A flag that specifies whether the node auto-repair is enabled for the node pool. If enabled, the nodes in this node pool will be monitored and, if they fail health checks too many times, an automatic repair action will be triggered."
                },
                "autoUpgrade": {
                  "type": "boolean",
                  "description": "A flag that specifies whether node auto-upgrade is enabled for the node pool. If enabled, node auto-upgrade helps keep the nodes in your node pool up to date with the latest release version of Kubernetes."
                },
                "upgradeOptions": {
                  "id": "AutoUpgradeOptions",
                  "type": "object",
                  "properties": {
                    "description": {
                      "type": "string",
                      "description": "[Output only] This field is set when upgrades are about to commence with the description of the upgrade."
                    },
                    "autoUpgradeStartTime": {
                      "type": "string",
                      "description": "[Output only] This field is set when upgrades are about to commence with the approximate start time for the upgrades, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
                    }
                  },
                  "description": "Specifies the Auto Upgrade knobs for the node pool."
                }
              },
              "description": "Required. NodeManagement configuration for the node pool."
            },
            "nodePoolId": {
              "type": "string",
              "description": "Deprecated. The name of the node pool to update. This field has been deprecated and replaced by the name field."
            }
          },
          "description": "SetNodePoolManagementRequest sets the node management properties of a node pool."
        }
      ]
      outputs: [
        {
          "id": "Operation",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The server-assigned ID for the operation."
            },
            "zone": {
              "type": "string",
              "description": "The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the operation is taking place. This field is deprecated, use location instead."
            },
            "error": {
              "id": "Status",
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The status code, which should be an enum value of google.rpc.Code."
                },
                "details": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  },
                  "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
                },
                "message": {
                  "type": "string",
                  "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                }
              },
              "description": "The error result of the operation in case of failure."
            },
            "detail": {
              "type": "string",
              "description": "Detailed operation progress, if available."
            },
            "status": {
              "enum": [
                "STATUS_UNSPECIFIED",
                "PENDING",
                "RUNNING",
                "DONE",
                "ABORTING"
              ],
              "type": "string",
              "description": "The current status of the operation.",
              "enumDescriptions": [
                "Not set.",
                "The operation has been created.",
                "The operation is currently running.",
                "The operation is done, either cancelled or completed.",
                "The operation is aborting."
              ]
            },
            "endTime": {
              "type": "string",
              "description": "[Output only] The time the operation completed, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "location": {
              "type": "string",
              "description": "[Output only] The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) or [region](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) in which the cluster resides."
            },
            "progress": {
              "id": "OperationProgress",
              "type": "object",
              "readOnly": true,
              "properties": {
                "name": {
                  "type": "string",
                  "description": "A non-parameterized string describing an operation stage. Unset for single-stage operations."
                },
                "stages": {
                  "type": "array",
                  "items": {
                    "id": "OperationProgress",
                    "type": "object",
                    "properties": {},
                    "description": "Information about operation (or operation stage) progress."
                  },
                  "description": "Substages of an operation or a stage."
                },
                "status": {
                  "enum": [
                    "STATUS_UNSPECIFIED",
                    "PENDING",
                    "RUNNING",
                    "DONE",
                    "ABORTING"
                  ],
                  "type": "string",
                  "description": "Status of an operation stage. Unset for single-stage operations.",
                  "enumDescriptions": [
                    "Not set.",
                    "The operation has been created.",
                    "The operation is currently running.",
                    "The operation is done, either cancelled or completed.",
                    "The operation is aborting."
                  ]
                },
                "metrics": {
                  "type": "array",
                  "items": {
                    "id": "Metric",
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Required. Metric name, e.g., \"nodes total\", \"percent done\"."
                      },
                      "intValue": {
                        "type": "string",
                        "format": "int64",
                        "description": "For metrics with integer value."
                      },
                      "doubleValue": {
                        "type": "number",
                        "format": "double",
                        "description": "For metrics with floating point value."
                      },
                      "stringValue": {
                        "type": "string",
                        "description": "For metrics with custom values (ratios, visual progress, etc.)."
                      }
                    },
                    "description": "Progress metric is (string, int|float|string) pair."
                  },
                  "description": "Progress metric bundle, for example: metrics: [{name: \"nodes done\", int_value: 15}, {name: \"nodes total\", int_value: 32}] or metrics: [{name: \"progress\", double_value: 0.56}, {name: \"progress scale\", double_value: 1.0}]"
                }
              },
              "description": "Output only. [Output only] Progress information for an operation."
            },
            "selfLink": {
              "type": "string",
              "description": "Server-defined URL for the resource."
            },
            "startTime": {
              "type": "string",
              "description": "[Output only] The time the operation started, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "targetLink": {
              "type": "string",
              "description": "Server-defined URL for the target of the operation."
            },
            "operationType": {
              "enum": [
                "TYPE_UNSPECIFIED",
                "CREATE_CLUSTER",
                "DELETE_CLUSTER",
                "UPGRADE_MASTER",
                "UPGRADE_NODES",
                "REPAIR_CLUSTER",
                "UPDATE_CLUSTER",
                "CREATE_NODE_POOL",
                "DELETE_NODE_POOL",
                "SET_NODE_POOL_MANAGEMENT",
                "AUTO_REPAIR_NODES",
                "AUTO_UPGRADE_NODES",
                "SET_LABELS",
                "SET_MASTER_AUTH",
                "SET_NODE_POOL_SIZE",
                "SET_NETWORK_POLICY",
                "SET_MAINTENANCE_POLICY"
              ],
              "type": "string",
              "description": "The operation type.",
              "enumDescriptions": [
                "Not set.",
                "Cluster create.",
                "Cluster delete.",
                "A master upgrade.",
                "A node upgrade.",
                "Cluster repair.",
                "Cluster update.",
                "Node pool create.",
                "Node pool delete.",
                "Set node pool management.",
                "Automatic node pool repair.",
                "Automatic node upgrade.",
                "Set labels.",
                "Set/generate master auth materials",
                "Set node pool size.",
                "Updates network policy for a cluster.",
                "Set the maintenance policy."
              ]
            },
            "statusMessage": {
              "type": "string",
              "readOnly": true,
              "description": "Output only. If an error has occurred, a textual description of the error. Deprecated. Use the field error instead."
            },
            "clusterConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current cluster state. Deprecated. Use field error instead."
            },
            "nodepoolConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current node pool state. Deprecated. Use field error instead."
            }
          },
          "description": "This operation resource represents operations that may have happened or are happening on the cluster. All fields are output only."
        }
      ]
  projects.zones.clusters.nodePools.setSize:
    description: |-
      Sets the size for a specific node pool. The new size will be used for all replicas, including future replicas created by modifying NodePool.locations.
    versions:
      from: 1.0.0-beta1
    link: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.zones.clusters.nodePools/setSize
    example:
      inputs: [
        {
          "id": "SetNodePoolSizeRequest",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name (project, location, cluster, node pool id) of the node pool to set size. Specified in the format `projects/*/locations/*/clusters/*/nodePools/*`."
            },
            "zone": {
              "type": "string",
              "description": "Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field."
            },
            "clusterId": {
              "type": "string",
              "description": "Deprecated. The name of the cluster to update. This field has been deprecated and replaced by the name field."
            },
            "nodeCount": {
              "type": "integer",
              "format": "int32",
              "description": "Required. The desired node count for the pool."
            },
            "projectId": {
              "type": "string",
              "description": "Deprecated. The Google Developers Console [project ID or project number](https://support.google.com/cloud/answer/6158840). This field has been deprecated and replaced by the name field."
            },
            "nodePoolId": {
              "type": "string",
              "description": "Deprecated. The name of the node pool to update. This field has been deprecated and replaced by the name field."
            }
          },
          "description": "SetNodePoolSizeRequest sets the size of a node pool."
        }
      ]
      outputs: [
        {
          "id": "Operation",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The server-assigned ID for the operation."
            },
            "zone": {
              "type": "string",
              "description": "The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the operation is taking place. This field is deprecated, use location instead."
            },
            "error": {
              "id": "Status",
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The status code, which should be an enum value of google.rpc.Code."
                },
                "details": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  },
                  "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
                },
                "message": {
                  "type": "string",
                  "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                }
              },
              "description": "The error result of the operation in case of failure."
            },
            "detail": {
              "type": "string",
              "description": "Detailed operation progress, if available."
            },
            "status": {
              "enum": [
                "STATUS_UNSPECIFIED",
                "PENDING",
                "RUNNING",
                "DONE",
                "ABORTING"
              ],
              "type": "string",
              "description": "The current status of the operation.",
              "enumDescriptions": [
                "Not set.",
                "The operation has been created.",
                "The operation is currently running.",
                "The operation is done, either cancelled or completed.",
                "The operation is aborting."
              ]
            },
            "endTime": {
              "type": "string",
              "description": "[Output only] The time the operation completed, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "location": {
              "type": "string",
              "description": "[Output only] The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) or [region](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) in which the cluster resides."
            },
            "progress": {
              "id": "OperationProgress",
              "type": "object",
              "readOnly": true,
              "properties": {
                "name": {
                  "type": "string",
                  "description": "A non-parameterized string describing an operation stage. Unset for single-stage operations."
                },
                "stages": {
                  "type": "array",
                  "items": {
                    "id": "OperationProgress",
                    "type": "object",
                    "properties": {},
                    "description": "Information about operation (or operation stage) progress."
                  },
                  "description": "Substages of an operation or a stage."
                },
                "status": {
                  "enum": [
                    "STATUS_UNSPECIFIED",
                    "PENDING",
                    "RUNNING",
                    "DONE",
                    "ABORTING"
                  ],
                  "type": "string",
                  "description": "Status of an operation stage. Unset for single-stage operations.",
                  "enumDescriptions": [
                    "Not set.",
                    "The operation has been created.",
                    "The operation is currently running.",
                    "The operation is done, either cancelled or completed.",
                    "The operation is aborting."
                  ]
                },
                "metrics": {
                  "type": "array",
                  "items": {
                    "id": "Metric",
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Required. Metric name, e.g., \"nodes total\", \"percent done\"."
                      },
                      "intValue": {
                        "type": "string",
                        "format": "int64",
                        "description": "For metrics with integer value."
                      },
                      "doubleValue": {
                        "type": "number",
                        "format": "double",
                        "description": "For metrics with floating point value."
                      },
                      "stringValue": {
                        "type": "string",
                        "description": "For metrics with custom values (ratios, visual progress, etc.)."
                      }
                    },
                    "description": "Progress metric is (string, int|float|string) pair."
                  },
                  "description": "Progress metric bundle, for example: metrics: [{name: \"nodes done\", int_value: 15}, {name: \"nodes total\", int_value: 32}] or metrics: [{name: \"progress\", double_value: 0.56}, {name: \"progress scale\", double_value: 1.0}]"
                }
              },
              "description": "Output only. [Output only] Progress information for an operation."
            },
            "selfLink": {
              "type": "string",
              "description": "Server-defined URL for the resource."
            },
            "startTime": {
              "type": "string",
              "description": "[Output only] The time the operation started, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "targetLink": {
              "type": "string",
              "description": "Server-defined URL for the target of the operation."
            },
            "operationType": {
              "enum": [
                "TYPE_UNSPECIFIED",
                "CREATE_CLUSTER",
                "DELETE_CLUSTER",
                "UPGRADE_MASTER",
                "UPGRADE_NODES",
                "REPAIR_CLUSTER",
                "UPDATE_CLUSTER",
                "CREATE_NODE_POOL",
                "DELETE_NODE_POOL",
                "SET_NODE_POOL_MANAGEMENT",
                "AUTO_REPAIR_NODES",
                "AUTO_UPGRADE_NODES",
                "SET_LABELS",
                "SET_MASTER_AUTH",
                "SET_NODE_POOL_SIZE",
                "SET_NETWORK_POLICY",
                "SET_MAINTENANCE_POLICY"
              ],
              "type": "string",
              "description": "The operation type.",
              "enumDescriptions": [
                "Not set.",
                "Cluster create.",
                "Cluster delete.",
                "A master upgrade.",
                "A node upgrade.",
                "Cluster repair.",
                "Cluster update.",
                "Node pool create.",
                "Node pool delete.",
                "Set node pool management.",
                "Automatic node pool repair.",
                "Automatic node upgrade.",
                "Set labels.",
                "Set/generate master auth materials",
                "Set node pool size.",
                "Updates network policy for a cluster.",
                "Set the maintenance policy."
              ]
            },
            "statusMessage": {
              "type": "string",
              "readOnly": true,
              "description": "Output only. If an error has occurred, a textual description of the error. Deprecated. Use the field error instead."
            },
            "clusterConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current cluster state. Deprecated. Use field error instead."
            },
            "nodepoolConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current node pool state. Deprecated. Use field error instead."
            }
          },
          "description": "This operation resource represents operations that may have happened or are happening on the cluster. All fields are output only."
        }
      ]
  projects.zones.clusters.nodePools.update:
    description: |-
      Updates the version and/or image type for the specified node pool.
    versions:
      from: 1.0.0-beta1
    link: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.zones.clusters.nodePools/update
    example:
      inputs: [
        {
          "id": "UpdateNodePoolRequest",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name (project, location, cluster, node pool) of the node pool to update. Specified in the format `projects/*/locations/*/clusters/*/nodePools/*`."
            },
            "zone": {
              "type": "string",
              "description": "Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field."
            },
            "clusterId": {
              "type": "string",
              "description": "Deprecated. The name of the cluster to upgrade. This field has been deprecated and replaced by the name field."
            },
            "imageType": {
              "type": "string",
              "description": "Required. The desired image type for the node pool."
            },
            "locations": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "The desired list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the node pool's nodes should be located. Changing the locations for a node pool will result in nodes being either created or removed from the node pool, depending on whether locations are being added or removed."
            },
            "projectId": {
              "type": "string",
              "description": "Deprecated. The Google Developers Console [project ID or project number](https://support.google.com/cloud/answer/6158840). This field has been deprecated and replaced by the name field."
            },
            "nodePoolId": {
              "type": "string",
              "description": "Deprecated. The name of the node pool to upgrade. This field has been deprecated and replaced by the name field."
            },
            "nodeVersion": {
              "type": "string",
              "description": "Required. The Kubernetes version to change the nodes to (typically an upgrade). Users may specify either explicit versions offered by Kubernetes Engine or version aliases, which have the following behavior: - \"latest\": picks the highest valid Kubernetes version - \"1.X\": picks the highest valid patch+gke.N patch in the 1.X version - \"1.X.Y\": picks the highest valid gke.N patch in the 1.X.Y version - \"1.X.Y-gke.N\": picks an explicit Kubernetes version - \"-\": picks the Kubernetes master version"
            },
            "kubeletConfig": {
              "id": "NodeKubeletConfig",
              "type": "object",
              "properties": {
                "cpuCfsQuota": {
                  "type": "boolean",
                  "description": "Enable CPU CFS quota enforcement for containers that specify CPU limits. This option is enabled by default which makes kubelet use CFS quota (https://www.kernel.org/doc/Documentation/scheduler/sched-bwc.txt) to enforce container CPU limits. Otherwise, CPU limits will not be enforced at all. Disable this option to mitigate CPU throttling problems while still having your pods to be in Guaranteed QoS class by specifying the CPU limits. The default value is 'true' if unspecified."
                },
                "cpuManagerPolicy": {
                  "type": "string",
                  "description": "Control the CPU management policy on the node. See https://kubernetes.io/docs/tasks/administer-cluster/cpu-management-policies/ The following values are allowed. - \"none\": the default, which represents the existing scheduling behavior. - \"static\": allows pods with certain resource characteristics to be granted increased CPU affinity and exclusivity on the node. The default value is 'none' if unspecified."
                },
                "cpuCfsQuotaPeriod": {
                  "type": "string",
                  "description": "Set the CPU CFS quota period value 'cpu.cfs_period_us'. The string must be a sequence of decimal numbers, each with optional fraction and a unit suffix, such as \"300ms\". Valid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\". The value must be a positive duration."
                }
              },
              "description": "Node kubelet configs."
            },
            "linuxNodeConfig": {
              "id": "LinuxNodeConfig",
              "type": "object",
              "properties": {
                "sysctls": {
                  "type": "object",
                  "description": "The Linux kernel parameters to be applied to the nodes and all pods running on the nodes. The following parameters are supported. net.core.netdev_max_backlog net.core.rmem_max net.core.wmem_default net.core.wmem_max net.core.optmem_max net.core.somaxconn net.ipv4.tcp_rmem net.ipv4.tcp_wmem net.ipv4.tcp_tw_reuse",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              },
              "description": "Parameters that can be configured on Linux nodes."
            },
            "upgradeSettings": {
              "id": "UpgradeSettings",
              "type": "object",
              "properties": {
                "maxSurge": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The maximum number of nodes that can be created beyond the current size of the node pool during the upgrade process."
                },
                "maxUnavailable": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The maximum number of nodes that can be simultaneously unavailable during the upgrade process. A node is considered available if its status is Ready."
                }
              },
              "description": "Upgrade settings control disruption and speed of the upgrade."
            },
            "workloadMetadataConfig": {
              "id": "WorkloadMetadataConfig",
              "type": "object",
              "properties": {
                "mode": {
                  "enum": [
                    "MODE_UNSPECIFIED",
                    "GCE_METADATA",
                    "GKE_METADATA"
                  ],
                  "type": "string",
                  "description": "Mode is the configuration for how to expose metadata to workloads running on the node pool.",
                  "enumDescriptions": [
                    "Not set.",
                    "Expose all Compute Engine metadata to pods.",
                    "Run the GKE Metadata Server on this node. The GKE Metadata Server exposes a metadata API to workloads that is compatible with the V1 Compute Metadata APIs exposed by the Compute Engine and App Engine Metadata Servers. This feature can only be enabled if Workload Identity is enabled at the cluster level."
                  ]
                }
              },
              "description": "The desired workload metadata config for the node pool."
            }
          },
          "description": "UpdateNodePoolRequests update a node pool's image and/or version."
        }
      ]
      outputs: [
        {
          "id": "Operation",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The server-assigned ID for the operation."
            },
            "zone": {
              "type": "string",
              "description": "The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the operation is taking place. This field is deprecated, use location instead."
            },
            "error": {
              "id": "Status",
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The status code, which should be an enum value of google.rpc.Code."
                },
                "details": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  },
                  "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
                },
                "message": {
                  "type": "string",
                  "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                }
              },
              "description": "The error result of the operation in case of failure."
            },
            "detail": {
              "type": "string",
              "description": "Detailed operation progress, if available."
            },
            "status": {
              "enum": [
                "STATUS_UNSPECIFIED",
                "PENDING",
                "RUNNING",
                "DONE",
                "ABORTING"
              ],
              "type": "string",
              "description": "The current status of the operation.",
              "enumDescriptions": [
                "Not set.",
                "The operation has been created.",
                "The operation is currently running.",
                "The operation is done, either cancelled or completed.",
                "The operation is aborting."
              ]
            },
            "endTime": {
              "type": "string",
              "description": "[Output only] The time the operation completed, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "location": {
              "type": "string",
              "description": "[Output only] The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) or [region](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) in which the cluster resides."
            },
            "progress": {
              "id": "OperationProgress",
              "type": "object",
              "readOnly": true,
              "properties": {
                "name": {
                  "type": "string",
                  "description": "A non-parameterized string describing an operation stage. Unset for single-stage operations."
                },
                "stages": {
                  "type": "array",
                  "items": {
                    "id": "OperationProgress",
                    "type": "object",
                    "properties": {},
                    "description": "Information about operation (or operation stage) progress."
                  },
                  "description": "Substages of an operation or a stage."
                },
                "status": {
                  "enum": [
                    "STATUS_UNSPECIFIED",
                    "PENDING",
                    "RUNNING",
                    "DONE",
                    "ABORTING"
                  ],
                  "type": "string",
                  "description": "Status of an operation stage. Unset for single-stage operations.",
                  "enumDescriptions": [
                    "Not set.",
                    "The operation has been created.",
                    "The operation is currently running.",
                    "The operation is done, either cancelled or completed.",
                    "The operation is aborting."
                  ]
                },
                "metrics": {
                  "type": "array",
                  "items": {
                    "id": "Metric",
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Required. Metric name, e.g., \"nodes total\", \"percent done\"."
                      },
                      "intValue": {
                        "type": "string",
                        "format": "int64",
                        "description": "For metrics with integer value."
                      },
                      "doubleValue": {
                        "type": "number",
                        "format": "double",
                        "description": "For metrics with floating point value."
                      },
                      "stringValue": {
                        "type": "string",
                        "description": "For metrics with custom values (ratios, visual progress, etc.)."
                      }
                    },
                    "description": "Progress metric is (string, int|float|string) pair."
                  },
                  "description": "Progress metric bundle, for example: metrics: [{name: \"nodes done\", int_value: 15}, {name: \"nodes total\", int_value: 32}] or metrics: [{name: \"progress\", double_value: 0.56}, {name: \"progress scale\", double_value: 1.0}]"
                }
              },
              "description": "Output only. [Output only] Progress information for an operation."
            },
            "selfLink": {
              "type": "string",
              "description": "Server-defined URL for the resource."
            },
            "startTime": {
              "type": "string",
              "description": "[Output only] The time the operation started, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "targetLink": {
              "type": "string",
              "description": "Server-defined URL for the target of the operation."
            },
            "operationType": {
              "enum": [
                "TYPE_UNSPECIFIED",
                "CREATE_CLUSTER",
                "DELETE_CLUSTER",
                "UPGRADE_MASTER",
                "UPGRADE_NODES",
                "REPAIR_CLUSTER",
                "UPDATE_CLUSTER",
                "CREATE_NODE_POOL",
                "DELETE_NODE_POOL",
                "SET_NODE_POOL_MANAGEMENT",
                "AUTO_REPAIR_NODES",
                "AUTO_UPGRADE_NODES",
                "SET_LABELS",
                "SET_MASTER_AUTH",
                "SET_NODE_POOL_SIZE",
                "SET_NETWORK_POLICY",
                "SET_MAINTENANCE_POLICY"
              ],
              "type": "string",
              "description": "The operation type.",
              "enumDescriptions": [
                "Not set.",
                "Cluster create.",
                "Cluster delete.",
                "A master upgrade.",
                "A node upgrade.",
                "Cluster repair.",
                "Cluster update.",
                "Node pool create.",
                "Node pool delete.",
                "Set node pool management.",
                "Automatic node pool repair.",
                "Automatic node upgrade.",
                "Set labels.",
                "Set/generate master auth materials",
                "Set node pool size.",
                "Updates network policy for a cluster.",
                "Set the maintenance policy."
              ]
            },
            "statusMessage": {
              "type": "string",
              "readOnly": true,
              "description": "Output only. If an error has occurred, a textual description of the error. Deprecated. Use the field error instead."
            },
            "clusterConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current cluster state. Deprecated. Use field error instead."
            },
            "nodepoolConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current node pool state. Deprecated. Use field error instead."
            }
          },
          "description": "This operation resource represents operations that may have happened or are happening on the cluster. All fields are output only."
        }
      ]
  projects.zones.clusters.resourceLabels:
    description: |-
      Sets labels on a cluster.
    versions:
      from: 1.0.0-beta1
    link: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.zones.clusters/resourceLabels
    example:
      inputs: [
        {
          "id": "SetLabelsRequest",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name (project, location, cluster id) of the cluster to set labels. Specified in the format `projects/*/locations/*/clusters/*`."
            },
            "zone": {
              "type": "string",
              "description": "Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field."
            },
            "clusterId": {
              "type": "string",
              "description": "Deprecated. The name of the cluster. This field has been deprecated and replaced by the name field."
            },
            "projectId": {
              "type": "string",
              "description": "Deprecated. The Google Developers Console [project ID or project number](https://developers.google.com/console/help/new/#projectnumber). This field has been deprecated and replaced by the name field."
            },
            "resourceLabels": {
              "type": "object",
              "description": "Required. The labels to set for that cluster.",
              "additionalProperties": {
                "type": "string"
              }
            },
            "labelFingerprint": {
              "type": "string",
              "description": "Required. The fingerprint of the previous set of labels for this resource, used to detect conflicts. The fingerprint is initially generated by Kubernetes Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash when updating or changing labels. Make a `get()` request to the resource to get the latest fingerprint."
            }
          },
          "description": "SetLabelsRequest sets the Google Cloud Platform labels on a Google Container Engine cluster, which will in turn set them for Google Compute Engine resources used by that cluster"
        }
      ]
      outputs: [
        {
          "id": "Operation",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The server-assigned ID for the operation."
            },
            "zone": {
              "type": "string",
              "description": "The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the operation is taking place. This field is deprecated, use location instead."
            },
            "error": {
              "id": "Status",
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The status code, which should be an enum value of google.rpc.Code."
                },
                "details": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  },
                  "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
                },
                "message": {
                  "type": "string",
                  "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                }
              },
              "description": "The error result of the operation in case of failure."
            },
            "detail": {
              "type": "string",
              "description": "Detailed operation progress, if available."
            },
            "status": {
              "enum": [
                "STATUS_UNSPECIFIED",
                "PENDING",
                "RUNNING",
                "DONE",
                "ABORTING"
              ],
              "type": "string",
              "description": "The current status of the operation.",
              "enumDescriptions": [
                "Not set.",
                "The operation has been created.",
                "The operation is currently running.",
                "The operation is done, either cancelled or completed.",
                "The operation is aborting."
              ]
            },
            "endTime": {
              "type": "string",
              "description": "[Output only] The time the operation completed, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "location": {
              "type": "string",
              "description": "[Output only] The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) or [region](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) in which the cluster resides."
            },
            "progress": {
              "id": "OperationProgress",
              "type": "object",
              "readOnly": true,
              "properties": {
                "name": {
                  "type": "string",
                  "description": "A non-parameterized string describing an operation stage. Unset for single-stage operations."
                },
                "stages": {
                  "type": "array",
                  "items": {
                    "id": "OperationProgress",
                    "type": "object",
                    "properties": {},
                    "description": "Information about operation (or operation stage) progress."
                  },
                  "description": "Substages of an operation or a stage."
                },
                "status": {
                  "enum": [
                    "STATUS_UNSPECIFIED",
                    "PENDING",
                    "RUNNING",
                    "DONE",
                    "ABORTING"
                  ],
                  "type": "string",
                  "description": "Status of an operation stage. Unset for single-stage operations.",
                  "enumDescriptions": [
                    "Not set.",
                    "The operation has been created.",
                    "The operation is currently running.",
                    "The operation is done, either cancelled or completed.",
                    "The operation is aborting."
                  ]
                },
                "metrics": {
                  "type": "array",
                  "items": {
                    "id": "Metric",
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Required. Metric name, e.g., \"nodes total\", \"percent done\"."
                      },
                      "intValue": {
                        "type": "string",
                        "format": "int64",
                        "description": "For metrics with integer value."
                      },
                      "doubleValue": {
                        "type": "number",
                        "format": "double",
                        "description": "For metrics with floating point value."
                      },
                      "stringValue": {
                        "type": "string",
                        "description": "For metrics with custom values (ratios, visual progress, etc.)."
                      }
                    },
                    "description": "Progress metric is (string, int|float|string) pair."
                  },
                  "description": "Progress metric bundle, for example: metrics: [{name: \"nodes done\", int_value: 15}, {name: \"nodes total\", int_value: 32}] or metrics: [{name: \"progress\", double_value: 0.56}, {name: \"progress scale\", double_value: 1.0}]"
                }
              },
              "description": "Output only. [Output only] Progress information for an operation."
            },
            "selfLink": {
              "type": "string",
              "description": "Server-defined URL for the resource."
            },
            "startTime": {
              "type": "string",
              "description": "[Output only] The time the operation started, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "targetLink": {
              "type": "string",
              "description": "Server-defined URL for the target of the operation."
            },
            "operationType": {
              "enum": [
                "TYPE_UNSPECIFIED",
                "CREATE_CLUSTER",
                "DELETE_CLUSTER",
                "UPGRADE_MASTER",
                "UPGRADE_NODES",
                "REPAIR_CLUSTER",
                "UPDATE_CLUSTER",
                "CREATE_NODE_POOL",
                "DELETE_NODE_POOL",
                "SET_NODE_POOL_MANAGEMENT",
                "AUTO_REPAIR_NODES",
                "AUTO_UPGRADE_NODES",
                "SET_LABELS",
                "SET_MASTER_AUTH",
                "SET_NODE_POOL_SIZE",
                "SET_NETWORK_POLICY",
                "SET_MAINTENANCE_POLICY"
              ],
              "type": "string",
              "description": "The operation type.",
              "enumDescriptions": [
                "Not set.",
                "Cluster create.",
                "Cluster delete.",
                "A master upgrade.",
                "A node upgrade.",
                "Cluster repair.",
                "Cluster update.",
                "Node pool create.",
                "Node pool delete.",
                "Set node pool management.",
                "Automatic node pool repair.",
                "Automatic node upgrade.",
                "Set labels.",
                "Set/generate master auth materials",
                "Set node pool size.",
                "Updates network policy for a cluster.",
                "Set the maintenance policy."
              ]
            },
            "statusMessage": {
              "type": "string",
              "readOnly": true,
              "description": "Output only. If an error has occurred, a textual description of the error. Deprecated. Use the field error instead."
            },
            "clusterConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current cluster state. Deprecated. Use field error instead."
            },
            "nodepoolConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current node pool state. Deprecated. Use field error instead."
            }
          },
          "description": "This operation resource represents operations that may have happened or are happening on the cluster. All fields are output only."
        }
      ]
  projects.zones.clusters.setMaintenancePolicy:
    description: |-
      Sets the maintenance policy for a cluster.
    versions:
      from: 1.0.0-beta1
    link: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.zones.clusters/setMaintenancePolicy
    example:
      inputs: [
        {
          "id": "SetMaintenancePolicyRequest",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name (project, location, cluster id) of the cluster to set maintenance policy. Specified in the format `projects/*/locations/*/clusters/*`."
            },
            "zone": {
              "type": "string",
              "description": "Required. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides."
            },
            "clusterId": {
              "type": "string",
              "description": "Required. The name of the cluster to update."
            },
            "projectId": {
              "type": "string",
              "description": "Required. The Google Developers Console [project ID or project number](https://support.google.com/cloud/answer/6158840)."
            },
            "maintenancePolicy": {
              "id": "MaintenancePolicy",
              "type": "object",
              "properties": {
                "window": {
                  "id": "MaintenanceWindow",
                  "type": "object",
                  "properties": {
                    "recurringWindow": {
                      "id": "RecurringTimeWindow",
                      "type": "object",
                      "properties": {
                        "window": {
                          "id": "TimeWindow",
                          "type": "object",
                          "properties": {
                            "endTime": {
                              "type": "string",
                              "format": "google-datetime",
                              "description": "The time that the window ends. The end time should take place after the start time."
                            },
                            "startTime": {
                              "type": "string",
                              "format": "google-datetime",
                              "description": "The time that the window first starts."
                            }
                          },
                          "description": "Represents an arbitrary window of time."
                        },
                        "recurrence": {
                          "type": "string",
                          "description": "An RRULE (https://tools.ietf.org/html/rfc5545#section-3.8.5.3) for how this window reccurs. They go on for the span of time between the start and end time. For example, to have something repeat every weekday, you'd use: `FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR` To repeat some window daily (equivalent to the DailyMaintenanceWindow): `FREQ=DAILY` For the first weekend of every month: `FREQ=MONTHLY;BYSETPOS=1;BYDAY=SA,SU` This specifies how frequently the window starts. Eg, if you wanted to have a 9-5 UTC-4 window every weekday, you'd use something like: ``` start time = 2019-01-01T09:00:00-0400 end time = 2019-01-01T17:00:00-0400 recurrence = FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR ``` Windows can span multiple days. Eg, to make the window encompass every weekend from midnight Saturday till the last minute of Sunday UTC: ``` start time = 2019-01-05T00:00:00Z end time = 2019-01-07T23:59:00Z recurrence = FREQ=WEEKLY;BYDAY=SA ``` Note the start and end time's specific dates are largely arbitrary except to specify duration of the window and when it first starts. The FREQ values of HOURLY, MINUTELY, and SECONDLY are not supported."
                        }
                      },
                      "description": "RecurringWindow specifies some number of recurring time periods for maintenance to occur. The time windows may be overlapping. If no maintenance windows are set, maintenance can occur at any time."
                    },
                    "maintenanceExclusions": {
                      "type": "object",
                      "description": "Exceptions to maintenance window. Non-emergency maintenance should not occur in these windows.",
                      "additionalProperties": {
                        "id": "TimeWindow",
                        "type": "object",
                        "properties": {
                          "endTime": {
                            "type": "string",
                            "format": "google-datetime",
                            "description": "The time that the window ends. The end time should take place after the start time."
                          },
                          "startTime": {
                            "type": "string",
                            "format": "google-datetime",
                            "description": "The time that the window first starts."
                          }
                        },
                        "description": "Represents an arbitrary window of time."
                      }
                    },
                    "dailyMaintenanceWindow": {
                      "id": "DailyMaintenanceWindow",
                      "type": "object",
                      "properties": {
                        "duration": {
                          "type": "string",
                          "description": "[Output only] Duration of the time window, automatically chosen to be smallest possible in the given scenario. Duration will be in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format \"PTnHnMnS\"."
                        },
                        "startTime": {
                          "type": "string",
                          "description": "Time within the maintenance window to start the maintenance operations. Time format should be in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format \"HH:MM\", where HH : [00-23] and MM : [00-59] GMT."
                        }
                      },
                      "description": "DailyMaintenanceWindow specifies a daily maintenance operation window."
                    }
                  },
                  "description": "Specifies the maintenance window in which maintenance may be performed."
                },
                "resourceVersion": {
                  "type": "string",
                  "description": "A hash identifying the version of this policy, so that updates to fields of the policy won't accidentally undo intermediate changes (and so that users of the API unaware of some fields won't accidentally remove other fields). Make a `get()` request to the cluster to get the current resource version and include it with requests to set the policy."
                }
              },
              "description": "Required. The maintenance policy to be set for the cluster. An empty field clears the existing maintenance policy."
            }
          },
          "description": "SetMaintenancePolicyRequest sets the maintenance policy for a cluster."
        }
      ]
      outputs: [
        {
          "id": "Operation",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The server-assigned ID for the operation."
            },
            "zone": {
              "type": "string",
              "description": "The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the operation is taking place. This field is deprecated, use location instead."
            },
            "error": {
              "id": "Status",
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The status code, which should be an enum value of google.rpc.Code."
                },
                "details": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  },
                  "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
                },
                "message": {
                  "type": "string",
                  "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                }
              },
              "description": "The error result of the operation in case of failure."
            },
            "detail": {
              "type": "string",
              "description": "Detailed operation progress, if available."
            },
            "status": {
              "enum": [
                "STATUS_UNSPECIFIED",
                "PENDING",
                "RUNNING",
                "DONE",
                "ABORTING"
              ],
              "type": "string",
              "description": "The current status of the operation.",
              "enumDescriptions": [
                "Not set.",
                "The operation has been created.",
                "The operation is currently running.",
                "The operation is done, either cancelled or completed.",
                "The operation is aborting."
              ]
            },
            "endTime": {
              "type": "string",
              "description": "[Output only] The time the operation completed, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "location": {
              "type": "string",
              "description": "[Output only] The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) or [region](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) in which the cluster resides."
            },
            "progress": {
              "id": "OperationProgress",
              "type": "object",
              "readOnly": true,
              "properties": {
                "name": {
                  "type": "string",
                  "description": "A non-parameterized string describing an operation stage. Unset for single-stage operations."
                },
                "stages": {
                  "type": "array",
                  "items": {
                    "id": "OperationProgress",
                    "type": "object",
                    "properties": {},
                    "description": "Information about operation (or operation stage) progress."
                  },
                  "description": "Substages of an operation or a stage."
                },
                "status": {
                  "enum": [
                    "STATUS_UNSPECIFIED",
                    "PENDING",
                    "RUNNING",
                    "DONE",
                    "ABORTING"
                  ],
                  "type": "string",
                  "description": "Status of an operation stage. Unset for single-stage operations.",
                  "enumDescriptions": [
                    "Not set.",
                    "The operation has been created.",
                    "The operation is currently running.",
                    "The operation is done, either cancelled or completed.",
                    "The operation is aborting."
                  ]
                },
                "metrics": {
                  "type": "array",
                  "items": {
                    "id": "Metric",
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Required. Metric name, e.g., \"nodes total\", \"percent done\"."
                      },
                      "intValue": {
                        "type": "string",
                        "format": "int64",
                        "description": "For metrics with integer value."
                      },
                      "doubleValue": {
                        "type": "number",
                        "format": "double",
                        "description": "For metrics with floating point value."
                      },
                      "stringValue": {
                        "type": "string",
                        "description": "For metrics with custom values (ratios, visual progress, etc.)."
                      }
                    },
                    "description": "Progress metric is (string, int|float|string) pair."
                  },
                  "description": "Progress metric bundle, for example: metrics: [{name: \"nodes done\", int_value: 15}, {name: \"nodes total\", int_value: 32}] or metrics: [{name: \"progress\", double_value: 0.56}, {name: \"progress scale\", double_value: 1.0}]"
                }
              },
              "description": "Output only. [Output only] Progress information for an operation."
            },
            "selfLink": {
              "type": "string",
              "description": "Server-defined URL for the resource."
            },
            "startTime": {
              "type": "string",
              "description": "[Output only] The time the operation started, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "targetLink": {
              "type": "string",
              "description": "Server-defined URL for the target of the operation."
            },
            "operationType": {
              "enum": [
                "TYPE_UNSPECIFIED",
                "CREATE_CLUSTER",
                "DELETE_CLUSTER",
                "UPGRADE_MASTER",
                "UPGRADE_NODES",
                "REPAIR_CLUSTER",
                "UPDATE_CLUSTER",
                "CREATE_NODE_POOL",
                "DELETE_NODE_POOL",
                "SET_NODE_POOL_MANAGEMENT",
                "AUTO_REPAIR_NODES",
                "AUTO_UPGRADE_NODES",
                "SET_LABELS",
                "SET_MASTER_AUTH",
                "SET_NODE_POOL_SIZE",
                "SET_NETWORK_POLICY",
                "SET_MAINTENANCE_POLICY"
              ],
              "type": "string",
              "description": "The operation type.",
              "enumDescriptions": [
                "Not set.",
                "Cluster create.",
                "Cluster delete.",
                "A master upgrade.",
                "A node upgrade.",
                "Cluster repair.",
                "Cluster update.",
                "Node pool create.",
                "Node pool delete.",
                "Set node pool management.",
                "Automatic node pool repair.",
                "Automatic node upgrade.",
                "Set labels.",
                "Set/generate master auth materials",
                "Set node pool size.",
                "Updates network policy for a cluster.",
                "Set the maintenance policy."
              ]
            },
            "statusMessage": {
              "type": "string",
              "readOnly": true,
              "description": "Output only. If an error has occurred, a textual description of the error. Deprecated. Use the field error instead."
            },
            "clusterConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current cluster state. Deprecated. Use field error instead."
            },
            "nodepoolConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current node pool state. Deprecated. Use field error instead."
            }
          },
          "description": "This operation resource represents operations that may have happened or are happening on the cluster. All fields are output only."
        }
      ]
  projects.zones.clusters.setMasterAuth:
    description: |-
      Sets master auth materials. Currently supports changing the admin password or a specific cluster, either via password generation or explicitly setting the password.
    versions:
      from: 1.0.0-beta1
    link: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.zones.clusters/setMasterAuth
    example:
      inputs: [
        {
          "id": "SetMasterAuthRequest",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name (project, location, cluster) of the cluster to set auth. Specified in the format `projects/*/locations/*/clusters/*`."
            },
            "zone": {
              "type": "string",
              "description": "Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field."
            },
            "action": {
              "enum": [
                "UNKNOWN",
                "SET_PASSWORD",
                "GENERATE_PASSWORD",
                "SET_USERNAME"
              ],
              "type": "string",
              "description": "Required. The exact form of action to be taken on the master auth.",
              "enumDescriptions": [
                "Operation is unknown and will error out.",
                "Set the password to a user generated value.",
                "Generate a new password and set it to that.",
                "Set the username. If an empty username is provided, basic authentication is disabled for the cluster. If a non-empty username is provided, basic authentication is enabled, with either a provided password or a generated one."
              ]
            },
            "update": {
              "id": "MasterAuth",
              "type": "object",
              "properties": {
                "password": {
                  "type": "string",
                  "description": "The password to use for HTTP basic authentication to the master endpoint. Because the master endpoint is open to the Internet, you should create a strong password. If a password is provided for cluster creation, username must be non-empty. Warning: basic authentication is deprecated, and will be removed in GKE control plane versions 1.19 and newer. For a list of recommended authentication methods, see: https://cloud.google.com/kubernetes-engine/docs/how-to/api-server-authentication"
                },
                "username": {
                  "type": "string",
                  "description": "The username to use for HTTP basic authentication to the master endpoint. For clusters v1.6.0 and later, basic authentication can be disabled by leaving username unspecified (or setting it to the empty string). Warning: basic authentication is deprecated, and will be removed in GKE control plane versions 1.19 and newer. For a list of recommended authentication methods, see: https://cloud.google.com/kubernetes-engine/docs/how-to/api-server-authentication"
                },
                "clientKey": {
                  "type": "string",
                  "description": "[Output only] Base64-encoded private key used by clients to authenticate to the cluster endpoint."
                },
                "clientCertificate": {
                  "type": "string",
                  "description": "[Output only] Base64-encoded public certificate used by clients to authenticate to the cluster endpoint."
                },
                "clusterCaCertificate": {
                  "type": "string",
                  "description": "[Output only] Base64-encoded public certificate that is the root of trust for the cluster."
                },
                "clientCertificateConfig": {
                  "id": "ClientCertificateConfig",
                  "type": "object",
                  "properties": {
                    "issueClientCertificate": {
                      "type": "boolean",
                      "description": "Issue a client certificate."
                    }
                  },
                  "description": "Configuration for client certificate authentication on the cluster. For clusters before v1.12, if no configuration is specified, a client certificate is issued."
                }
              },
              "description": "Required. A description of the update."
            },
            "clusterId": {
              "type": "string",
              "description": "Deprecated. The name of the cluster to upgrade. This field has been deprecated and replaced by the name field."
            },
            "projectId": {
              "type": "string",
              "description": "Deprecated. The Google Developers Console [project ID or project number](https://support.google.com/cloud/answer/6158840). This field has been deprecated and replaced by the name field."
            }
          },
          "description": "SetMasterAuthRequest updates the admin password of a cluster."
        }
      ]
      outputs: [
        {
          "id": "Operation",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The server-assigned ID for the operation."
            },
            "zone": {
              "type": "string",
              "description": "The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the operation is taking place. This field is deprecated, use location instead."
            },
            "error": {
              "id": "Status",
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The status code, which should be an enum value of google.rpc.Code."
                },
                "details": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  },
                  "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
                },
                "message": {
                  "type": "string",
                  "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                }
              },
              "description": "The error result of the operation in case of failure."
            },
            "detail": {
              "type": "string",
              "description": "Detailed operation progress, if available."
            },
            "status": {
              "enum": [
                "STATUS_UNSPECIFIED",
                "PENDING",
                "RUNNING",
                "DONE",
                "ABORTING"
              ],
              "type": "string",
              "description": "The current status of the operation.",
              "enumDescriptions": [
                "Not set.",
                "The operation has been created.",
                "The operation is currently running.",
                "The operation is done, either cancelled or completed.",
                "The operation is aborting."
              ]
            },
            "endTime": {
              "type": "string",
              "description": "[Output only] The time the operation completed, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "location": {
              "type": "string",
              "description": "[Output only] The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) or [region](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) in which the cluster resides."
            },
            "progress": {
              "id": "OperationProgress",
              "type": "object",
              "readOnly": true,
              "properties": {
                "name": {
                  "type": "string",
                  "description": "A non-parameterized string describing an operation stage. Unset for single-stage operations."
                },
                "stages": {
                  "type": "array",
                  "items": {
                    "id": "OperationProgress",
                    "type": "object",
                    "properties": {},
                    "description": "Information about operation (or operation stage) progress."
                  },
                  "description": "Substages of an operation or a stage."
                },
                "status": {
                  "enum": [
                    "STATUS_UNSPECIFIED",
                    "PENDING",
                    "RUNNING",
                    "DONE",
                    "ABORTING"
                  ],
                  "type": "string",
                  "description": "Status of an operation stage. Unset for single-stage operations.",
                  "enumDescriptions": [
                    "Not set.",
                    "The operation has been created.",
                    "The operation is currently running.",
                    "The operation is done, either cancelled or completed.",
                    "The operation is aborting."
                  ]
                },
                "metrics": {
                  "type": "array",
                  "items": {
                    "id": "Metric",
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Required. Metric name, e.g., \"nodes total\", \"percent done\"."
                      },
                      "intValue": {
                        "type": "string",
                        "format": "int64",
                        "description": "For metrics with integer value."
                      },
                      "doubleValue": {
                        "type": "number",
                        "format": "double",
                        "description": "For metrics with floating point value."
                      },
                      "stringValue": {
                        "type": "string",
                        "description": "For metrics with custom values (ratios, visual progress, etc.)."
                      }
                    },
                    "description": "Progress metric is (string, int|float|string) pair."
                  },
                  "description": "Progress metric bundle, for example: metrics: [{name: \"nodes done\", int_value: 15}, {name: \"nodes total\", int_value: 32}] or metrics: [{name: \"progress\", double_value: 0.56}, {name: \"progress scale\", double_value: 1.0}]"
                }
              },
              "description": "Output only. [Output only] Progress information for an operation."
            },
            "selfLink": {
              "type": "string",
              "description": "Server-defined URL for the resource."
            },
            "startTime": {
              "type": "string",
              "description": "[Output only] The time the operation started, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "targetLink": {
              "type": "string",
              "description": "Server-defined URL for the target of the operation."
            },
            "operationType": {
              "enum": [
                "TYPE_UNSPECIFIED",
                "CREATE_CLUSTER",
                "DELETE_CLUSTER",
                "UPGRADE_MASTER",
                "UPGRADE_NODES",
                "REPAIR_CLUSTER",
                "UPDATE_CLUSTER",
                "CREATE_NODE_POOL",
                "DELETE_NODE_POOL",
                "SET_NODE_POOL_MANAGEMENT",
                "AUTO_REPAIR_NODES",
                "AUTO_UPGRADE_NODES",
                "SET_LABELS",
                "SET_MASTER_AUTH",
                "SET_NODE_POOL_SIZE",
                "SET_NETWORK_POLICY",
                "SET_MAINTENANCE_POLICY"
              ],
              "type": "string",
              "description": "The operation type.",
              "enumDescriptions": [
                "Not set.",
                "Cluster create.",
                "Cluster delete.",
                "A master upgrade.",
                "A node upgrade.",
                "Cluster repair.",
                "Cluster update.",
                "Node pool create.",
                "Node pool delete.",
                "Set node pool management.",
                "Automatic node pool repair.",
                "Automatic node upgrade.",
                "Set labels.",
                "Set/generate master auth materials",
                "Set node pool size.",
                "Updates network policy for a cluster.",
                "Set the maintenance policy."
              ]
            },
            "statusMessage": {
              "type": "string",
              "readOnly": true,
              "description": "Output only. If an error has occurred, a textual description of the error. Deprecated. Use the field error instead."
            },
            "clusterConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current cluster state. Deprecated. Use field error instead."
            },
            "nodepoolConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current node pool state. Deprecated. Use field error instead."
            }
          },
          "description": "This operation resource represents operations that may have happened or are happening on the cluster. All fields are output only."
        }
      ]
  projects.zones.clusters.setNetworkPolicy:
    description: |-
      Enables or disables Network Policy for a cluster.
    versions:
      from: 1.0.0-beta1
    link: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.zones.clusters/setNetworkPolicy
    example:
      inputs: [
        {
          "id": "SetNetworkPolicyRequest",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name (project, location, cluster id) of the cluster to set networking policy. Specified in the format `projects/*/locations/*/clusters/*`."
            },
            "zone": {
              "type": "string",
              "description": "Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field."
            },
            "clusterId": {
              "type": "string",
              "description": "Deprecated. The name of the cluster. This field has been deprecated and replaced by the name field."
            },
            "projectId": {
              "type": "string",
              "description": "Deprecated. The Google Developers Console [project ID or project number](https://developers.google.com/console/help/new/#projectnumber). This field has been deprecated and replaced by the name field."
            },
            "networkPolicy": {
              "id": "NetworkPolicy",
              "type": "object",
              "properties": {
                "enabled": {
                  "type": "boolean",
                  "description": "Whether network policy is enabled on the cluster."
                },
                "provider": {
                  "enum": [
                    "PROVIDER_UNSPECIFIED",
                    "CALICO"
                  ],
                  "type": "string",
                  "description": "The selected network policy provider.",
                  "enumDescriptions": [
                    "Not set",
                    "Tigera (Calico Felix)."
                  ]
                }
              },
              "description": "Required. Configuration options for the NetworkPolicy feature."
            }
          },
          "description": "SetNetworkPolicyRequest enables/disables network policy for a cluster."
        }
      ]
      outputs: [
        {
          "id": "Operation",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The server-assigned ID for the operation."
            },
            "zone": {
              "type": "string",
              "description": "The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the operation is taking place. This field is deprecated, use location instead."
            },
            "error": {
              "id": "Status",
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The status code, which should be an enum value of google.rpc.Code."
                },
                "details": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  },
                  "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
                },
                "message": {
                  "type": "string",
                  "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                }
              },
              "description": "The error result of the operation in case of failure."
            },
            "detail": {
              "type": "string",
              "description": "Detailed operation progress, if available."
            },
            "status": {
              "enum": [
                "STATUS_UNSPECIFIED",
                "PENDING",
                "RUNNING",
                "DONE",
                "ABORTING"
              ],
              "type": "string",
              "description": "The current status of the operation.",
              "enumDescriptions": [
                "Not set.",
                "The operation has been created.",
                "The operation is currently running.",
                "The operation is done, either cancelled or completed.",
                "The operation is aborting."
              ]
            },
            "endTime": {
              "type": "string",
              "description": "[Output only] The time the operation completed, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "location": {
              "type": "string",
              "description": "[Output only] The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) or [region](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) in which the cluster resides."
            },
            "progress": {
              "id": "OperationProgress",
              "type": "object",
              "readOnly": true,
              "properties": {
                "name": {
                  "type": "string",
                  "description": "A non-parameterized string describing an operation stage. Unset for single-stage operations."
                },
                "stages": {
                  "type": "array",
                  "items": {
                    "id": "OperationProgress",
                    "type": "object",
                    "properties": {},
                    "description": "Information about operation (or operation stage) progress."
                  },
                  "description": "Substages of an operation or a stage."
                },
                "status": {
                  "enum": [
                    "STATUS_UNSPECIFIED",
                    "PENDING",
                    "RUNNING",
                    "DONE",
                    "ABORTING"
                  ],
                  "type": "string",
                  "description": "Status of an operation stage. Unset for single-stage operations.",
                  "enumDescriptions": [
                    "Not set.",
                    "The operation has been created.",
                    "The operation is currently running.",
                    "The operation is done, either cancelled or completed.",
                    "The operation is aborting."
                  ]
                },
                "metrics": {
                  "type": "array",
                  "items": {
                    "id": "Metric",
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Required. Metric name, e.g., \"nodes total\", \"percent done\"."
                      },
                      "intValue": {
                        "type": "string",
                        "format": "int64",
                        "description": "For metrics with integer value."
                      },
                      "doubleValue": {
                        "type": "number",
                        "format": "double",
                        "description": "For metrics with floating point value."
                      },
                      "stringValue": {
                        "type": "string",
                        "description": "For metrics with custom values (ratios, visual progress, etc.)."
                      }
                    },
                    "description": "Progress metric is (string, int|float|string) pair."
                  },
                  "description": "Progress metric bundle, for example: metrics: [{name: \"nodes done\", int_value: 15}, {name: \"nodes total\", int_value: 32}] or metrics: [{name: \"progress\", double_value: 0.56}, {name: \"progress scale\", double_value: 1.0}]"
                }
              },
              "description": "Output only. [Output only] Progress information for an operation."
            },
            "selfLink": {
              "type": "string",
              "description": "Server-defined URL for the resource."
            },
            "startTime": {
              "type": "string",
              "description": "[Output only] The time the operation started, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "targetLink": {
              "type": "string",
              "description": "Server-defined URL for the target of the operation."
            },
            "operationType": {
              "enum": [
                "TYPE_UNSPECIFIED",
                "CREATE_CLUSTER",
                "DELETE_CLUSTER",
                "UPGRADE_MASTER",
                "UPGRADE_NODES",
                "REPAIR_CLUSTER",
                "UPDATE_CLUSTER",
                "CREATE_NODE_POOL",
                "DELETE_NODE_POOL",
                "SET_NODE_POOL_MANAGEMENT",
                "AUTO_REPAIR_NODES",
                "AUTO_UPGRADE_NODES",
                "SET_LABELS",
                "SET_MASTER_AUTH",
                "SET_NODE_POOL_SIZE",
                "SET_NETWORK_POLICY",
                "SET_MAINTENANCE_POLICY"
              ],
              "type": "string",
              "description": "The operation type.",
              "enumDescriptions": [
                "Not set.",
                "Cluster create.",
                "Cluster delete.",
                "A master upgrade.",
                "A node upgrade.",
                "Cluster repair.",
                "Cluster update.",
                "Node pool create.",
                "Node pool delete.",
                "Set node pool management.",
                "Automatic node pool repair.",
                "Automatic node upgrade.",
                "Set labels.",
                "Set/generate master auth materials",
                "Set node pool size.",
                "Updates network policy for a cluster.",
                "Set the maintenance policy."
              ]
            },
            "statusMessage": {
              "type": "string",
              "readOnly": true,
              "description": "Output only. If an error has occurred, a textual description of the error. Deprecated. Use the field error instead."
            },
            "clusterConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current cluster state. Deprecated. Use field error instead."
            },
            "nodepoolConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current node pool state. Deprecated. Use field error instead."
            }
          },
          "description": "This operation resource represents operations that may have happened or are happening on the cluster. All fields are output only."
        }
      ]
  projects.zones.clusters.startIpRotation:
    description: |-
      Starts master IP rotation.
    versions:
      from: 1.0.0-beta1
    link: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.zones.clusters/startIpRotation
    example:
      inputs: [
        {
          "id": "StartIPRotationRequest",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name (project, location, cluster id) of the cluster to start IP rotation. Specified in the format `projects/*/locations/*/clusters/*`."
            },
            "zone": {
              "type": "string",
              "description": "Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field."
            },
            "clusterId": {
              "type": "string",
              "description": "Deprecated. The name of the cluster. This field has been deprecated and replaced by the name field."
            },
            "projectId": {
              "type": "string",
              "description": "Deprecated. The Google Developers Console [project ID or project number](https://developers.google.com/console/help/new/#projectnumber). This field has been deprecated and replaced by the name field."
            },
            "rotateCredentials": {
              "type": "boolean",
              "description": "Whether to rotate credentials during IP rotation."
            }
          },
          "description": "StartIPRotationRequest creates a new IP for the cluster and then performs a node upgrade on each node pool to point to the new IP."
        }
      ]
      outputs: [
        {
          "id": "Operation",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The server-assigned ID for the operation."
            },
            "zone": {
              "type": "string",
              "description": "The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the operation is taking place. This field is deprecated, use location instead."
            },
            "error": {
              "id": "Status",
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The status code, which should be an enum value of google.rpc.Code."
                },
                "details": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  },
                  "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
                },
                "message": {
                  "type": "string",
                  "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                }
              },
              "description": "The error result of the operation in case of failure."
            },
            "detail": {
              "type": "string",
              "description": "Detailed operation progress, if available."
            },
            "status": {
              "enum": [
                "STATUS_UNSPECIFIED",
                "PENDING",
                "RUNNING",
                "DONE",
                "ABORTING"
              ],
              "type": "string",
              "description": "The current status of the operation.",
              "enumDescriptions": [
                "Not set.",
                "The operation has been created.",
                "The operation is currently running.",
                "The operation is done, either cancelled or completed.",
                "The operation is aborting."
              ]
            },
            "endTime": {
              "type": "string",
              "description": "[Output only] The time the operation completed, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "location": {
              "type": "string",
              "description": "[Output only] The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) or [region](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) in which the cluster resides."
            },
            "progress": {
              "id": "OperationProgress",
              "type": "object",
              "readOnly": true,
              "properties": {
                "name": {
                  "type": "string",
                  "description": "A non-parameterized string describing an operation stage. Unset for single-stage operations."
                },
                "stages": {
                  "type": "array",
                  "items": {
                    "id": "OperationProgress",
                    "type": "object",
                    "properties": {},
                    "description": "Information about operation (or operation stage) progress."
                  },
                  "description": "Substages of an operation or a stage."
                },
                "status": {
                  "enum": [
                    "STATUS_UNSPECIFIED",
                    "PENDING",
                    "RUNNING",
                    "DONE",
                    "ABORTING"
                  ],
                  "type": "string",
                  "description": "Status of an operation stage. Unset for single-stage operations.",
                  "enumDescriptions": [
                    "Not set.",
                    "The operation has been created.",
                    "The operation is currently running.",
                    "The operation is done, either cancelled or completed.",
                    "The operation is aborting."
                  ]
                },
                "metrics": {
                  "type": "array",
                  "items": {
                    "id": "Metric",
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Required. Metric name, e.g., \"nodes total\", \"percent done\"."
                      },
                      "intValue": {
                        "type": "string",
                        "format": "int64",
                        "description": "For metrics with integer value."
                      },
                      "doubleValue": {
                        "type": "number",
                        "format": "double",
                        "description": "For metrics with floating point value."
                      },
                      "stringValue": {
                        "type": "string",
                        "description": "For metrics with custom values (ratios, visual progress, etc.)."
                      }
                    },
                    "description": "Progress metric is (string, int|float|string) pair."
                  },
                  "description": "Progress metric bundle, for example: metrics: [{name: \"nodes done\", int_value: 15}, {name: \"nodes total\", int_value: 32}] or metrics: [{name: \"progress\", double_value: 0.56}, {name: \"progress scale\", double_value: 1.0}]"
                }
              },
              "description": "Output only. [Output only] Progress information for an operation."
            },
            "selfLink": {
              "type": "string",
              "description": "Server-defined URL for the resource."
            },
            "startTime": {
              "type": "string",
              "description": "[Output only] The time the operation started, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "targetLink": {
              "type": "string",
              "description": "Server-defined URL for the target of the operation."
            },
            "operationType": {
              "enum": [
                "TYPE_UNSPECIFIED",
                "CREATE_CLUSTER",
                "DELETE_CLUSTER",
                "UPGRADE_MASTER",
                "UPGRADE_NODES",
                "REPAIR_CLUSTER",
                "UPDATE_CLUSTER",
                "CREATE_NODE_POOL",
                "DELETE_NODE_POOL",
                "SET_NODE_POOL_MANAGEMENT",
                "AUTO_REPAIR_NODES",
                "AUTO_UPGRADE_NODES",
                "SET_LABELS",
                "SET_MASTER_AUTH",
                "SET_NODE_POOL_SIZE",
                "SET_NETWORK_POLICY",
                "SET_MAINTENANCE_POLICY"
              ],
              "type": "string",
              "description": "The operation type.",
              "enumDescriptions": [
                "Not set.",
                "Cluster create.",
                "Cluster delete.",
                "A master upgrade.",
                "A node upgrade.",
                "Cluster repair.",
                "Cluster update.",
                "Node pool create.",
                "Node pool delete.",
                "Set node pool management.",
                "Automatic node pool repair.",
                "Automatic node upgrade.",
                "Set labels.",
                "Set/generate master auth materials",
                "Set node pool size.",
                "Updates network policy for a cluster.",
                "Set the maintenance policy."
              ]
            },
            "statusMessage": {
              "type": "string",
              "readOnly": true,
              "description": "Output only. If an error has occurred, a textual description of the error. Deprecated. Use the field error instead."
            },
            "clusterConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current cluster state. Deprecated. Use field error instead."
            },
            "nodepoolConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current node pool state. Deprecated. Use field error instead."
            }
          },
          "description": "This operation resource represents operations that may have happened or are happening on the cluster. All fields are output only."
        }
      ]
  projects.zones.clusters.update:
    description: |-
      Updates the settings of a specific cluster.
    versions:
      from: 1.0.0-beta1
    link: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.zones.clusters/update
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  projects.zones.getServerconfig:
    description: |-
      Returns configuration info about the Google Kubernetes Engine service.
    versions:
      from: 1.0.0-beta1
    link: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.zones/getServerconfig
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "ServerConfig",
          "type": "object",
          "properties": {
            "channels": {
              "type": "array",
              "items": {
                "id": "ReleaseChannelConfig",
                "type": "object",
                "properties": {
                  "channel": {
                    "enum": [
                      "UNSPECIFIED",
                      "RAPID",
                      "REGULAR",
                      "STABLE"
                    ],
                    "type": "string",
                    "description": "The release channel this configuration applies to.",
                    "enumDescriptions": [
                      "No channel specified.",
                      "RAPID channel is offered on an early access basis for customers who want to test new releases. WARNING: Versions available in the RAPID Channel may be subject to unresolved issues with no known workaround and are not subject to any SLAs.",
                      "Clusters subscribed to REGULAR receive versions that are considered GA quality. REGULAR is intended for production users who want to take advantage of new features.",
                      "Clusters subscribed to STABLE receive versions that are known to be stable and reliable in production."
                    ]
                  },
                  "validVersions": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "List of valid versions for the channel."
                  },
                  "defaultVersion": {
                    "type": "string",
                    "description": "The default version for newly created clusters on the channel."
                  }
                },
                "description": "ReleaseChannelConfig exposes configuration for a release channel."
              },
              "description": "List of release channel configurations."
            },
            "validImageTypes": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "List of valid image types."
            },
            "defaultImageType": {
              "type": "string",
              "description": "Default image type."
            },
            "validNodeVersions": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "List of valid node upgrade target versions, in descending order."
            },
            "validMasterVersions": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "List of valid master versions, in descending order."
            },
            "defaultClusterVersion": {
              "type": "string",
              "description": "Version of Kubernetes the service deploys by default."
            }
          },
          "description": "Kubernetes Engine service configuration."
        }
      ]
  projects.zones.operations.cancel:
    description: |-
      Cancels the specified operation.
    versions:
      from: 1.0.0-beta1
    link: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.zones.operations/cancel
    example:
      inputs: [
        {
          "id": "CancelOperationRequest",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name (project, location, operation id) of the operation to cancel. Specified in the format `projects/*/locations/*/operations/*`."
            },
            "zone": {
              "type": "string",
              "description": "Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the operation resides. This field has been deprecated and replaced by the name field."
            },
            "projectId": {
              "type": "string",
              "description": "Deprecated. The Google Developers Console [project ID or project number](https://support.google.com/cloud/answer/6158840). This field has been deprecated and replaced by the name field."
            },
            "operationId": {
              "type": "string",
              "description": "Deprecated. The server-assigned `name` of the operation. This field has been deprecated and replaced by the name field."
            }
          },
          "description": "CancelOperationRequest cancels a single operation."
        }
      ]
      outputs: [
        {
          "id": "Empty",
          "type": "object",
          "properties": {},
          "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`."
        }
      ]
  projects.zones.operations.get:
    description: |-
      Gets the specified operation.
    versions:
      from: 1.0.0-beta1
    link: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.zones.operations/get
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "Operation",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The server-assigned ID for the operation."
            },
            "zone": {
              "type": "string",
              "description": "The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the operation is taking place. This field is deprecated, use location instead."
            },
            "error": {
              "id": "Status",
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The status code, which should be an enum value of google.rpc.Code."
                },
                "details": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  },
                  "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
                },
                "message": {
                  "type": "string",
                  "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                }
              },
              "description": "The error result of the operation in case of failure."
            },
            "detail": {
              "type": "string",
              "description": "Detailed operation progress, if available."
            },
            "status": {
              "enum": [
                "STATUS_UNSPECIFIED",
                "PENDING",
                "RUNNING",
                "DONE",
                "ABORTING"
              ],
              "type": "string",
              "description": "The current status of the operation.",
              "enumDescriptions": [
                "Not set.",
                "The operation has been created.",
                "The operation is currently running.",
                "The operation is done, either cancelled or completed.",
                "The operation is aborting."
              ]
            },
            "endTime": {
              "type": "string",
              "description": "[Output only] The time the operation completed, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "location": {
              "type": "string",
              "description": "[Output only] The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) or [region](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) in which the cluster resides."
            },
            "progress": {
              "id": "OperationProgress",
              "type": "object",
              "readOnly": true,
              "properties": {
                "name": {
                  "type": "string",
                  "description": "A non-parameterized string describing an operation stage. Unset for single-stage operations."
                },
                "stages": {
                  "type": "array",
                  "items": {
                    "id": "OperationProgress",
                    "type": "object",
                    "properties": {},
                    "description": "Information about operation (or operation stage) progress."
                  },
                  "description": "Substages of an operation or a stage."
                },
                "status": {
                  "enum": [
                    "STATUS_UNSPECIFIED",
                    "PENDING",
                    "RUNNING",
                    "DONE",
                    "ABORTING"
                  ],
                  "type": "string",
                  "description": "Status of an operation stage. Unset for single-stage operations.",
                  "enumDescriptions": [
                    "Not set.",
                    "The operation has been created.",
                    "The operation is currently running.",
                    "The operation is done, either cancelled or completed.",
                    "The operation is aborting."
                  ]
                },
                "metrics": {
                  "type": "array",
                  "items": {
                    "id": "Metric",
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Required. Metric name, e.g., \"nodes total\", \"percent done\"."
                      },
                      "intValue": {
                        "type": "string",
                        "format": "int64",
                        "description": "For metrics with integer value."
                      },
                      "doubleValue": {
                        "type": "number",
                        "format": "double",
                        "description": "For metrics with floating point value."
                      },
                      "stringValue": {
                        "type": "string",
                        "description": "For metrics with custom values (ratios, visual progress, etc.)."
                      }
                    },
                    "description": "Progress metric is (string, int|float|string) pair."
                  },
                  "description": "Progress metric bundle, for example: metrics: [{name: \"nodes done\", int_value: 15}, {name: \"nodes total\", int_value: 32}] or metrics: [{name: \"progress\", double_value: 0.56}, {name: \"progress scale\", double_value: 1.0}]"
                }
              },
              "description": "Output only. [Output only] Progress information for an operation."
            },
            "selfLink": {
              "type": "string",
              "description": "Server-defined URL for the resource."
            },
            "startTime": {
              "type": "string",
              "description": "[Output only] The time the operation started, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
            },
            "targetLink": {
              "type": "string",
              "description": "Server-defined URL for the target of the operation."
            },
            "operationType": {
              "enum": [
                "TYPE_UNSPECIFIED",
                "CREATE_CLUSTER",
                "DELETE_CLUSTER",
                "UPGRADE_MASTER",
                "UPGRADE_NODES",
                "REPAIR_CLUSTER",
                "UPDATE_CLUSTER",
                "CREATE_NODE_POOL",
                "DELETE_NODE_POOL",
                "SET_NODE_POOL_MANAGEMENT",
                "AUTO_REPAIR_NODES",
                "AUTO_UPGRADE_NODES",
                "SET_LABELS",
                "SET_MASTER_AUTH",
                "SET_NODE_POOL_SIZE",
                "SET_NETWORK_POLICY",
                "SET_MAINTENANCE_POLICY"
              ],
              "type": "string",
              "description": "The operation type.",
              "enumDescriptions": [
                "Not set.",
                "Cluster create.",
                "Cluster delete.",
                "A master upgrade.",
                "A node upgrade.",
                "Cluster repair.",
                "Cluster update.",
                "Node pool create.",
                "Node pool delete.",
                "Set node pool management.",
                "Automatic node pool repair.",
                "Automatic node upgrade.",
                "Set labels.",
                "Set/generate master auth materials",
                "Set node pool size.",
                "Updates network policy for a cluster.",
                "Set the maintenance policy."
              ]
            },
            "statusMessage": {
              "type": "string",
              "readOnly": true,
              "description": "Output only. If an error has occurred, a textual description of the error. Deprecated. Use the field error instead."
            },
            "clusterConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current cluster state. Deprecated. Use field error instead."
            },
            "nodepoolConditions": {
              "type": "array",
              "items": {
                "id": "StatusCondition",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "UNKNOWN",
                      "GCE_STOCKOUT",
                      "GKE_SERVICE_ACCOUNT_DELETED",
                      "GCE_QUOTA_EXCEEDED",
                      "SET_BY_OPERATOR",
                      "CLOUD_KMS_KEY_ERROR"
                    ],
                    "type": "string",
                    "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                    "enumDescriptions": [
                      "UNKNOWN indicates a generic condition.",
                      "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                      "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                      "Google Compute Engine quota was exceeded.",
                      "Cluster state was manually changed by an SRE due to a system logic error.",
                      "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-friendly representation of the condition"
                  },
                  "canonicalCode": {
                    "enum": [
                      "OK",
                      "CANCELLED",
                      "UNKNOWN",
                      "INVALID_ARGUMENT",
                      "DEADLINE_EXCEEDED",
                      "NOT_FOUND",
                      "ALREADY_EXISTS",
                      "PERMISSION_DENIED",
                      "UNAUTHENTICATED",
                      "RESOURCE_EXHAUSTED",
                      "FAILED_PRECONDITION",
                      "ABORTED",
                      "OUT_OF_RANGE",
                      "UNIMPLEMENTED",
                      "INTERNAL",
                      "UNAVAILABLE",
                      "DATA_LOSS"
                    ],
                    "type": "string",
                    "description": "Canonical code of the condition.",
                    "enumDescriptions": [
                      "Not an error; returned on success HTTP Mapping: 200 OK",
                      "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                      "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                      "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                      "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                      "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                      "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                      "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                      "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                      "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                      "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                      "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                      "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                      "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                      "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                      "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                      "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                    ]
                  }
                },
                "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
              },
              "description": "Which conditions caused the current node pool state. Deprecated. Use field error instead."
            }
          },
          "description": "This operation resource represents operations that may have happened or are happening on the cluster. All fields are output only."
        }
      ]
  projects.zones.operations.list:
    description: |-
      Lists all operations in a project in a specific zone or all zones.
    versions:
      from: 1.0.0-beta1
    link: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.zones.operations/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "ListOperationsResponse",
          "type": "object",
          "properties": {
            "operations": {
              "type": "array",
              "items": {
                "id": "Operation",
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The server-assigned ID for the operation."
                  },
                  "zone": {
                    "type": "string",
                    "description": "The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the operation is taking place. This field is deprecated, use location instead."
                  },
                  "error": {
                    "id": "Status",
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The status code, which should be an enum value of google.rpc.Code."
                      },
                      "details": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "any",
                            "description": "Properties of the object. Contains field @type with type URL."
                          }
                        },
                        "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
                      },
                      "message": {
                        "type": "string",
                        "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                      }
                    },
                    "description": "The error result of the operation in case of failure."
                  },
                  "detail": {
                    "type": "string",
                    "description": "Detailed operation progress, if available."
                  },
                  "status": {
                    "enum": [
                      "STATUS_UNSPECIFIED",
                      "PENDING",
                      "RUNNING",
                      "DONE",
                      "ABORTING"
                    ],
                    "type": "string",
                    "description": "The current status of the operation.",
                    "enumDescriptions": [
                      "Not set.",
                      "The operation has been created.",
                      "The operation is currently running.",
                      "The operation is done, either cancelled or completed.",
                      "The operation is aborting."
                    ]
                  },
                  "endTime": {
                    "type": "string",
                    "description": "[Output only] The time the operation completed, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
                  },
                  "location": {
                    "type": "string",
                    "description": "[Output only] The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) or [region](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) in which the cluster resides."
                  },
                  "progress": {
                    "id": "OperationProgress",
                    "type": "object",
                    "readOnly": true,
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "A non-parameterized string describing an operation stage. Unset for single-stage operations."
                      },
                      "stages": {
                        "type": "array",
                        "items": {
                          "id": "OperationProgress",
                          "type": "object",
                          "properties": {},
                          "description": "Information about operation (or operation stage) progress."
                        },
                        "description": "Substages of an operation or a stage."
                      },
                      "status": {
                        "enum": [
                          "STATUS_UNSPECIFIED",
                          "PENDING",
                          "RUNNING",
                          "DONE",
                          "ABORTING"
                        ],
                        "type": "string",
                        "description": "Status of an operation stage. Unset for single-stage operations.",
                        "enumDescriptions": [
                          "Not set.",
                          "The operation has been created.",
                          "The operation is currently running.",
                          "The operation is done, either cancelled or completed.",
                          "The operation is aborting."
                        ]
                      },
                      "metrics": {
                        "type": "array",
                        "items": {
                          "id": "Metric",
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "Required. Metric name, e.g., \"nodes total\", \"percent done\"."
                            },
                            "intValue": {
                              "type": "string",
                              "format": "int64",
                              "description": "For metrics with integer value."
                            },
                            "doubleValue": {
                              "type": "number",
                              "format": "double",
                              "description": "For metrics with floating point value."
                            },
                            "stringValue": {
                              "type": "string",
                              "description": "For metrics with custom values (ratios, visual progress, etc.)."
                            }
                          },
                          "description": "Progress metric is (string, int|float|string) pair."
                        },
                        "description": "Progress metric bundle, for example: metrics: [{name: \"nodes done\", int_value: 15}, {name: \"nodes total\", int_value: 32}] or metrics: [{name: \"progress\", double_value: 0.56}, {name: \"progress scale\", double_value: 1.0}]"
                      }
                    },
                    "description": "Output only. [Output only] Progress information for an operation."
                  },
                  "selfLink": {
                    "type": "string",
                    "description": "Server-defined URL for the resource."
                  },
                  "startTime": {
                    "type": "string",
                    "description": "[Output only] The time the operation started, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format."
                  },
                  "targetLink": {
                    "type": "string",
                    "description": "Server-defined URL for the target of the operation."
                  },
                  "operationType": {
                    "enum": [
                      "TYPE_UNSPECIFIED",
                      "CREATE_CLUSTER",
                      "DELETE_CLUSTER",
                      "UPGRADE_MASTER",
                      "UPGRADE_NODES",
                      "REPAIR_CLUSTER",
                      "UPDATE_CLUSTER",
                      "CREATE_NODE_POOL",
                      "DELETE_NODE_POOL",
                      "SET_NODE_POOL_MANAGEMENT",
                      "AUTO_REPAIR_NODES",
                      "AUTO_UPGRADE_NODES",
                      "SET_LABELS",
                      "SET_MASTER_AUTH",
                      "SET_NODE_POOL_SIZE",
                      "SET_NETWORK_POLICY",
                      "SET_MAINTENANCE_POLICY"
                    ],
                    "type": "string",
                    "description": "The operation type.",
                    "enumDescriptions": [
                      "Not set.",
                      "Cluster create.",
                      "Cluster delete.",
                      "A master upgrade.",
                      "A node upgrade.",
                      "Cluster repair.",
                      "Cluster update.",
                      "Node pool create.",
                      "Node pool delete.",
                      "Set node pool management.",
                      "Automatic node pool repair.",
                      "Automatic node upgrade.",
                      "Set labels.",
                      "Set/generate master auth materials",
                      "Set node pool size.",
                      "Updates network policy for a cluster.",
                      "Set the maintenance policy."
                    ]
                  },
                  "statusMessage": {
                    "type": "string",
                    "readOnly": true,
                    "description": "Output only. If an error has occurred, a textual description of the error. Deprecated. Use the field error instead."
                  },
                  "clusterConditions": {
                    "type": "array",
                    "items": {
                      "id": "StatusCondition",
                      "type": "object",
                      "properties": {
                        "code": {
                          "enum": [
                            "UNKNOWN",
                            "GCE_STOCKOUT",
                            "GKE_SERVICE_ACCOUNT_DELETED",
                            "GCE_QUOTA_EXCEEDED",
                            "SET_BY_OPERATOR",
                            "CLOUD_KMS_KEY_ERROR"
                          ],
                          "type": "string",
                          "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                          "enumDescriptions": [
                            "UNKNOWN indicates a generic condition.",
                            "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                            "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                            "Google Compute Engine quota was exceeded.",
                            "Cluster state was manually changed by an SRE due to a system logic error.",
                            "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                          ]
                        },
                        "message": {
                          "type": "string",
                          "description": "Human-friendly representation of the condition"
                        },
                        "canonicalCode": {
                          "enum": [
                            "OK",
                            "CANCELLED",
                            "UNKNOWN",
                            "INVALID_ARGUMENT",
                            "DEADLINE_EXCEEDED",
                            "NOT_FOUND",
                            "ALREADY_EXISTS",
                            "PERMISSION_DENIED",
                            "UNAUTHENTICATED",
                            "RESOURCE_EXHAUSTED",
                            "FAILED_PRECONDITION",
                            "ABORTED",
                            "OUT_OF_RANGE",
                            "UNIMPLEMENTED",
                            "INTERNAL",
                            "UNAVAILABLE",
                            "DATA_LOSS"
                          ],
                          "type": "string",
                          "description": "Canonical code of the condition.",
                          "enumDescriptions": [
                            "Not an error; returned on success HTTP Mapping: 200 OK",
                            "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                            "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                            "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                            "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                            "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                            "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                            "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                            "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                            "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                            "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                            "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                            "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                            "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                            "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                            "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                            "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                          ]
                        }
                      },
                      "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
                    },
                    "description": "Which conditions caused the current cluster state. Deprecated. Use field error instead."
                  },
                  "nodepoolConditions": {
                    "type": "array",
                    "items": {
                      "id": "StatusCondition",
                      "type": "object",
                      "properties": {
                        "code": {
                          "enum": [
                            "UNKNOWN",
                            "GCE_STOCKOUT",
                            "GKE_SERVICE_ACCOUNT_DELETED",
                            "GCE_QUOTA_EXCEEDED",
                            "SET_BY_OPERATOR",
                            "CLOUD_KMS_KEY_ERROR"
                          ],
                          "type": "string",
                          "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
                          "enumDescriptions": [
                            "UNKNOWN indicates a generic condition.",
                            "GCE_STOCKOUT indicates that Google Compute Engine resources are temporarily unavailable.",
                            "GKE_SERVICE_ACCOUNT_DELETED indicates that the user deleted their robot service account.",
                            "Google Compute Engine quota was exceeded.",
                            "Cluster state was manually changed by an SRE due to a system logic error.",
                            "Unable to perform an encrypt operation against the CloudKMS key used for etcd level encryption. More codes TBA"
                          ]
                        },
                        "message": {
                          "type": "string",
                          "description": "Human-friendly representation of the condition"
                        },
                        "canonicalCode": {
                          "enum": [
                            "OK",
                            "CANCELLED",
                            "UNKNOWN",
                            "INVALID_ARGUMENT",
                            "DEADLINE_EXCEEDED",
                            "NOT_FOUND",
                            "ALREADY_EXISTS",
                            "PERMISSION_DENIED",
                            "UNAUTHENTICATED",
                            "RESOURCE_EXHAUSTED",
                            "FAILED_PRECONDITION",
                            "ABORTED",
                            "OUT_OF_RANGE",
                            "UNIMPLEMENTED",
                            "INTERNAL",
                            "UNAVAILABLE",
                            "DATA_LOSS"
                          ],
                          "type": "string",
                          "description": "Canonical code of the condition.",
                          "enumDescriptions": [
                            "Not an error; returned on success HTTP Mapping: 200 OK",
                            "The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request",
                            "Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error",
                            "The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request",
                            "The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout",
                            "Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found",
                            "The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict",
                            "The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden",
                            "The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized",
                            "Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests",
                            "The operation was rejected because the system is not in a state required for the operation's execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an \"rmdir\" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request",
                            "The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict",
                            "The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request",
                            "The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented",
                            "Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error",
                            "The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable",
                            "Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error"
                          ]
                        }
                      },
                      "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED)."
                    },
                    "description": "Which conditions caused the current node pool state. Deprecated. Use field error instead."
                  }
                },
                "description": "This operation resource represents operations that may have happened or are happening on the cluster. All fields are output only."
              },
              "description": "A list of operations in the project in the specified zone."
            },
            "missingZones": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "If any zones are listed here, the list of operations returned may be missing the operations from those zones."
            }
          },
          "description": "ListOperationsResponse is the result of ListOperationsRequest."
        }
      ]