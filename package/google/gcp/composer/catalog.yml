Product:
  name: GCP Cloud Composer
  versions: [1.0.0]
  package: google.gcp.composer
  description: |-
    Cloud Composer
  link: https://cloud.google.com/composer
  contentType: json
Operations:
  projects.locations.environments.create:
    description: |-
      Create a new environment.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/composer/docs/reference/rest/v1/projects.locations.environments/create
    example:
      inputs: [
        {
          "id": "Environment",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The resource name of the environment, in the form: \"projects/{projectId}/locations/{locationId}/environments/{environmentId}\" EnvironmentId must start with a lowercase letter followed by up to 63 lowercase letters, numbers, or hyphens, and cannot end with a hyphen."
            },
            "uuid": {
              "type": "string",
              "description": "Output only. The UUID (Universally Unique IDentifier) associated with this environment. This value is generated when the environment is created."
            },
            "state": {
              "enum": [
                "STATE_UNSPECIFIED",
                "CREATING",
                "RUNNING",
                "UPDATING",
                "DELETING",
                "ERROR"
              ],
              "type": "string",
              "description": "The current state of the environment.",
              "enumDescriptions": [
                "The state of the environment is unknown.",
                "The environment is in the process of being created.",
                "The environment is currently running and healthy. It is ready for use.",
                "The environment is being updated. It remains usable but cannot receive additional update requests or be deleted at this time.",
                "The environment is undergoing deletion. It cannot be used.",
                "The environment has encountered an error and cannot be used."
              ]
            },
            "config": {
              "id": "EnvironmentConfig",
              "type": "object",
              "properties": {
                "nodeCount": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The number of nodes in the Kubernetes Engine cluster that will be used to run this environment."
                },
                "airflowUri": {
                  "type": "string",
                  "description": "Output only. The URI of the Apache Airflow Web UI hosted within this environment (see [Airflow web interface](/composer/docs/how-to/accessing/airflow-web-interface))."
                },
                "gkeCluster": {
                  "type": "string",
                  "description": "Output only. The Kubernetes Engine cluster used to run this environment."
                },
                "nodeConfig": {
                  "id": "NodeConfig",
                  "type": "object",
                  "properties": {
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Optional. The list of instance tags applied to all node VMs. Tags are used to identify valid sources or targets for network firewalls. Each tag within the list must comply with [RFC1035](https://www.ietf.org/rfc/rfc1035.txt). Cannot be updated."
                    },
                    "network": {
                      "type": "string",
                      "description": "Optional. The Compute Engine network to be used for machine communications, specified as a [relative resource name](/apis/design/resource_names#relative_resource_name). For example: \"projects/{projectId}/global/networks/{networkId}\". If unspecified, the \"default\" network ID in the environment's project is used. If a [Custom Subnet Network](/vpc/docs/vpc#vpc_networks_and_subnets) is provided, `nodeConfig.subnetwork` must also be provided. For [Shared VPC](/vpc/docs/shared-vpc) subnetwork requirements, see `nodeConfig.subnetwork`."
                    },
                    "location": {
                      "type": "string",
                      "description": "Optional. The Compute Engine [zone](/compute/docs/regions-zones) in which to deploy the VMs used to run the Apache Airflow software, specified as a [relative resource name](/apis/design/resource_names#relative_resource_name). For example: \"projects/{projectId}/zones/{zoneId}\". This `location` must belong to the enclosing environment's project and location. If both this field and `nodeConfig.machineType` are specified, `nodeConfig.machineType` must belong to this `location`; if both are unspecified, the service will pick a zone in the Compute Engine region corresponding to the Cloud Composer location, and propagate that choice to both fields. If only one field (`location` or `nodeConfig.machineType`) is specified, the location information from the specified field will be propagated to the unspecified field."
                    },
                    "diskSizeGb": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Optional. The disk size in GB used for node VMs. Minimum size is 20GB. If unspecified, defaults to 100GB. Cannot be updated."
                    },
                    "subnetwork": {
                      "type": "string",
                      "description": "Optional. The Compute Engine subnetwork to be used for machine communications, specified as a [relative resource name](/apis/design/resource_names#relative_resource_name). For example: \"projects/{projectId}/regions/{regionId}/subnetworks/{subnetworkId}\" If a subnetwork is provided, `nodeConfig.network` must also be provided, and the subnetwork must belong to the enclosing environment's project and location."
                    },
                    "machineType": {
                      "type": "string",
                      "description": "Optional. The Compute Engine [machine type](/compute/docs/machine-types) used for cluster instances, specified as a [relative resource name](/apis/design/resource_names#relative_resource_name). For example: \"projects/{projectId}/zones/{zoneId}/machineTypes/{machineTypeId}\". The `machineType` must belong to the enclosing environment's project and location. If both this field and `nodeConfig.location` are specified, this `machineType` must belong to the `nodeConfig.location`; if both are unspecified, the service will pick a zone in the Compute Engine region corresponding to the Cloud Composer location, and propagate that choice to both fields. If exactly one of this field and `nodeConfig.location` is specified, the location information from the specified field will be propagated to the unspecified field. The `machineTypeId` must not be a [shared-core machine type](/compute/docs/machine-types#sharedcore). If this field is unspecified, the `machineTypeId` defaults to \"n1-standard-1\"."
                    },
                    "oauthScopes": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Optional. The set of Google API scopes to be made available on all node VMs. If `oauth_scopes` is empty, defaults to [\"https://www.googleapis.com/auth/cloud-platform\"]. Cannot be updated."
                    },
                    "serviceAccount": {
                      "type": "string",
                      "description": "Optional. The Google Cloud Platform Service Account to be used by the node VMs. If a service account is not specified, the \"default\" Compute Engine service account is used. Cannot be updated."
                    },
                    "ipAllocationPolicy": {
                      "id": "IPAllocationPolicy",
                      "type": "object",
                      "properties": {
                        "useIpAliases": {
                          "type": "boolean",
                          "description": "Optional. Whether or not to enable Alias IPs in the GKE cluster. If `true`, a VPC-native cluster is created."
                        },
                        "clusterIpv4CidrBlock": {
                          "type": "string",
                          "description": "Optional. The IP address range used to allocate IP addresses to pods in the GKE cluster. This field is applicable only when `use_ip_aliases` is true. Set to blank to have GKE choose a range with the default size. Set to /netmask (e.g. `/14`) to have GKE choose a range with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use."
                        },
                        "servicesIpv4CidrBlock": {
                          "type": "string",
                          "description": "Optional. The IP address range of the services IP addresses in this GKE cluster. This field is applicable only when `use_ip_aliases` is true. Set to blank to have GKE choose a range with the default size. Set to /netmask (e.g. `/14`) to have GKE choose a range with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use."
                        },
                        "clusterSecondaryRangeName": {
                          "type": "string",
                          "description": "Optional. The name of the GKE cluster's secondary range used to allocate IP addresses to pods. This field is applicable only when `use_ip_aliases` is true."
                        },
                        "servicesSecondaryRangeName": {
                          "type": "string",
                          "description": "Optional. The name of the services' secondary range used to allocate IP addresses to the GKE cluster. This field is applicable only when `use_ip_aliases` is true."
                        }
                      },
                      "description": "Optional. The configuration for controlling how IPs are allocated in the GKE cluster."
                    }
                  },
                  "description": "The configuration used for the Kubernetes Engine cluster."
                },
                "dagGcsPrefix": {
                  "type": "string",
                  "description": "Output only. The Cloud Storage prefix of the DAGs for this environment. Although Cloud Storage objects reside in a flat namespace, a hierarchical file tree can be simulated using \"/\"-delimited object name prefixes. DAG objects for this environment reside in a simulated directory with the given prefix."
                },
                "databaseConfig": {
                  "id": "DatabaseConfig",
                  "type": "object",
                  "properties": {
                    "machineType": {
                      "type": "string",
                      "description": "Optional. Cloud SQL machine type used by Airflow database. It has to be one of: db-n1-standard-2, db-n1-standard-4, db-n1-standard-8 or db-n1-standard-16. If not specified, db-n1-standard-2 will be used."
                    }
                  },
                  "description": "Optional. The configuration settings for Cloud SQL instance used internally by Apache Airflow software."
                },
                "softwareConfig": {
                  "id": "SoftwareConfig",
                  "type": "object",
                  "properties": {
                    "envVariables": {
                      "type": "object",
                      "description": "Optional. Additional environment variables to provide to the Apache Airflow scheduler, worker, and webserver processes. Environment variable names must match the regular expression `a-zA-Z_*`. They cannot specify Apache Airflow software configuration overrides (they cannot match the regular expression `AIRFLOW__[A-Z0-9_]+__[A-Z0-9_]+`), and they cannot match any of the following reserved names: * `AIRFLOW_HOME` * `C_FORCE_ROOT` * `CONTAINER_NAME` * `DAGS_FOLDER` * `GCP_PROJECT` * `GCS_BUCKET` * `GKE_CLUSTER_NAME` * `SQL_DATABASE` * `SQL_INSTANCE` * `SQL_PASSWORD` * `SQL_PROJECT` * `SQL_REGION` * `SQL_USER`",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "imageVersion": {
                      "type": "string",
                      "description": "The version of the software running in the environment. This encapsulates both the version of Cloud Composer functionality and the version of Apache Airflow. It must match the regular expression `composer-([0-9]+\\.[0-9]+\\.[0-9]+|latest)-airflow-[0-9]+\\.[0-9]+(\\.[0-9]+.*)?`. When used as input, the server also checks if the provided version is supported and denies the request for an unsupported version. The Cloud Composer portion of the version is a [semantic version](https://semver.org) or `latest`. When the patch version is omitted, the current Cloud Composer patch version is selected. When `latest` is provided instead of an explicit version number, the server replaces `latest` with the current Cloud Composer version and stores that version number in the same field. The portion of the image version that follows *airflow-* is an official Apache Airflow repository [release name](https://github.com/apache/incubator-airflow/releases). See also [Version List](/composer/docs/concepts/versioning/composer-versions)."
                    },
                    "pypiPackages": {
                      "type": "object",
                      "description": "Optional. Custom Python Package Index (PyPI) packages to be installed in the environment. Keys refer to the lowercase package name such as \"numpy\" and values are the lowercase extras and version specifier such as \"==1.12.0\", \"[devel,gcp_api]\", or \"[devel]>=1.8.2, <1.9.2\". To specify a package without pinning it to a version specifier, use the empty string as the value.",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "pythonVersion": {
                      "type": "string",
                      "description": "Optional. The major version of Python used to run the Apache Airflow scheduler, worker, and webserver processes. Can be set to '2' or '3'. If not specified, the default is '3'. Cannot be updated."
                    },
                    "airflowConfigOverrides": {
                      "type": "object",
                      "description": "Optional. Apache Airflow configuration properties to override. Property keys contain the section and property names, separated by a hyphen, for example \"core-dags_are_paused_at_creation\". Section names must not contain hyphens (\"-\"), opening square brackets (\"[\"), or closing square brackets (\"]\"). The property name must not be empty and must not contain an equals sign (\"=\") or semicolon (\";\"). Section and property names must not contain a period (\".\"). Apache Airflow configuration property names must be written in [snake_case](https://en.wikipedia.org/wiki/Snake_case). Property values can contain any character, and can be written in any lower/upper case format. Certain Apache Airflow configuration property values are [blocked](/composer/docs/concepts/airflow-configurations), and cannot be overridden.",
                      "additionalProperties": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "The configuration settings for software inside the environment."
                },
                "webServerConfig": {
                  "id": "WebServerConfig",
                  "type": "object",
                  "properties": {
                    "machineType": {
                      "type": "string",
                      "description": "Optional. Machine type on which Airflow web server is running. It has to be one of: composer-n1-webserver-2, composer-n1-webserver-4 or composer-n1-webserver-8. If not specified, composer-n1-webserver-2 will be used. Value custom is returned only in response, if Airflow web server parameters were manually changed to a non-standard values."
                    }
                  },
                  "description": "Optional. The configuration settings for the Airflow web server App Engine instance."
                },
                "encryptionConfig": {
                  "id": "EncryptionConfig",
                  "type": "object",
                  "properties": {
                    "kmsKeyName": {
                      "type": "string",
                      "description": "Optional. Customer-managed Encryption Key available through Google's Key Management Service. Cannot be updated. If not specified, Google-managed key will be used."
                    }
                  },
                  "description": "Optional. The encryption options for the Cloud Composer environment and its dependencies. Cannot be updated."
                },
                "privateEnvironmentConfig": {
                  "id": "PrivateEnvironmentConfig",
                  "type": "object",
                  "properties": {
                    "privateClusterConfig": {
                      "id": "PrivateClusterConfig",
                      "type": "object",
                      "properties": {
                        "masterIpv4CidrBlock": {
                          "type": "string",
                          "description": "Optional. The CIDR block from which IPv4 range for GKE master will be reserved. If left blank, the default value of '172.16.0.0/23' is used."
                        },
                        "enablePrivateEndpoint": {
                          "type": "boolean",
                          "description": "Optional. If `true`, access to the public endpoint of the GKE cluster is denied."
                        },
                        "masterIpv4ReservedRange": {
                          "type": "string",
                          "readOnly": true,
                          "description": "Output only. The IP range in CIDR notation to use for the hosted master network. This range is used for assigning internal IP addresses to the GKE cluster master or set of masters and to the internal load balancer virtual IP. This range must not overlap with any other ranges in use within the cluster's network."
                        }
                      },
                      "description": "Optional. Configuration for the private GKE cluster for a Private IP Cloud Composer environment."
                    },
                    "cloudSqlIpv4CidrBlock": {
                      "type": "string",
                      "description": "Optional. The CIDR block from which IP range in tenant project will be reserved for Cloud SQL. Needs to be disjoint from `web_server_ipv4_cidr_block`."
                    },
                    "webServerIpv4CidrBlock": {
                      "type": "string",
                      "description": "Optional. The CIDR block from which IP range for web server will be reserved. Needs to be disjoint from `private_cluster_config.master_ipv4_cidr_block` and `cloud_sql_ipv4_cidr_block`."
                    },
                    "enablePrivateEnvironment": {
                      "type": "boolean",
                      "description": "Optional. If `true`, a Private IP Cloud Composer environment is created. If this field is set to true, `IPAllocationPolicy.use_ip_aliases` must be set to true."
                    },
                    "webServerIpv4ReservedRange": {
                      "type": "string",
                      "readOnly": true,
                      "description": "Output only. The IP range reserved for the tenant project's App Engine VMs."
                    }
                  },
                  "description": "The configuration used for the Private IP Cloud Composer environment."
                },
                "webServerNetworkAccessControl": {
                  "id": "WebServerNetworkAccessControl",
                  "type": "object",
                  "properties": {
                    "allowedIpRanges": {
                      "type": "array",
                      "items": {
                        "id": "AllowedIpRange",
                        "type": "object",
                        "properties": {
                          "value": {
                            "type": "string",
                            "description": "IP address or range, defined using CIDR notation, of requests that this rule applies to. Examples: `192.168.1.1` or `192.168.0.0/16` or `2001:db8::/32` or `2001:0db8:0000:0042:0000:8a2e:0370:7334`. IP range prefixes should be properly truncated. For example, `1.2.3.4/24` should be truncated to `1.2.3.0/24`. Similarly, for IPv6, `2001:db8::1/32` should be truncated to `2001:db8::/32`."
                          },
                          "description": {
                            "type": "string",
                            "description": "Optional. User-provided description. It must contain at most 300 characters."
                          }
                        },
                        "description": "Allowed IP range with user-provided description."
                      },
                      "description": "A collection of allowed IP ranges with descriptions."
                    }
                  },
                  "description": "Optional. The network-level access control policy for the Airflow web server. If unspecified, no network-level access restrictions will be applied."
                }
              },
              "description": "Configuration parameters for this environment."
            },
            "labels": {
              "type": "object",
              "description": "Optional. User-defined labels for this environment. The labels map can contain no more than 64 entries. Entries of the labels map are UTF8 strings that comply with the following restrictions: * Keys must conform to regexp: \\p{Ll}\\p{Lo}{0,62} * Values must conform to regexp: [\\p{Ll}\\p{Lo}\\p{N}_-]{0,63} * Both keys and values are additionally constrained to be <= 128 bytes in size.",
              "additionalProperties": {
                "type": "string"
              }
            },
            "createTime": {
              "type": "string",
              "format": "google-datetime",
              "description": "Output only. The time at which this environment was created."
            },
            "updateTime": {
              "type": "string",
              "format": "google-datetime",
              "description": "Output only. The time at which this environment was last modified."
            }
          },
          "description": "An environment for running orchestration tasks."
        }
      ]
      outputs: [
        {
          "id": "Operation",
          "type": "object",
          "properties": {
            "done": {
              "type": "boolean",
              "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available."
            },
            "name": {
              "type": "string",
              "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`."
            },
            "error": {
              "id": "Status",
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The status code, which should be an enum value of google.rpc.Code."
                },
                "details": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  },
                  "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
                },
                "message": {
                  "type": "string",
                  "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                }
              },
              "description": "The error result of the operation in case of failure or cancellation."
            },
            "metadata": {
              "type": "object",
              "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
              "additionalProperties": {
                "type": "any",
                "description": "Properties of the object. Contains field @type with type URL."
              }
            },
            "response": {
              "type": "object",
              "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
              "additionalProperties": {
                "type": "any",
                "description": "Properties of the object. Contains field @type with type URL."
              }
            }
          },
          "description": "This resource represents a long-running operation that is the result of a network API call."
        }
      ]
  projects.locations.environments.delete:
    description: |-
      Delete an environment.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/composer/docs/reference/rest/v1/projects.locations.environments/delete
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "Operation",
          "type": "object",
          "properties": {
            "done": {
              "type": "boolean",
              "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available."
            },
            "name": {
              "type": "string",
              "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`."
            },
            "error": {
              "id": "Status",
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The status code, which should be an enum value of google.rpc.Code."
                },
                "details": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  },
                  "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
                },
                "message": {
                  "type": "string",
                  "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                }
              },
              "description": "The error result of the operation in case of failure or cancellation."
            },
            "metadata": {
              "type": "object",
              "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
              "additionalProperties": {
                "type": "any",
                "description": "Properties of the object. Contains field @type with type URL."
              }
            },
            "response": {
              "type": "object",
              "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
              "additionalProperties": {
                "type": "any",
                "description": "Properties of the object. Contains field @type with type URL."
              }
            }
          },
          "description": "This resource represents a long-running operation that is the result of a network API call."
        }
      ]
  projects.locations.environments.get:
    description: |-
      Get an existing environment.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/composer/docs/reference/rest/v1/projects.locations.environments/get
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  projects.locations.environments.list:
    description: |-
      List environments.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/composer/docs/reference/rest/v1/projects.locations.environments/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "ListEnvironmentsResponse",
          "type": "object",
          "properties": {
            "environments": {
              "type": "array",
              "items": {
                "id": "Environment",
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The resource name of the environment, in the form: \"projects/{projectId}/locations/{locationId}/environments/{environmentId}\" EnvironmentId must start with a lowercase letter followed by up to 63 lowercase letters, numbers, or hyphens, and cannot end with a hyphen."
                  },
                  "uuid": {
                    "type": "string",
                    "description": "Output only. The UUID (Universally Unique IDentifier) associated with this environment. This value is generated when the environment is created."
                  },
                  "state": {
                    "enum": [
                      "STATE_UNSPECIFIED",
                      "CREATING",
                      "RUNNING",
                      "UPDATING",
                      "DELETING",
                      "ERROR"
                    ],
                    "type": "string",
                    "description": "The current state of the environment.",
                    "enumDescriptions": [
                      "The state of the environment is unknown.",
                      "The environment is in the process of being created.",
                      "The environment is currently running and healthy. It is ready for use.",
                      "The environment is being updated. It remains usable but cannot receive additional update requests or be deleted at this time.",
                      "The environment is undergoing deletion. It cannot be used.",
                      "The environment has encountered an error and cannot be used."
                    ]
                  },
                  "config": {
                    "id": "EnvironmentConfig",
                    "type": "object",
                    "properties": {
                      "nodeCount": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The number of nodes in the Kubernetes Engine cluster that will be used to run this environment."
                      },
                      "airflowUri": {
                        "type": "string",
                        "description": "Output only. The URI of the Apache Airflow Web UI hosted within this environment (see [Airflow web interface](/composer/docs/how-to/accessing/airflow-web-interface))."
                      },
                      "gkeCluster": {
                        "type": "string",
                        "description": "Output only. The Kubernetes Engine cluster used to run this environment."
                      },
                      "nodeConfig": {
                        "id": "NodeConfig",
                        "type": "object",
                        "properties": {
                          "tags": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "Optional. The list of instance tags applied to all node VMs. Tags are used to identify valid sources or targets for network firewalls. Each tag within the list must comply with [RFC1035](https://www.ietf.org/rfc/rfc1035.txt). Cannot be updated."
                          },
                          "network": {
                            "type": "string",
                            "description": "Optional. The Compute Engine network to be used for machine communications, specified as a [relative resource name](/apis/design/resource_names#relative_resource_name). For example: \"projects/{projectId}/global/networks/{networkId}\". If unspecified, the \"default\" network ID in the environment's project is used. If a [Custom Subnet Network](/vpc/docs/vpc#vpc_networks_and_subnets) is provided, `nodeConfig.subnetwork` must also be provided. For [Shared VPC](/vpc/docs/shared-vpc) subnetwork requirements, see `nodeConfig.subnetwork`."
                          },
                          "location": {
                            "type": "string",
                            "description": "Optional. The Compute Engine [zone](/compute/docs/regions-zones) in which to deploy the VMs used to run the Apache Airflow software, specified as a [relative resource name](/apis/design/resource_names#relative_resource_name). For example: \"projects/{projectId}/zones/{zoneId}\". This `location` must belong to the enclosing environment's project and location. If both this field and `nodeConfig.machineType` are specified, `nodeConfig.machineType` must belong to this `location`; if both are unspecified, the service will pick a zone in the Compute Engine region corresponding to the Cloud Composer location, and propagate that choice to both fields. If only one field (`location` or `nodeConfig.machineType`) is specified, the location information from the specified field will be propagated to the unspecified field."
                          },
                          "diskSizeGb": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Optional. The disk size in GB used for node VMs. Minimum size is 20GB. If unspecified, defaults to 100GB. Cannot be updated."
                          },
                          "subnetwork": {
                            "type": "string",
                            "description": "Optional. The Compute Engine subnetwork to be used for machine communications, specified as a [relative resource name](/apis/design/resource_names#relative_resource_name). For example: \"projects/{projectId}/regions/{regionId}/subnetworks/{subnetworkId}\" If a subnetwork is provided, `nodeConfig.network` must also be provided, and the subnetwork must belong to the enclosing environment's project and location."
                          },
                          "machineType": {
                            "type": "string",
                            "description": "Optional. The Compute Engine [machine type](/compute/docs/machine-types) used for cluster instances, specified as a [relative resource name](/apis/design/resource_names#relative_resource_name). For example: \"projects/{projectId}/zones/{zoneId}/machineTypes/{machineTypeId}\". The `machineType` must belong to the enclosing environment's project and location. If both this field and `nodeConfig.location` are specified, this `machineType` must belong to the `nodeConfig.location`; if both are unspecified, the service will pick a zone in the Compute Engine region corresponding to the Cloud Composer location, and propagate that choice to both fields. If exactly one of this field and `nodeConfig.location` is specified, the location information from the specified field will be propagated to the unspecified field. The `machineTypeId` must not be a [shared-core machine type](/compute/docs/machine-types#sharedcore). If this field is unspecified, the `machineTypeId` defaults to \"n1-standard-1\"."
                          },
                          "oauthScopes": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "Optional. The set of Google API scopes to be made available on all node VMs. If `oauth_scopes` is empty, defaults to [\"https://www.googleapis.com/auth/cloud-platform\"]. Cannot be updated."
                          },
                          "serviceAccount": {
                            "type": "string",
                            "description": "Optional. The Google Cloud Platform Service Account to be used by the node VMs. If a service account is not specified, the \"default\" Compute Engine service account is used. Cannot be updated."
                          },
                          "ipAllocationPolicy": {
                            "id": "IPAllocationPolicy",
                            "type": "object",
                            "properties": {
                              "useIpAliases": {
                                "type": "boolean",
                                "description": "Optional. Whether or not to enable Alias IPs in the GKE cluster. If `true`, a VPC-native cluster is created."
                              },
                              "clusterIpv4CidrBlock": {
                                "type": "string",
                                "description": "Optional. The IP address range used to allocate IP addresses to pods in the GKE cluster. This field is applicable only when `use_ip_aliases` is true. Set to blank to have GKE choose a range with the default size. Set to /netmask (e.g. `/14`) to have GKE choose a range with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use."
                              },
                              "servicesIpv4CidrBlock": {
                                "type": "string",
                                "description": "Optional. The IP address range of the services IP addresses in this GKE cluster. This field is applicable only when `use_ip_aliases` is true. Set to blank to have GKE choose a range with the default size. Set to /netmask (e.g. `/14`) to have GKE choose a range with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use."
                              },
                              "clusterSecondaryRangeName": {
                                "type": "string",
                                "description": "Optional. The name of the GKE cluster's secondary range used to allocate IP addresses to pods. This field is applicable only when `use_ip_aliases` is true."
                              },
                              "servicesSecondaryRangeName": {
                                "type": "string",
                                "description": "Optional. The name of the services' secondary range used to allocate IP addresses to the GKE cluster. This field is applicable only when `use_ip_aliases` is true."
                              }
                            },
                            "description": "Optional. The configuration for controlling how IPs are allocated in the GKE cluster."
                          }
                        },
                        "description": "The configuration used for the Kubernetes Engine cluster."
                      },
                      "dagGcsPrefix": {
                        "type": "string",
                        "description": "Output only. The Cloud Storage prefix of the DAGs for this environment. Although Cloud Storage objects reside in a flat namespace, a hierarchical file tree can be simulated using \"/\"-delimited object name prefixes. DAG objects for this environment reside in a simulated directory with the given prefix."
                      },
                      "databaseConfig": {
                        "id": "DatabaseConfig",
                        "type": "object",
                        "properties": {
                          "machineType": {
                            "type": "string",
                            "description": "Optional. Cloud SQL machine type used by Airflow database. It has to be one of: db-n1-standard-2, db-n1-standard-4, db-n1-standard-8 or db-n1-standard-16. If not specified, db-n1-standard-2 will be used."
                          }
                        },
                        "description": "Optional. The configuration settings for Cloud SQL instance used internally by Apache Airflow software."
                      },
                      "softwareConfig": {
                        "id": "SoftwareConfig",
                        "type": "object",
                        "properties": {
                          "envVariables": {
                            "type": "object",
                            "description": "Optional. Additional environment variables to provide to the Apache Airflow scheduler, worker, and webserver processes. Environment variable names must match the regular expression `a-zA-Z_*`. They cannot specify Apache Airflow software configuration overrides (they cannot match the regular expression `AIRFLOW__[A-Z0-9_]+__[A-Z0-9_]+`), and they cannot match any of the following reserved names: * `AIRFLOW_HOME` * `C_FORCE_ROOT` * `CONTAINER_NAME` * `DAGS_FOLDER` * `GCP_PROJECT` * `GCS_BUCKET` * `GKE_CLUSTER_NAME` * `SQL_DATABASE` * `SQL_INSTANCE` * `SQL_PASSWORD` * `SQL_PROJECT` * `SQL_REGION` * `SQL_USER`",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "imageVersion": {
                            "type": "string",
                            "description": "The version of the software running in the environment. This encapsulates both the version of Cloud Composer functionality and the version of Apache Airflow. It must match the regular expression `composer-([0-9]+\\.[0-9]+\\.[0-9]+|latest)-airflow-[0-9]+\\.[0-9]+(\\.[0-9]+.*)?`. When used as input, the server also checks if the provided version is supported and denies the request for an unsupported version. The Cloud Composer portion of the version is a [semantic version](https://semver.org) or `latest`. When the patch version is omitted, the current Cloud Composer patch version is selected. When `latest` is provided instead of an explicit version number, the server replaces `latest` with the current Cloud Composer version and stores that version number in the same field. The portion of the image version that follows *airflow-* is an official Apache Airflow repository [release name](https://github.com/apache/incubator-airflow/releases). See also [Version List](/composer/docs/concepts/versioning/composer-versions)."
                          },
                          "pypiPackages": {
                            "type": "object",
                            "description": "Optional. Custom Python Package Index (PyPI) packages to be installed in the environment. Keys refer to the lowercase package name such as \"numpy\" and values are the lowercase extras and version specifier such as \"==1.12.0\", \"[devel,gcp_api]\", or \"[devel]>=1.8.2, <1.9.2\". To specify a package without pinning it to a version specifier, use the empty string as the value.",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "pythonVersion": {
                            "type": "string",
                            "description": "Optional. The major version of Python used to run the Apache Airflow scheduler, worker, and webserver processes. Can be set to '2' or '3'. If not specified, the default is '3'. Cannot be updated."
                          },
                          "airflowConfigOverrides": {
                            "type": "object",
                            "description": "Optional. Apache Airflow configuration properties to override. Property keys contain the section and property names, separated by a hyphen, for example \"core-dags_are_paused_at_creation\". Section names must not contain hyphens (\"-\"), opening square brackets (\"[\"), or closing square brackets (\"]\"). The property name must not be empty and must not contain an equals sign (\"=\") or semicolon (\";\"). Section and property names must not contain a period (\".\"). Apache Airflow configuration property names must be written in [snake_case](https://en.wikipedia.org/wiki/Snake_case). Property values can contain any character, and can be written in any lower/upper case format. Certain Apache Airflow configuration property values are [blocked](/composer/docs/concepts/airflow-configurations), and cannot be overridden.",
                            "additionalProperties": {
                              "type": "string"
                            }
                          }
                        },
                        "description": "The configuration settings for software inside the environment."
                      },
                      "webServerConfig": {
                        "id": "WebServerConfig",
                        "type": "object",
                        "properties": {
                          "machineType": {
                            "type": "string",
                            "description": "Optional. Machine type on which Airflow web server is running. It has to be one of: composer-n1-webserver-2, composer-n1-webserver-4 or composer-n1-webserver-8. If not specified, composer-n1-webserver-2 will be used. Value custom is returned only in response, if Airflow web server parameters were manually changed to a non-standard values."
                          }
                        },
                        "description": "Optional. The configuration settings for the Airflow web server App Engine instance."
                      },
                      "encryptionConfig": {
                        "id": "EncryptionConfig",
                        "type": "object",
                        "properties": {
                          "kmsKeyName": {
                            "type": "string",
                            "description": "Optional. Customer-managed Encryption Key available through Google's Key Management Service. Cannot be updated. If not specified, Google-managed key will be used."
                          }
                        },
                        "description": "Optional. The encryption options for the Cloud Composer environment and its dependencies. Cannot be updated."
                      },
                      "privateEnvironmentConfig": {
                        "id": "PrivateEnvironmentConfig",
                        "type": "object",
                        "properties": {
                          "privateClusterConfig": {
                            "id": "PrivateClusterConfig",
                            "type": "object",
                            "properties": {
                              "masterIpv4CidrBlock": {
                                "type": "string",
                                "description": "Optional. The CIDR block from which IPv4 range for GKE master will be reserved. If left blank, the default value of '172.16.0.0/23' is used."
                              },
                              "enablePrivateEndpoint": {
                                "type": "boolean",
                                "description": "Optional. If `true`, access to the public endpoint of the GKE cluster is denied."
                              },
                              "masterIpv4ReservedRange": {
                                "type": "string",
                                "readOnly": true,
                                "description": "Output only. The IP range in CIDR notation to use for the hosted master network. This range is used for assigning internal IP addresses to the GKE cluster master or set of masters and to the internal load balancer virtual IP. This range must not overlap with any other ranges in use within the cluster's network."
                              }
                            },
                            "description": "Optional. Configuration for the private GKE cluster for a Private IP Cloud Composer environment."
                          },
                          "cloudSqlIpv4CidrBlock": {
                            "type": "string",
                            "description": "Optional. The CIDR block from which IP range in tenant project will be reserved for Cloud SQL. Needs to be disjoint from `web_server_ipv4_cidr_block`."
                          },
                          "webServerIpv4CidrBlock": {
                            "type": "string",
                            "description": "Optional. The CIDR block from which IP range for web server will be reserved. Needs to be disjoint from `private_cluster_config.master_ipv4_cidr_block` and `cloud_sql_ipv4_cidr_block`."
                          },
                          "enablePrivateEnvironment": {
                            "type": "boolean",
                            "description": "Optional. If `true`, a Private IP Cloud Composer environment is created. If this field is set to true, `IPAllocationPolicy.use_ip_aliases` must be set to true."
                          },
                          "webServerIpv4ReservedRange": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Output only. The IP range reserved for the tenant project's App Engine VMs."
                          }
                        },
                        "description": "The configuration used for the Private IP Cloud Composer environment."
                      },
                      "webServerNetworkAccessControl": {
                        "id": "WebServerNetworkAccessControl",
                        "type": "object",
                        "properties": {
                          "allowedIpRanges": {
                            "type": "array",
                            "items": {
                              "id": "AllowedIpRange",
                              "type": "object",
                              "properties": {
                                "value": {
                                  "type": "string",
                                  "description": "IP address or range, defined using CIDR notation, of requests that this rule applies to. Examples: `192.168.1.1` or `192.168.0.0/16` or `2001:db8::/32` or `2001:0db8:0000:0042:0000:8a2e:0370:7334`. IP range prefixes should be properly truncated. For example, `1.2.3.4/24` should be truncated to `1.2.3.0/24`. Similarly, for IPv6, `2001:db8::1/32` should be truncated to `2001:db8::/32`."
                                },
                                "description": {
                                  "type": "string",
                                  "description": "Optional. User-provided description. It must contain at most 300 characters."
                                }
                              },
                              "description": "Allowed IP range with user-provided description."
                            },
                            "description": "A collection of allowed IP ranges with descriptions."
                          }
                        },
                        "description": "Optional. The network-level access control policy for the Airflow web server. If unspecified, no network-level access restrictions will be applied."
                      }
                    },
                    "description": "Configuration parameters for this environment."
                  },
                  "labels": {
                    "type": "object",
                    "description": "Optional. User-defined labels for this environment. The labels map can contain no more than 64 entries. Entries of the labels map are UTF8 strings that comply with the following restrictions: * Keys must conform to regexp: \\p{Ll}\\p{Lo}{0,62} * Values must conform to regexp: [\\p{Ll}\\p{Lo}\\p{N}_-]{0,63} * Both keys and values are additionally constrained to be <= 128 bytes in size.",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "createTime": {
                    "type": "string",
                    "format": "google-datetime",
                    "description": "Output only. The time at which this environment was created."
                  },
                  "updateTime": {
                    "type": "string",
                    "format": "google-datetime",
                    "description": "Output only. The time at which this environment was last modified."
                  }
                },
                "description": "An environment for running orchestration tasks."
              },
              "description": "The list of environments returned by a ListEnvironmentsRequest."
            },
            "nextPageToken": {
              "type": "string",
              "description": "The page token used to query for the next page if one exists."
            }
          },
          "description": "The environments in a project and location."
        }
      ]
  projects.locations.environments.patch:
    description: |-
      Update an environment.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/composer/docs/reference/rest/v1/projects.locations.environments/patch
    example:
      inputs: [
        {
          "id": "Environment",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The resource name of the environment, in the form: \"projects/{projectId}/locations/{locationId}/environments/{environmentId}\" EnvironmentId must start with a lowercase letter followed by up to 63 lowercase letters, numbers, or hyphens, and cannot end with a hyphen."
            },
            "uuid": {
              "type": "string",
              "description": "Output only. The UUID (Universally Unique IDentifier) associated with this environment. This value is generated when the environment is created."
            },
            "state": {
              "enum": [
                "STATE_UNSPECIFIED",
                "CREATING",
                "RUNNING",
                "UPDATING",
                "DELETING",
                "ERROR"
              ],
              "type": "string",
              "description": "The current state of the environment.",
              "enumDescriptions": [
                "The state of the environment is unknown.",
                "The environment is in the process of being created.",
                "The environment is currently running and healthy. It is ready for use.",
                "The environment is being updated. It remains usable but cannot receive additional update requests or be deleted at this time.",
                "The environment is undergoing deletion. It cannot be used.",
                "The environment has encountered an error and cannot be used."
              ]
            },
            "config": {
              "id": "EnvironmentConfig",
              "type": "object",
              "properties": {
                "nodeCount": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The number of nodes in the Kubernetes Engine cluster that will be used to run this environment."
                },
                "airflowUri": {
                  "type": "string",
                  "description": "Output only. The URI of the Apache Airflow Web UI hosted within this environment (see [Airflow web interface](/composer/docs/how-to/accessing/airflow-web-interface))."
                },
                "gkeCluster": {
                  "type": "string",
                  "description": "Output only. The Kubernetes Engine cluster used to run this environment."
                },
                "nodeConfig": {
                  "id": "NodeConfig",
                  "type": "object",
                  "properties": {
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Optional. The list of instance tags applied to all node VMs. Tags are used to identify valid sources or targets for network firewalls. Each tag within the list must comply with [RFC1035](https://www.ietf.org/rfc/rfc1035.txt). Cannot be updated."
                    },
                    "network": {
                      "type": "string",
                      "description": "Optional. The Compute Engine network to be used for machine communications, specified as a [relative resource name](/apis/design/resource_names#relative_resource_name). For example: \"projects/{projectId}/global/networks/{networkId}\". If unspecified, the \"default\" network ID in the environment's project is used. If a [Custom Subnet Network](/vpc/docs/vpc#vpc_networks_and_subnets) is provided, `nodeConfig.subnetwork` must also be provided. For [Shared VPC](/vpc/docs/shared-vpc) subnetwork requirements, see `nodeConfig.subnetwork`."
                    },
                    "location": {
                      "type": "string",
                      "description": "Optional. The Compute Engine [zone](/compute/docs/regions-zones) in which to deploy the VMs used to run the Apache Airflow software, specified as a [relative resource name](/apis/design/resource_names#relative_resource_name). For example: \"projects/{projectId}/zones/{zoneId}\". This `location` must belong to the enclosing environment's project and location. If both this field and `nodeConfig.machineType` are specified, `nodeConfig.machineType` must belong to this `location`; if both are unspecified, the service will pick a zone in the Compute Engine region corresponding to the Cloud Composer location, and propagate that choice to both fields. If only one field (`location` or `nodeConfig.machineType`) is specified, the location information from the specified field will be propagated to the unspecified field."
                    },
                    "diskSizeGb": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Optional. The disk size in GB used for node VMs. Minimum size is 20GB. If unspecified, defaults to 100GB. Cannot be updated."
                    },
                    "subnetwork": {
                      "type": "string",
                      "description": "Optional. The Compute Engine subnetwork to be used for machine communications, specified as a [relative resource name](/apis/design/resource_names#relative_resource_name). For example: \"projects/{projectId}/regions/{regionId}/subnetworks/{subnetworkId}\" If a subnetwork is provided, `nodeConfig.network` must also be provided, and the subnetwork must belong to the enclosing environment's project and location."
                    },
                    "machineType": {
                      "type": "string",
                      "description": "Optional. The Compute Engine [machine type](/compute/docs/machine-types) used for cluster instances, specified as a [relative resource name](/apis/design/resource_names#relative_resource_name). For example: \"projects/{projectId}/zones/{zoneId}/machineTypes/{machineTypeId}\". The `machineType` must belong to the enclosing environment's project and location. If both this field and `nodeConfig.location` are specified, this `machineType` must belong to the `nodeConfig.location`; if both are unspecified, the service will pick a zone in the Compute Engine region corresponding to the Cloud Composer location, and propagate that choice to both fields. If exactly one of this field and `nodeConfig.location` is specified, the location information from the specified field will be propagated to the unspecified field. The `machineTypeId` must not be a [shared-core machine type](/compute/docs/machine-types#sharedcore). If this field is unspecified, the `machineTypeId` defaults to \"n1-standard-1\"."
                    },
                    "oauthScopes": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Optional. The set of Google API scopes to be made available on all node VMs. If `oauth_scopes` is empty, defaults to [\"https://www.googleapis.com/auth/cloud-platform\"]. Cannot be updated."
                    },
                    "serviceAccount": {
                      "type": "string",
                      "description": "Optional. The Google Cloud Platform Service Account to be used by the node VMs. If a service account is not specified, the \"default\" Compute Engine service account is used. Cannot be updated."
                    },
                    "ipAllocationPolicy": {
                      "id": "IPAllocationPolicy",
                      "type": "object",
                      "properties": {
                        "useIpAliases": {
                          "type": "boolean",
                          "description": "Optional. Whether or not to enable Alias IPs in the GKE cluster. If `true`, a VPC-native cluster is created."
                        },
                        "clusterIpv4CidrBlock": {
                          "type": "string",
                          "description": "Optional. The IP address range used to allocate IP addresses to pods in the GKE cluster. This field is applicable only when `use_ip_aliases` is true. Set to blank to have GKE choose a range with the default size. Set to /netmask (e.g. `/14`) to have GKE choose a range with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use."
                        },
                        "servicesIpv4CidrBlock": {
                          "type": "string",
                          "description": "Optional. The IP address range of the services IP addresses in this GKE cluster. This field is applicable only when `use_ip_aliases` is true. Set to blank to have GKE choose a range with the default size. Set to /netmask (e.g. `/14`) to have GKE choose a range with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use."
                        },
                        "clusterSecondaryRangeName": {
                          "type": "string",
                          "description": "Optional. The name of the GKE cluster's secondary range used to allocate IP addresses to pods. This field is applicable only when `use_ip_aliases` is true."
                        },
                        "servicesSecondaryRangeName": {
                          "type": "string",
                          "description": "Optional. The name of the services' secondary range used to allocate IP addresses to the GKE cluster. This field is applicable only when `use_ip_aliases` is true."
                        }
                      },
                      "description": "Optional. The configuration for controlling how IPs are allocated in the GKE cluster."
                    }
                  },
                  "description": "The configuration used for the Kubernetes Engine cluster."
                },
                "dagGcsPrefix": {
                  "type": "string",
                  "description": "Output only. The Cloud Storage prefix of the DAGs for this environment. Although Cloud Storage objects reside in a flat namespace, a hierarchical file tree can be simulated using \"/\"-delimited object name prefixes. DAG objects for this environment reside in a simulated directory with the given prefix."
                },
                "databaseConfig": {
                  "id": "DatabaseConfig",
                  "type": "object",
                  "properties": {
                    "machineType": {
                      "type": "string",
                      "description": "Optional. Cloud SQL machine type used by Airflow database. It has to be one of: db-n1-standard-2, db-n1-standard-4, db-n1-standard-8 or db-n1-standard-16. If not specified, db-n1-standard-2 will be used."
                    }
                  },
                  "description": "Optional. The configuration settings for Cloud SQL instance used internally by Apache Airflow software."
                },
                "softwareConfig": {
                  "id": "SoftwareConfig",
                  "type": "object",
                  "properties": {
                    "envVariables": {
                      "type": "object",
                      "description": "Optional. Additional environment variables to provide to the Apache Airflow scheduler, worker, and webserver processes. Environment variable names must match the regular expression `a-zA-Z_*`. They cannot specify Apache Airflow software configuration overrides (they cannot match the regular expression `AIRFLOW__[A-Z0-9_]+__[A-Z0-9_]+`), and they cannot match any of the following reserved names: * `AIRFLOW_HOME` * `C_FORCE_ROOT` * `CONTAINER_NAME` * `DAGS_FOLDER` * `GCP_PROJECT` * `GCS_BUCKET` * `GKE_CLUSTER_NAME` * `SQL_DATABASE` * `SQL_INSTANCE` * `SQL_PASSWORD` * `SQL_PROJECT` * `SQL_REGION` * `SQL_USER`",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "imageVersion": {
                      "type": "string",
                      "description": "The version of the software running in the environment. This encapsulates both the version of Cloud Composer functionality and the version of Apache Airflow. It must match the regular expression `composer-([0-9]+\\.[0-9]+\\.[0-9]+|latest)-airflow-[0-9]+\\.[0-9]+(\\.[0-9]+.*)?`. When used as input, the server also checks if the provided version is supported and denies the request for an unsupported version. The Cloud Composer portion of the version is a [semantic version](https://semver.org) or `latest`. When the patch version is omitted, the current Cloud Composer patch version is selected. When `latest` is provided instead of an explicit version number, the server replaces `latest` with the current Cloud Composer version and stores that version number in the same field. The portion of the image version that follows *airflow-* is an official Apache Airflow repository [release name](https://github.com/apache/incubator-airflow/releases). See also [Version List](/composer/docs/concepts/versioning/composer-versions)."
                    },
                    "pypiPackages": {
                      "type": "object",
                      "description": "Optional. Custom Python Package Index (PyPI) packages to be installed in the environment. Keys refer to the lowercase package name such as \"numpy\" and values are the lowercase extras and version specifier such as \"==1.12.0\", \"[devel,gcp_api]\", or \"[devel]>=1.8.2, <1.9.2\". To specify a package without pinning it to a version specifier, use the empty string as the value.",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "pythonVersion": {
                      "type": "string",
                      "description": "Optional. The major version of Python used to run the Apache Airflow scheduler, worker, and webserver processes. Can be set to '2' or '3'. If not specified, the default is '3'. Cannot be updated."
                    },
                    "airflowConfigOverrides": {
                      "type": "object",
                      "description": "Optional. Apache Airflow configuration properties to override. Property keys contain the section and property names, separated by a hyphen, for example \"core-dags_are_paused_at_creation\". Section names must not contain hyphens (\"-\"), opening square brackets (\"[\"), or closing square brackets (\"]\"). The property name must not be empty and must not contain an equals sign (\"=\") or semicolon (\";\"). Section and property names must not contain a period (\".\"). Apache Airflow configuration property names must be written in [snake_case](https://en.wikipedia.org/wiki/Snake_case). Property values can contain any character, and can be written in any lower/upper case format. Certain Apache Airflow configuration property values are [blocked](/composer/docs/concepts/airflow-configurations), and cannot be overridden.",
                      "additionalProperties": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "The configuration settings for software inside the environment."
                },
                "webServerConfig": {
                  "id": "WebServerConfig",
                  "type": "object",
                  "properties": {
                    "machineType": {
                      "type": "string",
                      "description": "Optional. Machine type on which Airflow web server is running. It has to be one of: composer-n1-webserver-2, composer-n1-webserver-4 or composer-n1-webserver-8. If not specified, composer-n1-webserver-2 will be used. Value custom is returned only in response, if Airflow web server parameters were manually changed to a non-standard values."
                    }
                  },
                  "description": "Optional. The configuration settings for the Airflow web server App Engine instance."
                },
                "encryptionConfig": {
                  "id": "EncryptionConfig",
                  "type": "object",
                  "properties": {
                    "kmsKeyName": {
                      "type": "string",
                      "description": "Optional. Customer-managed Encryption Key available through Google's Key Management Service. Cannot be updated. If not specified, Google-managed key will be used."
                    }
                  },
                  "description": "Optional. The encryption options for the Cloud Composer environment and its dependencies. Cannot be updated."
                },
                "privateEnvironmentConfig": {
                  "id": "PrivateEnvironmentConfig",
                  "type": "object",
                  "properties": {
                    "privateClusterConfig": {
                      "id": "PrivateClusterConfig",
                      "type": "object",
                      "properties": {
                        "masterIpv4CidrBlock": {
                          "type": "string",
                          "description": "Optional. The CIDR block from which IPv4 range for GKE master will be reserved. If left blank, the default value of '172.16.0.0/23' is used."
                        },
                        "enablePrivateEndpoint": {
                          "type": "boolean",
                          "description": "Optional. If `true`, access to the public endpoint of the GKE cluster is denied."
                        },
                        "masterIpv4ReservedRange": {
                          "type": "string",
                          "readOnly": true,
                          "description": "Output only. The IP range in CIDR notation to use for the hosted master network. This range is used for assigning internal IP addresses to the GKE cluster master or set of masters and to the internal load balancer virtual IP. This range must not overlap with any other ranges in use within the cluster's network."
                        }
                      },
                      "description": "Optional. Configuration for the private GKE cluster for a Private IP Cloud Composer environment."
                    },
                    "cloudSqlIpv4CidrBlock": {
                      "type": "string",
                      "description": "Optional. The CIDR block from which IP range in tenant project will be reserved for Cloud SQL. Needs to be disjoint from `web_server_ipv4_cidr_block`."
                    },
                    "webServerIpv4CidrBlock": {
                      "type": "string",
                      "description": "Optional. The CIDR block from which IP range for web server will be reserved. Needs to be disjoint from `private_cluster_config.master_ipv4_cidr_block` and `cloud_sql_ipv4_cidr_block`."
                    },
                    "enablePrivateEnvironment": {
                      "type": "boolean",
                      "description": "Optional. If `true`, a Private IP Cloud Composer environment is created. If this field is set to true, `IPAllocationPolicy.use_ip_aliases` must be set to true."
                    },
                    "webServerIpv4ReservedRange": {
                      "type": "string",
                      "readOnly": true,
                      "description": "Output only. The IP range reserved for the tenant project's App Engine VMs."
                    }
                  },
                  "description": "The configuration used for the Private IP Cloud Composer environment."
                },
                "webServerNetworkAccessControl": {
                  "id": "WebServerNetworkAccessControl",
                  "type": "object",
                  "properties": {
                    "allowedIpRanges": {
                      "type": "array",
                      "items": {
                        "id": "AllowedIpRange",
                        "type": "object",
                        "properties": {
                          "value": {
                            "type": "string",
                            "description": "IP address or range, defined using CIDR notation, of requests that this rule applies to. Examples: `192.168.1.1` or `192.168.0.0/16` or `2001:db8::/32` or `2001:0db8:0000:0042:0000:8a2e:0370:7334`. IP range prefixes should be properly truncated. For example, `1.2.3.4/24` should be truncated to `1.2.3.0/24`. Similarly, for IPv6, `2001:db8::1/32` should be truncated to `2001:db8::/32`."
                          },
                          "description": {
                            "type": "string",
                            "description": "Optional. User-provided description. It must contain at most 300 characters."
                          }
                        },
                        "description": "Allowed IP range with user-provided description."
                      },
                      "description": "A collection of allowed IP ranges with descriptions."
                    }
                  },
                  "description": "Optional. The network-level access control policy for the Airflow web server. If unspecified, no network-level access restrictions will be applied."
                }
              },
              "description": "Configuration parameters for this environment."
            },
            "labels": {
              "type": "object",
              "description": "Optional. User-defined labels for this environment. The labels map can contain no more than 64 entries. Entries of the labels map are UTF8 strings that comply with the following restrictions: * Keys must conform to regexp: \\p{Ll}\\p{Lo}{0,62} * Values must conform to regexp: [\\p{Ll}\\p{Lo}\\p{N}_-]{0,63} * Both keys and values are additionally constrained to be <= 128 bytes in size.",
              "additionalProperties": {
                "type": "string"
              }
            },
            "createTime": {
              "type": "string",
              "format": "google-datetime",
              "description": "Output only. The time at which this environment was created."
            },
            "updateTime": {
              "type": "string",
              "format": "google-datetime",
              "description": "Output only. The time at which this environment was last modified."
            }
          },
          "description": "An environment for running orchestration tasks."
        }
      ]
      outputs: [
        {
          "id": "Operation",
          "type": "object",
          "properties": {
            "done": {
              "type": "boolean",
              "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available."
            },
            "name": {
              "type": "string",
              "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`."
            },
            "error": {
              "id": "Status",
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The status code, which should be an enum value of google.rpc.Code."
                },
                "details": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  },
                  "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
                },
                "message": {
                  "type": "string",
                  "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                }
              },
              "description": "The error result of the operation in case of failure or cancellation."
            },
            "metadata": {
              "type": "object",
              "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
              "additionalProperties": {
                "type": "any",
                "description": "Properties of the object. Contains field @type with type URL."
              }
            },
            "response": {
              "type": "object",
              "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
              "additionalProperties": {
                "type": "any",
                "description": "Properties of the object. Contains field @type with type URL."
              }
            }
          },
          "description": "This resource represents a long-running operation that is the result of a network API call."
        }
      ]
  projects.locations.imageVersions.list:
    description: |-
      List ImageVersions for provided location.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/composer/docs/reference/rest/v1/projects.locations.imageVersions/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "ListImageVersionsResponse",
          "type": "object",
          "properties": {
            "imageVersions": {
              "type": "array",
              "items": {
                "id": "ImageVersion",
                "type": "object",
                "properties": {
                  "isDefault": {
                    "type": "boolean",
                    "description": "Whether this is the default ImageVersion used by Composer during environment creation if no input ImageVersion is specified."
                  },
                  "releaseDate": {
                    "id": "Date",
                    "type": "object",
                    "properties": {
                      "day": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant."
                      },
                      "year": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year."
                      },
                      "month": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day."
                      }
                    },
                    "description": "The date of the version release."
                  },
                  "imageVersionId": {
                    "type": "string",
                    "description": "The string identifier of the ImageVersion, in the form: \"composer-x.y.z-airflow-a.b(.c)\""
                  },
                  "upgradeDisabled": {
                    "type": "boolean",
                    "description": "Whether it is impossible to upgrade an environment running with the image version."
                  },
                  "creationDisabled": {
                    "type": "boolean",
                    "description": "Whether it is impossible to create an environment with the image version."
                  },
                  "supportedPythonVersions": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "supported python versions"
                  }
                },
                "description": "ImageVersion information"
              },
              "description": "The list of supported ImageVersions in a location."
            },
            "nextPageToken": {
              "type": "string",
              "description": "The page token used to query for the next page if one exists."
            }
          },
          "description": "The ImageVersions in a project and location."
        }
      ]
  projects.locations.operations.delete:
    description: |-
      Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/composer/docs/reference/rest/v1/projects.locations.operations/delete
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "Empty",
          "type": "object",
          "properties": {},
          "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`."
        }
      ]
  projects.locations.operations.get:
    description: |-
      Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/composer/docs/reference/rest/v1/projects.locations.operations/get
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "Operation",
          "type": "object",
          "properties": {
            "done": {
              "type": "boolean",
              "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available."
            },
            "name": {
              "type": "string",
              "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`."
            },
            "error": {
              "id": "Status",
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The status code, which should be an enum value of google.rpc.Code."
                },
                "details": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  },
                  "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
                },
                "message": {
                  "type": "string",
                  "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                }
              },
              "description": "The error result of the operation in case of failure or cancellation."
            },
            "metadata": {
              "type": "object",
              "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
              "additionalProperties": {
                "type": "any",
                "description": "Properties of the object. Contains field @type with type URL."
              }
            },
            "response": {
              "type": "object",
              "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
              "additionalProperties": {
                "type": "any",
                "description": "Properties of the object. Contains field @type with type URL."
              }
            }
          },
          "description": "This resource represents a long-running operation that is the result of a network API call."
        }
      ]
  projects.locations.operations.list:
    description: |-
      Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `"/v1/{name=users/*}/operations"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/composer/docs/reference/rest/v1/projects.locations.operations/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "ListOperationsResponse",
          "type": "object",
          "properties": {
            "operations": {
              "type": "array",
              "items": {
                "id": "Operation",
                "type": "object",
                "properties": {
                  "done": {
                    "type": "boolean",
                    "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available."
                  },
                  "name": {
                    "type": "string",
                    "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`."
                  },
                  "error": {
                    "id": "Status",
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The status code, which should be an enum value of google.rpc.Code."
                      },
                      "details": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "any",
                            "description": "Properties of the object. Contains field @type with type URL."
                          }
                        },
                        "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
                      },
                      "message": {
                        "type": "string",
                        "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                      }
                    },
                    "description": "The error result of the operation in case of failure or cancellation."
                  },
                  "metadata": {
                    "type": "object",
                    "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  },
                  "response": {
                    "type": "object",
                    "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  }
                },
                "description": "This resource represents a long-running operation that is the result of a network API call."
              },
              "description": "A list of operations that matches the specified filter in the request."
            },
            "nextPageToken": {
              "type": "string",
              "description": "The standard List next-page token."
            }
          },
          "description": "The response message for Operations.ListOperations."
        }
      ]