Product:
  name: GCP Binary Authorization
  versions: [1.0.0]
  package: google.gcp.binaryauthorization
  description: |-
    Binary Authorization
  link: https://cloud.google.com/binary-authorization
  contentType: json
Operations:
  projects.attestors.create:
    description: |-
      Creates an attestor, and returns a copy of the new attestor. Returns NOT_FOUND if the project does not exist, INVALID_ARGUMENT if the request is malformed, ALREADY_EXISTS if the attestor already exists.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/binary-authorization/docs/reference/rest/v1/projects.attestors/create
    example:
      inputs: [
        {
          "id": "Attestor",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Required. The resource name, in the format: `projects/*/attestors/*`. This field may not be updated."
            },
            "updateTime": {
              "type": "string",
              "format": "google-datetime",
              "readOnly": true,
              "description": "Output only. Time when the attestor was last updated."
            },
            "description": {
              "type": "string",
              "description": "Optional. A descriptive comment. This field may be updated. The field may be displayed in chooser dialogs."
            },
            "userOwnedGrafeasNote": {
              "id": "UserOwnedGrafeasNote",
              "type": "object",
              "properties": {
                "publicKeys": {
                  "type": "array",
                  "items": {
                    "id": "AttestorPublicKey",
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "The ID of this public key. Signatures verified by BinAuthz must include the ID of the public key that can be used to verify them, and that ID must match the contents of this field exactly. Additional restrictions on this field can be imposed based on which public key type is encapsulated. See the documentation on `public_key` cases below for details."
                      },
                      "comment": {
                        "type": "string",
                        "description": "Optional. A descriptive comment. This field may be updated."
                      },
                      "pkixPublicKey": {
                        "id": "PkixPublicKey",
                        "type": "object",
                        "properties": {
                          "publicKeyPem": {
                            "type": "string",
                            "description": "A PEM-encoded public key, as described in https://tools.ietf.org/html/rfc7468#section-13"
                          },
                          "signatureAlgorithm": {
                            "enum": [
                              "SIGNATURE_ALGORITHM_UNSPECIFIED",
                              "RSA_PSS_2048_SHA256",
                              "RSA_PSS_3072_SHA256",
                              "RSA_PSS_4096_SHA256",
                              "RSA_PSS_4096_SHA512",
                              "RSA_SIGN_PKCS1_2048_SHA256",
                              "RSA_SIGN_PKCS1_3072_SHA256",
                              "RSA_SIGN_PKCS1_4096_SHA256",
                              "RSA_SIGN_PKCS1_4096_SHA512",
                              "ECDSA_P256_SHA256",
                              "EC_SIGN_P256_SHA256",
                              "ECDSA_P384_SHA384",
                              "EC_SIGN_P384_SHA384",
                              "ECDSA_P521_SHA512",
                              "EC_SIGN_P521_SHA512"
                            ],
                            "type": "string",
                            "description": "The signature algorithm used to verify a message against a signature using this key. These signature algorithm must match the structure and any object identifiers encoded in `public_key_pem` (i.e. this algorithm must match that of the public key).",
                            "enumDescriptions": [
                              "Not specified.",
                              "RSASSA-PSS 2048 bit key with a SHA256 digest.",
                              "RSASSA-PSS 3072 bit key with a SHA256 digest.",
                              "RSASSA-PSS 4096 bit key with a SHA256 digest.",
                              "RSASSA-PSS 4096 bit key with a SHA512 digest.",
                              "RSASSA-PKCS1-v1_5 with a 2048 bit key and a SHA256 digest.",
                              "RSASSA-PKCS1-v1_5 with a 3072 bit key and a SHA256 digest.",
                              "RSASSA-PKCS1-v1_5 with a 4096 bit key and a SHA256 digest.",
                              "RSASSA-PKCS1-v1_5 with a 4096 bit key and a SHA512 digest.",
                              "ECDSA on the NIST P-256 curve with a SHA256 digest.",
                              "ECDSA on the NIST P-256 curve with a SHA256 digest.",
                              "ECDSA on the NIST P-384 curve with a SHA384 digest.",
                              "ECDSA on the NIST P-384 curve with a SHA384 digest.",
                              "ECDSA on the NIST P-521 curve with a SHA512 digest.",
                              "ECDSA on the NIST P-521 curve with a SHA512 digest."
                            ]
                          }
                        },
                        "description": "A raw PKIX SubjectPublicKeyInfo format public key. NOTE: `id` may be explicitly provided by the caller when using this type of public key, but it MUST be a valid RFC3986 URI. If `id` is left blank, a default one will be computed based on the digest of the DER encoding of the public key."
                      },
                      "asciiArmoredPgpPublicKey": {
                        "type": "string",
                        "description": "ASCII-armored representation of a PGP public key, as the entire output by the command `gpg --export --armor foo@example.com` (either LF or CRLF line endings). When using this field, `id` should be left blank. The BinAuthz API handlers will calculate the ID and fill it in automatically. BinAuthz computes this ID as the OpenPGP RFC4880 V4 fingerprint, represented as upper-case hex. If `id` is provided by the caller, it will be overwritten by the API-calculated ID."
                      }
                    },
                    "description": "An attestor public key that will be used to verify attestations signed by this attestor."
                  },
                  "description": "Optional. Public keys that verify attestations signed by this attestor. This field may be updated. If this field is non-empty, one of the specified public keys must verify that an attestation was signed by this attestor for the image specified in the admission request. If this field is empty, this attestor always returns that no valid attestations exist."
                },
                "noteReference": {
                  "type": "string",
                  "description": "Required. The Grafeas resource name of a Attestation.Authority Note, created by the user, in the format: `projects/*/notes/*`. This field may not be updated. An attestation by this attestor is stored as a Grafeas Attestation.Authority Occurrence that names a container image and that links to this Note. Grafeas is an external dependency."
                },
                "delegationServiceAccountEmail": {
                  "type": "string",
                  "readOnly": true,
                  "description": "Output only. This field will contain the service account email address that this Attestor will use as the principal when querying Container Analysis. Attestor administrators must grant this service account the IAM role needed to read attestations from the note_reference in Container Analysis (`containeranalysis.notes.occurrences.viewer`). This email address is fixed for the lifetime of the Attestor, but callers should not make any other assumptions about the service account email; future versions may use an email based on a different naming pattern."
                }
              },
              "description": "This specifies how an attestation will be read, and how it will be used during policy enforcement."
            }
          },
          "description": "An attestor that attests to container image artifacts. An existing attestor cannot be modified except where indicated."
        }
      ]
      outputs: [
        {}
      ]
  projects.attestors.delete:
    description: |-
      Deletes an attestor. Returns NOT_FOUND if the attestor does not exist.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/binary-authorization/docs/reference/rest/v1/projects.attestors/delete
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "Empty",
          "type": "object",
          "properties": {},
          "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`."
        }
      ]
  projects.attestors.get:
    description: |-
      Gets an attestor. Returns NOT_FOUND if the attestor does not exist.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/binary-authorization/docs/reference/rest/v1/projects.attestors/get
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  projects.attestors.getIamPolicy:
    description: |-
      Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/binary-authorization/docs/reference/rest/v1/projects.attestors/getIamPolicy
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "IamPolicy",
          "type": "object",
          "properties": {
            "etag": {
              "type": "string",
              "format": "byte",
              "description": "`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost."
            },
            "version": {
              "type": "integer",
              "format": "int32",
              "description": "Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies)."
            },
            "bindings": {
              "type": "array",
              "items": {
                "id": "Binding",
                "type": "object",
                "properties": {
                  "role": {
                    "type": "string",
                    "description": "Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`."
                  },
                  "members": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. "
                  },
                  "condition": {
                    "id": "Expr",
                    "type": "object",
                    "properties": {
                      "title": {
                        "type": "string",
                        "description": "Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression."
                      },
                      "location": {
                        "type": "string",
                        "description": "Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file."
                      },
                      "expression": {
                        "type": "string",
                        "description": "Textual representation of an expression in Common Expression Language syntax."
                      },
                      "description": {
                        "type": "string",
                        "description": "Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI."
                      }
                    },
                    "description": "The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies)."
                  }
                },
                "description": "Associates `members` with a `role`."
              },
              "description": "Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member."
            }
          },
          "description": "An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { \"bindings\": [ { \"role\": \"roles/resourcemanager.organizationAdmin\", \"members\": [ \"user:mike@example.com\", \"group:admins@example.com\", \"domain:google.com\", \"serviceAccount:my-project-id@appspot.gserviceaccount.com\" ] }, { \"role\": \"roles/resourcemanager.organizationViewer\", \"members\": [ \"user:eve@example.com\" ], \"condition\": { \"title\": \"expirable access\", \"description\": \"Does not grant access after Sep 2020\", \"expression\": \"request.time < timestamp('2020-10-01T00:00:00.000Z')\", } } ], \"etag\": \"BwWWja0YfJA=\", \"version\": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/)."
        }
      ]
  projects.attestors.list:
    description: |-
      Lists attestors. Returns INVALID_ARGUMENT if the project does not exist.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/binary-authorization/docs/reference/rest/v1/projects.attestors/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "ListAttestorsResponse",
          "type": "object",
          "properties": {
            "attestors": {
              "type": "array",
              "items": {
                "id": "Attestor",
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Required. The resource name, in the format: `projects/*/attestors/*`. This field may not be updated."
                  },
                  "updateTime": {
                    "type": "string",
                    "format": "google-datetime",
                    "readOnly": true,
                    "description": "Output only. Time when the attestor was last updated."
                  },
                  "description": {
                    "type": "string",
                    "description": "Optional. A descriptive comment. This field may be updated. The field may be displayed in chooser dialogs."
                  },
                  "userOwnedGrafeasNote": {
                    "id": "UserOwnedGrafeasNote",
                    "type": "object",
                    "properties": {
                      "publicKeys": {
                        "type": "array",
                        "items": {
                          "id": "AttestorPublicKey",
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "The ID of this public key. Signatures verified by BinAuthz must include the ID of the public key that can be used to verify them, and that ID must match the contents of this field exactly. Additional restrictions on this field can be imposed based on which public key type is encapsulated. See the documentation on `public_key` cases below for details."
                            },
                            "comment": {
                              "type": "string",
                              "description": "Optional. A descriptive comment. This field may be updated."
                            },
                            "pkixPublicKey": {
                              "id": "PkixPublicKey",
                              "type": "object",
                              "properties": {
                                "publicKeyPem": {
                                  "type": "string",
                                  "description": "A PEM-encoded public key, as described in https://tools.ietf.org/html/rfc7468#section-13"
                                },
                                "signatureAlgorithm": {
                                  "enum": [
                                    "SIGNATURE_ALGORITHM_UNSPECIFIED",
                                    "RSA_PSS_2048_SHA256",
                                    "RSA_PSS_3072_SHA256",
                                    "RSA_PSS_4096_SHA256",
                                    "RSA_PSS_4096_SHA512",
                                    "RSA_SIGN_PKCS1_2048_SHA256",
                                    "RSA_SIGN_PKCS1_3072_SHA256",
                                    "RSA_SIGN_PKCS1_4096_SHA256",
                                    "RSA_SIGN_PKCS1_4096_SHA512",
                                    "ECDSA_P256_SHA256",
                                    "EC_SIGN_P256_SHA256",
                                    "ECDSA_P384_SHA384",
                                    "EC_SIGN_P384_SHA384",
                                    "ECDSA_P521_SHA512",
                                    "EC_SIGN_P521_SHA512"
                                  ],
                                  "type": "string",
                                  "description": "The signature algorithm used to verify a message against a signature using this key. These signature algorithm must match the structure and any object identifiers encoded in `public_key_pem` (i.e. this algorithm must match that of the public key).",
                                  "enumDescriptions": [
                                    "Not specified.",
                                    "RSASSA-PSS 2048 bit key with a SHA256 digest.",
                                    "RSASSA-PSS 3072 bit key with a SHA256 digest.",
                                    "RSASSA-PSS 4096 bit key with a SHA256 digest.",
                                    "RSASSA-PSS 4096 bit key with a SHA512 digest.",
                                    "RSASSA-PKCS1-v1_5 with a 2048 bit key and a SHA256 digest.",
                                    "RSASSA-PKCS1-v1_5 with a 3072 bit key and a SHA256 digest.",
                                    "RSASSA-PKCS1-v1_5 with a 4096 bit key and a SHA256 digest.",
                                    "RSASSA-PKCS1-v1_5 with a 4096 bit key and a SHA512 digest.",
                                    "ECDSA on the NIST P-256 curve with a SHA256 digest.",
                                    "ECDSA on the NIST P-256 curve with a SHA256 digest.",
                                    "ECDSA on the NIST P-384 curve with a SHA384 digest.",
                                    "ECDSA on the NIST P-384 curve with a SHA384 digest.",
                                    "ECDSA on the NIST P-521 curve with a SHA512 digest.",
                                    "ECDSA on the NIST P-521 curve with a SHA512 digest."
                                  ]
                                }
                              },
                              "description": "A raw PKIX SubjectPublicKeyInfo format public key. NOTE: `id` may be explicitly provided by the caller when using this type of public key, but it MUST be a valid RFC3986 URI. If `id` is left blank, a default one will be computed based on the digest of the DER encoding of the public key."
                            },
                            "asciiArmoredPgpPublicKey": {
                              "type": "string",
                              "description": "ASCII-armored representation of a PGP public key, as the entire output by the command `gpg --export --armor foo@example.com` (either LF or CRLF line endings). When using this field, `id` should be left blank. The BinAuthz API handlers will calculate the ID and fill it in automatically. BinAuthz computes this ID as the OpenPGP RFC4880 V4 fingerprint, represented as upper-case hex. If `id` is provided by the caller, it will be overwritten by the API-calculated ID."
                            }
                          },
                          "description": "An attestor public key that will be used to verify attestations signed by this attestor."
                        },
                        "description": "Optional. Public keys that verify attestations signed by this attestor. This field may be updated. If this field is non-empty, one of the specified public keys must verify that an attestation was signed by this attestor for the image specified in the admission request. If this field is empty, this attestor always returns that no valid attestations exist."
                      },
                      "noteReference": {
                        "type": "string",
                        "description": "Required. The Grafeas resource name of a Attestation.Authority Note, created by the user, in the format: `projects/*/notes/*`. This field may not be updated. An attestation by this attestor is stored as a Grafeas Attestation.Authority Occurrence that names a container image and that links to this Note. Grafeas is an external dependency."
                      },
                      "delegationServiceAccountEmail": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Output only. This field will contain the service account email address that this Attestor will use as the principal when querying Container Analysis. Attestor administrators must grant this service account the IAM role needed to read attestations from the note_reference in Container Analysis (`containeranalysis.notes.occurrences.viewer`). This email address is fixed for the lifetime of the Attestor, but callers should not make any other assumptions about the service account email; future versions may use an email based on a different naming pattern."
                      }
                    },
                    "description": "This specifies how an attestation will be read, and how it will be used during policy enforcement."
                  }
                },
                "description": "An attestor that attests to container image artifacts. An existing attestor cannot be modified except where indicated."
              },
              "description": "The list of attestors."
            },
            "nextPageToken": {
              "type": "string",
              "description": "A token to retrieve the next page of results. Pass this value in the ListAttestorsRequest.page_token field in the subsequent call to the `ListAttestors` method to retrieve the next page of results."
            }
          },
          "description": "Response message for BinauthzManagementService.ListAttestors."
        }
      ]
  projects.attestors.setIamPolicy:
    description: |-
      Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/binary-authorization/docs/reference/rest/v1/projects.attestors/setIamPolicy
    example:
      inputs: [
        {
          "id": "SetIamPolicyRequest",
          "type": "object",
          "properties": {
            "policy": {
              "id": "IamPolicy",
              "type": "object",
              "properties": {
                "etag": {
                  "type": "string",
                  "format": "byte",
                  "description": "`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost."
                },
                "version": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies)."
                },
                "bindings": {
                  "type": "array",
                  "items": {
                    "id": "Binding",
                    "type": "object",
                    "properties": {
                      "role": {
                        "type": "string",
                        "description": "Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`."
                      },
                      "members": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. "
                      },
                      "condition": {
                        "id": "Expr",
                        "type": "object",
                        "properties": {
                          "title": {
                            "type": "string",
                            "description": "Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression."
                          },
                          "location": {
                            "type": "string",
                            "description": "Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file."
                          },
                          "expression": {
                            "type": "string",
                            "description": "Textual representation of an expression in Common Expression Language syntax."
                          },
                          "description": {
                            "type": "string",
                            "description": "Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI."
                          }
                        },
                        "description": "The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies)."
                      }
                    },
                    "description": "Associates `members` with a `role`."
                  },
                  "description": "Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member."
                }
              },
              "description": "An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { \"bindings\": [ { \"role\": \"roles/resourcemanager.organizationAdmin\", \"members\": [ \"user:mike@example.com\", \"group:admins@example.com\", \"domain:google.com\", \"serviceAccount:my-project-id@appspot.gserviceaccount.com\" ] }, { \"role\": \"roles/resourcemanager.organizationViewer\", \"members\": [ \"user:eve@example.com\" ], \"condition\": { \"title\": \"expirable access\", \"description\": \"Does not grant access after Sep 2020\", \"expression\": \"request.time < timestamp('2020-10-01T00:00:00.000Z')\", } } ], \"etag\": \"BwWWja0YfJA=\", \"version\": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/)."
            }
          },
          "description": "Request message for `SetIamPolicy` method."
        }
      ]
      outputs: [
        {
          "id": "IamPolicy",
          "type": "object",
          "properties": {
            "etag": {
              "type": "string",
              "format": "byte",
              "description": "`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost."
            },
            "version": {
              "type": "integer",
              "format": "int32",
              "description": "Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies)."
            },
            "bindings": {
              "type": "array",
              "items": {
                "id": "Binding",
                "type": "object",
                "properties": {
                  "role": {
                    "type": "string",
                    "description": "Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`."
                  },
                  "members": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. "
                  },
                  "condition": {
                    "id": "Expr",
                    "type": "object",
                    "properties": {
                      "title": {
                        "type": "string",
                        "description": "Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression."
                      },
                      "location": {
                        "type": "string",
                        "description": "Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file."
                      },
                      "expression": {
                        "type": "string",
                        "description": "Textual representation of an expression in Common Expression Language syntax."
                      },
                      "description": {
                        "type": "string",
                        "description": "Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI."
                      }
                    },
                    "description": "The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies)."
                  }
                },
                "description": "Associates `members` with a `role`."
              },
              "description": "Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member."
            }
          },
          "description": "An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { \"bindings\": [ { \"role\": \"roles/resourcemanager.organizationAdmin\", \"members\": [ \"user:mike@example.com\", \"group:admins@example.com\", \"domain:google.com\", \"serviceAccount:my-project-id@appspot.gserviceaccount.com\" ] }, { \"role\": \"roles/resourcemanager.organizationViewer\", \"members\": [ \"user:eve@example.com\" ], \"condition\": { \"title\": \"expirable access\", \"description\": \"Does not grant access after Sep 2020\", \"expression\": \"request.time < timestamp('2020-10-01T00:00:00.000Z')\", } } ], \"etag\": \"BwWWja0YfJA=\", \"version\": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/)."
        }
      ]
  projects.attestors.testIamPermissions:
    description: |-
      Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/binary-authorization/docs/reference/rest/v1/projects.attestors/testIamPermissions
    example:
      inputs: [
        {
          "id": "TestIamPermissionsRequest",
          "type": "object",
          "properties": {
            "permissions": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "The set of permissions to check for the `resource`. Permissions with wildcards (such as '*' or 'storage.*') are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions)."
            }
          },
          "description": "Request message for `TestIamPermissions` method."
        }
      ]
      outputs: [
        {
          "id": "TestIamPermissionsResponse",
          "type": "object",
          "properties": {
            "permissions": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "A subset of `TestPermissionsRequest.permissions` that the caller is allowed."
            }
          },
          "description": "Response message for `TestIamPermissions` method."
        }
      ]
  projects.attestors.update:
    description: |-
      Updates an attestor. Returns NOT_FOUND if the attestor does not exist.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/binary-authorization/docs/reference/rest/v1/projects.attestors/update
    example:
      inputs: [
        {
          "id": "Attestor",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Required. The resource name, in the format: `projects/*/attestors/*`. This field may not be updated."
            },
            "updateTime": {
              "type": "string",
              "format": "google-datetime",
              "readOnly": true,
              "description": "Output only. Time when the attestor was last updated."
            },
            "description": {
              "type": "string",
              "description": "Optional. A descriptive comment. This field may be updated. The field may be displayed in chooser dialogs."
            },
            "userOwnedGrafeasNote": {
              "id": "UserOwnedGrafeasNote",
              "type": "object",
              "properties": {
                "publicKeys": {
                  "type": "array",
                  "items": {
                    "id": "AttestorPublicKey",
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "The ID of this public key. Signatures verified by BinAuthz must include the ID of the public key that can be used to verify them, and that ID must match the contents of this field exactly. Additional restrictions on this field can be imposed based on which public key type is encapsulated. See the documentation on `public_key` cases below for details."
                      },
                      "comment": {
                        "type": "string",
                        "description": "Optional. A descriptive comment. This field may be updated."
                      },
                      "pkixPublicKey": {
                        "id": "PkixPublicKey",
                        "type": "object",
                        "properties": {
                          "publicKeyPem": {
                            "type": "string",
                            "description": "A PEM-encoded public key, as described in https://tools.ietf.org/html/rfc7468#section-13"
                          },
                          "signatureAlgorithm": {
                            "enum": [
                              "SIGNATURE_ALGORITHM_UNSPECIFIED",
                              "RSA_PSS_2048_SHA256",
                              "RSA_PSS_3072_SHA256",
                              "RSA_PSS_4096_SHA256",
                              "RSA_PSS_4096_SHA512",
                              "RSA_SIGN_PKCS1_2048_SHA256",
                              "RSA_SIGN_PKCS1_3072_SHA256",
                              "RSA_SIGN_PKCS1_4096_SHA256",
                              "RSA_SIGN_PKCS1_4096_SHA512",
                              "ECDSA_P256_SHA256",
                              "EC_SIGN_P256_SHA256",
                              "ECDSA_P384_SHA384",
                              "EC_SIGN_P384_SHA384",
                              "ECDSA_P521_SHA512",
                              "EC_SIGN_P521_SHA512"
                            ],
                            "type": "string",
                            "description": "The signature algorithm used to verify a message against a signature using this key. These signature algorithm must match the structure and any object identifiers encoded in `public_key_pem` (i.e. this algorithm must match that of the public key).",
                            "enumDescriptions": [
                              "Not specified.",
                              "RSASSA-PSS 2048 bit key with a SHA256 digest.",
                              "RSASSA-PSS 3072 bit key with a SHA256 digest.",
                              "RSASSA-PSS 4096 bit key with a SHA256 digest.",
                              "RSASSA-PSS 4096 bit key with a SHA512 digest.",
                              "RSASSA-PKCS1-v1_5 with a 2048 bit key and a SHA256 digest.",
                              "RSASSA-PKCS1-v1_5 with a 3072 bit key and a SHA256 digest.",
                              "RSASSA-PKCS1-v1_5 with a 4096 bit key and a SHA256 digest.",
                              "RSASSA-PKCS1-v1_5 with a 4096 bit key and a SHA512 digest.",
                              "ECDSA on the NIST P-256 curve with a SHA256 digest.",
                              "ECDSA on the NIST P-256 curve with a SHA256 digest.",
                              "ECDSA on the NIST P-384 curve with a SHA384 digest.",
                              "ECDSA on the NIST P-384 curve with a SHA384 digest.",
                              "ECDSA on the NIST P-521 curve with a SHA512 digest.",
                              "ECDSA on the NIST P-521 curve with a SHA512 digest."
                            ]
                          }
                        },
                        "description": "A raw PKIX SubjectPublicKeyInfo format public key. NOTE: `id` may be explicitly provided by the caller when using this type of public key, but it MUST be a valid RFC3986 URI. If `id` is left blank, a default one will be computed based on the digest of the DER encoding of the public key."
                      },
                      "asciiArmoredPgpPublicKey": {
                        "type": "string",
                        "description": "ASCII-armored representation of a PGP public key, as the entire output by the command `gpg --export --armor foo@example.com` (either LF or CRLF line endings). When using this field, `id` should be left blank. The BinAuthz API handlers will calculate the ID and fill it in automatically. BinAuthz computes this ID as the OpenPGP RFC4880 V4 fingerprint, represented as upper-case hex. If `id` is provided by the caller, it will be overwritten by the API-calculated ID."
                      }
                    },
                    "description": "An attestor public key that will be used to verify attestations signed by this attestor."
                  },
                  "description": "Optional. Public keys that verify attestations signed by this attestor. This field may be updated. If this field is non-empty, one of the specified public keys must verify that an attestation was signed by this attestor for the image specified in the admission request. If this field is empty, this attestor always returns that no valid attestations exist."
                },
                "noteReference": {
                  "type": "string",
                  "description": "Required. The Grafeas resource name of a Attestation.Authority Note, created by the user, in the format: `projects/*/notes/*`. This field may not be updated. An attestation by this attestor is stored as a Grafeas Attestation.Authority Occurrence that names a container image and that links to this Note. Grafeas is an external dependency."
                },
                "delegationServiceAccountEmail": {
                  "type": "string",
                  "readOnly": true,
                  "description": "Output only. This field will contain the service account email address that this Attestor will use as the principal when querying Container Analysis. Attestor administrators must grant this service account the IAM role needed to read attestations from the note_reference in Container Analysis (`containeranalysis.notes.occurrences.viewer`). This email address is fixed for the lifetime of the Attestor, but callers should not make any other assumptions about the service account email; future versions may use an email based on a different naming pattern."
                }
              },
              "description": "This specifies how an attestation will be read, and how it will be used during policy enforcement."
            }
          },
          "description": "An attestor that attests to container image artifacts. An existing attestor cannot be modified except where indicated."
        }
      ]
      outputs: [
        {}
      ]
  projects.attestors.validateAttestationOccurrence:
    description: |-
      Returns whether the given Attestation for the given image URI was signed by the given Attestor
    versions:
      from: 1.0.0
    link: https://cloud.google.com/binary-authorization/docs/reference/rest/v1/projects.attestors/validateAttestationOccurrence
    example:
      inputs: [
        {
          "id": "ValidateAttestationOccurrenceRequest",
          "type": "object",
          "properties": {
            "attestation": {
              "id": "AttestationOccurrence",
              "type": "object",
              "properties": {
                "jwts": {
                  "type": "array",
                  "items": {
                    "id": "Jwt",
                    "type": "object",
                    "properties": {
                      "compactJwt": {
                        "type": "string",
                        "description": "The compact encoding of a JWS, which is always three base64 encoded strings joined by periods. For details, see: https://tools.ietf.org/html/rfc7515.html#section-3.1"
                      }
                    }
                  },
                  "description": "One or more JWTs encoding a self-contained attestation. Each JWT encodes the payload that it verifies within the JWT itself. Verifier implementation SHOULD ignore the `serialized_payload` field when verifying these JWTs. If only JWTs are present on this AttestationOccurrence, then the `serialized_payload` SHOULD be left empty. Each JWT SHOULD encode a claim specific to the `resource_uri` of this Occurrence, but this is not validated by Grafeas metadata API implementations. The JWT itself is opaque to Grafeas."
                },
                "signatures": {
                  "type": "array",
                  "items": {
                    "id": "Signature",
                    "type": "object",
                    "properties": {
                      "signature": {
                        "type": "string",
                        "format": "byte",
                        "description": "The content of the signature, an opaque bytestring. The payload that this signature verifies MUST be unambiguously provided with the Signature during verification. A wrapper message might provide the payload explicitly. Alternatively, a message might have a canonical serialization that can always be unambiguously computed to derive the payload."
                      },
                      "publicKeyId": {
                        "type": "string",
                        "description": "The identifier for the public key that verifies this signature. * The `public_key_id` is required. * The `public_key_id` SHOULD be an RFC3986 conformant URI. * When possible, the `public_key_id` SHOULD be an immutable reference, such as a cryptographic digest. Examples of valid `public_key_id`s: OpenPGP V4 public key fingerprint: * \"openpgp4fpr:74FAF3B861BDA0870C7B6DEF607E48D2A663AEEA\" See https://www.iana.org/assignments/uri-schemes/prov/openpgp4fpr for more details on this scheme. RFC6920 digest-named SubjectPublicKeyInfo (digest of the DER serialization): * \"ni:///sha-256;cD9o9Cq6LG3jD0iKXqEi_vdjJGecm_iXkbqVoScViaU\" * \"nih:///sha-256;703f68f42aba2c6de30f488a5ea122fef76324679c9bf89791ba95a1271589a5\""
                      }
                    },
                    "description": "Verifiers (e.g. Kritis implementations) MUST verify signatures with respect to the trust anchors defined in policy (e.g. a Kritis policy). Typically this means that the verifier has been configured with a map from `public_key_id` to public key material (and any required parameters, e.g. signing algorithm). In particular, verification implementations MUST NOT treat the signature `public_key_id` as anything more than a key lookup hint. The `public_key_id` DOES NOT validate or authenticate a public key; it only provides a mechanism for quickly selecting a public key ALREADY CONFIGURED on the verifier through a trusted channel. Verification implementations MUST reject signatures in any of the following circumstances: * The `public_key_id` is not recognized by the verifier. * The public key that `public_key_id` refers to does not verify the signature with respect to the payload. The `signature` contents SHOULD NOT be \"attached\" (where the payload is included with the serialized `signature` bytes). Verifiers MUST ignore any \"attached\" payload and only verify signatures with respect to explicitly provided payload (e.g. a `payload` field on the proto message that holds this Signature, or the canonical serialization of the proto message that holds this signature)."
                  },
                  "description": "One or more signatures over `serialized_payload`. Verifier implementations should consider this attestation message verified if at least one `signature` verifies `serialized_payload`. See `Signature` in common.proto for more details on signature structure and verification."
                },
                "serializedPayload": {
                  "type": "string",
                  "format": "byte",
                  "description": "Required. The serialized payload that is verified by one or more `signatures`."
                }
              },
              "description": "Required. An AttestationOccurrence to be checked that it can be verified by the Attestor. It does not have to be an existing entity in Container Analysis. It must otherwise be a valid AttestationOccurrence."
            },
            "occurrenceNote": {
              "type": "string",
              "description": "Required. The resource name of the Note to which the containing Occurrence is associated."
            },
            "occurrenceResourceUri": {
              "type": "string",
              "description": "Required. The URI of the artifact (e.g. container image) that is the subject of the containing Occurrence."
            }
          },
          "description": "Request message for ValidationHelperV1.ValidateAttestationOccurrence."
        }
      ]
      outputs: [
        {
          "id": "ValidateAttestationOccurrenceResponse",
          "type": "object",
          "properties": {
            "result": {
              "enum": [
                "RESULT_UNSPECIFIED",
                "VERIFIED",
                "ATTESTATION_NOT_VERIFIABLE"
              ],
              "type": "string",
              "description": "The result of the Attestation validation.",
              "enumDescriptions": [
                "Unspecified.",
                "The Attestation was able to verified by the Attestor.",
                "The Attestation was not able to verified by the Attestor."
              ]
            },
            "denialReason": {
              "type": "string",
              "description": "The reason for denial if the Attestation couldn't be validated."
            }
          },
          "description": "Response message for ValidationHelperV1.ValidateAttestationOccurrence."
        }
      ]
  projects.getPolicy:
    description: |-
      A policy specifies the attestors that must attest to a container image, before the project is allowed to deploy that image. There is at most one policy per project. All image admission requests are permitted if a project has no policy. Gets the policy for this project. Returns a default policy if the project does not have one.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/binary-authorization/docs/reference/rest/v1/projects/getPolicy
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "Policy",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "readOnly": true,
              "description": "Output only. The resource name, in the format `projects/*/policy`. There is at most one policy per project."
            },
            "updateTime": {
              "type": "string",
              "format": "google-datetime",
              "readOnly": true,
              "description": "Output only. Time when the policy was last updated."
            },
            "description": {
              "type": "string",
              "description": "Optional. A descriptive comment."
            },
            "defaultAdmissionRule": {
              "id": "AdmissionRule",
              "type": "object",
              "properties": {
                "evaluationMode": {
                  "enum": [
                    "EVALUATION_MODE_UNSPECIFIED",
                    "ALWAYS_ALLOW",
                    "REQUIRE_ATTESTATION",
                    "ALWAYS_DENY"
                  ],
                  "type": "string",
                  "description": "Required. How this admission rule will be evaluated.",
                  "enumDescriptions": [
                    "Do not use.",
                    "This rule allows all all pod creations.",
                    "This rule allows a pod creation if all the attestors listed in 'require_attestations_by' have valid attestations for all of the images in the pod spec.",
                    "This rule denies all pod creations."
                  ]
                },
                "enforcementMode": {
                  "enum": [
                    "ENFORCEMENT_MODE_UNSPECIFIED",
                    "ENFORCED_BLOCK_AND_AUDIT_LOG",
                    "DRYRUN_AUDIT_LOG_ONLY"
                  ],
                  "type": "string",
                  "description": "Required. The action when a pod creation is denied by the admission rule.",
                  "enumDescriptions": [
                    "Do not use.",
                    "Enforce the admission rule by blocking the pod creation.",
                    "Dryrun mode: Audit logging only. This will allow the pod creation as if the admission request had specified break-glass."
                  ]
                },
                "requireAttestationsBy": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Optional. The resource names of the attestors that must attest to a container image, in the format `projects/*/attestors/*`. Each attestor must exist before a policy can reference it. To add an attestor to a policy the principal issuing the policy change request must be able to read the attestor resource. Note: this field must be non-empty when the evaluation_mode field specifies REQUIRE_ATTESTATION, otherwise it must be empty."
                }
              },
              "description": "An admission rule specifies either that all container images used in a pod creation request must be attested to by one or more attestors, that all pod creations will be allowed, or that all pod creations will be denied. Images matching an admission allowlist pattern are exempted from admission rules and will never block a pod creation."
            },
            "clusterAdmissionRules": {
              "type": "object",
              "description": "Optional. Per-cluster admission rules. Cluster spec format: `location.clusterId`. There can be at most one admission rule per cluster spec. A `location` is either a compute zone (e.g. us-central1-a) or a region (e.g. us-central1). For `clusterId` syntax restrictions see https://cloud.google.com/container-engine/reference/rest/v1/projects.zones.clusters.",
              "additionalProperties": {
                "id": "AdmissionRule",
                "type": "object",
                "properties": {
                  "evaluationMode": {
                    "enum": [
                      "EVALUATION_MODE_UNSPECIFIED",
                      "ALWAYS_ALLOW",
                      "REQUIRE_ATTESTATION",
                      "ALWAYS_DENY"
                    ],
                    "type": "string",
                    "description": "Required. How this admission rule will be evaluated.",
                    "enumDescriptions": [
                      "Do not use.",
                      "This rule allows all all pod creations.",
                      "This rule allows a pod creation if all the attestors listed in 'require_attestations_by' have valid attestations for all of the images in the pod spec.",
                      "This rule denies all pod creations."
                    ]
                  },
                  "enforcementMode": {
                    "enum": [
                      "ENFORCEMENT_MODE_UNSPECIFIED",
                      "ENFORCED_BLOCK_AND_AUDIT_LOG",
                      "DRYRUN_AUDIT_LOG_ONLY"
                    ],
                    "type": "string",
                    "description": "Required. The action when a pod creation is denied by the admission rule.",
                    "enumDescriptions": [
                      "Do not use.",
                      "Enforce the admission rule by blocking the pod creation.",
                      "Dryrun mode: Audit logging only. This will allow the pod creation as if the admission request had specified break-glass."
                    ]
                  },
                  "requireAttestationsBy": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Optional. The resource names of the attestors that must attest to a container image, in the format `projects/*/attestors/*`. Each attestor must exist before a policy can reference it. To add an attestor to a policy the principal issuing the policy change request must be able to read the attestor resource. Note: this field must be non-empty when the evaluation_mode field specifies REQUIRE_ATTESTATION, otherwise it must be empty."
                  }
                },
                "description": "An admission rule specifies either that all container images used in a pod creation request must be attested to by one or more attestors, that all pod creations will be allowed, or that all pod creations will be denied. Images matching an admission allowlist pattern are exempted from admission rules and will never block a pod creation."
              }
            },
            "admissionWhitelistPatterns": {
              "type": "array",
              "items": {
                "id": "AdmissionWhitelistPattern",
                "type": "object",
                "properties": {
                  "namePattern": {
                    "type": "string",
                    "description": "An image name pattern to allowlist, in the form `registry/path/to/image`. This supports a trailing `*` wildcard, but this is allowed only in text after the `registry/` part. This also supports a trailing `**` wildcard which matches subdirectories of a given entry."
                  }
                },
                "description": "An admission allowlist pattern exempts images from checks by admission rules."
              },
              "description": "Optional. Admission policy allowlisting. A matching admission request will always be permitted. This feature is typically used to exclude Google or third-party infrastructure images from Binary Authorization policies."
            },
            "globalPolicyEvaluationMode": {
              "enum": [
                "GLOBAL_POLICY_EVALUATION_MODE_UNSPECIFIED",
                "ENABLE",
                "DISABLE"
              ],
              "type": "string",
              "description": "Optional. Controls the evaluation of a Google-maintained global admission policy for common system-level images. Images not covered by the global policy will be subject to the project admission policy. This setting has no effect when specified inside a global admission policy.",
              "enumDescriptions": [
                "Not specified: DISABLE is assumed.",
                "Enables global policy evaluation.",
                "Disables global policy evaluation."
              ]
            },
            "kubernetesNamespaceAdmissionRules": {
              "type": "object",
              "description": "Optional. Per-kubernetes-namespace admission rules. K8s namespace spec format: [a-z.-]+, e.g. 'some-namespace'",
              "additionalProperties": {
                "id": "AdmissionRule",
                "type": "object",
                "properties": {
                  "evaluationMode": {
                    "enum": [
                      "EVALUATION_MODE_UNSPECIFIED",
                      "ALWAYS_ALLOW",
                      "REQUIRE_ATTESTATION",
                      "ALWAYS_DENY"
                    ],
                    "type": "string",
                    "description": "Required. How this admission rule will be evaluated.",
                    "enumDescriptions": [
                      "Do not use.",
                      "This rule allows all all pod creations.",
                      "This rule allows a pod creation if all the attestors listed in 'require_attestations_by' have valid attestations for all of the images in the pod spec.",
                      "This rule denies all pod creations."
                    ]
                  },
                  "enforcementMode": {
                    "enum": [
                      "ENFORCEMENT_MODE_UNSPECIFIED",
                      "ENFORCED_BLOCK_AND_AUDIT_LOG",
                      "DRYRUN_AUDIT_LOG_ONLY"
                    ],
                    "type": "string",
                    "description": "Required. The action when a pod creation is denied by the admission rule.",
                    "enumDescriptions": [
                      "Do not use.",
                      "Enforce the admission rule by blocking the pod creation.",
                      "Dryrun mode: Audit logging only. This will allow the pod creation as if the admission request had specified break-glass."
                    ]
                  },
                  "requireAttestationsBy": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Optional. The resource names of the attestors that must attest to a container image, in the format `projects/*/attestors/*`. Each attestor must exist before a policy can reference it. To add an attestor to a policy the principal issuing the policy change request must be able to read the attestor resource. Note: this field must be non-empty when the evaluation_mode field specifies REQUIRE_ATTESTATION, otherwise it must be empty."
                  }
                },
                "description": "An admission rule specifies either that all container images used in a pod creation request must be attested to by one or more attestors, that all pod creations will be allowed, or that all pod creations will be denied. Images matching an admission allowlist pattern are exempted from admission rules and will never block a pod creation."
              }
            },
            "istioServiceIdentityAdmissionRules": {
              "type": "object",
              "description": "Optional. Per-istio-service-identity admission rules. Istio service identity spec format: spiffe:///ns//sa/ or /ns//sa/ e.g. spiffe://example.com/ns/test-ns/sa/default",
              "additionalProperties": {
                "id": "AdmissionRule",
                "type": "object",
                "properties": {
                  "evaluationMode": {
                    "enum": [
                      "EVALUATION_MODE_UNSPECIFIED",
                      "ALWAYS_ALLOW",
                      "REQUIRE_ATTESTATION",
                      "ALWAYS_DENY"
                    ],
                    "type": "string",
                    "description": "Required. How this admission rule will be evaluated.",
                    "enumDescriptions": [
                      "Do not use.",
                      "This rule allows all all pod creations.",
                      "This rule allows a pod creation if all the attestors listed in 'require_attestations_by' have valid attestations for all of the images in the pod spec.",
                      "This rule denies all pod creations."
                    ]
                  },
                  "enforcementMode": {
                    "enum": [
                      "ENFORCEMENT_MODE_UNSPECIFIED",
                      "ENFORCED_BLOCK_AND_AUDIT_LOG",
                      "DRYRUN_AUDIT_LOG_ONLY"
                    ],
                    "type": "string",
                    "description": "Required. The action when a pod creation is denied by the admission rule.",
                    "enumDescriptions": [
                      "Do not use.",
                      "Enforce the admission rule by blocking the pod creation.",
                      "Dryrun mode: Audit logging only. This will allow the pod creation as if the admission request had specified break-glass."
                    ]
                  },
                  "requireAttestationsBy": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Optional. The resource names of the attestors that must attest to a container image, in the format `projects/*/attestors/*`. Each attestor must exist before a policy can reference it. To add an attestor to a policy the principal issuing the policy change request must be able to read the attestor resource. Note: this field must be non-empty when the evaluation_mode field specifies REQUIRE_ATTESTATION, otherwise it must be empty."
                  }
                },
                "description": "An admission rule specifies either that all container images used in a pod creation request must be attested to by one or more attestors, that all pod creations will be allowed, or that all pod creations will be denied. Images matching an admission allowlist pattern are exempted from admission rules and will never block a pod creation."
              }
            },
            "kubernetesServiceAccountAdmissionRules": {
              "type": "object",
              "description": "Optional. Per-kubernetes-service-account admission rules. Service account spec format: `namespace:serviceaccount`. e.g. 'test-ns:default'",
              "additionalProperties": {
                "id": "AdmissionRule",
                "type": "object",
                "properties": {
                  "evaluationMode": {
                    "enum": [
                      "EVALUATION_MODE_UNSPECIFIED",
                      "ALWAYS_ALLOW",
                      "REQUIRE_ATTESTATION",
                      "ALWAYS_DENY"
                    ],
                    "type": "string",
                    "description": "Required. How this admission rule will be evaluated.",
                    "enumDescriptions": [
                      "Do not use.",
                      "This rule allows all all pod creations.",
                      "This rule allows a pod creation if all the attestors listed in 'require_attestations_by' have valid attestations for all of the images in the pod spec.",
                      "This rule denies all pod creations."
                    ]
                  },
                  "enforcementMode": {
                    "enum": [
                      "ENFORCEMENT_MODE_UNSPECIFIED",
                      "ENFORCED_BLOCK_AND_AUDIT_LOG",
                      "DRYRUN_AUDIT_LOG_ONLY"
                    ],
                    "type": "string",
                    "description": "Required. The action when a pod creation is denied by the admission rule.",
                    "enumDescriptions": [
                      "Do not use.",
                      "Enforce the admission rule by blocking the pod creation.",
                      "Dryrun mode: Audit logging only. This will allow the pod creation as if the admission request had specified break-glass."
                    ]
                  },
                  "requireAttestationsBy": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Optional. The resource names of the attestors that must attest to a container image, in the format `projects/*/attestors/*`. Each attestor must exist before a policy can reference it. To add an attestor to a policy the principal issuing the policy change request must be able to read the attestor resource. Note: this field must be non-empty when the evaluation_mode field specifies REQUIRE_ATTESTATION, otherwise it must be empty."
                  }
                },
                "description": "An admission rule specifies either that all container images used in a pod creation request must be attested to by one or more attestors, that all pod creations will be allowed, or that all pod creations will be denied. Images matching an admission allowlist pattern are exempted from admission rules and will never block a pod creation."
              }
            }
          },
          "description": "A policy for container image binary authorization."
        }
      ]
  projects.policy.getIamPolicy:
    description: |-
      Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/binary-authorization/docs/reference/rest/v1/projects.policy/getIamPolicy
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "IamPolicy",
          "type": "object",
          "properties": {
            "etag": {
              "type": "string",
              "format": "byte",
              "description": "`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost."
            },
            "version": {
              "type": "integer",
              "format": "int32",
              "description": "Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies)."
            },
            "bindings": {
              "type": "array",
              "items": {
                "id": "Binding",
                "type": "object",
                "properties": {
                  "role": {
                    "type": "string",
                    "description": "Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`."
                  },
                  "members": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. "
                  },
                  "condition": {
                    "id": "Expr",
                    "type": "object",
                    "properties": {
                      "title": {
                        "type": "string",
                        "description": "Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression."
                      },
                      "location": {
                        "type": "string",
                        "description": "Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file."
                      },
                      "expression": {
                        "type": "string",
                        "description": "Textual representation of an expression in Common Expression Language syntax."
                      },
                      "description": {
                        "type": "string",
                        "description": "Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI."
                      }
                    },
                    "description": "The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies)."
                  }
                },
                "description": "Associates `members` with a `role`."
              },
              "description": "Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member."
            }
          },
          "description": "An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { \"bindings\": [ { \"role\": \"roles/resourcemanager.organizationAdmin\", \"members\": [ \"user:mike@example.com\", \"group:admins@example.com\", \"domain:google.com\", \"serviceAccount:my-project-id@appspot.gserviceaccount.com\" ] }, { \"role\": \"roles/resourcemanager.organizationViewer\", \"members\": [ \"user:eve@example.com\" ], \"condition\": { \"title\": \"expirable access\", \"description\": \"Does not grant access after Sep 2020\", \"expression\": \"request.time < timestamp('2020-10-01T00:00:00.000Z')\", } } ], \"etag\": \"BwWWja0YfJA=\", \"version\": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/)."
        }
      ]
  projects.policy.setIamPolicy:
    description: |-
      Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/binary-authorization/docs/reference/rest/v1/projects.policy/setIamPolicy
    example:
      inputs: [
        {
          "id": "SetIamPolicyRequest",
          "type": "object",
          "properties": {
            "policy": {
              "id": "IamPolicy",
              "type": "object",
              "properties": {
                "etag": {
                  "type": "string",
                  "format": "byte",
                  "description": "`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost."
                },
                "version": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies)."
                },
                "bindings": {
                  "type": "array",
                  "items": {
                    "id": "Binding",
                    "type": "object",
                    "properties": {
                      "role": {
                        "type": "string",
                        "description": "Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`."
                      },
                      "members": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. "
                      },
                      "condition": {
                        "id": "Expr",
                        "type": "object",
                        "properties": {
                          "title": {
                            "type": "string",
                            "description": "Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression."
                          },
                          "location": {
                            "type": "string",
                            "description": "Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file."
                          },
                          "expression": {
                            "type": "string",
                            "description": "Textual representation of an expression in Common Expression Language syntax."
                          },
                          "description": {
                            "type": "string",
                            "description": "Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI."
                          }
                        },
                        "description": "The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies)."
                      }
                    },
                    "description": "Associates `members` with a `role`."
                  },
                  "description": "Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member."
                }
              },
              "description": "An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { \"bindings\": [ { \"role\": \"roles/resourcemanager.organizationAdmin\", \"members\": [ \"user:mike@example.com\", \"group:admins@example.com\", \"domain:google.com\", \"serviceAccount:my-project-id@appspot.gserviceaccount.com\" ] }, { \"role\": \"roles/resourcemanager.organizationViewer\", \"members\": [ \"user:eve@example.com\" ], \"condition\": { \"title\": \"expirable access\", \"description\": \"Does not grant access after Sep 2020\", \"expression\": \"request.time < timestamp('2020-10-01T00:00:00.000Z')\", } } ], \"etag\": \"BwWWja0YfJA=\", \"version\": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/)."
            }
          },
          "description": "Request message for `SetIamPolicy` method."
        }
      ]
      outputs: [
        {
          "id": "IamPolicy",
          "type": "object",
          "properties": {
            "etag": {
              "type": "string",
              "format": "byte",
              "description": "`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost."
            },
            "version": {
              "type": "integer",
              "format": "int32",
              "description": "Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies)."
            },
            "bindings": {
              "type": "array",
              "items": {
                "id": "Binding",
                "type": "object",
                "properties": {
                  "role": {
                    "type": "string",
                    "description": "Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`."
                  },
                  "members": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. "
                  },
                  "condition": {
                    "id": "Expr",
                    "type": "object",
                    "properties": {
                      "title": {
                        "type": "string",
                        "description": "Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression."
                      },
                      "location": {
                        "type": "string",
                        "description": "Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file."
                      },
                      "expression": {
                        "type": "string",
                        "description": "Textual representation of an expression in Common Expression Language syntax."
                      },
                      "description": {
                        "type": "string",
                        "description": "Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI."
                      }
                    },
                    "description": "The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies)."
                  }
                },
                "description": "Associates `members` with a `role`."
              },
              "description": "Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member."
            }
          },
          "description": "An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { \"bindings\": [ { \"role\": \"roles/resourcemanager.organizationAdmin\", \"members\": [ \"user:mike@example.com\", \"group:admins@example.com\", \"domain:google.com\", \"serviceAccount:my-project-id@appspot.gserviceaccount.com\" ] }, { \"role\": \"roles/resourcemanager.organizationViewer\", \"members\": [ \"user:eve@example.com\" ], \"condition\": { \"title\": \"expirable access\", \"description\": \"Does not grant access after Sep 2020\", \"expression\": \"request.time < timestamp('2020-10-01T00:00:00.000Z')\", } } ], \"etag\": \"BwWWja0YfJA=\", \"version\": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/)."
        }
      ]
  projects.policy.testIamPermissions:
    description: |-
      Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/binary-authorization/docs/reference/rest/v1/projects.policy/testIamPermissions
    example:
      inputs: [
        {
          "id": "TestIamPermissionsRequest",
          "type": "object",
          "properties": {
            "permissions": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "The set of permissions to check for the `resource`. Permissions with wildcards (such as '*' or 'storage.*') are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions)."
            }
          },
          "description": "Request message for `TestIamPermissions` method."
        }
      ]
      outputs: [
        {
          "id": "TestIamPermissionsResponse",
          "type": "object",
          "properties": {
            "permissions": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "A subset of `TestPermissionsRequest.permissions` that the caller is allowed."
            }
          },
          "description": "Response message for `TestIamPermissions` method."
        }
      ]
  projects.updatePolicy:
    description: |-
      Creates or updates a project's policy, and returns a copy of the new policy. A policy is always updated as a whole, to avoid race conditions with concurrent policy enforcement (or management!) requests. Returns NOT_FOUND if the project does not exist, INVALID_ARGUMENT if the request is malformed.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/binary-authorization/docs/reference/rest/v1/projects/updatePolicy
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "Policy",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "readOnly": true,
              "description": "Output only. The resource name, in the format `projects/*/policy`. There is at most one policy per project."
            },
            "updateTime": {
              "type": "string",
              "format": "google-datetime",
              "readOnly": true,
              "description": "Output only. Time when the policy was last updated."
            },
            "description": {
              "type": "string",
              "description": "Optional. A descriptive comment."
            },
            "defaultAdmissionRule": {
              "id": "AdmissionRule",
              "type": "object",
              "properties": {
                "evaluationMode": {
                  "enum": [
                    "EVALUATION_MODE_UNSPECIFIED",
                    "ALWAYS_ALLOW",
                    "REQUIRE_ATTESTATION",
                    "ALWAYS_DENY"
                  ],
                  "type": "string",
                  "description": "Required. How this admission rule will be evaluated.",
                  "enumDescriptions": [
                    "Do not use.",
                    "This rule allows all all pod creations.",
                    "This rule allows a pod creation if all the attestors listed in 'require_attestations_by' have valid attestations for all of the images in the pod spec.",
                    "This rule denies all pod creations."
                  ]
                },
                "enforcementMode": {
                  "enum": [
                    "ENFORCEMENT_MODE_UNSPECIFIED",
                    "ENFORCED_BLOCK_AND_AUDIT_LOG",
                    "DRYRUN_AUDIT_LOG_ONLY"
                  ],
                  "type": "string",
                  "description": "Required. The action when a pod creation is denied by the admission rule.",
                  "enumDescriptions": [
                    "Do not use.",
                    "Enforce the admission rule by blocking the pod creation.",
                    "Dryrun mode: Audit logging only. This will allow the pod creation as if the admission request had specified break-glass."
                  ]
                },
                "requireAttestationsBy": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Optional. The resource names of the attestors that must attest to a container image, in the format `projects/*/attestors/*`. Each attestor must exist before a policy can reference it. To add an attestor to a policy the principal issuing the policy change request must be able to read the attestor resource. Note: this field must be non-empty when the evaluation_mode field specifies REQUIRE_ATTESTATION, otherwise it must be empty."
                }
              },
              "description": "An admission rule specifies either that all container images used in a pod creation request must be attested to by one or more attestors, that all pod creations will be allowed, or that all pod creations will be denied. Images matching an admission allowlist pattern are exempted from admission rules and will never block a pod creation."
            },
            "clusterAdmissionRules": {
              "type": "object",
              "description": "Optional. Per-cluster admission rules. Cluster spec format: `location.clusterId`. There can be at most one admission rule per cluster spec. A `location` is either a compute zone (e.g. us-central1-a) or a region (e.g. us-central1). For `clusterId` syntax restrictions see https://cloud.google.com/container-engine/reference/rest/v1/projects.zones.clusters.",
              "additionalProperties": {
                "id": "AdmissionRule",
                "type": "object",
                "properties": {
                  "evaluationMode": {
                    "enum": [
                      "EVALUATION_MODE_UNSPECIFIED",
                      "ALWAYS_ALLOW",
                      "REQUIRE_ATTESTATION",
                      "ALWAYS_DENY"
                    ],
                    "type": "string",
                    "description": "Required. How this admission rule will be evaluated.",
                    "enumDescriptions": [
                      "Do not use.",
                      "This rule allows all all pod creations.",
                      "This rule allows a pod creation if all the attestors listed in 'require_attestations_by' have valid attestations for all of the images in the pod spec.",
                      "This rule denies all pod creations."
                    ]
                  },
                  "enforcementMode": {
                    "enum": [
                      "ENFORCEMENT_MODE_UNSPECIFIED",
                      "ENFORCED_BLOCK_AND_AUDIT_LOG",
                      "DRYRUN_AUDIT_LOG_ONLY"
                    ],
                    "type": "string",
                    "description": "Required. The action when a pod creation is denied by the admission rule.",
                    "enumDescriptions": [
                      "Do not use.",
                      "Enforce the admission rule by blocking the pod creation.",
                      "Dryrun mode: Audit logging only. This will allow the pod creation as if the admission request had specified break-glass."
                    ]
                  },
                  "requireAttestationsBy": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Optional. The resource names of the attestors that must attest to a container image, in the format `projects/*/attestors/*`. Each attestor must exist before a policy can reference it. To add an attestor to a policy the principal issuing the policy change request must be able to read the attestor resource. Note: this field must be non-empty when the evaluation_mode field specifies REQUIRE_ATTESTATION, otherwise it must be empty."
                  }
                },
                "description": "An admission rule specifies either that all container images used in a pod creation request must be attested to by one or more attestors, that all pod creations will be allowed, or that all pod creations will be denied. Images matching an admission allowlist pattern are exempted from admission rules and will never block a pod creation."
              }
            },
            "admissionWhitelistPatterns": {
              "type": "array",
              "items": {
                "id": "AdmissionWhitelistPattern",
                "type": "object",
                "properties": {
                  "namePattern": {
                    "type": "string",
                    "description": "An image name pattern to allowlist, in the form `registry/path/to/image`. This supports a trailing `*` wildcard, but this is allowed only in text after the `registry/` part. This also supports a trailing `**` wildcard which matches subdirectories of a given entry."
                  }
                },
                "description": "An admission allowlist pattern exempts images from checks by admission rules."
              },
              "description": "Optional. Admission policy allowlisting. A matching admission request will always be permitted. This feature is typically used to exclude Google or third-party infrastructure images from Binary Authorization policies."
            },
            "globalPolicyEvaluationMode": {
              "enum": [
                "GLOBAL_POLICY_EVALUATION_MODE_UNSPECIFIED",
                "ENABLE",
                "DISABLE"
              ],
              "type": "string",
              "description": "Optional. Controls the evaluation of a Google-maintained global admission policy for common system-level images. Images not covered by the global policy will be subject to the project admission policy. This setting has no effect when specified inside a global admission policy.",
              "enumDescriptions": [
                "Not specified: DISABLE is assumed.",
                "Enables global policy evaluation.",
                "Disables global policy evaluation."
              ]
            },
            "kubernetesNamespaceAdmissionRules": {
              "type": "object",
              "description": "Optional. Per-kubernetes-namespace admission rules. K8s namespace spec format: [a-z.-]+, e.g. 'some-namespace'",
              "additionalProperties": {
                "id": "AdmissionRule",
                "type": "object",
                "properties": {
                  "evaluationMode": {
                    "enum": [
                      "EVALUATION_MODE_UNSPECIFIED",
                      "ALWAYS_ALLOW",
                      "REQUIRE_ATTESTATION",
                      "ALWAYS_DENY"
                    ],
                    "type": "string",
                    "description": "Required. How this admission rule will be evaluated.",
                    "enumDescriptions": [
                      "Do not use.",
                      "This rule allows all all pod creations.",
                      "This rule allows a pod creation if all the attestors listed in 'require_attestations_by' have valid attestations for all of the images in the pod spec.",
                      "This rule denies all pod creations."
                    ]
                  },
                  "enforcementMode": {
                    "enum": [
                      "ENFORCEMENT_MODE_UNSPECIFIED",
                      "ENFORCED_BLOCK_AND_AUDIT_LOG",
                      "DRYRUN_AUDIT_LOG_ONLY"
                    ],
                    "type": "string",
                    "description": "Required. The action when a pod creation is denied by the admission rule.",
                    "enumDescriptions": [
                      "Do not use.",
                      "Enforce the admission rule by blocking the pod creation.",
                      "Dryrun mode: Audit logging only. This will allow the pod creation as if the admission request had specified break-glass."
                    ]
                  },
                  "requireAttestationsBy": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Optional. The resource names of the attestors that must attest to a container image, in the format `projects/*/attestors/*`. Each attestor must exist before a policy can reference it. To add an attestor to a policy the principal issuing the policy change request must be able to read the attestor resource. Note: this field must be non-empty when the evaluation_mode field specifies REQUIRE_ATTESTATION, otherwise it must be empty."
                  }
                },
                "description": "An admission rule specifies either that all container images used in a pod creation request must be attested to by one or more attestors, that all pod creations will be allowed, or that all pod creations will be denied. Images matching an admission allowlist pattern are exempted from admission rules and will never block a pod creation."
              }
            },
            "istioServiceIdentityAdmissionRules": {
              "type": "object",
              "description": "Optional. Per-istio-service-identity admission rules. Istio service identity spec format: spiffe:///ns//sa/ or /ns//sa/ e.g. spiffe://example.com/ns/test-ns/sa/default",
              "additionalProperties": {
                "id": "AdmissionRule",
                "type": "object",
                "properties": {
                  "evaluationMode": {
                    "enum": [
                      "EVALUATION_MODE_UNSPECIFIED",
                      "ALWAYS_ALLOW",
                      "REQUIRE_ATTESTATION",
                      "ALWAYS_DENY"
                    ],
                    "type": "string",
                    "description": "Required. How this admission rule will be evaluated.",
                    "enumDescriptions": [
                      "Do not use.",
                      "This rule allows all all pod creations.",
                      "This rule allows a pod creation if all the attestors listed in 'require_attestations_by' have valid attestations for all of the images in the pod spec.",
                      "This rule denies all pod creations."
                    ]
                  },
                  "enforcementMode": {
                    "enum": [
                      "ENFORCEMENT_MODE_UNSPECIFIED",
                      "ENFORCED_BLOCK_AND_AUDIT_LOG",
                      "DRYRUN_AUDIT_LOG_ONLY"
                    ],
                    "type": "string",
                    "description": "Required. The action when a pod creation is denied by the admission rule.",
                    "enumDescriptions": [
                      "Do not use.",
                      "Enforce the admission rule by blocking the pod creation.",
                      "Dryrun mode: Audit logging only. This will allow the pod creation as if the admission request had specified break-glass."
                    ]
                  },
                  "requireAttestationsBy": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Optional. The resource names of the attestors that must attest to a container image, in the format `projects/*/attestors/*`. Each attestor must exist before a policy can reference it. To add an attestor to a policy the principal issuing the policy change request must be able to read the attestor resource. Note: this field must be non-empty when the evaluation_mode field specifies REQUIRE_ATTESTATION, otherwise it must be empty."
                  }
                },
                "description": "An admission rule specifies either that all container images used in a pod creation request must be attested to by one or more attestors, that all pod creations will be allowed, or that all pod creations will be denied. Images matching an admission allowlist pattern are exempted from admission rules and will never block a pod creation."
              }
            },
            "kubernetesServiceAccountAdmissionRules": {
              "type": "object",
              "description": "Optional. Per-kubernetes-service-account admission rules. Service account spec format: `namespace:serviceaccount`. e.g. 'test-ns:default'",
              "additionalProperties": {
                "id": "AdmissionRule",
                "type": "object",
                "properties": {
                  "evaluationMode": {
                    "enum": [
                      "EVALUATION_MODE_UNSPECIFIED",
                      "ALWAYS_ALLOW",
                      "REQUIRE_ATTESTATION",
                      "ALWAYS_DENY"
                    ],
                    "type": "string",
                    "description": "Required. How this admission rule will be evaluated.",
                    "enumDescriptions": [
                      "Do not use.",
                      "This rule allows all all pod creations.",
                      "This rule allows a pod creation if all the attestors listed in 'require_attestations_by' have valid attestations for all of the images in the pod spec.",
                      "This rule denies all pod creations."
                    ]
                  },
                  "enforcementMode": {
                    "enum": [
                      "ENFORCEMENT_MODE_UNSPECIFIED",
                      "ENFORCED_BLOCK_AND_AUDIT_LOG",
                      "DRYRUN_AUDIT_LOG_ONLY"
                    ],
                    "type": "string",
                    "description": "Required. The action when a pod creation is denied by the admission rule.",
                    "enumDescriptions": [
                      "Do not use.",
                      "Enforce the admission rule by blocking the pod creation.",
                      "Dryrun mode: Audit logging only. This will allow the pod creation as if the admission request had specified break-glass."
                    ]
                  },
                  "requireAttestationsBy": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Optional. The resource names of the attestors that must attest to a container image, in the format `projects/*/attestors/*`. Each attestor must exist before a policy can reference it. To add an attestor to a policy the principal issuing the policy change request must be able to read the attestor resource. Note: this field must be non-empty when the evaluation_mode field specifies REQUIRE_ATTESTATION, otherwise it must be empty."
                  }
                },
                "description": "An admission rule specifies either that all container images used in a pod creation request must be attested to by one or more attestors, that all pod creations will be allowed, or that all pod creations will be denied. Images matching an admission allowlist pattern are exempted from admission rules and will never block a pod creation."
              }
            }
          },
          "description": "A policy for container image binary authorization."
        }
      ]
  systempolicy.getPolicy:
    description: |-
      Gets the current system policy in the specified location.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/binary-authorization/docs/reference/rest/v1/systempolicy/getPolicy
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "Policy",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "readOnly": true,
              "description": "Output only. The resource name, in the format `projects/*/policy`. There is at most one policy per project."
            },
            "updateTime": {
              "type": "string",
              "format": "google-datetime",
              "readOnly": true,
              "description": "Output only. Time when the policy was last updated."
            },
            "description": {
              "type": "string",
              "description": "Optional. A descriptive comment."
            },
            "defaultAdmissionRule": {
              "id": "AdmissionRule",
              "type": "object",
              "properties": {
                "evaluationMode": {
                  "enum": [
                    "EVALUATION_MODE_UNSPECIFIED",
                    "ALWAYS_ALLOW",
                    "REQUIRE_ATTESTATION",
                    "ALWAYS_DENY"
                  ],
                  "type": "string",
                  "description": "Required. How this admission rule will be evaluated.",
                  "enumDescriptions": [
                    "Do not use.",
                    "This rule allows all all pod creations.",
                    "This rule allows a pod creation if all the attestors listed in 'require_attestations_by' have valid attestations for all of the images in the pod spec.",
                    "This rule denies all pod creations."
                  ]
                },
                "enforcementMode": {
                  "enum": [
                    "ENFORCEMENT_MODE_UNSPECIFIED",
                    "ENFORCED_BLOCK_AND_AUDIT_LOG",
                    "DRYRUN_AUDIT_LOG_ONLY"
                  ],
                  "type": "string",
                  "description": "Required. The action when a pod creation is denied by the admission rule.",
                  "enumDescriptions": [
                    "Do not use.",
                    "Enforce the admission rule by blocking the pod creation.",
                    "Dryrun mode: Audit logging only. This will allow the pod creation as if the admission request had specified break-glass."
                  ]
                },
                "requireAttestationsBy": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Optional. The resource names of the attestors that must attest to a container image, in the format `projects/*/attestors/*`. Each attestor must exist before a policy can reference it. To add an attestor to a policy the principal issuing the policy change request must be able to read the attestor resource. Note: this field must be non-empty when the evaluation_mode field specifies REQUIRE_ATTESTATION, otherwise it must be empty."
                }
              },
              "description": "An admission rule specifies either that all container images used in a pod creation request must be attested to by one or more attestors, that all pod creations will be allowed, or that all pod creations will be denied. Images matching an admission allowlist pattern are exempted from admission rules and will never block a pod creation."
            },
            "clusterAdmissionRules": {
              "type": "object",
              "description": "Optional. Per-cluster admission rules. Cluster spec format: `location.clusterId`. There can be at most one admission rule per cluster spec. A `location` is either a compute zone (e.g. us-central1-a) or a region (e.g. us-central1). For `clusterId` syntax restrictions see https://cloud.google.com/container-engine/reference/rest/v1/projects.zones.clusters.",
              "additionalProperties": {
                "id": "AdmissionRule",
                "type": "object",
                "properties": {
                  "evaluationMode": {
                    "enum": [
                      "EVALUATION_MODE_UNSPECIFIED",
                      "ALWAYS_ALLOW",
                      "REQUIRE_ATTESTATION",
                      "ALWAYS_DENY"
                    ],
                    "type": "string",
                    "description": "Required. How this admission rule will be evaluated.",
                    "enumDescriptions": [
                      "Do not use.",
                      "This rule allows all all pod creations.",
                      "This rule allows a pod creation if all the attestors listed in 'require_attestations_by' have valid attestations for all of the images in the pod spec.",
                      "This rule denies all pod creations."
                    ]
                  },
                  "enforcementMode": {
                    "enum": [
                      "ENFORCEMENT_MODE_UNSPECIFIED",
                      "ENFORCED_BLOCK_AND_AUDIT_LOG",
                      "DRYRUN_AUDIT_LOG_ONLY"
                    ],
                    "type": "string",
                    "description": "Required. The action when a pod creation is denied by the admission rule.",
                    "enumDescriptions": [
                      "Do not use.",
                      "Enforce the admission rule by blocking the pod creation.",
                      "Dryrun mode: Audit logging only. This will allow the pod creation as if the admission request had specified break-glass."
                    ]
                  },
                  "requireAttestationsBy": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Optional. The resource names of the attestors that must attest to a container image, in the format `projects/*/attestors/*`. Each attestor must exist before a policy can reference it. To add an attestor to a policy the principal issuing the policy change request must be able to read the attestor resource. Note: this field must be non-empty when the evaluation_mode field specifies REQUIRE_ATTESTATION, otherwise it must be empty."
                  }
                },
                "description": "An admission rule specifies either that all container images used in a pod creation request must be attested to by one or more attestors, that all pod creations will be allowed, or that all pod creations will be denied. Images matching an admission allowlist pattern are exempted from admission rules and will never block a pod creation."
              }
            },
            "admissionWhitelistPatterns": {
              "type": "array",
              "items": {
                "id": "AdmissionWhitelistPattern",
                "type": "object",
                "properties": {
                  "namePattern": {
                    "type": "string",
                    "description": "An image name pattern to allowlist, in the form `registry/path/to/image`. This supports a trailing `*` wildcard, but this is allowed only in text after the `registry/` part. This also supports a trailing `**` wildcard which matches subdirectories of a given entry."
                  }
                },
                "description": "An admission allowlist pattern exempts images from checks by admission rules."
              },
              "description": "Optional. Admission policy allowlisting. A matching admission request will always be permitted. This feature is typically used to exclude Google or third-party infrastructure images from Binary Authorization policies."
            },
            "globalPolicyEvaluationMode": {
              "enum": [
                "GLOBAL_POLICY_EVALUATION_MODE_UNSPECIFIED",
                "ENABLE",
                "DISABLE"
              ],
              "type": "string",
              "description": "Optional. Controls the evaluation of a Google-maintained global admission policy for common system-level images. Images not covered by the global policy will be subject to the project admission policy. This setting has no effect when specified inside a global admission policy.",
              "enumDescriptions": [
                "Not specified: DISABLE is assumed.",
                "Enables global policy evaluation.",
                "Disables global policy evaluation."
              ]
            },
            "kubernetesNamespaceAdmissionRules": {
              "type": "object",
              "description": "Optional. Per-kubernetes-namespace admission rules. K8s namespace spec format: [a-z.-]+, e.g. 'some-namespace'",
              "additionalProperties": {
                "id": "AdmissionRule",
                "type": "object",
                "properties": {
                  "evaluationMode": {
                    "enum": [
                      "EVALUATION_MODE_UNSPECIFIED",
                      "ALWAYS_ALLOW",
                      "REQUIRE_ATTESTATION",
                      "ALWAYS_DENY"
                    ],
                    "type": "string",
                    "description": "Required. How this admission rule will be evaluated.",
                    "enumDescriptions": [
                      "Do not use.",
                      "This rule allows all all pod creations.",
                      "This rule allows a pod creation if all the attestors listed in 'require_attestations_by' have valid attestations for all of the images in the pod spec.",
                      "This rule denies all pod creations."
                    ]
                  },
                  "enforcementMode": {
                    "enum": [
                      "ENFORCEMENT_MODE_UNSPECIFIED",
                      "ENFORCED_BLOCK_AND_AUDIT_LOG",
                      "DRYRUN_AUDIT_LOG_ONLY"
                    ],
                    "type": "string",
                    "description": "Required. The action when a pod creation is denied by the admission rule.",
                    "enumDescriptions": [
                      "Do not use.",
                      "Enforce the admission rule by blocking the pod creation.",
                      "Dryrun mode: Audit logging only. This will allow the pod creation as if the admission request had specified break-glass."
                    ]
                  },
                  "requireAttestationsBy": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Optional. The resource names of the attestors that must attest to a container image, in the format `projects/*/attestors/*`. Each attestor must exist before a policy can reference it. To add an attestor to a policy the principal issuing the policy change request must be able to read the attestor resource. Note: this field must be non-empty when the evaluation_mode field specifies REQUIRE_ATTESTATION, otherwise it must be empty."
                  }
                },
                "description": "An admission rule specifies either that all container images used in a pod creation request must be attested to by one or more attestors, that all pod creations will be allowed, or that all pod creations will be denied. Images matching an admission allowlist pattern are exempted from admission rules and will never block a pod creation."
              }
            },
            "istioServiceIdentityAdmissionRules": {
              "type": "object",
              "description": "Optional. Per-istio-service-identity admission rules. Istio service identity spec format: spiffe:///ns//sa/ or /ns//sa/ e.g. spiffe://example.com/ns/test-ns/sa/default",
              "additionalProperties": {
                "id": "AdmissionRule",
                "type": "object",
                "properties": {
                  "evaluationMode": {
                    "enum": [
                      "EVALUATION_MODE_UNSPECIFIED",
                      "ALWAYS_ALLOW",
                      "REQUIRE_ATTESTATION",
                      "ALWAYS_DENY"
                    ],
                    "type": "string",
                    "description": "Required. How this admission rule will be evaluated.",
                    "enumDescriptions": [
                      "Do not use.",
                      "This rule allows all all pod creations.",
                      "This rule allows a pod creation if all the attestors listed in 'require_attestations_by' have valid attestations for all of the images in the pod spec.",
                      "This rule denies all pod creations."
                    ]
                  },
                  "enforcementMode": {
                    "enum": [
                      "ENFORCEMENT_MODE_UNSPECIFIED",
                      "ENFORCED_BLOCK_AND_AUDIT_LOG",
                      "DRYRUN_AUDIT_LOG_ONLY"
                    ],
                    "type": "string",
                    "description": "Required. The action when a pod creation is denied by the admission rule.",
                    "enumDescriptions": [
                      "Do not use.",
                      "Enforce the admission rule by blocking the pod creation.",
                      "Dryrun mode: Audit logging only. This will allow the pod creation as if the admission request had specified break-glass."
                    ]
                  },
                  "requireAttestationsBy": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Optional. The resource names of the attestors that must attest to a container image, in the format `projects/*/attestors/*`. Each attestor must exist before a policy can reference it. To add an attestor to a policy the principal issuing the policy change request must be able to read the attestor resource. Note: this field must be non-empty when the evaluation_mode field specifies REQUIRE_ATTESTATION, otherwise it must be empty."
                  }
                },
                "description": "An admission rule specifies either that all container images used in a pod creation request must be attested to by one or more attestors, that all pod creations will be allowed, or that all pod creations will be denied. Images matching an admission allowlist pattern are exempted from admission rules and will never block a pod creation."
              }
            },
            "kubernetesServiceAccountAdmissionRules": {
              "type": "object",
              "description": "Optional. Per-kubernetes-service-account admission rules. Service account spec format: `namespace:serviceaccount`. e.g. 'test-ns:default'",
              "additionalProperties": {
                "id": "AdmissionRule",
                "type": "object",
                "properties": {
                  "evaluationMode": {
                    "enum": [
                      "EVALUATION_MODE_UNSPECIFIED",
                      "ALWAYS_ALLOW",
                      "REQUIRE_ATTESTATION",
                      "ALWAYS_DENY"
                    ],
                    "type": "string",
                    "description": "Required. How this admission rule will be evaluated.",
                    "enumDescriptions": [
                      "Do not use.",
                      "This rule allows all all pod creations.",
                      "This rule allows a pod creation if all the attestors listed in 'require_attestations_by' have valid attestations for all of the images in the pod spec.",
                      "This rule denies all pod creations."
                    ]
                  },
                  "enforcementMode": {
                    "enum": [
                      "ENFORCEMENT_MODE_UNSPECIFIED",
                      "ENFORCED_BLOCK_AND_AUDIT_LOG",
                      "DRYRUN_AUDIT_LOG_ONLY"
                    ],
                    "type": "string",
                    "description": "Required. The action when a pod creation is denied by the admission rule.",
                    "enumDescriptions": [
                      "Do not use.",
                      "Enforce the admission rule by blocking the pod creation.",
                      "Dryrun mode: Audit logging only. This will allow the pod creation as if the admission request had specified break-glass."
                    ]
                  },
                  "requireAttestationsBy": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Optional. The resource names of the attestors that must attest to a container image, in the format `projects/*/attestors/*`. Each attestor must exist before a policy can reference it. To add an attestor to a policy the principal issuing the policy change request must be able to read the attestor resource. Note: this field must be non-empty when the evaluation_mode field specifies REQUIRE_ATTESTATION, otherwise it must be empty."
                  }
                },
                "description": "An admission rule specifies either that all container images used in a pod creation request must be attested to by one or more attestors, that all pod creations will be allowed, or that all pod creations will be denied. Images matching an admission allowlist pattern are exempted from admission rules and will never block a pod creation."
              }
            }
          },
          "description": "A policy for container image binary authorization."
        }
      ]