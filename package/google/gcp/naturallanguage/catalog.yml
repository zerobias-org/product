Product:
  name: GCP Natural Language
  versions: [1.0.0]
  package: google.gcp.naturallanguage
  description: |-
    Cloud Natural Language
  link: https://cloud.google.com/natural-language
  contentType: json
Operations:
  documents.analyzeEntities:
    description: |-
      Finds named entities (currently proper names and common nouns) in the text along with entity types, salience, mentions for each entity, and other properties.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/natural-language/docs/reference/rest/v1/documents/analyzeEntities
    example:
      inputs: [
        {
          "id": "AnalyzeEntitiesRequest",
          "type": "object",
          "properties": {
            "document": {
              "id": "Document",
              "type": "object",
              "properties": {
                "type": {
                  "enum": [
                    "TYPE_UNSPECIFIED",
                    "PLAIN_TEXT",
                    "HTML"
                  ],
                  "type": "string",
                  "description": "Required. If the type is not set or is `TYPE_UNSPECIFIED`, returns an `INVALID_ARGUMENT` error.",
                  "enumDescriptions": [
                    "The content type is not specified.",
                    "Plain text",
                    "HTML"
                  ]
                },
                "content": {
                  "type": "string",
                  "description": "The content of the input in string format. Cloud audit logging exempt since it is based on user data."
                },
                "language": {
                  "type": "string",
                  "description": "The language of the document (if not specified, the language is automatically detected). Both ISO and BCP-47 language codes are accepted. [Language Support](https://cloud.google.com/natural-language/docs/languages) lists currently supported languages for each API method. If the language (either specified by the caller or automatically detected) is not supported by the called API method, an `INVALID_ARGUMENT` error is returned."
                },
                "gcsContentUri": {
                  "type": "string",
                  "description": "The Google Cloud Storage URI where the file content is located. This URI must be of the form: gs://bucket_name/object_name. For more details, see https://cloud.google.com/storage/docs/reference-uris. NOTE: Cloud Storage object versioning is not supported."
                }
              },
              "description": "Required. Input document."
            },
            "encodingType": {
              "enum": [
                "NONE",
                "UTF8",
                "UTF16",
                "UTF32"
              ],
              "type": "string",
              "description": "The encoding type used by the API to calculate offsets.",
              "enumDescriptions": [
                "If `EncodingType` is not specified, encoding-dependent information (such as `begin_offset`) will be set at `-1`.",
                "Encoding-dependent information (such as `begin_offset`) is calculated based on the UTF-8 encoding of the input. C++ and Go are examples of languages that use this encoding natively.",
                "Encoding-dependent information (such as `begin_offset`) is calculated based on the UTF-16 encoding of the input. Java and JavaScript are examples of languages that use this encoding natively.",
                "Encoding-dependent information (such as `begin_offset`) is calculated based on the UTF-32 encoding of the input. Python is an example of a language that uses this encoding natively."
              ]
            }
          },
          "description": "The entity analysis request message."
        }
      ]
      outputs: [
        {
          "id": "AnalyzeEntitiesResponse",
          "type": "object",
          "properties": {
            "entities": {
              "type": "array",
              "items": {
                "id": "Entity",
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The representative name for the entity."
                  },
                  "type": {
                    "enum": [
                      "UNKNOWN",
                      "PERSON",
                      "LOCATION",
                      "ORGANIZATION",
                      "EVENT",
                      "WORK_OF_ART",
                      "CONSUMER_GOOD",
                      "OTHER",
                      "PHONE_NUMBER",
                      "ADDRESS",
                      "DATE",
                      "NUMBER",
                      "PRICE"
                    ],
                    "type": "string",
                    "description": "The entity type.",
                    "enumDescriptions": [
                      "Unknown",
                      "Person",
                      "Location",
                      "Organization",
                      "Event",
                      "Artwork",
                      "Consumer product",
                      "Other types of entities",
                      "Phone number The metadata lists the phone number, formatted according to local convention, plus whichever additional elements appear in the text: * `number` - the actual number, broken down into sections as per local convention * `national_prefix` - country code, if detected * `area_code` - region or area code, if detected * `extension` - phone extension (to be dialed after connection), if detected",
                      "Address The metadata identifies the street number and locality plus whichever additional elements appear in the text: * `street_number` - street number * `locality` - city or town * `street_name` - street/route name, if detected * `postal_code` - postal code, if detected * `country` - country, if detected< * `broad_region` - administrative area, such as the state, if detected * `narrow_region` - smaller administrative area, such as county, if detected * `sublocality` - used in Asian addresses to demark a district within a city, if detected",
                      "Date The metadata identifies the components of the date: * `year` - four digit year, if detected * `month` - two digit month number, if detected * `day` - two digit day number, if detected",
                      "Number The metadata is the number itself.",
                      "Price The metadata identifies the `value` and `currency`."
                    ]
                  },
                  "mentions": {
                    "type": "array",
                    "items": {
                      "id": "EntityMention",
                      "type": "object",
                      "properties": {
                        "text": {
                          "id": "TextSpan",
                          "type": "object",
                          "properties": {
                            "content": {
                              "type": "string",
                              "description": "The content of the output text."
                            },
                            "beginOffset": {
                              "type": "integer",
                              "format": "int32",
                              "description": "The API calculates the beginning offset of the content in the original document according to the EncodingType specified in the API request."
                            }
                          },
                          "description": "The mention text."
                        },
                        "type": {
                          "enum": [
                            "TYPE_UNKNOWN",
                            "PROPER",
                            "COMMON"
                          ],
                          "type": "string",
                          "description": "The type of the entity mention.",
                          "enumDescriptions": [
                            "Unknown",
                            "Proper name",
                            "Common noun (or noun compound)"
                          ]
                        },
                        "sentiment": {
                          "id": "Sentiment",
                          "type": "object",
                          "properties": {
                            "score": {
                              "type": "number",
                              "format": "float",
                              "description": "Sentiment score between -1.0 (negative sentiment) and 1.0 (positive sentiment)."
                            },
                            "magnitude": {
                              "type": "number",
                              "format": "float",
                              "description": "A non-negative number in the [0, +inf) range, which represents the absolute magnitude of sentiment regardless of score (positive or negative)."
                            }
                          },
                          "description": "For calls to AnalyzeEntitySentiment or if AnnotateTextRequest.Features.extract_entity_sentiment is set to true, this field will contain the sentiment expressed for this mention of the entity in the provided document."
                        }
                      },
                      "description": "Represents a mention for an entity in the text. Currently, proper noun mentions are supported."
                    },
                    "description": "The mentions of this entity in the input document. The API currently supports proper noun mentions."
                  },
                  "metadata": {
                    "type": "object",
                    "description": "Metadata associated with the entity. For most entity types, the metadata is a Wikipedia URL (`wikipedia_url`) and Knowledge Graph MID (`mid`), if they are available. For the metadata associated with other entity types, see the Type table below.",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "salience": {
                    "type": "number",
                    "format": "float",
                    "description": "The salience score associated with the entity in the [0, 1.0] range. The salience score for an entity provides information about the importance or centrality of that entity to the entire document text. Scores closer to 0 are less salient, while scores closer to 1.0 are highly salient."
                  },
                  "sentiment": {
                    "id": "Sentiment",
                    "type": "object",
                    "properties": {
                      "score": {
                        "type": "number",
                        "format": "float",
                        "description": "Sentiment score between -1.0 (negative sentiment) and 1.0 (positive sentiment)."
                      },
                      "magnitude": {
                        "type": "number",
                        "format": "float",
                        "description": "A non-negative number in the [0, +inf) range, which represents the absolute magnitude of sentiment regardless of score (positive or negative)."
                      }
                    },
                    "description": "For calls to AnalyzeEntitySentiment or if AnnotateTextRequest.Features.extract_entity_sentiment is set to true, this field will contain the aggregate sentiment expressed for this entity in the provided document."
                  }
                },
                "description": "Represents a phrase in the text that is a known entity, such as a person, an organization, or location. The API associates information, such as salience and mentions, with entities."
              },
              "description": "The recognized entities in the input document."
            },
            "language": {
              "type": "string",
              "description": "The language of the text, which will be the same as the language specified in the request or, if not specified, the automatically-detected language. See Document.language field for more details."
            }
          },
          "description": "The entity analysis response message."
        }
      ]
  documents.analyzeEntitySentiment:
    description: |-
      Finds entities, similar to AnalyzeEntities in the text and analyzes sentiment associated with each entity and its mentions.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/natural-language/docs/reference/rest/v1/documents/analyzeEntitySentiment
    example:
      inputs: [
        {
          "id": "AnalyzeEntitySentimentRequest",
          "type": "object",
          "properties": {
            "document": {
              "id": "Document",
              "type": "object",
              "properties": {
                "type": {
                  "enum": [
                    "TYPE_UNSPECIFIED",
                    "PLAIN_TEXT",
                    "HTML"
                  ],
                  "type": "string",
                  "description": "Required. If the type is not set or is `TYPE_UNSPECIFIED`, returns an `INVALID_ARGUMENT` error.",
                  "enumDescriptions": [
                    "The content type is not specified.",
                    "Plain text",
                    "HTML"
                  ]
                },
                "content": {
                  "type": "string",
                  "description": "The content of the input in string format. Cloud audit logging exempt since it is based on user data."
                },
                "language": {
                  "type": "string",
                  "description": "The language of the document (if not specified, the language is automatically detected). Both ISO and BCP-47 language codes are accepted. [Language Support](https://cloud.google.com/natural-language/docs/languages) lists currently supported languages for each API method. If the language (either specified by the caller or automatically detected) is not supported by the called API method, an `INVALID_ARGUMENT` error is returned."
                },
                "gcsContentUri": {
                  "type": "string",
                  "description": "The Google Cloud Storage URI where the file content is located. This URI must be of the form: gs://bucket_name/object_name. For more details, see https://cloud.google.com/storage/docs/reference-uris. NOTE: Cloud Storage object versioning is not supported."
                }
              },
              "description": "Required. Input document."
            },
            "encodingType": {
              "enum": [
                "NONE",
                "UTF8",
                "UTF16",
                "UTF32"
              ],
              "type": "string",
              "description": "The encoding type used by the API to calculate offsets.",
              "enumDescriptions": [
                "If `EncodingType` is not specified, encoding-dependent information (such as `begin_offset`) will be set at `-1`.",
                "Encoding-dependent information (such as `begin_offset`) is calculated based on the UTF-8 encoding of the input. C++ and Go are examples of languages that use this encoding natively.",
                "Encoding-dependent information (such as `begin_offset`) is calculated based on the UTF-16 encoding of the input. Java and JavaScript are examples of languages that use this encoding natively.",
                "Encoding-dependent information (such as `begin_offset`) is calculated based on the UTF-32 encoding of the input. Python is an example of a language that uses this encoding natively."
              ]
            }
          },
          "description": "The entity-level sentiment analysis request message."
        }
      ]
      outputs: [
        {
          "id": "AnalyzeEntitySentimentResponse",
          "type": "object",
          "properties": {
            "entities": {
              "type": "array",
              "items": {
                "id": "Entity",
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The representative name for the entity."
                  },
                  "type": {
                    "enum": [
                      "UNKNOWN",
                      "PERSON",
                      "LOCATION",
                      "ORGANIZATION",
                      "EVENT",
                      "WORK_OF_ART",
                      "CONSUMER_GOOD",
                      "OTHER",
                      "PHONE_NUMBER",
                      "ADDRESS",
                      "DATE",
                      "NUMBER",
                      "PRICE"
                    ],
                    "type": "string",
                    "description": "The entity type.",
                    "enumDescriptions": [
                      "Unknown",
                      "Person",
                      "Location",
                      "Organization",
                      "Event",
                      "Artwork",
                      "Consumer product",
                      "Other types of entities",
                      "Phone number The metadata lists the phone number, formatted according to local convention, plus whichever additional elements appear in the text: * `number` - the actual number, broken down into sections as per local convention * `national_prefix` - country code, if detected * `area_code` - region or area code, if detected * `extension` - phone extension (to be dialed after connection), if detected",
                      "Address The metadata identifies the street number and locality plus whichever additional elements appear in the text: * `street_number` - street number * `locality` - city or town * `street_name` - street/route name, if detected * `postal_code` - postal code, if detected * `country` - country, if detected< * `broad_region` - administrative area, such as the state, if detected * `narrow_region` - smaller administrative area, such as county, if detected * `sublocality` - used in Asian addresses to demark a district within a city, if detected",
                      "Date The metadata identifies the components of the date: * `year` - four digit year, if detected * `month` - two digit month number, if detected * `day` - two digit day number, if detected",
                      "Number The metadata is the number itself.",
                      "Price The metadata identifies the `value` and `currency`."
                    ]
                  },
                  "mentions": {
                    "type": "array",
                    "items": {
                      "id": "EntityMention",
                      "type": "object",
                      "properties": {
                        "text": {
                          "id": "TextSpan",
                          "type": "object",
                          "properties": {
                            "content": {
                              "type": "string",
                              "description": "The content of the output text."
                            },
                            "beginOffset": {
                              "type": "integer",
                              "format": "int32",
                              "description": "The API calculates the beginning offset of the content in the original document according to the EncodingType specified in the API request."
                            }
                          },
                          "description": "The mention text."
                        },
                        "type": {
                          "enum": [
                            "TYPE_UNKNOWN",
                            "PROPER",
                            "COMMON"
                          ],
                          "type": "string",
                          "description": "The type of the entity mention.",
                          "enumDescriptions": [
                            "Unknown",
                            "Proper name",
                            "Common noun (or noun compound)"
                          ]
                        },
                        "sentiment": {
                          "id": "Sentiment",
                          "type": "object",
                          "properties": {
                            "score": {
                              "type": "number",
                              "format": "float",
                              "description": "Sentiment score between -1.0 (negative sentiment) and 1.0 (positive sentiment)."
                            },
                            "magnitude": {
                              "type": "number",
                              "format": "float",
                              "description": "A non-negative number in the [0, +inf) range, which represents the absolute magnitude of sentiment regardless of score (positive or negative)."
                            }
                          },
                          "description": "For calls to AnalyzeEntitySentiment or if AnnotateTextRequest.Features.extract_entity_sentiment is set to true, this field will contain the sentiment expressed for this mention of the entity in the provided document."
                        }
                      },
                      "description": "Represents a mention for an entity in the text. Currently, proper noun mentions are supported."
                    },
                    "description": "The mentions of this entity in the input document. The API currently supports proper noun mentions."
                  },
                  "metadata": {
                    "type": "object",
                    "description": "Metadata associated with the entity. For most entity types, the metadata is a Wikipedia URL (`wikipedia_url`) and Knowledge Graph MID (`mid`), if they are available. For the metadata associated with other entity types, see the Type table below.",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "salience": {
                    "type": "number",
                    "format": "float",
                    "description": "The salience score associated with the entity in the [0, 1.0] range. The salience score for an entity provides information about the importance or centrality of that entity to the entire document text. Scores closer to 0 are less salient, while scores closer to 1.0 are highly salient."
                  },
                  "sentiment": {
                    "id": "Sentiment",
                    "type": "object",
                    "properties": {
                      "score": {
                        "type": "number",
                        "format": "float",
                        "description": "Sentiment score between -1.0 (negative sentiment) and 1.0 (positive sentiment)."
                      },
                      "magnitude": {
                        "type": "number",
                        "format": "float",
                        "description": "A non-negative number in the [0, +inf) range, which represents the absolute magnitude of sentiment regardless of score (positive or negative)."
                      }
                    },
                    "description": "For calls to AnalyzeEntitySentiment or if AnnotateTextRequest.Features.extract_entity_sentiment is set to true, this field will contain the aggregate sentiment expressed for this entity in the provided document."
                  }
                },
                "description": "Represents a phrase in the text that is a known entity, such as a person, an organization, or location. The API associates information, such as salience and mentions, with entities."
              },
              "description": "The recognized entities in the input document with associated sentiments."
            },
            "language": {
              "type": "string",
              "description": "The language of the text, which will be the same as the language specified in the request or, if not specified, the automatically-detected language. See Document.language field for more details."
            }
          },
          "description": "The entity-level sentiment analysis response message."
        }
      ]
  documents.analyzeSentiment:
    description: |-
      Analyzes the sentiment of the provided text.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/natural-language/docs/reference/rest/v1/documents/analyzeSentiment
    example:
      inputs: [
        {
          "id": "AnalyzeSentimentRequest",
          "type": "object",
          "properties": {
            "document": {
              "id": "Document",
              "type": "object",
              "properties": {
                "type": {
                  "enum": [
                    "TYPE_UNSPECIFIED",
                    "PLAIN_TEXT",
                    "HTML"
                  ],
                  "type": "string",
                  "description": "Required. If the type is not set or is `TYPE_UNSPECIFIED`, returns an `INVALID_ARGUMENT` error.",
                  "enumDescriptions": [
                    "The content type is not specified.",
                    "Plain text",
                    "HTML"
                  ]
                },
                "content": {
                  "type": "string",
                  "description": "The content of the input in string format. Cloud audit logging exempt since it is based on user data."
                },
                "language": {
                  "type": "string",
                  "description": "The language of the document (if not specified, the language is automatically detected). Both ISO and BCP-47 language codes are accepted. [Language Support](https://cloud.google.com/natural-language/docs/languages) lists currently supported languages for each API method. If the language (either specified by the caller or automatically detected) is not supported by the called API method, an `INVALID_ARGUMENT` error is returned."
                },
                "gcsContentUri": {
                  "type": "string",
                  "description": "The Google Cloud Storage URI where the file content is located. This URI must be of the form: gs://bucket_name/object_name. For more details, see https://cloud.google.com/storage/docs/reference-uris. NOTE: Cloud Storage object versioning is not supported."
                }
              },
              "description": "Required. Input document."
            },
            "encodingType": {
              "enum": [
                "NONE",
                "UTF8",
                "UTF16",
                "UTF32"
              ],
              "type": "string",
              "description": "The encoding type used by the API to calculate sentence offsets.",
              "enumDescriptions": [
                "If `EncodingType` is not specified, encoding-dependent information (such as `begin_offset`) will be set at `-1`.",
                "Encoding-dependent information (such as `begin_offset`) is calculated based on the UTF-8 encoding of the input. C++ and Go are examples of languages that use this encoding natively.",
                "Encoding-dependent information (such as `begin_offset`) is calculated based on the UTF-16 encoding of the input. Java and JavaScript are examples of languages that use this encoding natively.",
                "Encoding-dependent information (such as `begin_offset`) is calculated based on the UTF-32 encoding of the input. Python is an example of a language that uses this encoding natively."
              ]
            }
          },
          "description": "The sentiment analysis request message."
        }
      ]
      outputs: [
        {
          "id": "AnalyzeSentimentResponse",
          "type": "object",
          "properties": {
            "language": {
              "type": "string",
              "description": "The language of the text, which will be the same as the language specified in the request or, if not specified, the automatically-detected language. See Document.language field for more details."
            },
            "sentences": {
              "type": "array",
              "items": {
                "id": "Sentence",
                "type": "object",
                "properties": {
                  "text": {
                    "id": "TextSpan",
                    "type": "object",
                    "properties": {
                      "content": {
                        "type": "string",
                        "description": "The content of the output text."
                      },
                      "beginOffset": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The API calculates the beginning offset of the content in the original document according to the EncodingType specified in the API request."
                      }
                    },
                    "description": "The sentence text."
                  },
                  "sentiment": {
                    "id": "Sentiment",
                    "type": "object",
                    "properties": {
                      "score": {
                        "type": "number",
                        "format": "float",
                        "description": "Sentiment score between -1.0 (negative sentiment) and 1.0 (positive sentiment)."
                      },
                      "magnitude": {
                        "type": "number",
                        "format": "float",
                        "description": "A non-negative number in the [0, +inf) range, which represents the absolute magnitude of sentiment regardless of score (positive or negative)."
                      }
                    },
                    "description": "For calls to AnalyzeSentiment or if AnnotateTextRequest.Features.extract_document_sentiment is set to true, this field will contain the sentiment for the sentence."
                  }
                },
                "description": "Represents a sentence in the input document."
              },
              "description": "The sentiment for all the sentences in the document."
            },
            "documentSentiment": {
              "id": "Sentiment",
              "type": "object",
              "properties": {
                "score": {
                  "type": "number",
                  "format": "float",
                  "description": "Sentiment score between -1.0 (negative sentiment) and 1.0 (positive sentiment)."
                },
                "magnitude": {
                  "type": "number",
                  "format": "float",
                  "description": "A non-negative number in the [0, +inf) range, which represents the absolute magnitude of sentiment regardless of score (positive or negative)."
                }
              },
              "description": "The overall sentiment of the input document."
            }
          },
          "description": "The sentiment analysis response message."
        }
      ]
  documents.analyzeSyntax:
    description: |-
      Analyzes the syntax of the text and provides sentence boundaries and tokenization along with part of speech tags, dependency trees, and other properties.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/natural-language/docs/reference/rest/v1/documents/analyzeSyntax
    example:
      inputs: [
        {
          "id": "AnalyzeSyntaxRequest",
          "type": "object",
          "properties": {
            "document": {
              "id": "Document",
              "type": "object",
              "properties": {
                "type": {
                  "enum": [
                    "TYPE_UNSPECIFIED",
                    "PLAIN_TEXT",
                    "HTML"
                  ],
                  "type": "string",
                  "description": "Required. If the type is not set or is `TYPE_UNSPECIFIED`, returns an `INVALID_ARGUMENT` error.",
                  "enumDescriptions": [
                    "The content type is not specified.",
                    "Plain text",
                    "HTML"
                  ]
                },
                "content": {
                  "type": "string",
                  "description": "The content of the input in string format. Cloud audit logging exempt since it is based on user data."
                },
                "language": {
                  "type": "string",
                  "description": "The language of the document (if not specified, the language is automatically detected). Both ISO and BCP-47 language codes are accepted. [Language Support](https://cloud.google.com/natural-language/docs/languages) lists currently supported languages for each API method. If the language (either specified by the caller or automatically detected) is not supported by the called API method, an `INVALID_ARGUMENT` error is returned."
                },
                "gcsContentUri": {
                  "type": "string",
                  "description": "The Google Cloud Storage URI where the file content is located. This URI must be of the form: gs://bucket_name/object_name. For more details, see https://cloud.google.com/storage/docs/reference-uris. NOTE: Cloud Storage object versioning is not supported."
                }
              },
              "description": "Required. Input document."
            },
            "encodingType": {
              "enum": [
                "NONE",
                "UTF8",
                "UTF16",
                "UTF32"
              ],
              "type": "string",
              "description": "The encoding type used by the API to calculate offsets.",
              "enumDescriptions": [
                "If `EncodingType` is not specified, encoding-dependent information (such as `begin_offset`) will be set at `-1`.",
                "Encoding-dependent information (such as `begin_offset`) is calculated based on the UTF-8 encoding of the input. C++ and Go are examples of languages that use this encoding natively.",
                "Encoding-dependent information (such as `begin_offset`) is calculated based on the UTF-16 encoding of the input. Java and JavaScript are examples of languages that use this encoding natively.",
                "Encoding-dependent information (such as `begin_offset`) is calculated based on the UTF-32 encoding of the input. Python is an example of a language that uses this encoding natively."
              ]
            }
          },
          "description": "The syntax analysis request message."
        }
      ]
      outputs: [
        {
          "id": "AnalyzeSyntaxResponse",
          "type": "object",
          "properties": {
            "tokens": {
              "type": "array",
              "items": {
                "id": "Token",
                "type": "object",
                "properties": {
                  "text": {
                    "id": "TextSpan",
                    "type": "object",
                    "properties": {
                      "content": {
                        "type": "string",
                        "description": "The content of the output text."
                      },
                      "beginOffset": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The API calculates the beginning offset of the content in the original document according to the EncodingType specified in the API request."
                      }
                    },
                    "description": "The token text."
                  },
                  "lemma": {
                    "type": "string",
                    "description": "[Lemma](https://en.wikipedia.org/wiki/Lemma_%28morphology%29) of the token."
                  },
                  "partOfSpeech": {
                    "id": "PartOfSpeech",
                    "type": "object",
                    "properties": {
                      "tag": {
                        "enum": [
                          "UNKNOWN",
                          "ADJ",
                          "ADP",
                          "ADV",
                          "CONJ",
                          "DET",
                          "NOUN",
                          "NUM",
                          "PRON",
                          "PRT",
                          "PUNCT",
                          "VERB",
                          "X",
                          "AFFIX"
                        ],
                        "type": "string",
                        "description": "The part of speech tag.",
                        "enumDescriptions": [
                          "Unknown",
                          "Adjective",
                          "Adposition (preposition and postposition)",
                          "Adverb",
                          "Conjunction",
                          "Determiner",
                          "Noun (common and proper)",
                          "Cardinal number",
                          "Pronoun",
                          "Particle or other function word",
                          "Punctuation",
                          "Verb (all tenses and modes)",
                          "Other: foreign words, typos, abbreviations",
                          "Affix"
                        ]
                      },
                      "case": {
                        "enum": [
                          "CASE_UNKNOWN",
                          "ACCUSATIVE",
                          "ADVERBIAL",
                          "COMPLEMENTIVE",
                          "DATIVE",
                          "GENITIVE",
                          "INSTRUMENTAL",
                          "LOCATIVE",
                          "NOMINATIVE",
                          "OBLIQUE",
                          "PARTITIVE",
                          "PREPOSITIONAL",
                          "REFLEXIVE_CASE",
                          "RELATIVE_CASE",
                          "VOCATIVE"
                        ],
                        "type": "string",
                        "description": "The grammatical case.",
                        "enumDescriptions": [
                          "Case is not applicable in the analyzed language or is not predicted.",
                          "Accusative",
                          "Adverbial",
                          "Complementive",
                          "Dative",
                          "Genitive",
                          "Instrumental",
                          "Locative",
                          "Nominative",
                          "Oblique",
                          "Partitive",
                          "Prepositional",
                          "Reflexive",
                          "Relative",
                          "Vocative"
                        ]
                      },
                      "form": {
                        "enum": [
                          "FORM_UNKNOWN",
                          "ADNOMIAL",
                          "AUXILIARY",
                          "COMPLEMENTIZER",
                          "FINAL_ENDING",
                          "GERUND",
                          "REALIS",
                          "IRREALIS",
                          "SHORT",
                          "LONG",
                          "ORDER",
                          "SPECIFIC"
                        ],
                        "type": "string",
                        "description": "The grammatical form.",
                        "enumDescriptions": [
                          "Form is not applicable in the analyzed language or is not predicted.",
                          "Adnomial",
                          "Auxiliary",
                          "Complementizer",
                          "Final ending",
                          "Gerund",
                          "Realis",
                          "Irrealis",
                          "Short form",
                          "Long form",
                          "Order form",
                          "Specific form"
                        ]
                      },
                      "mood": {
                        "enum": [
                          "MOOD_UNKNOWN",
                          "CONDITIONAL_MOOD",
                          "IMPERATIVE",
                          "INDICATIVE",
                          "INTERROGATIVE",
                          "JUSSIVE",
                          "SUBJUNCTIVE"
                        ],
                        "type": "string",
                        "description": "The grammatical mood.",
                        "enumDescriptions": [
                          "Mood is not applicable in the analyzed language or is not predicted.",
                          "Conditional",
                          "Imperative",
                          "Indicative",
                          "Interrogative",
                          "Jussive",
                          "Subjunctive"
                        ]
                      },
                      "tense": {
                        "enum": [
                          "TENSE_UNKNOWN",
                          "CONDITIONAL_TENSE",
                          "FUTURE",
                          "PAST",
                          "PRESENT",
                          "IMPERFECT",
                          "PLUPERFECT"
                        ],
                        "type": "string",
                        "description": "The grammatical tense.",
                        "enumDescriptions": [
                          "Tense is not applicable in the analyzed language or is not predicted.",
                          "Conditional",
                          "Future",
                          "Past",
                          "Present",
                          "Imperfect",
                          "Pluperfect"
                        ]
                      },
                      "voice": {
                        "enum": [
                          "VOICE_UNKNOWN",
                          "ACTIVE",
                          "CAUSATIVE",
                          "PASSIVE"
                        ],
                        "type": "string",
                        "description": "The grammatical voice.",
                        "enumDescriptions": [
                          "Voice is not applicable in the analyzed language or is not predicted.",
                          "Active",
                          "Causative",
                          "Passive"
                        ]
                      },
                      "aspect": {
                        "enum": [
                          "ASPECT_UNKNOWN",
                          "PERFECTIVE",
                          "IMPERFECTIVE",
                          "PROGRESSIVE"
                        ],
                        "type": "string",
                        "description": "The grammatical aspect.",
                        "enumDescriptions": [
                          "Aspect is not applicable in the analyzed language or is not predicted.",
                          "Perfective",
                          "Imperfective",
                          "Progressive"
                        ]
                      },
                      "gender": {
                        "enum": [
                          "GENDER_UNKNOWN",
                          "FEMININE",
                          "MASCULINE",
                          "NEUTER"
                        ],
                        "type": "string",
                        "description": "The grammatical gender.",
                        "enumDescriptions": [
                          "Gender is not applicable in the analyzed language or is not predicted.",
                          "Feminine",
                          "Masculine",
                          "Neuter"
                        ]
                      },
                      "number": {
                        "enum": [
                          "NUMBER_UNKNOWN",
                          "SINGULAR",
                          "PLURAL",
                          "DUAL"
                        ],
                        "type": "string",
                        "description": "The grammatical number.",
                        "enumDescriptions": [
                          "Number is not applicable in the analyzed language or is not predicted.",
                          "Singular",
                          "Plural",
                          "Dual"
                        ]
                      },
                      "person": {
                        "enum": [
                          "PERSON_UNKNOWN",
                          "FIRST",
                          "SECOND",
                          "THIRD",
                          "REFLEXIVE_PERSON"
                        ],
                        "type": "string",
                        "description": "The grammatical person.",
                        "enumDescriptions": [
                          "Person is not applicable in the analyzed language or is not predicted.",
                          "First",
                          "Second",
                          "Third",
                          "Reflexive"
                        ]
                      },
                      "proper": {
                        "enum": [
                          "PROPER_UNKNOWN",
                          "PROPER",
                          "NOT_PROPER"
                        ],
                        "type": "string",
                        "description": "The grammatical properness.",
                        "enumDescriptions": [
                          "Proper is not applicable in the analyzed language or is not predicted.",
                          "Proper",
                          "Not proper"
                        ]
                      },
                      "reciprocity": {
                        "enum": [
                          "RECIPROCITY_UNKNOWN",
                          "RECIPROCAL",
                          "NON_RECIPROCAL"
                        ],
                        "type": "string",
                        "description": "The grammatical reciprocity.",
                        "enumDescriptions": [
                          "Reciprocity is not applicable in the analyzed language or is not predicted.",
                          "Reciprocal",
                          "Non-reciprocal"
                        ]
                      }
                    },
                    "description": "Parts of speech tag for this token."
                  },
                  "dependencyEdge": {
                    "id": "DependencyEdge",
                    "type": "object",
                    "properties": {
                      "label": {
                        "enum": [
                          "UNKNOWN",
                          "ABBREV",
                          "ACOMP",
                          "ADVCL",
                          "ADVMOD",
                          "AMOD",
                          "APPOS",
                          "ATTR",
                          "AUX",
                          "AUXPASS",
                          "CC",
                          "CCOMP",
                          "CONJ",
                          "CSUBJ",
                          "CSUBJPASS",
                          "DEP",
                          "DET",
                          "DISCOURSE",
                          "DOBJ",
                          "EXPL",
                          "GOESWITH",
                          "IOBJ",
                          "MARK",
                          "MWE",
                          "MWV",
                          "NEG",
                          "NN",
                          "NPADVMOD",
                          "NSUBJ",
                          "NSUBJPASS",
                          "NUM",
                          "NUMBER",
                          "P",
                          "PARATAXIS",
                          "PARTMOD",
                          "PCOMP",
                          "POBJ",
                          "POSS",
                          "POSTNEG",
                          "PRECOMP",
                          "PRECONJ",
                          "PREDET",
                          "PREF",
                          "PREP",
                          "PRONL",
                          "PRT",
                          "PS",
                          "QUANTMOD",
                          "RCMOD",
                          "RCMODREL",
                          "RDROP",
                          "REF",
                          "REMNANT",
                          "REPARANDUM",
                          "ROOT",
                          "SNUM",
                          "SUFF",
                          "TMOD",
                          "TOPIC",
                          "VMOD",
                          "VOCATIVE",
                          "XCOMP",
                          "SUFFIX",
                          "TITLE",
                          "ADVPHMOD",
                          "AUXCAUS",
                          "AUXVV",
                          "DTMOD",
                          "FOREIGN",
                          "KW",
                          "LIST",
                          "NOMC",
                          "NOMCSUBJ",
                          "NOMCSUBJPASS",
                          "NUMC",
                          "COP",
                          "DISLOCATED",
                          "ASP",
                          "GMOD",
                          "GOBJ",
                          "INFMOD",
                          "MES",
                          "NCOMP"
                        ],
                        "type": "string",
                        "description": "The parse label for the token.",
                        "enumDescriptions": [
                          "Unknown",
                          "Abbreviation modifier",
                          "Adjectival complement",
                          "Adverbial clause modifier",
                          "Adverbial modifier",
                          "Adjectival modifier of an NP",
                          "Appositional modifier of an NP",
                          "Attribute dependent of a copular verb",
                          "Auxiliary (non-main) verb",
                          "Passive auxiliary",
                          "Coordinating conjunction",
                          "Clausal complement of a verb or adjective",
                          "Conjunct",
                          "Clausal subject",
                          "Clausal passive subject",
                          "Dependency (unable to determine)",
                          "Determiner",
                          "Discourse",
                          "Direct object",
                          "Expletive",
                          "Goes with (part of a word in a text not well edited)",
                          "Indirect object",
                          "Marker (word introducing a subordinate clause)",
                          "Multi-word expression",
                          "Multi-word verbal expression",
                          "Negation modifier",
                          "Noun compound modifier",
                          "Noun phrase used as an adverbial modifier",
                          "Nominal subject",
                          "Passive nominal subject",
                          "Numeric modifier of a noun",
                          "Element of compound number",
                          "Punctuation mark",
                          "Parataxis relation",
                          "Participial modifier",
                          "The complement of a preposition is a clause",
                          "Object of a preposition",
                          "Possession modifier",
                          "Postverbal negative particle",
                          "Predicate complement",
                          "Preconjunt",
                          "Predeterminer",
                          "Prefix",
                          "Prepositional modifier",
                          "The relationship between a verb and verbal morpheme",
                          "Particle",
                          "Associative or possessive marker",
                          "Quantifier phrase modifier",
                          "Relative clause modifier",
                          "Complementizer in relative clause",
                          "Ellipsis without a preceding predicate",
                          "Referent",
                          "Remnant",
                          "Reparandum",
                          "Root",
                          "Suffix specifying a unit of number",
                          "Suffix",
                          "Temporal modifier",
                          "Topic marker",
                          "Clause headed by an infinite form of the verb that modifies a noun",
                          "Vocative",
                          "Open clausal complement",
                          "Name suffix",
                          "Name title",
                          "Adverbial phrase modifier",
                          "Causative auxiliary",
                          "Helper auxiliary",
                          "Rentaishi (Prenominal modifier)",
                          "Foreign words",
                          "Keyword",
                          "List for chains of comparable items",
                          "Nominalized clause",
                          "Nominalized clausal subject",
                          "Nominalized clausal passive",
                          "Compound of numeric modifier",
                          "Copula",
                          "Dislocated relation (for fronted/topicalized elements)",
                          "Aspect marker",
                          "Genitive modifier",
                          "Genitive object",
                          "Infinitival modifier",
                          "Measure",
                          "Nominal complement of a noun"
                        ]
                      },
                      "headTokenIndex": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Represents the head of this token in the dependency tree. This is the index of the token which has an arc going to this token. The index is the position of the token in the array of tokens returned by the API method. If this token is a root token, then the `head_token_index` is its own index."
                      }
                    },
                    "description": "Dependency tree parse for this token."
                  }
                },
                "description": "Represents the smallest syntactic building block of the text."
              },
              "description": "Tokens, along with their syntactic information, in the input document."
            },
            "language": {
              "type": "string",
              "description": "The language of the text, which will be the same as the language specified in the request or, if not specified, the automatically-detected language. See Document.language field for more details."
            },
            "sentences": {
              "type": "array",
              "items": {
                "id": "Sentence",
                "type": "object",
                "properties": {
                  "text": {
                    "id": "TextSpan",
                    "type": "object",
                    "properties": {
                      "content": {
                        "type": "string",
                        "description": "The content of the output text."
                      },
                      "beginOffset": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The API calculates the beginning offset of the content in the original document according to the EncodingType specified in the API request."
                      }
                    },
                    "description": "The sentence text."
                  },
                  "sentiment": {
                    "id": "Sentiment",
                    "type": "object",
                    "properties": {
                      "score": {
                        "type": "number",
                        "format": "float",
                        "description": "Sentiment score between -1.0 (negative sentiment) and 1.0 (positive sentiment)."
                      },
                      "magnitude": {
                        "type": "number",
                        "format": "float",
                        "description": "A non-negative number in the [0, +inf) range, which represents the absolute magnitude of sentiment regardless of score (positive or negative)."
                      }
                    },
                    "description": "For calls to AnalyzeSentiment or if AnnotateTextRequest.Features.extract_document_sentiment is set to true, this field will contain the sentiment for the sentence."
                  }
                },
                "description": "Represents a sentence in the input document."
              },
              "description": "Sentences in the input document."
            }
          },
          "description": "The syntax analysis response message."
        }
      ]
  documents.annotateText:
    description: |-
      A convenience method that provides all the features that analyzeSentiment, analyzeEntities, and analyzeSyntax provide in one call.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/natural-language/docs/reference/rest/v1/documents/annotateText
    example:
      inputs: [
        {
          "id": "AnnotateTextRequest",
          "type": "object",
          "properties": {
            "document": {
              "id": "Document",
              "type": "object",
              "properties": {
                "type": {
                  "enum": [
                    "TYPE_UNSPECIFIED",
                    "PLAIN_TEXT",
                    "HTML"
                  ],
                  "type": "string",
                  "description": "Required. If the type is not set or is `TYPE_UNSPECIFIED`, returns an `INVALID_ARGUMENT` error.",
                  "enumDescriptions": [
                    "The content type is not specified.",
                    "Plain text",
                    "HTML"
                  ]
                },
                "content": {
                  "type": "string",
                  "description": "The content of the input in string format. Cloud audit logging exempt since it is based on user data."
                },
                "language": {
                  "type": "string",
                  "description": "The language of the document (if not specified, the language is automatically detected). Both ISO and BCP-47 language codes are accepted. [Language Support](https://cloud.google.com/natural-language/docs/languages) lists currently supported languages for each API method. If the language (either specified by the caller or automatically detected) is not supported by the called API method, an `INVALID_ARGUMENT` error is returned."
                },
                "gcsContentUri": {
                  "type": "string",
                  "description": "The Google Cloud Storage URI where the file content is located. This URI must be of the form: gs://bucket_name/object_name. For more details, see https://cloud.google.com/storage/docs/reference-uris. NOTE: Cloud Storage object versioning is not supported."
                }
              },
              "description": "Required. Input document."
            },
            "features": {
              "id": "Features",
              "type": "object",
              "properties": {
                "classifyText": {
                  "type": "boolean",
                  "description": "Classify the full document into categories."
                },
                "extractSyntax": {
                  "type": "boolean",
                  "description": "Extract syntax information."
                },
                "extractEntities": {
                  "type": "boolean",
                  "description": "Extract entities."
                },
                "extractEntitySentiment": {
                  "type": "boolean",
                  "description": "Extract entities and their associated sentiment."
                },
                "extractDocumentSentiment": {
                  "type": "boolean",
                  "description": "Extract document-level sentiment."
                }
              },
              "description": "Required. The enabled features."
            },
            "encodingType": {
              "enum": [
                "NONE",
                "UTF8",
                "UTF16",
                "UTF32"
              ],
              "type": "string",
              "description": "The encoding type used by the API to calculate offsets.",
              "enumDescriptions": [
                "If `EncodingType` is not specified, encoding-dependent information (such as `begin_offset`) will be set at `-1`.",
                "Encoding-dependent information (such as `begin_offset`) is calculated based on the UTF-8 encoding of the input. C++ and Go are examples of languages that use this encoding natively.",
                "Encoding-dependent information (such as `begin_offset`) is calculated based on the UTF-16 encoding of the input. Java and JavaScript are examples of languages that use this encoding natively.",
                "Encoding-dependent information (such as `begin_offset`) is calculated based on the UTF-32 encoding of the input. Python is an example of a language that uses this encoding natively."
              ]
            }
          },
          "description": "The request message for the text annotation API, which can perform multiple analysis types (sentiment, entities, and syntax) in one call."
        }
      ]
      outputs: [
        {
          "id": "AnnotateTextResponse",
          "type": "object",
          "properties": {
            "tokens": {
              "type": "array",
              "items": {
                "id": "Token",
                "type": "object",
                "properties": {
                  "text": {
                    "id": "TextSpan",
                    "type": "object",
                    "properties": {
                      "content": {
                        "type": "string",
                        "description": "The content of the output text."
                      },
                      "beginOffset": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The API calculates the beginning offset of the content in the original document according to the EncodingType specified in the API request."
                      }
                    },
                    "description": "The token text."
                  },
                  "lemma": {
                    "type": "string",
                    "description": "[Lemma](https://en.wikipedia.org/wiki/Lemma_%28morphology%29) of the token."
                  },
                  "partOfSpeech": {
                    "id": "PartOfSpeech",
                    "type": "object",
                    "properties": {
                      "tag": {
                        "enum": [
                          "UNKNOWN",
                          "ADJ",
                          "ADP",
                          "ADV",
                          "CONJ",
                          "DET",
                          "NOUN",
                          "NUM",
                          "PRON",
                          "PRT",
                          "PUNCT",
                          "VERB",
                          "X",
                          "AFFIX"
                        ],
                        "type": "string",
                        "description": "The part of speech tag.",
                        "enumDescriptions": [
                          "Unknown",
                          "Adjective",
                          "Adposition (preposition and postposition)",
                          "Adverb",
                          "Conjunction",
                          "Determiner",
                          "Noun (common and proper)",
                          "Cardinal number",
                          "Pronoun",
                          "Particle or other function word",
                          "Punctuation",
                          "Verb (all tenses and modes)",
                          "Other: foreign words, typos, abbreviations",
                          "Affix"
                        ]
                      },
                      "case": {
                        "enum": [
                          "CASE_UNKNOWN",
                          "ACCUSATIVE",
                          "ADVERBIAL",
                          "COMPLEMENTIVE",
                          "DATIVE",
                          "GENITIVE",
                          "INSTRUMENTAL",
                          "LOCATIVE",
                          "NOMINATIVE",
                          "OBLIQUE",
                          "PARTITIVE",
                          "PREPOSITIONAL",
                          "REFLEXIVE_CASE",
                          "RELATIVE_CASE",
                          "VOCATIVE"
                        ],
                        "type": "string",
                        "description": "The grammatical case.",
                        "enumDescriptions": [
                          "Case is not applicable in the analyzed language or is not predicted.",
                          "Accusative",
                          "Adverbial",
                          "Complementive",
                          "Dative",
                          "Genitive",
                          "Instrumental",
                          "Locative",
                          "Nominative",
                          "Oblique",
                          "Partitive",
                          "Prepositional",
                          "Reflexive",
                          "Relative",
                          "Vocative"
                        ]
                      },
                      "form": {
                        "enum": [
                          "FORM_UNKNOWN",
                          "ADNOMIAL",
                          "AUXILIARY",
                          "COMPLEMENTIZER",
                          "FINAL_ENDING",
                          "GERUND",
                          "REALIS",
                          "IRREALIS",
                          "SHORT",
                          "LONG",
                          "ORDER",
                          "SPECIFIC"
                        ],
                        "type": "string",
                        "description": "The grammatical form.",
                        "enumDescriptions": [
                          "Form is not applicable in the analyzed language or is not predicted.",
                          "Adnomial",
                          "Auxiliary",
                          "Complementizer",
                          "Final ending",
                          "Gerund",
                          "Realis",
                          "Irrealis",
                          "Short form",
                          "Long form",
                          "Order form",
                          "Specific form"
                        ]
                      },
                      "mood": {
                        "enum": [
                          "MOOD_UNKNOWN",
                          "CONDITIONAL_MOOD",
                          "IMPERATIVE",
                          "INDICATIVE",
                          "INTERROGATIVE",
                          "JUSSIVE",
                          "SUBJUNCTIVE"
                        ],
                        "type": "string",
                        "description": "The grammatical mood.",
                        "enumDescriptions": [
                          "Mood is not applicable in the analyzed language or is not predicted.",
                          "Conditional",
                          "Imperative",
                          "Indicative",
                          "Interrogative",
                          "Jussive",
                          "Subjunctive"
                        ]
                      },
                      "tense": {
                        "enum": [
                          "TENSE_UNKNOWN",
                          "CONDITIONAL_TENSE",
                          "FUTURE",
                          "PAST",
                          "PRESENT",
                          "IMPERFECT",
                          "PLUPERFECT"
                        ],
                        "type": "string",
                        "description": "The grammatical tense.",
                        "enumDescriptions": [
                          "Tense is not applicable in the analyzed language or is not predicted.",
                          "Conditional",
                          "Future",
                          "Past",
                          "Present",
                          "Imperfect",
                          "Pluperfect"
                        ]
                      },
                      "voice": {
                        "enum": [
                          "VOICE_UNKNOWN",
                          "ACTIVE",
                          "CAUSATIVE",
                          "PASSIVE"
                        ],
                        "type": "string",
                        "description": "The grammatical voice.",
                        "enumDescriptions": [
                          "Voice is not applicable in the analyzed language or is not predicted.",
                          "Active",
                          "Causative",
                          "Passive"
                        ]
                      },
                      "aspect": {
                        "enum": [
                          "ASPECT_UNKNOWN",
                          "PERFECTIVE",
                          "IMPERFECTIVE",
                          "PROGRESSIVE"
                        ],
                        "type": "string",
                        "description": "The grammatical aspect.",
                        "enumDescriptions": [
                          "Aspect is not applicable in the analyzed language or is not predicted.",
                          "Perfective",
                          "Imperfective",
                          "Progressive"
                        ]
                      },
                      "gender": {
                        "enum": [
                          "GENDER_UNKNOWN",
                          "FEMININE",
                          "MASCULINE",
                          "NEUTER"
                        ],
                        "type": "string",
                        "description": "The grammatical gender.",
                        "enumDescriptions": [
                          "Gender is not applicable in the analyzed language or is not predicted.",
                          "Feminine",
                          "Masculine",
                          "Neuter"
                        ]
                      },
                      "number": {
                        "enum": [
                          "NUMBER_UNKNOWN",
                          "SINGULAR",
                          "PLURAL",
                          "DUAL"
                        ],
                        "type": "string",
                        "description": "The grammatical number.",
                        "enumDescriptions": [
                          "Number is not applicable in the analyzed language or is not predicted.",
                          "Singular",
                          "Plural",
                          "Dual"
                        ]
                      },
                      "person": {
                        "enum": [
                          "PERSON_UNKNOWN",
                          "FIRST",
                          "SECOND",
                          "THIRD",
                          "REFLEXIVE_PERSON"
                        ],
                        "type": "string",
                        "description": "The grammatical person.",
                        "enumDescriptions": [
                          "Person is not applicable in the analyzed language or is not predicted.",
                          "First",
                          "Second",
                          "Third",
                          "Reflexive"
                        ]
                      },
                      "proper": {
                        "enum": [
                          "PROPER_UNKNOWN",
                          "PROPER",
                          "NOT_PROPER"
                        ],
                        "type": "string",
                        "description": "The grammatical properness.",
                        "enumDescriptions": [
                          "Proper is not applicable in the analyzed language or is not predicted.",
                          "Proper",
                          "Not proper"
                        ]
                      },
                      "reciprocity": {
                        "enum": [
                          "RECIPROCITY_UNKNOWN",
                          "RECIPROCAL",
                          "NON_RECIPROCAL"
                        ],
                        "type": "string",
                        "description": "The grammatical reciprocity.",
                        "enumDescriptions": [
                          "Reciprocity is not applicable in the analyzed language or is not predicted.",
                          "Reciprocal",
                          "Non-reciprocal"
                        ]
                      }
                    },
                    "description": "Parts of speech tag for this token."
                  },
                  "dependencyEdge": {
                    "id": "DependencyEdge",
                    "type": "object",
                    "properties": {
                      "label": {
                        "enum": [
                          "UNKNOWN",
                          "ABBREV",
                          "ACOMP",
                          "ADVCL",
                          "ADVMOD",
                          "AMOD",
                          "APPOS",
                          "ATTR",
                          "AUX",
                          "AUXPASS",
                          "CC",
                          "CCOMP",
                          "CONJ",
                          "CSUBJ",
                          "CSUBJPASS",
                          "DEP",
                          "DET",
                          "DISCOURSE",
                          "DOBJ",
                          "EXPL",
                          "GOESWITH",
                          "IOBJ",
                          "MARK",
                          "MWE",
                          "MWV",
                          "NEG",
                          "NN",
                          "NPADVMOD",
                          "NSUBJ",
                          "NSUBJPASS",
                          "NUM",
                          "NUMBER",
                          "P",
                          "PARATAXIS",
                          "PARTMOD",
                          "PCOMP",
                          "POBJ",
                          "POSS",
                          "POSTNEG",
                          "PRECOMP",
                          "PRECONJ",
                          "PREDET",
                          "PREF",
                          "PREP",
                          "PRONL",
                          "PRT",
                          "PS",
                          "QUANTMOD",
                          "RCMOD",
                          "RCMODREL",
                          "RDROP",
                          "REF",
                          "REMNANT",
                          "REPARANDUM",
                          "ROOT",
                          "SNUM",
                          "SUFF",
                          "TMOD",
                          "TOPIC",
                          "VMOD",
                          "VOCATIVE",
                          "XCOMP",
                          "SUFFIX",
                          "TITLE",
                          "ADVPHMOD",
                          "AUXCAUS",
                          "AUXVV",
                          "DTMOD",
                          "FOREIGN",
                          "KW",
                          "LIST",
                          "NOMC",
                          "NOMCSUBJ",
                          "NOMCSUBJPASS",
                          "NUMC",
                          "COP",
                          "DISLOCATED",
                          "ASP",
                          "GMOD",
                          "GOBJ",
                          "INFMOD",
                          "MES",
                          "NCOMP"
                        ],
                        "type": "string",
                        "description": "The parse label for the token.",
                        "enumDescriptions": [
                          "Unknown",
                          "Abbreviation modifier",
                          "Adjectival complement",
                          "Adverbial clause modifier",
                          "Adverbial modifier",
                          "Adjectival modifier of an NP",
                          "Appositional modifier of an NP",
                          "Attribute dependent of a copular verb",
                          "Auxiliary (non-main) verb",
                          "Passive auxiliary",
                          "Coordinating conjunction",
                          "Clausal complement of a verb or adjective",
                          "Conjunct",
                          "Clausal subject",
                          "Clausal passive subject",
                          "Dependency (unable to determine)",
                          "Determiner",
                          "Discourse",
                          "Direct object",
                          "Expletive",
                          "Goes with (part of a word in a text not well edited)",
                          "Indirect object",
                          "Marker (word introducing a subordinate clause)",
                          "Multi-word expression",
                          "Multi-word verbal expression",
                          "Negation modifier",
                          "Noun compound modifier",
                          "Noun phrase used as an adverbial modifier",
                          "Nominal subject",
                          "Passive nominal subject",
                          "Numeric modifier of a noun",
                          "Element of compound number",
                          "Punctuation mark",
                          "Parataxis relation",
                          "Participial modifier",
                          "The complement of a preposition is a clause",
                          "Object of a preposition",
                          "Possession modifier",
                          "Postverbal negative particle",
                          "Predicate complement",
                          "Preconjunt",
                          "Predeterminer",
                          "Prefix",
                          "Prepositional modifier",
                          "The relationship between a verb and verbal morpheme",
                          "Particle",
                          "Associative or possessive marker",
                          "Quantifier phrase modifier",
                          "Relative clause modifier",
                          "Complementizer in relative clause",
                          "Ellipsis without a preceding predicate",
                          "Referent",
                          "Remnant",
                          "Reparandum",
                          "Root",
                          "Suffix specifying a unit of number",
                          "Suffix",
                          "Temporal modifier",
                          "Topic marker",
                          "Clause headed by an infinite form of the verb that modifies a noun",
                          "Vocative",
                          "Open clausal complement",
                          "Name suffix",
                          "Name title",
                          "Adverbial phrase modifier",
                          "Causative auxiliary",
                          "Helper auxiliary",
                          "Rentaishi (Prenominal modifier)",
                          "Foreign words",
                          "Keyword",
                          "List for chains of comparable items",
                          "Nominalized clause",
                          "Nominalized clausal subject",
                          "Nominalized clausal passive",
                          "Compound of numeric modifier",
                          "Copula",
                          "Dislocated relation (for fronted/topicalized elements)",
                          "Aspect marker",
                          "Genitive modifier",
                          "Genitive object",
                          "Infinitival modifier",
                          "Measure",
                          "Nominal complement of a noun"
                        ]
                      },
                      "headTokenIndex": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Represents the head of this token in the dependency tree. This is the index of the token which has an arc going to this token. The index is the position of the token in the array of tokens returned by the API method. If this token is a root token, then the `head_token_index` is its own index."
                      }
                    },
                    "description": "Dependency tree parse for this token."
                  }
                },
                "description": "Represents the smallest syntactic building block of the text."
              },
              "description": "Tokens, along with their syntactic information, in the input document. Populated if the user enables AnnotateTextRequest.Features.extract_syntax."
            },
            "entities": {
              "type": "array",
              "items": {
                "id": "Entity",
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The representative name for the entity."
                  },
                  "type": {
                    "enum": [
                      "UNKNOWN",
                      "PERSON",
                      "LOCATION",
                      "ORGANIZATION",
                      "EVENT",
                      "WORK_OF_ART",
                      "CONSUMER_GOOD",
                      "OTHER",
                      "PHONE_NUMBER",
                      "ADDRESS",
                      "DATE",
                      "NUMBER",
                      "PRICE"
                    ],
                    "type": "string",
                    "description": "The entity type.",
                    "enumDescriptions": [
                      "Unknown",
                      "Person",
                      "Location",
                      "Organization",
                      "Event",
                      "Artwork",
                      "Consumer product",
                      "Other types of entities",
                      "Phone number The metadata lists the phone number, formatted according to local convention, plus whichever additional elements appear in the text: * `number` - the actual number, broken down into sections as per local convention * `national_prefix` - country code, if detected * `area_code` - region or area code, if detected * `extension` - phone extension (to be dialed after connection), if detected",
                      "Address The metadata identifies the street number and locality plus whichever additional elements appear in the text: * `street_number` - street number * `locality` - city or town * `street_name` - street/route name, if detected * `postal_code` - postal code, if detected * `country` - country, if detected< * `broad_region` - administrative area, such as the state, if detected * `narrow_region` - smaller administrative area, such as county, if detected * `sublocality` - used in Asian addresses to demark a district within a city, if detected",
                      "Date The metadata identifies the components of the date: * `year` - four digit year, if detected * `month` - two digit month number, if detected * `day` - two digit day number, if detected",
                      "Number The metadata is the number itself.",
                      "Price The metadata identifies the `value` and `currency`."
                    ]
                  },
                  "mentions": {
                    "type": "array",
                    "items": {
                      "id": "EntityMention",
                      "type": "object",
                      "properties": {
                        "text": {
                          "id": "TextSpan",
                          "type": "object",
                          "properties": {
                            "content": {
                              "type": "string",
                              "description": "The content of the output text."
                            },
                            "beginOffset": {
                              "type": "integer",
                              "format": "int32",
                              "description": "The API calculates the beginning offset of the content in the original document according to the EncodingType specified in the API request."
                            }
                          },
                          "description": "The mention text."
                        },
                        "type": {
                          "enum": [
                            "TYPE_UNKNOWN",
                            "PROPER",
                            "COMMON"
                          ],
                          "type": "string",
                          "description": "The type of the entity mention.",
                          "enumDescriptions": [
                            "Unknown",
                            "Proper name",
                            "Common noun (or noun compound)"
                          ]
                        },
                        "sentiment": {
                          "id": "Sentiment",
                          "type": "object",
                          "properties": {
                            "score": {
                              "type": "number",
                              "format": "float",
                              "description": "Sentiment score between -1.0 (negative sentiment) and 1.0 (positive sentiment)."
                            },
                            "magnitude": {
                              "type": "number",
                              "format": "float",
                              "description": "A non-negative number in the [0, +inf) range, which represents the absolute magnitude of sentiment regardless of score (positive or negative)."
                            }
                          },
                          "description": "For calls to AnalyzeEntitySentiment or if AnnotateTextRequest.Features.extract_entity_sentiment is set to true, this field will contain the sentiment expressed for this mention of the entity in the provided document."
                        }
                      },
                      "description": "Represents a mention for an entity in the text. Currently, proper noun mentions are supported."
                    },
                    "description": "The mentions of this entity in the input document. The API currently supports proper noun mentions."
                  },
                  "metadata": {
                    "type": "object",
                    "description": "Metadata associated with the entity. For most entity types, the metadata is a Wikipedia URL (`wikipedia_url`) and Knowledge Graph MID (`mid`), if they are available. For the metadata associated with other entity types, see the Type table below.",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "salience": {
                    "type": "number",
                    "format": "float",
                    "description": "The salience score associated with the entity in the [0, 1.0] range. The salience score for an entity provides information about the importance or centrality of that entity to the entire document text. Scores closer to 0 are less salient, while scores closer to 1.0 are highly salient."
                  },
                  "sentiment": {
                    "id": "Sentiment",
                    "type": "object",
                    "properties": {
                      "score": {
                        "type": "number",
                        "format": "float",
                        "description": "Sentiment score between -1.0 (negative sentiment) and 1.0 (positive sentiment)."
                      },
                      "magnitude": {
                        "type": "number",
                        "format": "float",
                        "description": "A non-negative number in the [0, +inf) range, which represents the absolute magnitude of sentiment regardless of score (positive or negative)."
                      }
                    },
                    "description": "For calls to AnalyzeEntitySentiment or if AnnotateTextRequest.Features.extract_entity_sentiment is set to true, this field will contain the aggregate sentiment expressed for this entity in the provided document."
                  }
                },
                "description": "Represents a phrase in the text that is a known entity, such as a person, an organization, or location. The API associates information, such as salience and mentions, with entities."
              },
              "description": "Entities, along with their semantic information, in the input document. Populated if the user enables AnnotateTextRequest.Features.extract_entities."
            },
            "language": {
              "type": "string",
              "description": "The language of the text, which will be the same as the language specified in the request or, if not specified, the automatically-detected language. See Document.language field for more details."
            },
            "sentences": {
              "type": "array",
              "items": {
                "id": "Sentence",
                "type": "object",
                "properties": {
                  "text": {
                    "id": "TextSpan",
                    "type": "object",
                    "properties": {
                      "content": {
                        "type": "string",
                        "description": "The content of the output text."
                      },
                      "beginOffset": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The API calculates the beginning offset of the content in the original document according to the EncodingType specified in the API request."
                      }
                    },
                    "description": "The sentence text."
                  },
                  "sentiment": {
                    "id": "Sentiment",
                    "type": "object",
                    "properties": {
                      "score": {
                        "type": "number",
                        "format": "float",
                        "description": "Sentiment score between -1.0 (negative sentiment) and 1.0 (positive sentiment)."
                      },
                      "magnitude": {
                        "type": "number",
                        "format": "float",
                        "description": "A non-negative number in the [0, +inf) range, which represents the absolute magnitude of sentiment regardless of score (positive or negative)."
                      }
                    },
                    "description": "For calls to AnalyzeSentiment or if AnnotateTextRequest.Features.extract_document_sentiment is set to true, this field will contain the sentiment for the sentence."
                  }
                },
                "description": "Represents a sentence in the input document."
              },
              "description": "Sentences in the input document. Populated if the user enables AnnotateTextRequest.Features.extract_syntax."
            },
            "categories": {
              "type": "array",
              "items": {
                "id": "ClassificationCategory",
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the category representing the document, from the [predefined taxonomy](https://cloud.google.com/natural-language/docs/categories)."
                  },
                  "confidence": {
                    "type": "number",
                    "format": "float",
                    "description": "The classifier's confidence of the category. Number represents how certain the classifier is that this category represents the given text."
                  }
                },
                "description": "Represents a category returned from the text classifier."
              },
              "description": "Categories identified in the input document."
            },
            "documentSentiment": {
              "id": "Sentiment",
              "type": "object",
              "properties": {
                "score": {
                  "type": "number",
                  "format": "float",
                  "description": "Sentiment score between -1.0 (negative sentiment) and 1.0 (positive sentiment)."
                },
                "magnitude": {
                  "type": "number",
                  "format": "float",
                  "description": "A non-negative number in the [0, +inf) range, which represents the absolute magnitude of sentiment regardless of score (positive or negative)."
                }
              },
              "description": "The overall sentiment for the document. Populated if the user enables AnnotateTextRequest.Features.extract_document_sentiment."
            }
          },
          "description": "The text annotations response message."
        }
      ]
  documents.classifyText:
    description: |-
      Classifies a document into categories.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/natural-language/docs/reference/rest/v1/documents/classifyText
    example:
      inputs: [
        {
          "id": "ClassifyTextRequest",
          "type": "object",
          "properties": {
            "document": {
              "id": "Document",
              "type": "object",
              "properties": {
                "type": {
                  "enum": [
                    "TYPE_UNSPECIFIED",
                    "PLAIN_TEXT",
                    "HTML"
                  ],
                  "type": "string",
                  "description": "Required. If the type is not set or is `TYPE_UNSPECIFIED`, returns an `INVALID_ARGUMENT` error.",
                  "enumDescriptions": [
                    "The content type is not specified.",
                    "Plain text",
                    "HTML"
                  ]
                },
                "content": {
                  "type": "string",
                  "description": "The content of the input in string format. Cloud audit logging exempt since it is based on user data."
                },
                "language": {
                  "type": "string",
                  "description": "The language of the document (if not specified, the language is automatically detected). Both ISO and BCP-47 language codes are accepted. [Language Support](https://cloud.google.com/natural-language/docs/languages) lists currently supported languages for each API method. If the language (either specified by the caller or automatically detected) is not supported by the called API method, an `INVALID_ARGUMENT` error is returned."
                },
                "gcsContentUri": {
                  "type": "string",
                  "description": "The Google Cloud Storage URI where the file content is located. This URI must be of the form: gs://bucket_name/object_name. For more details, see https://cloud.google.com/storage/docs/reference-uris. NOTE: Cloud Storage object versioning is not supported."
                }
              },
              "description": "Required. Input document."
            }
          },
          "description": "The document classification request message."
        }
      ]
      outputs: [
        {
          "id": "ClassifyTextResponse",
          "type": "object",
          "properties": {
            "categories": {
              "type": "array",
              "items": {
                "id": "ClassificationCategory",
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the category representing the document, from the [predefined taxonomy](https://cloud.google.com/natural-language/docs/categories)."
                  },
                  "confidence": {
                    "type": "number",
                    "format": "float",
                    "description": "The classifier's confidence of the category. Number represents how certain the classifier is that this category represents the given text."
                  }
                },
                "description": "Represents a category returned from the text classifier."
              },
              "description": "Categories representing the input document."
            }
          },
          "description": "The document classification response message."
        }
      ]