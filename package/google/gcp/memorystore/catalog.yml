Product:
  name: GCP Memorystore
  versions: [1.0.0]
  package: google.gcp.memorystore
  description: |-
    Memorystore
  link: https://cloud.google.com/memorystore
  contentType: json
Operations:
  memcache.projects.locations.get:
    description: |-
      Gets information about a location.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/memorystore/docs/memcached/reference/rest/v1/projects.locations/get
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "Location",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Resource name for the location, which may vary between implementations. For example: `\"projects/example-project/locations/us-east1\"`"
            },
            "labels": {
              "type": "object",
              "description": "Cross-service attributes for the location. For example {\"cloud.googleapis.com/region\": \"us-east1\"}",
              "additionalProperties": {
                "type": "string"
              }
            },
            "metadata": {
              "type": "object",
              "description": "Service-specific metadata. For example the available capacity at the given location.",
              "additionalProperties": {
                "type": "any",
                "description": "Properties of the object. Contains field @type with type URL."
              }
            },
            "locationId": {
              "type": "string",
              "description": "The canonical id for this location. For example: `\"us-east1\"`."
            },
            "displayName": {
              "type": "string",
              "description": "The friendly name for this location, typically a nearby city name. For example, \"Tokyo\"."
            }
          },
          "description": "A resource that represents Google Cloud Platform location."
        }
      ]
  memcache.projects.locations.instances.applyParameters:
    description: |-
      `ApplyParameters` restarts the set of specified nodes in order to update them to the current set of parameters for the Memcached Instance.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/memorystore/docs/memcached/reference/rest/v1/projects.locations.instances/applyParameters
    example:
      inputs: [
        {
          "id": "ApplyParametersRequest",
          "type": "object",
          "properties": {
            "nodeIds": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Nodes to which the instance-level parameter group is applied."
            },
            "applyAll": {
              "type": "boolean",
              "description": "Whether to apply instance-level parameter group to all nodes. If set to true, users are restricted from specifying individual nodes, and `ApplyParameters` updates all nodes within the instance."
            }
          },
          "description": "Request for ApplyParameters."
        }
      ]
      outputs: [
        {
          "id": "Operation",
          "type": "object",
          "properties": {
            "done": {
              "type": "boolean",
              "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available."
            },
            "name": {
              "type": "string",
              "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`."
            },
            "error": {
              "id": "Status",
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The status code, which should be an enum value of google.rpc.Code."
                },
                "details": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  },
                  "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
                },
                "message": {
                  "type": "string",
                  "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                }
              },
              "description": "The error result of the operation in case of failure or cancellation."
            },
            "metadata": {
              "type": "object",
              "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
              "additionalProperties": {
                "type": "any",
                "description": "Properties of the object. Contains field @type with type URL."
              }
            },
            "response": {
              "type": "object",
              "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
              "additionalProperties": {
                "type": "any",
                "description": "Properties of the object. Contains field @type with type URL."
              }
            }
          },
          "description": "This resource represents a long-running operation that is the result of a network API call."
        }
      ]
  memcache.projects.locations.instances.create:
    description: |-
      Creates a new Instance in a given location.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/memorystore/docs/memcached/reference/rest/v1/projects.locations.instances/create
    example:
      inputs: [
        {
          "id": "Instance",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Required. Unique name of the resource in this scope including project and location using the form: `projects/{project_id}/locations/{location_id}/instances/{instance_id}` Note: Memcached instances are managed and addressed at the regional level so `location_id` here refers to a Google Cloud region; however, users may choose which zones Memcached nodes should be provisioned in within an instance. Refer to zones field for more details."
            },
            "state": {
              "enum": [
                "STATE_UNSPECIFIED",
                "CREATING",
                "READY",
                "UPDATING",
                "DELETING",
                "PERFORMING_MAINTENANCE"
              ],
              "type": "string",
              "readOnly": true,
              "description": "Output only. The state of this Memcached instance.",
              "enumDescriptions": [
                "State not set.",
                "Memcached instance is being created.",
                "Memcached instance has been created and ready to be used.",
                "Memcached instance is updating configuration such as maintenance policy and schedule.",
                "Memcached instance is being deleted.",
                "Memcached instance is going through maintenance, e.g. data plane rollout."
              ]
            },
            "zones": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Zones in which Memcached nodes should be provisioned. Memcached nodes will be equally distributed across these zones. If not provided, the service will by default create nodes in all zones in the region for the instance."
            },
            "labels": {
              "type": "object",
              "description": "Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources",
              "additionalProperties": {
                "type": "string"
              }
            },
            "nodeCount": {
              "type": "integer",
              "format": "int32",
              "description": "Required. Number of nodes in the Memcached instance."
            },
            "createTime": {
              "type": "string",
              "format": "google-datetime",
              "readOnly": true,
              "description": "Output only. The time the instance was created."
            },
            "nodeConfig": {
              "id": "NodeConfig",
              "type": "object",
              "properties": {
                "cpuCount": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Required. Number of cpus per Memcached node."
                },
                "memorySizeMb": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Required. Memory size in MiB for each Memcached node."
                }
              },
              "description": "Required. Configuration for Memcached nodes."
            },
            "parameters": {
              "id": "MemcacheParameters",
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "Output only."
                },
                "params": {
                  "type": "object",
                  "description": "User defined set of parameters to use in the memcached process.",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              },
              "description": "Optional: User defined parameters to apply to the memcached process on each node."
            },
            "updateTime": {
              "type": "string",
              "format": "google-datetime",
              "readOnly": true,
              "description": "Output only. The time the instance was updated."
            },
            "displayName": {
              "type": "string",
              "description": "User provided name for the instance, which is only used for display purposes. Cannot be more than 80 characters."
            },
            "memcacheNodes": {
              "type": "array",
              "items": {
                "id": "Node",
                "type": "object",
                "properties": {
                  "host": {
                    "type": "string",
                    "readOnly": true,
                    "description": "Output only. Hostname or IP address of the Memcached node used by the clients to connect to the Memcached server on this node."
                  },
                  "port": {
                    "type": "integer",
                    "format": "int32",
                    "readOnly": true,
                    "description": "Output only. The port number of the Memcached server on this node."
                  },
                  "zone": {
                    "type": "string",
                    "readOnly": true,
                    "description": "Output only. Location (GCP Zone) for the Memcached node."
                  },
                  "state": {
                    "enum": [
                      "STATE_UNSPECIFIED",
                      "CREATING",
                      "READY",
                      "DELETING",
                      "UPDATING"
                    ],
                    "type": "string",
                    "readOnly": true,
                    "description": "Output only. Current state of the Memcached node.",
                    "enumDescriptions": [
                      "Node state is not set.",
                      "Node is being created.",
                      "Node has been created and ready to be used.",
                      "Node is being deleted.",
                      "Node is being updated."
                    ]
                  },
                  "nodeId": {
                    "type": "string",
                    "readOnly": true,
                    "description": "Output only. Identifier of the Memcached node. The node id does not include project or location like the Memcached instance name."
                  },
                  "parameters": {
                    "id": "MemcacheParameters",
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Output only."
                      },
                      "params": {
                        "type": "object",
                        "description": "User defined set of parameters to use in the memcached process.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "description": "User defined parameters currently applied to the node."
                  }
                }
              },
              "readOnly": true,
              "description": "Output only. List of Memcached nodes. Refer to Node message for more details."
            },
            "memcacheVersion": {
              "enum": [
                "MEMCACHE_VERSION_UNSPECIFIED",
                "MEMCACHE_1_5"
              ],
              "type": "string",
              "description": "The major version of Memcached software. If not provided, latest supported version will be used. Currently the latest supported major version is `MEMCACHE_1_5`. The minor version will be automatically determined by our system based on the latest supported minor version.",
              "enumDescriptions": [
                "",
                "Memcached 1.5 version."
              ]
            },
            "instanceMessages": {
              "type": "array",
              "items": {
                "id": "InstanceMessage",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "CODE_UNSPECIFIED",
                      "ZONE_DISTRIBUTION_UNBALANCED"
                    ],
                    "type": "string",
                    "description": "A code that correspond to one type of user-facing message.",
                    "enumDescriptions": [
                      "Message Code not set.",
                      "Memcached nodes are distributed unevenly."
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Message on memcached instance which will be exposed to users."
                  }
                }
              },
              "description": "List of messages that describe the current state of the Memcached instance."
            },
            "authorizedNetwork": {
              "type": "string",
              "description": "The full name of the Google Compute Engine [network](/compute/docs/networks-and-firewalls#networks) to which the instance is connected. If left unspecified, the `default` network will be used."
            },
            "discoveryEndpoint": {
              "type": "string",
              "readOnly": true,
              "description": "Output only. Endpoint for the Discovery API."
            },
            "memcacheFullVersion": {
              "type": "string",
              "readOnly": true,
              "description": "Output only. The full version of memcached server running on this instance. System automatically determines the full memcached version for an instance based on the input MemcacheVersion. The full version format will be \"memcached-1.5.16\"."
            }
          },
          "description": "A Memorystore for Memcached instance"
        }
      ]
      outputs: [
        {
          "id": "Operation",
          "type": "object",
          "properties": {
            "done": {
              "type": "boolean",
              "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available."
            },
            "name": {
              "type": "string",
              "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`."
            },
            "error": {
              "id": "Status",
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The status code, which should be an enum value of google.rpc.Code."
                },
                "details": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  },
                  "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
                },
                "message": {
                  "type": "string",
                  "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                }
              },
              "description": "The error result of the operation in case of failure or cancellation."
            },
            "metadata": {
              "type": "object",
              "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
              "additionalProperties": {
                "type": "any",
                "description": "Properties of the object. Contains field @type with type URL."
              }
            },
            "response": {
              "type": "object",
              "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
              "additionalProperties": {
                "type": "any",
                "description": "Properties of the object. Contains field @type with type URL."
              }
            }
          },
          "description": "This resource represents a long-running operation that is the result of a network API call."
        }
      ]
  memcache.projects.locations.instances.delete:
    description: |-
      Deletes a single Instance.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/memorystore/docs/memcached/reference/rest/v1/projects.locations.instances/delete
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "Operation",
          "type": "object",
          "properties": {
            "done": {
              "type": "boolean",
              "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available."
            },
            "name": {
              "type": "string",
              "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`."
            },
            "error": {
              "id": "Status",
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The status code, which should be an enum value of google.rpc.Code."
                },
                "details": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  },
                  "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
                },
                "message": {
                  "type": "string",
                  "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                }
              },
              "description": "The error result of the operation in case of failure or cancellation."
            },
            "metadata": {
              "type": "object",
              "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
              "additionalProperties": {
                "type": "any",
                "description": "Properties of the object. Contains field @type with type URL."
              }
            },
            "response": {
              "type": "object",
              "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
              "additionalProperties": {
                "type": "any",
                "description": "Properties of the object. Contains field @type with type URL."
              }
            }
          },
          "description": "This resource represents a long-running operation that is the result of a network API call."
        }
      ]
  memcache.projects.locations.instances.get:
    description: |-
      Gets details of a single Instance.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/memorystore/docs/memcached/reference/rest/v1/projects.locations.instances/get
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  memcache.projects.locations.instances.list:
    description: |-
      Lists Instances in a given location.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/memorystore/docs/memcached/reference/rest/v1/projects.locations.instances/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "ListInstancesResponse",
          "type": "object",
          "properties": {
            "instances": {
              "type": "array",
              "items": {
                "id": "Instance",
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Required. Unique name of the resource in this scope including project and location using the form: `projects/{project_id}/locations/{location_id}/instances/{instance_id}` Note: Memcached instances are managed and addressed at the regional level so `location_id` here refers to a Google Cloud region; however, users may choose which zones Memcached nodes should be provisioned in within an instance. Refer to zones field for more details."
                  },
                  "state": {
                    "enum": [
                      "STATE_UNSPECIFIED",
                      "CREATING",
                      "READY",
                      "UPDATING",
                      "DELETING",
                      "PERFORMING_MAINTENANCE"
                    ],
                    "type": "string",
                    "readOnly": true,
                    "description": "Output only. The state of this Memcached instance.",
                    "enumDescriptions": [
                      "State not set.",
                      "Memcached instance is being created.",
                      "Memcached instance has been created and ready to be used.",
                      "Memcached instance is updating configuration such as maintenance policy and schedule.",
                      "Memcached instance is being deleted.",
                      "Memcached instance is going through maintenance, e.g. data plane rollout."
                    ]
                  },
                  "zones": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Zones in which Memcached nodes should be provisioned. Memcached nodes will be equally distributed across these zones. If not provided, the service will by default create nodes in all zones in the region for the instance."
                  },
                  "labels": {
                    "type": "object",
                    "description": "Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "nodeCount": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Required. Number of nodes in the Memcached instance."
                  },
                  "createTime": {
                    "type": "string",
                    "format": "google-datetime",
                    "readOnly": true,
                    "description": "Output only. The time the instance was created."
                  },
                  "nodeConfig": {
                    "id": "NodeConfig",
                    "type": "object",
                    "properties": {
                      "cpuCount": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Required. Number of cpus per Memcached node."
                      },
                      "memorySizeMb": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Required. Memory size in MiB for each Memcached node."
                      }
                    },
                    "description": "Required. Configuration for Memcached nodes."
                  },
                  "parameters": {
                    "id": "MemcacheParameters",
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Output only."
                      },
                      "params": {
                        "type": "object",
                        "description": "User defined set of parameters to use in the memcached process.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "description": "Optional: User defined parameters to apply to the memcached process on each node."
                  },
                  "updateTime": {
                    "type": "string",
                    "format": "google-datetime",
                    "readOnly": true,
                    "description": "Output only. The time the instance was updated."
                  },
                  "displayName": {
                    "type": "string",
                    "description": "User provided name for the instance, which is only used for display purposes. Cannot be more than 80 characters."
                  },
                  "memcacheNodes": {
                    "type": "array",
                    "items": {
                      "id": "Node",
                      "type": "object",
                      "properties": {
                        "host": {
                          "type": "string",
                          "readOnly": true,
                          "description": "Output only. Hostname or IP address of the Memcached node used by the clients to connect to the Memcached server on this node."
                        },
                        "port": {
                          "type": "integer",
                          "format": "int32",
                          "readOnly": true,
                          "description": "Output only. The port number of the Memcached server on this node."
                        },
                        "zone": {
                          "type": "string",
                          "readOnly": true,
                          "description": "Output only. Location (GCP Zone) for the Memcached node."
                        },
                        "state": {
                          "enum": [
                            "STATE_UNSPECIFIED",
                            "CREATING",
                            "READY",
                            "DELETING",
                            "UPDATING"
                          ],
                          "type": "string",
                          "readOnly": true,
                          "description": "Output only. Current state of the Memcached node.",
                          "enumDescriptions": [
                            "Node state is not set.",
                            "Node is being created.",
                            "Node has been created and ready to be used.",
                            "Node is being deleted.",
                            "Node is being updated."
                          ]
                        },
                        "nodeId": {
                          "type": "string",
                          "readOnly": true,
                          "description": "Output only. Identifier of the Memcached node. The node id does not include project or location like the Memcached instance name."
                        },
                        "parameters": {
                          "id": "MemcacheParameters",
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "readOnly": true,
                              "description": "Output only."
                            },
                            "params": {
                              "type": "object",
                              "description": "User defined set of parameters to use in the memcached process.",
                              "additionalProperties": {
                                "type": "string"
                              }
                            }
                          },
                          "description": "User defined parameters currently applied to the node."
                        }
                      }
                    },
                    "readOnly": true,
                    "description": "Output only. List of Memcached nodes. Refer to Node message for more details."
                  },
                  "memcacheVersion": {
                    "enum": [
                      "MEMCACHE_VERSION_UNSPECIFIED",
                      "MEMCACHE_1_5"
                    ],
                    "type": "string",
                    "description": "The major version of Memcached software. If not provided, latest supported version will be used. Currently the latest supported major version is `MEMCACHE_1_5`. The minor version will be automatically determined by our system based on the latest supported minor version.",
                    "enumDescriptions": [
                      "",
                      "Memcached 1.5 version."
                    ]
                  },
                  "instanceMessages": {
                    "type": "array",
                    "items": {
                      "id": "InstanceMessage",
                      "type": "object",
                      "properties": {
                        "code": {
                          "enum": [
                            "CODE_UNSPECIFIED",
                            "ZONE_DISTRIBUTION_UNBALANCED"
                          ],
                          "type": "string",
                          "description": "A code that correspond to one type of user-facing message.",
                          "enumDescriptions": [
                            "Message Code not set.",
                            "Memcached nodes are distributed unevenly."
                          ]
                        },
                        "message": {
                          "type": "string",
                          "description": "Message on memcached instance which will be exposed to users."
                        }
                      }
                    },
                    "description": "List of messages that describe the current state of the Memcached instance."
                  },
                  "authorizedNetwork": {
                    "type": "string",
                    "description": "The full name of the Google Compute Engine [network](/compute/docs/networks-and-firewalls#networks) to which the instance is connected. If left unspecified, the `default` network will be used."
                  },
                  "discoveryEndpoint": {
                    "type": "string",
                    "readOnly": true,
                    "description": "Output only. Endpoint for the Discovery API."
                  },
                  "memcacheFullVersion": {
                    "type": "string",
                    "readOnly": true,
                    "description": "Output only. The full version of memcached server running on this instance. System automatically determines the full memcached version for an instance based on the input MemcacheVersion. The full version format will be \"memcached-1.5.16\"."
                  }
                },
                "description": "A Memorystore for Memcached instance"
              },
              "description": "A list of Memcached instances in the project in the specified location, or across all locations. If the `location_id` in the parent field of the request is \"-\", all regions available to the project are queried, and the results aggregated."
            },
            "unreachable": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Locations that could not be reached."
            },
            "nextPageToken": {
              "type": "string",
              "description": "Token to retrieve the next page of results, or empty if there are no more results in the list."
            }
          },
          "description": "Response for ListInstances."
        }
      ]
  memcache.projects.locations.instances.patch:
    description: |-
      Updates an existing Instance in a given project and location.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/memorystore/docs/memcached/reference/rest/v1/projects.locations.instances/patch
    example:
      inputs: [
        {
          "id": "Instance",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Required. Unique name of the resource in this scope including project and location using the form: `projects/{project_id}/locations/{location_id}/instances/{instance_id}` Note: Memcached instances are managed and addressed at the regional level so `location_id` here refers to a Google Cloud region; however, users may choose which zones Memcached nodes should be provisioned in within an instance. Refer to zones field for more details."
            },
            "state": {
              "enum": [
                "STATE_UNSPECIFIED",
                "CREATING",
                "READY",
                "UPDATING",
                "DELETING",
                "PERFORMING_MAINTENANCE"
              ],
              "type": "string",
              "readOnly": true,
              "description": "Output only. The state of this Memcached instance.",
              "enumDescriptions": [
                "State not set.",
                "Memcached instance is being created.",
                "Memcached instance has been created and ready to be used.",
                "Memcached instance is updating configuration such as maintenance policy and schedule.",
                "Memcached instance is being deleted.",
                "Memcached instance is going through maintenance, e.g. data plane rollout."
              ]
            },
            "zones": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Zones in which Memcached nodes should be provisioned. Memcached nodes will be equally distributed across these zones. If not provided, the service will by default create nodes in all zones in the region for the instance."
            },
            "labels": {
              "type": "object",
              "description": "Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources",
              "additionalProperties": {
                "type": "string"
              }
            },
            "nodeCount": {
              "type": "integer",
              "format": "int32",
              "description": "Required. Number of nodes in the Memcached instance."
            },
            "createTime": {
              "type": "string",
              "format": "google-datetime",
              "readOnly": true,
              "description": "Output only. The time the instance was created."
            },
            "nodeConfig": {
              "id": "NodeConfig",
              "type": "object",
              "properties": {
                "cpuCount": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Required. Number of cpus per Memcached node."
                },
                "memorySizeMb": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Required. Memory size in MiB for each Memcached node."
                }
              },
              "description": "Required. Configuration for Memcached nodes."
            },
            "parameters": {
              "id": "MemcacheParameters",
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "Output only."
                },
                "params": {
                  "type": "object",
                  "description": "User defined set of parameters to use in the memcached process.",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              },
              "description": "Optional: User defined parameters to apply to the memcached process on each node."
            },
            "updateTime": {
              "type": "string",
              "format": "google-datetime",
              "readOnly": true,
              "description": "Output only. The time the instance was updated."
            },
            "displayName": {
              "type": "string",
              "description": "User provided name for the instance, which is only used for display purposes. Cannot be more than 80 characters."
            },
            "memcacheNodes": {
              "type": "array",
              "items": {
                "id": "Node",
                "type": "object",
                "properties": {
                  "host": {
                    "type": "string",
                    "readOnly": true,
                    "description": "Output only. Hostname or IP address of the Memcached node used by the clients to connect to the Memcached server on this node."
                  },
                  "port": {
                    "type": "integer",
                    "format": "int32",
                    "readOnly": true,
                    "description": "Output only. The port number of the Memcached server on this node."
                  },
                  "zone": {
                    "type": "string",
                    "readOnly": true,
                    "description": "Output only. Location (GCP Zone) for the Memcached node."
                  },
                  "state": {
                    "enum": [
                      "STATE_UNSPECIFIED",
                      "CREATING",
                      "READY",
                      "DELETING",
                      "UPDATING"
                    ],
                    "type": "string",
                    "readOnly": true,
                    "description": "Output only. Current state of the Memcached node.",
                    "enumDescriptions": [
                      "Node state is not set.",
                      "Node is being created.",
                      "Node has been created and ready to be used.",
                      "Node is being deleted.",
                      "Node is being updated."
                    ]
                  },
                  "nodeId": {
                    "type": "string",
                    "readOnly": true,
                    "description": "Output only. Identifier of the Memcached node. The node id does not include project or location like the Memcached instance name."
                  },
                  "parameters": {
                    "id": "MemcacheParameters",
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Output only."
                      },
                      "params": {
                        "type": "object",
                        "description": "User defined set of parameters to use in the memcached process.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "description": "User defined parameters currently applied to the node."
                  }
                }
              },
              "readOnly": true,
              "description": "Output only. List of Memcached nodes. Refer to Node message for more details."
            },
            "memcacheVersion": {
              "enum": [
                "MEMCACHE_VERSION_UNSPECIFIED",
                "MEMCACHE_1_5"
              ],
              "type": "string",
              "description": "The major version of Memcached software. If not provided, latest supported version will be used. Currently the latest supported major version is `MEMCACHE_1_5`. The minor version will be automatically determined by our system based on the latest supported minor version.",
              "enumDescriptions": [
                "",
                "Memcached 1.5 version."
              ]
            },
            "instanceMessages": {
              "type": "array",
              "items": {
                "id": "InstanceMessage",
                "type": "object",
                "properties": {
                  "code": {
                    "enum": [
                      "CODE_UNSPECIFIED",
                      "ZONE_DISTRIBUTION_UNBALANCED"
                    ],
                    "type": "string",
                    "description": "A code that correspond to one type of user-facing message.",
                    "enumDescriptions": [
                      "Message Code not set.",
                      "Memcached nodes are distributed unevenly."
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Message on memcached instance which will be exposed to users."
                  }
                }
              },
              "description": "List of messages that describe the current state of the Memcached instance."
            },
            "authorizedNetwork": {
              "type": "string",
              "description": "The full name of the Google Compute Engine [network](/compute/docs/networks-and-firewalls#networks) to which the instance is connected. If left unspecified, the `default` network will be used."
            },
            "discoveryEndpoint": {
              "type": "string",
              "readOnly": true,
              "description": "Output only. Endpoint for the Discovery API."
            },
            "memcacheFullVersion": {
              "type": "string",
              "readOnly": true,
              "description": "Output only. The full version of memcached server running on this instance. System automatically determines the full memcached version for an instance based on the input MemcacheVersion. The full version format will be \"memcached-1.5.16\"."
            }
          },
          "description": "A Memorystore for Memcached instance"
        }
      ]
      outputs: [
        {
          "id": "Operation",
          "type": "object",
          "properties": {
            "done": {
              "type": "boolean",
              "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available."
            },
            "name": {
              "type": "string",
              "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`."
            },
            "error": {
              "id": "Status",
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The status code, which should be an enum value of google.rpc.Code."
                },
                "details": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  },
                  "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
                },
                "message": {
                  "type": "string",
                  "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                }
              },
              "description": "The error result of the operation in case of failure or cancellation."
            },
            "metadata": {
              "type": "object",
              "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
              "additionalProperties": {
                "type": "any",
                "description": "Properties of the object. Contains field @type with type URL."
              }
            },
            "response": {
              "type": "object",
              "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
              "additionalProperties": {
                "type": "any",
                "description": "Properties of the object. Contains field @type with type URL."
              }
            }
          },
          "description": "This resource represents a long-running operation that is the result of a network API call."
        }
      ]
  memcache.projects.locations.instances.updateParameters:
    description: |-
      Updates the defined Memcached parameters for an existing instance. This method only stages the parameters, it must be followed by `ApplyParameters` to apply the parameters to nodes of the Memcached instance.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/memorystore/docs/memcached/reference/rest/v1/projects.locations.instances/updateParameters
    example:
      inputs: [
        {
          "id": "UpdateParametersRequest",
          "type": "object",
          "properties": {
            "parameters": {
              "id": "MemcacheParameters",
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "Output only."
                },
                "params": {
                  "type": "object",
                  "description": "User defined set of parameters to use in the memcached process.",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              },
              "description": "The parameters to apply to the instance."
            },
            "updateMask": {
              "type": "string",
              "format": "google-fieldmask",
              "description": "Required. Mask of fields to update."
            }
          },
          "description": "Request for UpdateParameters."
        }
      ]
      outputs: [
        {
          "id": "Operation",
          "type": "object",
          "properties": {
            "done": {
              "type": "boolean",
              "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available."
            },
            "name": {
              "type": "string",
              "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`."
            },
            "error": {
              "id": "Status",
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The status code, which should be an enum value of google.rpc.Code."
                },
                "details": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  },
                  "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
                },
                "message": {
                  "type": "string",
                  "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                }
              },
              "description": "The error result of the operation in case of failure or cancellation."
            },
            "metadata": {
              "type": "object",
              "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
              "additionalProperties": {
                "type": "any",
                "description": "Properties of the object. Contains field @type with type URL."
              }
            },
            "response": {
              "type": "object",
              "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
              "additionalProperties": {
                "type": "any",
                "description": "Properties of the object. Contains field @type with type URL."
              }
            }
          },
          "description": "This resource represents a long-running operation that is the result of a network API call."
        }
      ]
  memcache.projects.locations.list:
    description: |-
      Lists information about the supported locations for this service.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/memorystore/docs/memcached/reference/rest/v1/projects.locations/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "ListLocationsResponse",
          "type": "object",
          "properties": {
            "locations": {
              "type": "array",
              "items": {
                "id": "Location",
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Resource name for the location, which may vary between implementations. For example: `\"projects/example-project/locations/us-east1\"`"
                  },
                  "labels": {
                    "type": "object",
                    "description": "Cross-service attributes for the location. For example {\"cloud.googleapis.com/region\": \"us-east1\"}",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "metadata": {
                    "type": "object",
                    "description": "Service-specific metadata. For example the available capacity at the given location.",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  },
                  "locationId": {
                    "type": "string",
                    "description": "The canonical id for this location. For example: `\"us-east1\"`."
                  },
                  "displayName": {
                    "type": "string",
                    "description": "The friendly name for this location, typically a nearby city name. For example, \"Tokyo\"."
                  }
                },
                "description": "A resource that represents Google Cloud Platform location."
              },
              "description": "A list of locations that matches the specified filter in the request."
            },
            "nextPageToken": {
              "type": "string",
              "description": "The standard List next-page token."
            }
          },
          "description": "The response message for Locations.ListLocations."
        }
      ]
  memcache.projects.locations.operations.cancel:
    description: |-
      Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/memorystore/docs/memcached/reference/rest/v1/projects.locations.operations/cancel
    example:
      inputs: [
        {
          "id": "CancelOperationRequest",
          "type": "object",
          "properties": {},
          "description": "The request message for Operations.CancelOperation."
        }
      ]
      outputs: [
        {
          "id": "Empty",
          "type": "object",
          "properties": {},
          "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`."
        }
      ]
  memcache.projects.locations.operations.delete:
    description: |-
      Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/memorystore/docs/memcached/reference/rest/v1/projects.locations.operations/delete
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "Empty",
          "type": "object",
          "properties": {},
          "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`."
        }
      ]
  memcache.projects.locations.operations.get:
    description: |-
      Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/memorystore/docs/memcached/reference/rest/v1/projects.locations.operations/get
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "Operation",
          "type": "object",
          "properties": {
            "done": {
              "type": "boolean",
              "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available."
            },
            "name": {
              "type": "string",
              "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`."
            },
            "error": {
              "id": "Status",
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The status code, which should be an enum value of google.rpc.Code."
                },
                "details": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  },
                  "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
                },
                "message": {
                  "type": "string",
                  "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                }
              },
              "description": "The error result of the operation in case of failure or cancellation."
            },
            "metadata": {
              "type": "object",
              "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
              "additionalProperties": {
                "type": "any",
                "description": "Properties of the object. Contains field @type with type URL."
              }
            },
            "response": {
              "type": "object",
              "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
              "additionalProperties": {
                "type": "any",
                "description": "Properties of the object. Contains field @type with type URL."
              }
            }
          },
          "description": "This resource represents a long-running operation that is the result of a network API call."
        }
      ]
  memcache.projects.locations.operations.list:
    description: |-
      Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `"/v1/{name=users/*}/operations"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/memorystore/docs/memcached/reference/rest/v1/projects.locations.operations/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "ListOperationsResponse",
          "type": "object",
          "properties": {
            "operations": {
              "type": "array",
              "items": {
                "id": "Operation",
                "type": "object",
                "properties": {
                  "done": {
                    "type": "boolean",
                    "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available."
                  },
                  "name": {
                    "type": "string",
                    "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`."
                  },
                  "error": {
                    "id": "Status",
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The status code, which should be an enum value of google.rpc.Code."
                      },
                      "details": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "any",
                            "description": "Properties of the object. Contains field @type with type URL."
                          }
                        },
                        "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
                      },
                      "message": {
                        "type": "string",
                        "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                      }
                    },
                    "description": "The error result of the operation in case of failure or cancellation."
                  },
                  "metadata": {
                    "type": "object",
                    "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  },
                  "response": {
                    "type": "object",
                    "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  }
                },
                "description": "This resource represents a long-running operation that is the result of a network API call."
              },
              "description": "A list of operations that matches the specified filter in the request."
            },
            "nextPageToken": {
              "type": "string",
              "description": "The standard List next-page token."
            }
          },
          "description": "The response message for Operations.ListOperations."
        }
      ]
  redis.projects.locations.get:
    description: |-
      Gets information about a location.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/memorystore/docs/redis/reference/rest/v1/projects.locations/get
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "Location",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Full resource name for the region. For example: \"projects/example-project/locations/us-east1\"."
            },
            "labels": {
              "type": "object",
              "description": "Cross-service attributes for the location. For example {\"cloud.googleapis.com/region\": \"us-east1\"}",
              "additionalProperties": {
                "type": "string"
              }
            },
            "metadata": {
              "type": "object",
              "description": "Output only. The set of available zones in the location. The map is keyed by the lowercase ID of each zone, as defined by Compute Engine. These keys can be specified in `location_id` or `alternative_location_id` fields when creating a Redis instance.",
              "additionalProperties": {
                "type": "any",
                "description": "Properties of the object. Contains field @type with type URL."
              }
            },
            "locationId": {
              "type": "string",
              "description": "Resource ID for the region. For example: \"us-east1\"."
            },
            "displayName": {
              "type": "string",
              "description": "The friendly name for this location, typically a nearby city name. For example, \"Tokyo\"."
            }
          },
          "description": "A resource that represents Google Cloud Platform location."
        }
      ]
  redis.projects.locations.instances.create:
    description: |-
      Creates a Redis instance based on the specified tier and memory size. By default, the instance is accessible from the project's [default network](https://cloud.google.com/vpc/docs/vpc). The creation is executed asynchronously and callers may check the returned operation to track its progress. Once the operation is completed the Redis instance will be fully functional. Completed longrunning.Operation will contain the new instance object in the response field. The returned operation is automatically deleted after a few hours, so there is no need to call DeleteOperation.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/memorystore/docs/redis/reference/rest/v1/projects.locations.instances/create
    example:
      inputs: [
        {
          "id": "Instance",
          "type": "object",
          "properties": {
            "host": {
              "type": "string",
              "readOnly": true,
              "description": "Output only. Hostname or IP address of the exposed Redis endpoint used by clients to connect to the service."
            },
            "name": {
              "type": "string",
              "description": "Required. Unique name of the resource in this scope including project and location using the form: `projects/{project_id}/locations/{location_id}/instances/{instance_id}` Note: Redis instances are managed and addressed at regional level so location_id here refers to a GCP region; however, users may choose which specific zone (or collection of zones for cross-zone instances) an instance should be provisioned in. Refer to location_id and alternative_location_id fields for more details."
            },
            "port": {
              "type": "integer",
              "format": "int32",
              "readOnly": true,
              "description": "Output only. The port number of the exposed Redis endpoint."
            },
            "tier": {
              "enum": [
                "TIER_UNSPECIFIED",
                "BASIC",
                "STANDARD_HA"
              ],
              "type": "string",
              "description": "Required. The service tier of the instance.",
              "enumDescriptions": [
                "Not set.",
                "BASIC tier: standalone instance",
                "STANDARD_HA tier: highly available primary/replica instances"
              ]
            },
            "state": {
              "enum": [
                "STATE_UNSPECIFIED",
                "CREATING",
                "READY",
                "UPDATING",
                "DELETING",
                "REPAIRING",
                "MAINTENANCE",
                "IMPORTING",
                "FAILING_OVER"
              ],
              "type": "string",
              "readOnly": true,
              "description": "Output only. The current state of this instance.",
              "enumDescriptions": [
                "Not set.",
                "Redis instance is being created.",
                "Redis instance has been created and is fully usable.",
                "Redis instance configuration is being updated. Certain kinds of updates may cause the instance to become unusable while the update is in progress.",
                "Redis instance is being deleted.",
                "Redis instance is being repaired and may be unusable.",
                "Maintenance is being performed on this Redis instance.",
                "Redis instance is importing data (availability may be affected).",
                "Redis instance is failing over (availability may be affected)."
              ]
            },
            "labels": {
              "type": "object",
              "description": "Resource labels to represent user provided metadata",
              "additionalProperties": {
                "type": "string"
              }
            },
            "createTime": {
              "type": "string",
              "format": "google-datetime",
              "readOnly": true,
              "description": "Output only. The time the instance was created."
            },
            "locationId": {
              "type": "string",
              "description": "Optional. The zone where the instance will be provisioned. If not provided, the service will choose a zone for the instance. For STANDARD_HA tier, instances will be created across two zones for protection against zonal failures. If alternative_location_id is also provided, it must be different from location_id."
            },
            "authEnabled": {
              "type": "boolean",
              "description": "Optional. Indicates whether OSS Redis AUTH is enabled for the instance. If set to \"true\" AUTH is enabled on the instance. Default value is \"false\" meaning AUTH is disabled."
            },
            "connectMode": {
              "enum": [
                "CONNECT_MODE_UNSPECIFIED",
                "DIRECT_PEERING",
                "PRIVATE_SERVICE_ACCESS"
              ],
              "type": "string",
              "description": "Optional. The network connect mode of the Redis instance. If not provided, the connect mode defaults to DIRECT_PEERING.",
              "enumDescriptions": [
                "Not set.",
                "Connect via direct peering to the Memorystore for Redis hosted service.",
                "Connect your Memorystore for Redis instance using Private Service Access. Private services access provides an IP address range for multiple Google Cloud services, including Memorystore."
              ]
            },
            "displayName": {
              "type": "string",
              "description": "An arbitrary and optional user-provided name for the instance."
            },
            "memorySizeGb": {
              "type": "integer",
              "format": "int32",
              "description": "Required. Redis memory size in GiB."
            },
            "redisConfigs": {
              "type": "object",
              "description": "Optional. Redis configuration parameters, according to http://redis.io/topics/config. Currently, the only supported parameters are: Redis version 3.2 and newer: * maxmemory-policy * notify-keyspace-events Redis version 4.0 and newer: * activedefrag * lfu-decay-time * lfu-log-factor * maxmemory-gb Redis version 5.0 and newer: * stream-node-max-bytes * stream-node-max-entries",
              "additionalProperties": {
                "type": "string"
              }
            },
            "redisVersion": {
              "type": "string",
              "description": "Optional. The version of Redis software. If not provided, latest supported version will be used. Currently, the supported values are: * `REDIS_3_2` for Redis 3.2 compatibility * `REDIS_4_0` for Redis 4.0 compatibility (default) * `REDIS_5_0` for Redis 5.0 compatibility * `REDIS_6_X` for Redis 6.x compatibility"
            },
            "serverCaCerts": {
              "type": "array",
              "items": {
                "id": "TlsCertificate",
                "type": "object",
                "properties": {
                  "cert": {
                    "type": "string",
                    "description": "PEM representation."
                  },
                  "createTime": {
                    "type": "string",
                    "format": "google-datetime",
                    "readOnly": true,
                    "description": "Output only. The time when the certificate was created in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2020-05-18T00:00:00.094Z`."
                  },
                  "expireTime": {
                    "type": "string",
                    "format": "google-datetime",
                    "readOnly": true,
                    "description": "Output only. The time when the certificate expires in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2020-05-18T00:00:00.094Z`."
                  },
                  "serialNumber": {
                    "type": "string",
                    "description": "Serial number, as extracted from the certificate."
                  },
                  "sha1Fingerprint": {
                    "type": "string",
                    "description": "Sha1 Fingerprint of the certificate."
                  }
                },
                "description": "TlsCertificate Resource"
              },
              "readOnly": true,
              "description": "Output only. List of server CA certificates for the instance."
            },
            "statusMessage": {
              "type": "string",
              "readOnly": true,
              "description": "Output only. Additional information about the current status of this instance, if available."
            },
            "reservedIpRange": {
              "type": "string",
              "description": "Optional. For DIRECT_PEERING mode, the CIDR range of internal addresses that are reserved for this instance. Range must be unique and non-overlapping with existing subnets in an authorized network. For PRIVATE_SERVICE_ACCESS mode, the name of one allocated IP address ranges associated with this private service access connection. If not provided, the service will choose an unused /29 block, for example, 10.0.0.0/29 or 192.168.0.0/29."
            },
            "authorizedNetwork": {
              "type": "string",
              "description": "Optional. The full name of the Google Compute Engine [network](https://cloud.google.com/vpc/docs/vpc) to which the instance is connected. If left unspecified, the `default` network will be used."
            },
            "currentLocationId": {
              "type": "string",
              "readOnly": true,
              "description": "Output only. The current zone where the Redis endpoint is placed. For Basic Tier instances, this will always be the same as the location_id provided by the user at creation time. For Standard Tier instances, this can be either location_id or alternative_location_id and can change after a failover event."
            },
            "maintenancePolicy": {
              "id": "MaintenancePolicy",
              "type": "object",
              "properties": {
                "createTime": {
                  "type": "string",
                  "format": "google-datetime",
                  "readOnly": true,
                  "description": "Output only. The time when the policy was created."
                },
                "updateTime": {
                  "type": "string",
                  "format": "google-datetime",
                  "readOnly": true,
                  "description": "Output only. The time when the policy was last updated."
                },
                "description": {
                  "type": "string",
                  "description": "Optional. Description of what this policy is for. Create/Update methods return INVALID_ARGUMENT if the length is greater than 512."
                },
                "weeklyMaintenanceWindow": {
                  "type": "array",
                  "items": {
                    "id": "WeeklyMaintenanceWindow",
                    "type": "object",
                    "properties": {
                      "day": {
                        "enum": [
                          "DAY_OF_WEEK_UNSPECIFIED",
                          "MONDAY",
                          "TUESDAY",
                          "WEDNESDAY",
                          "THURSDAY",
                          "FRIDAY",
                          "SATURDAY",
                          "SUNDAY"
                        ],
                        "type": "string",
                        "description": "Required. The day of week that maintenance updates occur.",
                        "enumDescriptions": [
                          "The day of the week is unspecified.",
                          "Monday",
                          "Tuesday",
                          "Wednesday",
                          "Thursday",
                          "Friday",
                          "Saturday",
                          "Sunday"
                        ]
                      },
                      "duration": {
                        "type": "string",
                        "format": "google-duration",
                        "readOnly": true,
                        "description": "Output only. Duration of the maintenance window. The current window is fixed at 1 hour."
                      },
                      "startTime": {
                        "id": "TimeOfDay",
                        "type": "object",
                        "properties": {
                          "hours": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value \"24:00:00\" for scenarios like business closing time."
                          },
                          "nanos": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999."
                          },
                          "minutes": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Minutes of hour of day. Must be from 0 to 59."
                          },
                          "seconds": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds."
                          }
                        },
                        "description": "Required. Start time of the window in UTC time."
                      }
                    },
                    "description": "Time window in which disruptive maintenance updates occur. Non-disruptive updates can occur inside or outside this window."
                  },
                  "description": "Optional. Maintenance window that is applied to resources covered by this policy. Minimum 1. For the current version, the maximum number of weekly_window is expected to be one."
                }
              },
              "description": "Optional. The maintenance policy for the instance. If not provided, maintenance events can be performed at any time."
            },
            "maintenanceSchedule": {
              "id": "MaintenanceSchedule",
              "type": "object",
              "readOnly": true,
              "properties": {
                "endTime": {
                  "type": "string",
                  "format": "google-datetime",
                  "readOnly": true,
                  "description": "Output only. The end time of any upcoming scheduled maintenance for this instance."
                },
                "startTime": {
                  "type": "string",
                  "format": "google-datetime",
                  "readOnly": true,
                  "description": "Output only. The start time of any upcoming scheduled maintenance for this instance."
                },
                "canReschedule": {
                  "type": "boolean",
                  "description": "If the scheduled maintenance can be rescheduled, default is true."
                },
                "scheduleDeadlineTime": {
                  "type": "string",
                  "format": "google-datetime",
                  "readOnly": true,
                  "description": "Output only. The deadline that the maintenance schedule start time can not go beyond, including reschedule."
                }
              },
              "description": "Output only. Date and time of upcoming maintenance events which have been scheduled."
            },
            "alternativeLocationId": {
              "type": "string",
              "description": "Optional. Only applicable to STANDARD_HA tier which protects the instance against zonal failures by provisioning it across two zones. If provided, it must be a different zone from the one provided in location_id."
            },
            "transitEncryptionMode": {
              "enum": [
                "TRANSIT_ENCRYPTION_MODE_UNSPECIFIED",
                "SERVER_AUTHENTICATION",
                "DISABLED"
              ],
              "type": "string",
              "description": "Optional. The TLS mode of the Redis instance. If not provided, TLS is disabled for the instance.",
              "enumDescriptions": [
                "Not set.",
                "Client to Server traffic encryption enabled with server authentication.",
                "TLS is disabled for the instance."
              ]
            },
            "persistenceIamIdentity": {
              "type": "string",
              "readOnly": true,
              "description": "Output only. Cloud IAM identity used by import / export operations to transfer data to/from Cloud Storage. Format is \"serviceAccount:\". The value may change over time for a given instance so should be checked before each import/export operation."
            }
          },
          "description": "A Google Cloud Redis instance."
        }
      ]
      outputs: [
        {
          "id": "Operation",
          "type": "object",
          "properties": {
            "done": {
              "type": "boolean",
              "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available."
            },
            "name": {
              "type": "string",
              "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`."
            },
            "error": {
              "id": "Status",
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The status code, which should be an enum value of google.rpc.Code."
                },
                "details": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  },
                  "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
                },
                "message": {
                  "type": "string",
                  "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                }
              },
              "description": "The error result of the operation in case of failure or cancellation."
            },
            "metadata": {
              "type": "object",
              "description": "{ `createTime`: The time the operation was created. `endTime`: The time the operation finished running. `target`: Server-defined resource path for the target of the operation. `verb`: Name of the verb executed by the operation. `statusDetail`: Human-readable status of the operation, if any. `cancelRequested`: Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`. `apiVersion`: API version used to start the operation. }",
              "additionalProperties": {
                "type": "any",
                "description": "Properties of the object. Contains field @type with type URL."
              }
            },
            "response": {
              "type": "object",
              "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
              "additionalProperties": {
                "type": "any",
                "description": "Properties of the object. Contains field @type with type URL."
              }
            }
          },
          "description": "This resource represents a long-running operation that is the result of a network API call."
        }
      ]
  redis.projects.locations.instances.delete:
    description: |-
      Deletes a specific Redis instance. Instance stops serving and data is deleted.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/memorystore/docs/redis/reference/rest/v1/projects.locations.instances/delete
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "Operation",
          "type": "object",
          "properties": {
            "done": {
              "type": "boolean",
              "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available."
            },
            "name": {
              "type": "string",
              "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`."
            },
            "error": {
              "id": "Status",
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The status code, which should be an enum value of google.rpc.Code."
                },
                "details": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  },
                  "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
                },
                "message": {
                  "type": "string",
                  "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                }
              },
              "description": "The error result of the operation in case of failure or cancellation."
            },
            "metadata": {
              "type": "object",
              "description": "{ `createTime`: The time the operation was created. `endTime`: The time the operation finished running. `target`: Server-defined resource path for the target of the operation. `verb`: Name of the verb executed by the operation. `statusDetail`: Human-readable status of the operation, if any. `cancelRequested`: Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`. `apiVersion`: API version used to start the operation. }",
              "additionalProperties": {
                "type": "any",
                "description": "Properties of the object. Contains field @type with type URL."
              }
            },
            "response": {
              "type": "object",
              "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
              "additionalProperties": {
                "type": "any",
                "description": "Properties of the object. Contains field @type with type URL."
              }
            }
          },
          "description": "This resource represents a long-running operation that is the result of a network API call."
        }
      ]
  redis.projects.locations.instances.export:
    description: |-
      Export Redis instance data into a Redis RDB format file in Cloud Storage. Redis will continue serving during this operation. The returned operation is automatically deleted after a few hours, so there is no need to call DeleteOperation.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/memorystore/docs/redis/reference/rest/v1/projects.locations.instances/export
    example:
      inputs: [
        {
          "id": "ExportInstanceRequest",
          "type": "object",
          "properties": {
            "outputConfig": {
              "id": "OutputConfig",
              "type": "object",
              "properties": {
                "gcsDestination": {
                  "id": "GcsDestination",
                  "type": "object",
                  "properties": {
                    "uri": {
                      "type": "string",
                      "description": "Required. Data destination URI (e.g. 'gs://my_bucket/my_object'). Existing files will be overwritten."
                    }
                  },
                  "description": "Google Cloud Storage destination for output content."
                }
              },
              "description": "Required. Specify data to be exported."
            }
          },
          "description": "Request for Export."
        }
      ]
      outputs: [
        {
          "id": "Operation",
          "type": "object",
          "properties": {
            "done": {
              "type": "boolean",
              "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available."
            },
            "name": {
              "type": "string",
              "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`."
            },
            "error": {
              "id": "Status",
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The status code, which should be an enum value of google.rpc.Code."
                },
                "details": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  },
                  "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
                },
                "message": {
                  "type": "string",
                  "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                }
              },
              "description": "The error result of the operation in case of failure or cancellation."
            },
            "metadata": {
              "type": "object",
              "description": "{ `createTime`: The time the operation was created. `endTime`: The time the operation finished running. `target`: Server-defined resource path for the target of the operation. `verb`: Name of the verb executed by the operation. `statusDetail`: Human-readable status of the operation, if any. `cancelRequested`: Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`. `apiVersion`: API version used to start the operation. }",
              "additionalProperties": {
                "type": "any",
                "description": "Properties of the object. Contains field @type with type URL."
              }
            },
            "response": {
              "type": "object",
              "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
              "additionalProperties": {
                "type": "any",
                "description": "Properties of the object. Contains field @type with type URL."
              }
            }
          },
          "description": "This resource represents a long-running operation that is the result of a network API call."
        }
      ]
  redis.projects.locations.instances.failover:
    description: |-
      Initiates a failover of the primary node to current replica node for a specific STANDARD tier Cloud Memorystore for Redis instance.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/memorystore/docs/redis/reference/rest/v1/projects.locations.instances/failover
    example:
      inputs: [
        {
          "id": "FailoverInstanceRequest",
          "type": "object",
          "properties": {
            "dataProtectionMode": {
              "enum": [
                "DATA_PROTECTION_MODE_UNSPECIFIED",
                "LIMITED_DATA_LOSS",
                "FORCE_DATA_LOSS"
              ],
              "type": "string",
              "description": "Optional. Available data protection modes that the user can choose. If it's unspecified, data protection mode will be LIMITED_DATA_LOSS by default.",
              "enumDescriptions": [
                "Defaults to LIMITED_DATA_LOSS if a data protection mode is not specified.",
                "Instance failover will be protected with data loss control. More specifically, the failover will only be performed if the current replication offset diff between primary and replica is under a certain threshold.",
                "Instance failover will be performed without data loss control."
              ]
            }
          },
          "description": "Request for Failover."
        }
      ]
      outputs: [
        {
          "id": "Operation",
          "type": "object",
          "properties": {
            "done": {
              "type": "boolean",
              "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available."
            },
            "name": {
              "type": "string",
              "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`."
            },
            "error": {
              "id": "Status",
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The status code, which should be an enum value of google.rpc.Code."
                },
                "details": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  },
                  "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
                },
                "message": {
                  "type": "string",
                  "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                }
              },
              "description": "The error result of the operation in case of failure or cancellation."
            },
            "metadata": {
              "type": "object",
              "description": "{ `createTime`: The time the operation was created. `endTime`: The time the operation finished running. `target`: Server-defined resource path for the target of the operation. `verb`: Name of the verb executed by the operation. `statusDetail`: Human-readable status of the operation, if any. `cancelRequested`: Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`. `apiVersion`: API version used to start the operation. }",
              "additionalProperties": {
                "type": "any",
                "description": "Properties of the object. Contains field @type with type URL."
              }
            },
            "response": {
              "type": "object",
              "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
              "additionalProperties": {
                "type": "any",
                "description": "Properties of the object. Contains field @type with type URL."
              }
            }
          },
          "description": "This resource represents a long-running operation that is the result of a network API call."
        }
      ]
  redis.projects.locations.instances.get:
    description: |-
      Gets the details of a specific Redis instance.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/memorystore/docs/redis/reference/rest/v1/projects.locations.instances/get
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  redis.projects.locations.instances.getAuthString:
    description: |-
      Gets the AUTH string for a Redis instance. If AUTH is not enabled for the instance the response will be empty. This information is not included in the details returned to GetInstance.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/memorystore/docs/redis/reference/rest/v1/projects.locations.instances/getAuthString
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "InstanceAuthString",
          "type": "object",
          "properties": {
            "authString": {
              "type": "string",
              "description": "AUTH string set on the instance."
            }
          },
          "description": "Instance AUTH string details."
        }
      ]
  redis.projects.locations.instances.import:
    description: |-
      Import a Redis RDB snapshot file from Cloud Storage into a Redis instance. Redis may stop serving during this operation. Instance state will be IMPORTING for entire operation. When complete, the instance will contain only data from the imported file. The returned operation is automatically deleted after a few hours, so there is no need to call DeleteOperation.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/memorystore/docs/redis/reference/rest/v1/projects.locations.instances/import
    example:
      inputs: [
        {
          "id": "ImportInstanceRequest",
          "type": "object",
          "properties": {
            "inputConfig": {
              "id": "InputConfig",
              "type": "object",
              "properties": {
                "gcsSource": {
                  "id": "GcsSource",
                  "type": "object",
                  "properties": {
                    "uri": {
                      "type": "string",
                      "description": "Required. Source data URI. (e.g. 'gs://my_bucket/my_object')."
                    }
                  },
                  "description": "Google Cloud Storage location where input content is located."
                }
              },
              "description": "Required. Specify data to be imported."
            }
          },
          "description": "Request for Import."
        }
      ]
      outputs: [
        {
          "id": "Operation",
          "type": "object",
          "properties": {
            "done": {
              "type": "boolean",
              "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available."
            },
            "name": {
              "type": "string",
              "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`."
            },
            "error": {
              "id": "Status",
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The status code, which should be an enum value of google.rpc.Code."
                },
                "details": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  },
                  "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
                },
                "message": {
                  "type": "string",
                  "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                }
              },
              "description": "The error result of the operation in case of failure or cancellation."
            },
            "metadata": {
              "type": "object",
              "description": "{ `createTime`: The time the operation was created. `endTime`: The time the operation finished running. `target`: Server-defined resource path for the target of the operation. `verb`: Name of the verb executed by the operation. `statusDetail`: Human-readable status of the operation, if any. `cancelRequested`: Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`. `apiVersion`: API version used to start the operation. }",
              "additionalProperties": {
                "type": "any",
                "description": "Properties of the object. Contains field @type with type URL."
              }
            },
            "response": {
              "type": "object",
              "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
              "additionalProperties": {
                "type": "any",
                "description": "Properties of the object. Contains field @type with type URL."
              }
            }
          },
          "description": "This resource represents a long-running operation that is the result of a network API call."
        }
      ]
  redis.projects.locations.instances.list:
    description: |-
      Lists all Redis instances owned by a project in either the specified location (region) or all locations. The location should have the following format: * `projects/{project_id}/locations/{location_id}` If `location_id` is specified as `-` (wildcard), then all regions available to the project are queried, and the results are aggregated.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/memorystore/docs/redis/reference/rest/v1/projects.locations.instances/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "ListInstancesResponse",
          "type": "object",
          "properties": {
            "instances": {
              "type": "array",
              "items": {
                "id": "Instance",
                "type": "object",
                "properties": {
                  "host": {
                    "type": "string",
                    "readOnly": true,
                    "description": "Output only. Hostname or IP address of the exposed Redis endpoint used by clients to connect to the service."
                  },
                  "name": {
                    "type": "string",
                    "description": "Required. Unique name of the resource in this scope including project and location using the form: `projects/{project_id}/locations/{location_id}/instances/{instance_id}` Note: Redis instances are managed and addressed at regional level so location_id here refers to a GCP region; however, users may choose which specific zone (or collection of zones for cross-zone instances) an instance should be provisioned in. Refer to location_id and alternative_location_id fields for more details."
                  },
                  "port": {
                    "type": "integer",
                    "format": "int32",
                    "readOnly": true,
                    "description": "Output only. The port number of the exposed Redis endpoint."
                  },
                  "tier": {
                    "enum": [
                      "TIER_UNSPECIFIED",
                      "BASIC",
                      "STANDARD_HA"
                    ],
                    "type": "string",
                    "description": "Required. The service tier of the instance.",
                    "enumDescriptions": [
                      "Not set.",
                      "BASIC tier: standalone instance",
                      "STANDARD_HA tier: highly available primary/replica instances"
                    ]
                  },
                  "state": {
                    "enum": [
                      "STATE_UNSPECIFIED",
                      "CREATING",
                      "READY",
                      "UPDATING",
                      "DELETING",
                      "REPAIRING",
                      "MAINTENANCE",
                      "IMPORTING",
                      "FAILING_OVER"
                    ],
                    "type": "string",
                    "readOnly": true,
                    "description": "Output only. The current state of this instance.",
                    "enumDescriptions": [
                      "Not set.",
                      "Redis instance is being created.",
                      "Redis instance has been created and is fully usable.",
                      "Redis instance configuration is being updated. Certain kinds of updates may cause the instance to become unusable while the update is in progress.",
                      "Redis instance is being deleted.",
                      "Redis instance is being repaired and may be unusable.",
                      "Maintenance is being performed on this Redis instance.",
                      "Redis instance is importing data (availability may be affected).",
                      "Redis instance is failing over (availability may be affected)."
                    ]
                  },
                  "labels": {
                    "type": "object",
                    "description": "Resource labels to represent user provided metadata",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "createTime": {
                    "type": "string",
                    "format": "google-datetime",
                    "readOnly": true,
                    "description": "Output only. The time the instance was created."
                  },
                  "locationId": {
                    "type": "string",
                    "description": "Optional. The zone where the instance will be provisioned. If not provided, the service will choose a zone for the instance. For STANDARD_HA tier, instances will be created across two zones for protection against zonal failures. If alternative_location_id is also provided, it must be different from location_id."
                  },
                  "authEnabled": {
                    "type": "boolean",
                    "description": "Optional. Indicates whether OSS Redis AUTH is enabled for the instance. If set to \"true\" AUTH is enabled on the instance. Default value is \"false\" meaning AUTH is disabled."
                  },
                  "connectMode": {
                    "enum": [
                      "CONNECT_MODE_UNSPECIFIED",
                      "DIRECT_PEERING",
                      "PRIVATE_SERVICE_ACCESS"
                    ],
                    "type": "string",
                    "description": "Optional. The network connect mode of the Redis instance. If not provided, the connect mode defaults to DIRECT_PEERING.",
                    "enumDescriptions": [
                      "Not set.",
                      "Connect via direct peering to the Memorystore for Redis hosted service.",
                      "Connect your Memorystore for Redis instance using Private Service Access. Private services access provides an IP address range for multiple Google Cloud services, including Memorystore."
                    ]
                  },
                  "displayName": {
                    "type": "string",
                    "description": "An arbitrary and optional user-provided name for the instance."
                  },
                  "memorySizeGb": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Required. Redis memory size in GiB."
                  },
                  "redisConfigs": {
                    "type": "object",
                    "description": "Optional. Redis configuration parameters, according to http://redis.io/topics/config. Currently, the only supported parameters are: Redis version 3.2 and newer: * maxmemory-policy * notify-keyspace-events Redis version 4.0 and newer: * activedefrag * lfu-decay-time * lfu-log-factor * maxmemory-gb Redis version 5.0 and newer: * stream-node-max-bytes * stream-node-max-entries",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "redisVersion": {
                    "type": "string",
                    "description": "Optional. The version of Redis software. If not provided, latest supported version will be used. Currently, the supported values are: * `REDIS_3_2` for Redis 3.2 compatibility * `REDIS_4_0` for Redis 4.0 compatibility (default) * `REDIS_5_0` for Redis 5.0 compatibility * `REDIS_6_X` for Redis 6.x compatibility"
                  },
                  "serverCaCerts": {
                    "type": "array",
                    "items": {
                      "id": "TlsCertificate",
                      "type": "object",
                      "properties": {
                        "cert": {
                          "type": "string",
                          "description": "PEM representation."
                        },
                        "createTime": {
                          "type": "string",
                          "format": "google-datetime",
                          "readOnly": true,
                          "description": "Output only. The time when the certificate was created in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2020-05-18T00:00:00.094Z`."
                        },
                        "expireTime": {
                          "type": "string",
                          "format": "google-datetime",
                          "readOnly": true,
                          "description": "Output only. The time when the certificate expires in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2020-05-18T00:00:00.094Z`."
                        },
                        "serialNumber": {
                          "type": "string",
                          "description": "Serial number, as extracted from the certificate."
                        },
                        "sha1Fingerprint": {
                          "type": "string",
                          "description": "Sha1 Fingerprint of the certificate."
                        }
                      },
                      "description": "TlsCertificate Resource"
                    },
                    "readOnly": true,
                    "description": "Output only. List of server CA certificates for the instance."
                  },
                  "statusMessage": {
                    "type": "string",
                    "readOnly": true,
                    "description": "Output only. Additional information about the current status of this instance, if available."
                  },
                  "reservedIpRange": {
                    "type": "string",
                    "description": "Optional. For DIRECT_PEERING mode, the CIDR range of internal addresses that are reserved for this instance. Range must be unique and non-overlapping with existing subnets in an authorized network. For PRIVATE_SERVICE_ACCESS mode, the name of one allocated IP address ranges associated with this private service access connection. If not provided, the service will choose an unused /29 block, for example, 10.0.0.0/29 or 192.168.0.0/29."
                  },
                  "authorizedNetwork": {
                    "type": "string",
                    "description": "Optional. The full name of the Google Compute Engine [network](https://cloud.google.com/vpc/docs/vpc) to which the instance is connected. If left unspecified, the `default` network will be used."
                  },
                  "currentLocationId": {
                    "type": "string",
                    "readOnly": true,
                    "description": "Output only. The current zone where the Redis endpoint is placed. For Basic Tier instances, this will always be the same as the location_id provided by the user at creation time. For Standard Tier instances, this can be either location_id or alternative_location_id and can change after a failover event."
                  },
                  "maintenancePolicy": {
                    "id": "MaintenancePolicy",
                    "type": "object",
                    "properties": {
                      "createTime": {
                        "type": "string",
                        "format": "google-datetime",
                        "readOnly": true,
                        "description": "Output only. The time when the policy was created."
                      },
                      "updateTime": {
                        "type": "string",
                        "format": "google-datetime",
                        "readOnly": true,
                        "description": "Output only. The time when the policy was last updated."
                      },
                      "description": {
                        "type": "string",
                        "description": "Optional. Description of what this policy is for. Create/Update methods return INVALID_ARGUMENT if the length is greater than 512."
                      },
                      "weeklyMaintenanceWindow": {
                        "type": "array",
                        "items": {
                          "id": "WeeklyMaintenanceWindow",
                          "type": "object",
                          "properties": {
                            "day": {
                              "enum": [
                                "DAY_OF_WEEK_UNSPECIFIED",
                                "MONDAY",
                                "TUESDAY",
                                "WEDNESDAY",
                                "THURSDAY",
                                "FRIDAY",
                                "SATURDAY",
                                "SUNDAY"
                              ],
                              "type": "string",
                              "description": "Required. The day of week that maintenance updates occur.",
                              "enumDescriptions": [
                                "The day of the week is unspecified.",
                                "Monday",
                                "Tuesday",
                                "Wednesday",
                                "Thursday",
                                "Friday",
                                "Saturday",
                                "Sunday"
                              ]
                            },
                            "duration": {
                              "type": "string",
                              "format": "google-duration",
                              "readOnly": true,
                              "description": "Output only. Duration of the maintenance window. The current window is fixed at 1 hour."
                            },
                            "startTime": {
                              "id": "TimeOfDay",
                              "type": "object",
                              "properties": {
                                "hours": {
                                  "type": "integer",
                                  "format": "int32",
                                  "description": "Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value \"24:00:00\" for scenarios like business closing time."
                                },
                                "nanos": {
                                  "type": "integer",
                                  "format": "int32",
                                  "description": "Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999."
                                },
                                "minutes": {
                                  "type": "integer",
                                  "format": "int32",
                                  "description": "Minutes of hour of day. Must be from 0 to 59."
                                },
                                "seconds": {
                                  "type": "integer",
                                  "format": "int32",
                                  "description": "Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds."
                                }
                              },
                              "description": "Required. Start time of the window in UTC time."
                            }
                          },
                          "description": "Time window in which disruptive maintenance updates occur. Non-disruptive updates can occur inside or outside this window."
                        },
                        "description": "Optional. Maintenance window that is applied to resources covered by this policy. Minimum 1. For the current version, the maximum number of weekly_window is expected to be one."
                      }
                    },
                    "description": "Optional. The maintenance policy for the instance. If not provided, maintenance events can be performed at any time."
                  },
                  "maintenanceSchedule": {
                    "id": "MaintenanceSchedule",
                    "type": "object",
                    "readOnly": true,
                    "properties": {
                      "endTime": {
                        "type": "string",
                        "format": "google-datetime",
                        "readOnly": true,
                        "description": "Output only. The end time of any upcoming scheduled maintenance for this instance."
                      },
                      "startTime": {
                        "type": "string",
                        "format": "google-datetime",
                        "readOnly": true,
                        "description": "Output only. The start time of any upcoming scheduled maintenance for this instance."
                      },
                      "canReschedule": {
                        "type": "boolean",
                        "description": "If the scheduled maintenance can be rescheduled, default is true."
                      },
                      "scheduleDeadlineTime": {
                        "type": "string",
                        "format": "google-datetime",
                        "readOnly": true,
                        "description": "Output only. The deadline that the maintenance schedule start time can not go beyond, including reschedule."
                      }
                    },
                    "description": "Output only. Date and time of upcoming maintenance events which have been scheduled."
                  },
                  "alternativeLocationId": {
                    "type": "string",
                    "description": "Optional. Only applicable to STANDARD_HA tier which protects the instance against zonal failures by provisioning it across two zones. If provided, it must be a different zone from the one provided in location_id."
                  },
                  "transitEncryptionMode": {
                    "enum": [
                      "TRANSIT_ENCRYPTION_MODE_UNSPECIFIED",
                      "SERVER_AUTHENTICATION",
                      "DISABLED"
                    ],
                    "type": "string",
                    "description": "Optional. The TLS mode of the Redis instance. If not provided, TLS is disabled for the instance.",
                    "enumDescriptions": [
                      "Not set.",
                      "Client to Server traffic encryption enabled with server authentication.",
                      "TLS is disabled for the instance."
                    ]
                  },
                  "persistenceIamIdentity": {
                    "type": "string",
                    "readOnly": true,
                    "description": "Output only. Cloud IAM identity used by import / export operations to transfer data to/from Cloud Storage. Format is \"serviceAccount:\". The value may change over time for a given instance so should be checked before each import/export operation."
                  }
                },
                "description": "A Google Cloud Redis instance."
              },
              "description": "A list of Redis instances in the project in the specified location, or across all locations. If the `location_id` in the parent field of the request is \"-\", all regions available to the project are queried, and the results aggregated. If in such an aggregated query a location is unavailable, a placeholder Redis entry is included in the response with the `name` field set to a value of the form `projects/{project_id}/locations/{location_id}/instances/`- and the `status` field set to ERROR and `status_message` field set to \"location not available for ListInstances\"."
            },
            "unreachable": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Locations that could not be reached."
            },
            "nextPageToken": {
              "type": "string",
              "description": "Token to retrieve the next page of results, or empty if there are no more results in the list."
            }
          },
          "description": "Response for ListInstances."
        }
      ]
  redis.projects.locations.instances.patch:
    description: |-
      Updates the metadata and configuration of a specific Redis instance. Completed longrunning.Operation will contain the new instance object in the response field. The returned operation is automatically deleted after a few hours, so there is no need to call DeleteOperation.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/memorystore/docs/redis/reference/rest/v1/projects.locations.instances/patch
    example:
      inputs: [
        {
          "id": "Instance",
          "type": "object",
          "properties": {
            "host": {
              "type": "string",
              "readOnly": true,
              "description": "Output only. Hostname or IP address of the exposed Redis endpoint used by clients to connect to the service."
            },
            "name": {
              "type": "string",
              "description": "Required. Unique name of the resource in this scope including project and location using the form: `projects/{project_id}/locations/{location_id}/instances/{instance_id}` Note: Redis instances are managed and addressed at regional level so location_id here refers to a GCP region; however, users may choose which specific zone (or collection of zones for cross-zone instances) an instance should be provisioned in. Refer to location_id and alternative_location_id fields for more details."
            },
            "port": {
              "type": "integer",
              "format": "int32",
              "readOnly": true,
              "description": "Output only. The port number of the exposed Redis endpoint."
            },
            "tier": {
              "enum": [
                "TIER_UNSPECIFIED",
                "BASIC",
                "STANDARD_HA"
              ],
              "type": "string",
              "description": "Required. The service tier of the instance.",
              "enumDescriptions": [
                "Not set.",
                "BASIC tier: standalone instance",
                "STANDARD_HA tier: highly available primary/replica instances"
              ]
            },
            "state": {
              "enum": [
                "STATE_UNSPECIFIED",
                "CREATING",
                "READY",
                "UPDATING",
                "DELETING",
                "REPAIRING",
                "MAINTENANCE",
                "IMPORTING",
                "FAILING_OVER"
              ],
              "type": "string",
              "readOnly": true,
              "description": "Output only. The current state of this instance.",
              "enumDescriptions": [
                "Not set.",
                "Redis instance is being created.",
                "Redis instance has been created and is fully usable.",
                "Redis instance configuration is being updated. Certain kinds of updates may cause the instance to become unusable while the update is in progress.",
                "Redis instance is being deleted.",
                "Redis instance is being repaired and may be unusable.",
                "Maintenance is being performed on this Redis instance.",
                "Redis instance is importing data (availability may be affected).",
                "Redis instance is failing over (availability may be affected)."
              ]
            },
            "labels": {
              "type": "object",
              "description": "Resource labels to represent user provided metadata",
              "additionalProperties": {
                "type": "string"
              }
            },
            "createTime": {
              "type": "string",
              "format": "google-datetime",
              "readOnly": true,
              "description": "Output only. The time the instance was created."
            },
            "locationId": {
              "type": "string",
              "description": "Optional. The zone where the instance will be provisioned. If not provided, the service will choose a zone for the instance. For STANDARD_HA tier, instances will be created across two zones for protection against zonal failures. If alternative_location_id is also provided, it must be different from location_id."
            },
            "authEnabled": {
              "type": "boolean",
              "description": "Optional. Indicates whether OSS Redis AUTH is enabled for the instance. If set to \"true\" AUTH is enabled on the instance. Default value is \"false\" meaning AUTH is disabled."
            },
            "connectMode": {
              "enum": [
                "CONNECT_MODE_UNSPECIFIED",
                "DIRECT_PEERING",
                "PRIVATE_SERVICE_ACCESS"
              ],
              "type": "string",
              "description": "Optional. The network connect mode of the Redis instance. If not provided, the connect mode defaults to DIRECT_PEERING.",
              "enumDescriptions": [
                "Not set.",
                "Connect via direct peering to the Memorystore for Redis hosted service.",
                "Connect your Memorystore for Redis instance using Private Service Access. Private services access provides an IP address range for multiple Google Cloud services, including Memorystore."
              ]
            },
            "displayName": {
              "type": "string",
              "description": "An arbitrary and optional user-provided name for the instance."
            },
            "memorySizeGb": {
              "type": "integer",
              "format": "int32",
              "description": "Required. Redis memory size in GiB."
            },
            "redisConfigs": {
              "type": "object",
              "description": "Optional. Redis configuration parameters, according to http://redis.io/topics/config. Currently, the only supported parameters are: Redis version 3.2 and newer: * maxmemory-policy * notify-keyspace-events Redis version 4.0 and newer: * activedefrag * lfu-decay-time * lfu-log-factor * maxmemory-gb Redis version 5.0 and newer: * stream-node-max-bytes * stream-node-max-entries",
              "additionalProperties": {
                "type": "string"
              }
            },
            "redisVersion": {
              "type": "string",
              "description": "Optional. The version of Redis software. If not provided, latest supported version will be used. Currently, the supported values are: * `REDIS_3_2` for Redis 3.2 compatibility * `REDIS_4_0` for Redis 4.0 compatibility (default) * `REDIS_5_0` for Redis 5.0 compatibility * `REDIS_6_X` for Redis 6.x compatibility"
            },
            "serverCaCerts": {
              "type": "array",
              "items": {
                "id": "TlsCertificate",
                "type": "object",
                "properties": {
                  "cert": {
                    "type": "string",
                    "description": "PEM representation."
                  },
                  "createTime": {
                    "type": "string",
                    "format": "google-datetime",
                    "readOnly": true,
                    "description": "Output only. The time when the certificate was created in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2020-05-18T00:00:00.094Z`."
                  },
                  "expireTime": {
                    "type": "string",
                    "format": "google-datetime",
                    "readOnly": true,
                    "description": "Output only. The time when the certificate expires in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2020-05-18T00:00:00.094Z`."
                  },
                  "serialNumber": {
                    "type": "string",
                    "description": "Serial number, as extracted from the certificate."
                  },
                  "sha1Fingerprint": {
                    "type": "string",
                    "description": "Sha1 Fingerprint of the certificate."
                  }
                },
                "description": "TlsCertificate Resource"
              },
              "readOnly": true,
              "description": "Output only. List of server CA certificates for the instance."
            },
            "statusMessage": {
              "type": "string",
              "readOnly": true,
              "description": "Output only. Additional information about the current status of this instance, if available."
            },
            "reservedIpRange": {
              "type": "string",
              "description": "Optional. For DIRECT_PEERING mode, the CIDR range of internal addresses that are reserved for this instance. Range must be unique and non-overlapping with existing subnets in an authorized network. For PRIVATE_SERVICE_ACCESS mode, the name of one allocated IP address ranges associated with this private service access connection. If not provided, the service will choose an unused /29 block, for example, 10.0.0.0/29 or 192.168.0.0/29."
            },
            "authorizedNetwork": {
              "type": "string",
              "description": "Optional. The full name of the Google Compute Engine [network](https://cloud.google.com/vpc/docs/vpc) to which the instance is connected. If left unspecified, the `default` network will be used."
            },
            "currentLocationId": {
              "type": "string",
              "readOnly": true,
              "description": "Output only. The current zone where the Redis endpoint is placed. For Basic Tier instances, this will always be the same as the location_id provided by the user at creation time. For Standard Tier instances, this can be either location_id or alternative_location_id and can change after a failover event."
            },
            "maintenancePolicy": {
              "id": "MaintenancePolicy",
              "type": "object",
              "properties": {
                "createTime": {
                  "type": "string",
                  "format": "google-datetime",
                  "readOnly": true,
                  "description": "Output only. The time when the policy was created."
                },
                "updateTime": {
                  "type": "string",
                  "format": "google-datetime",
                  "readOnly": true,
                  "description": "Output only. The time when the policy was last updated."
                },
                "description": {
                  "type": "string",
                  "description": "Optional. Description of what this policy is for. Create/Update methods return INVALID_ARGUMENT if the length is greater than 512."
                },
                "weeklyMaintenanceWindow": {
                  "type": "array",
                  "items": {
                    "id": "WeeklyMaintenanceWindow",
                    "type": "object",
                    "properties": {
                      "day": {
                        "enum": [
                          "DAY_OF_WEEK_UNSPECIFIED",
                          "MONDAY",
                          "TUESDAY",
                          "WEDNESDAY",
                          "THURSDAY",
                          "FRIDAY",
                          "SATURDAY",
                          "SUNDAY"
                        ],
                        "type": "string",
                        "description": "Required. The day of week that maintenance updates occur.",
                        "enumDescriptions": [
                          "The day of the week is unspecified.",
                          "Monday",
                          "Tuesday",
                          "Wednesday",
                          "Thursday",
                          "Friday",
                          "Saturday",
                          "Sunday"
                        ]
                      },
                      "duration": {
                        "type": "string",
                        "format": "google-duration",
                        "readOnly": true,
                        "description": "Output only. Duration of the maintenance window. The current window is fixed at 1 hour."
                      },
                      "startTime": {
                        "id": "TimeOfDay",
                        "type": "object",
                        "properties": {
                          "hours": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value \"24:00:00\" for scenarios like business closing time."
                          },
                          "nanos": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999."
                          },
                          "minutes": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Minutes of hour of day. Must be from 0 to 59."
                          },
                          "seconds": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds."
                          }
                        },
                        "description": "Required. Start time of the window in UTC time."
                      }
                    },
                    "description": "Time window in which disruptive maintenance updates occur. Non-disruptive updates can occur inside or outside this window."
                  },
                  "description": "Optional. Maintenance window that is applied to resources covered by this policy. Minimum 1. For the current version, the maximum number of weekly_window is expected to be one."
                }
              },
              "description": "Optional. The maintenance policy for the instance. If not provided, maintenance events can be performed at any time."
            },
            "maintenanceSchedule": {
              "id": "MaintenanceSchedule",
              "type": "object",
              "readOnly": true,
              "properties": {
                "endTime": {
                  "type": "string",
                  "format": "google-datetime",
                  "readOnly": true,
                  "description": "Output only. The end time of any upcoming scheduled maintenance for this instance."
                },
                "startTime": {
                  "type": "string",
                  "format": "google-datetime",
                  "readOnly": true,
                  "description": "Output only. The start time of any upcoming scheduled maintenance for this instance."
                },
                "canReschedule": {
                  "type": "boolean",
                  "description": "If the scheduled maintenance can be rescheduled, default is true."
                },
                "scheduleDeadlineTime": {
                  "type": "string",
                  "format": "google-datetime",
                  "readOnly": true,
                  "description": "Output only. The deadline that the maintenance schedule start time can not go beyond, including reschedule."
                }
              },
              "description": "Output only. Date and time of upcoming maintenance events which have been scheduled."
            },
            "alternativeLocationId": {
              "type": "string",
              "description": "Optional. Only applicable to STANDARD_HA tier which protects the instance against zonal failures by provisioning it across two zones. If provided, it must be a different zone from the one provided in location_id."
            },
            "transitEncryptionMode": {
              "enum": [
                "TRANSIT_ENCRYPTION_MODE_UNSPECIFIED",
                "SERVER_AUTHENTICATION",
                "DISABLED"
              ],
              "type": "string",
              "description": "Optional. The TLS mode of the Redis instance. If not provided, TLS is disabled for the instance.",
              "enumDescriptions": [
                "Not set.",
                "Client to Server traffic encryption enabled with server authentication.",
                "TLS is disabled for the instance."
              ]
            },
            "persistenceIamIdentity": {
              "type": "string",
              "readOnly": true,
              "description": "Output only. Cloud IAM identity used by import / export operations to transfer data to/from Cloud Storage. Format is \"serviceAccount:\". The value may change over time for a given instance so should be checked before each import/export operation."
            }
          },
          "description": "A Google Cloud Redis instance."
        }
      ]
      outputs: [
        {
          "id": "Operation",
          "type": "object",
          "properties": {
            "done": {
              "type": "boolean",
              "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available."
            },
            "name": {
              "type": "string",
              "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`."
            },
            "error": {
              "id": "Status",
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The status code, which should be an enum value of google.rpc.Code."
                },
                "details": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  },
                  "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
                },
                "message": {
                  "type": "string",
                  "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                }
              },
              "description": "The error result of the operation in case of failure or cancellation."
            },
            "metadata": {
              "type": "object",
              "description": "{ `createTime`: The time the operation was created. `endTime`: The time the operation finished running. `target`: Server-defined resource path for the target of the operation. `verb`: Name of the verb executed by the operation. `statusDetail`: Human-readable status of the operation, if any. `cancelRequested`: Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`. `apiVersion`: API version used to start the operation. }",
              "additionalProperties": {
                "type": "any",
                "description": "Properties of the object. Contains field @type with type URL."
              }
            },
            "response": {
              "type": "object",
              "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
              "additionalProperties": {
                "type": "any",
                "description": "Properties of the object. Contains field @type with type URL."
              }
            }
          },
          "description": "This resource represents a long-running operation that is the result of a network API call."
        }
      ]
  redis.projects.locations.instances.rescheduleMaintenance:
    description: |-
      Reschedule maintenance for a given instance in a given project and location.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/memorystore/docs/redis/reference/rest/v1/projects.locations.instances/rescheduleMaintenance
    example:
      inputs: [
        {
          "id": "RescheduleMaintenanceRequest",
          "type": "object",
          "properties": {
            "scheduleTime": {
              "type": "string",
              "format": "google-datetime",
              "description": "Optional. Timestamp when the maintenance shall be rescheduled to if reschedule_type=SPECIFIC_TIME, in RFC 3339 format, for example `2012-11-15T16:19:00.094Z`."
            },
            "rescheduleType": {
              "enum": [
                "RESCHEDULE_TYPE_UNSPECIFIED",
                "IMMEDIATE",
                "NEXT_AVAILABLE_WINDOW",
                "SPECIFIC_TIME"
              ],
              "type": "string",
              "description": "Required. If reschedule type is SPECIFIC_TIME, must set up schedule_time as well.",
              "enumDescriptions": [
                "Not set.",
                "If the user wants to schedule the maintenance to happen now.",
                "If the user wants to use the existing maintenance policy to find the next available window.",
                "If the user wants to reschedule the maintenance to a specific time."
              ]
            }
          },
          "description": "Request for RescheduleMaintenance."
        }
      ]
      outputs: [
        {
          "id": "Operation",
          "type": "object",
          "properties": {
            "done": {
              "type": "boolean",
              "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available."
            },
            "name": {
              "type": "string",
              "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`."
            },
            "error": {
              "id": "Status",
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The status code, which should be an enum value of google.rpc.Code."
                },
                "details": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  },
                  "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
                },
                "message": {
                  "type": "string",
                  "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                }
              },
              "description": "The error result of the operation in case of failure or cancellation."
            },
            "metadata": {
              "type": "object",
              "description": "{ `createTime`: The time the operation was created. `endTime`: The time the operation finished running. `target`: Server-defined resource path for the target of the operation. `verb`: Name of the verb executed by the operation. `statusDetail`: Human-readable status of the operation, if any. `cancelRequested`: Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`. `apiVersion`: API version used to start the operation. }",
              "additionalProperties": {
                "type": "any",
                "description": "Properties of the object. Contains field @type with type URL."
              }
            },
            "response": {
              "type": "object",
              "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
              "additionalProperties": {
                "type": "any",
                "description": "Properties of the object. Contains field @type with type URL."
              }
            }
          },
          "description": "This resource represents a long-running operation that is the result of a network API call."
        }
      ]
  redis.projects.locations.instances.upgrade:
    description: |-
      Upgrades Redis instance to the newer Redis version specified in the request.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/memorystore/docs/redis/reference/rest/v1/projects.locations.instances/upgrade
    example:
      inputs: [
        {
          "id": "UpgradeInstanceRequest",
          "type": "object",
          "properties": {
            "redisVersion": {
              "type": "string",
              "description": "Required. Specifies the target version of Redis software to upgrade to."
            }
          },
          "description": "Request for UpgradeInstance."
        }
      ]
      outputs: [
        {
          "id": "Operation",
          "type": "object",
          "properties": {
            "done": {
              "type": "boolean",
              "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available."
            },
            "name": {
              "type": "string",
              "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`."
            },
            "error": {
              "id": "Status",
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The status code, which should be an enum value of google.rpc.Code."
                },
                "details": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  },
                  "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
                },
                "message": {
                  "type": "string",
                  "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                }
              },
              "description": "The error result of the operation in case of failure or cancellation."
            },
            "metadata": {
              "type": "object",
              "description": "{ `createTime`: The time the operation was created. `endTime`: The time the operation finished running. `target`: Server-defined resource path for the target of the operation. `verb`: Name of the verb executed by the operation. `statusDetail`: Human-readable status of the operation, if any. `cancelRequested`: Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`. `apiVersion`: API version used to start the operation. }",
              "additionalProperties": {
                "type": "any",
                "description": "Properties of the object. Contains field @type with type URL."
              }
            },
            "response": {
              "type": "object",
              "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
              "additionalProperties": {
                "type": "any",
                "description": "Properties of the object. Contains field @type with type URL."
              }
            }
          },
          "description": "This resource represents a long-running operation that is the result of a network API call."
        }
      ]
  redis.projects.locations.list:
    description: |-
      Lists information about the supported locations for this service.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/memorystore/docs/redis/reference/rest/v1/projects.locations/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "ListLocationsResponse",
          "type": "object",
          "properties": {
            "locations": {
              "type": "array",
              "items": {
                "id": "Location",
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Full resource name for the region. For example: \"projects/example-project/locations/us-east1\"."
                  },
                  "labels": {
                    "type": "object",
                    "description": "Cross-service attributes for the location. For example {\"cloud.googleapis.com/region\": \"us-east1\"}",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "metadata": {
                    "type": "object",
                    "description": "Output only. The set of available zones in the location. The map is keyed by the lowercase ID of each zone, as defined by Compute Engine. These keys can be specified in `location_id` or `alternative_location_id` fields when creating a Redis instance.",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  },
                  "locationId": {
                    "type": "string",
                    "description": "Resource ID for the region. For example: \"us-east1\"."
                  },
                  "displayName": {
                    "type": "string",
                    "description": "The friendly name for this location, typically a nearby city name. For example, \"Tokyo\"."
                  }
                },
                "description": "A resource that represents Google Cloud Platform location."
              },
              "description": "A list of locations that matches the specified filter in the request."
            },
            "nextPageToken": {
              "type": "string",
              "description": "The standard List next-page token."
            }
          },
          "description": "The response message for Locations.ListLocations."
        }
      ]
  redis.projects.locations.operations.cancel:
    description: |-
      Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/memorystore/docs/redis/reference/rest/v1/projects.locations.operations/cancel
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "Empty",
          "type": "object",
          "properties": {},
          "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`."
        }
      ]
  redis.projects.locations.operations.delete:
    description: |-
      Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/memorystore/docs/redis/reference/rest/v1/projects.locations.operations/delete
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "Empty",
          "type": "object",
          "properties": {},
          "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`."
        }
      ]
  redis.projects.locations.operations.get:
    description: |-
      Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/memorystore/docs/redis/reference/rest/v1/projects.locations.operations/get
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "Operation",
          "type": "object",
          "properties": {
            "done": {
              "type": "boolean",
              "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available."
            },
            "name": {
              "type": "string",
              "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`."
            },
            "error": {
              "id": "Status",
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The status code, which should be an enum value of google.rpc.Code."
                },
                "details": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  },
                  "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
                },
                "message": {
                  "type": "string",
                  "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                }
              },
              "description": "The error result of the operation in case of failure or cancellation."
            },
            "metadata": {
              "type": "object",
              "description": "{ `createTime`: The time the operation was created. `endTime`: The time the operation finished running. `target`: Server-defined resource path for the target of the operation. `verb`: Name of the verb executed by the operation. `statusDetail`: Human-readable status of the operation, if any. `cancelRequested`: Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`. `apiVersion`: API version used to start the operation. }",
              "additionalProperties": {
                "type": "any",
                "description": "Properties of the object. Contains field @type with type URL."
              }
            },
            "response": {
              "type": "object",
              "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
              "additionalProperties": {
                "type": "any",
                "description": "Properties of the object. Contains field @type with type URL."
              }
            }
          },
          "description": "This resource represents a long-running operation that is the result of a network API call."
        }
      ]
  redis.projects.locations.operations.list:
    description: |-
      Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `"/v1/{name=users/*}/operations"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.
    versions:
      from: 1.0.0
    link: https://cloud.google.com/memorystore/docs/redis/reference/rest/v1/projects.locations.operations/list
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "ListOperationsResponse",
          "type": "object",
          "properties": {
            "operations": {
              "type": "array",
              "items": {
                "id": "Operation",
                "type": "object",
                "properties": {
                  "done": {
                    "type": "boolean",
                    "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available."
                  },
                  "name": {
                    "type": "string",
                    "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`."
                  },
                  "error": {
                    "id": "Status",
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The status code, which should be an enum value of google.rpc.Code."
                      },
                      "details": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "any",
                            "description": "Properties of the object. Contains field @type with type URL."
                          }
                        },
                        "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
                      },
                      "message": {
                        "type": "string",
                        "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                      }
                    },
                    "description": "The error result of the operation in case of failure or cancellation."
                  },
                  "metadata": {
                    "type": "object",
                    "description": "{ `createTime`: The time the operation was created. `endTime`: The time the operation finished running. `target`: Server-defined resource path for the target of the operation. `verb`: Name of the verb executed by the operation. `statusDetail`: Human-readable status of the operation, if any. `cancelRequested`: Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`. `apiVersion`: API version used to start the operation. }",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  },
                  "response": {
                    "type": "object",
                    "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
                    "additionalProperties": {
                      "type": "any",
                      "description": "Properties of the object. Contains field @type with type URL."
                    }
                  }
                },
                "description": "This resource represents a long-running operation that is the result of a network API call."
              },
              "description": "A list of operations that matches the specified filter in the request."
            },
            "nextPageToken": {
              "type": "string",
              "description": "The standard List next-page token."
            }
          },
          "description": "The response message for Operations.ListOperations."
        }
      ]