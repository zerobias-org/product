Product:
  name: Workplace Sheets
  versions: [4.0.0]
  package: google.workspace.sheets
  description: |-
    Sheets
  link: https://developers.google.com/sheets
  contentType: json
Operations:
  spreadsheets.batchUpdate:
    description: |-
      Applies one or more updates to the spreadsheet. Each request is validated before being applied. If any request is not valid then the entire request will fail and nothing will be applied. Some requests have replies to give you some information about how they are applied. The replies will mirror the requests. For example, if you applied 4 updates and the 3rd one had a reply, then the response will have 2 empty replies, the actual reply, and another empty reply, in that order. Due to the collaborative nature of spreadsheets, it is not guaranteed that the spreadsheet will reflect exactly your changes after this completes, however it is guaranteed that the updates in the request will be applied together atomically. Your changes may be altered with respect to collaborator changes. If there are no collaborators, the spreadsheet should reflect your changes.
    versions:
      from: 4.0.0
    link: https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/batchUpdate
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  spreadsheets.create:
    description: |-
      Creates a spreadsheet, returning the newly created spreadsheet.
    versions:
      from: 4.0.0
    link: https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/create
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  spreadsheets.developerMetadata.get:
    description: |-
      Returns the developer metadata with the specified ID. The caller must specify the spreadsheet ID and the developer metadata's unique metadataId.
    versions:
      from: 4.0.0
    link: https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets.developerMetadata/get
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "DeveloperMetadata",
          "type": "object",
          "properties": {
            "location": {
              "id": "DeveloperMetadataLocation",
              "type": "object",
              "properties": {
                "sheetId": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The ID of the sheet when metadata is associated with an entire sheet."
                },
                "spreadsheet": {
                  "type": "boolean",
                  "description": "True when metadata is associated with an entire spreadsheet."
                },
                "locationType": {
                  "enum": [
                    "DEVELOPER_METADATA_LOCATION_TYPE_UNSPECIFIED",
                    "ROW",
                    "COLUMN",
                    "SHEET",
                    "SPREADSHEET"
                  ],
                  "type": "string",
                  "description": "The type of location this object represents. This field is read-only.",
                  "enumDescriptions": [
                    "Default value.",
                    "Developer metadata associated on an entire row dimension.",
                    "Developer metadata associated on an entire column dimension.",
                    "Developer metadata associated on an entire sheet.",
                    "Developer metadata associated on the entire spreadsheet."
                  ]
                },
                "dimensionRange": {
                  "id": "DimensionRange",
                  "type": "object",
                  "properties": {
                    "sheetId": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The sheet this span is on."
                    },
                    "endIndex": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The end (exclusive) of the span, or not set if unbounded."
                    },
                    "dimension": {
                      "enum": [
                        "DIMENSION_UNSPECIFIED",
                        "ROWS",
                        "COLUMNS"
                      ],
                      "type": "string",
                      "description": "The dimension of the span.",
                      "enumDescriptions": [
                        "The default value, do not use.",
                        "Operates on the rows of a sheet.",
                        "Operates on the columns of a sheet."
                      ]
                    },
                    "startIndex": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The start (inclusive) of the span, or not set if unbounded."
                    }
                  },
                  "description": "Represents the row or column when metadata is associated with a dimension. The specified DimensionRange must represent a single row or column; it cannot be unbounded or span multiple rows or columns."
                }
              },
              "description": "The location where the metadata is associated."
            },
            "metadataId": {
              "type": "integer",
              "format": "int32",
              "description": "The spreadsheet-scoped unique ID that identifies the metadata. IDs may be specified when metadata is created, otherwise one will be randomly generated and assigned. Must be positive."
            },
            "visibility": {
              "enum": [
                "DEVELOPER_METADATA_VISIBILITY_UNSPECIFIED",
                "DOCUMENT",
                "PROJECT"
              ],
              "type": "string",
              "description": "The metadata visibility. Developer metadata must always have a visibility specified.",
              "enumDescriptions": [
                "Default value.",
                "Document-visible metadata is accessible from any developer project with access to the document.",
                "Project-visible metadata is only visible to and accessible by the developer project that created the metadata."
              ]
            },
            "metadataKey": {
              "type": "string",
              "description": "The metadata key. There may be multiple metadata in a spreadsheet with the same key. Developer metadata must always have a key specified."
            },
            "metadataValue": {
              "type": "string",
              "description": "Data associated with the metadata's key."
            }
          },
          "description": "Developer metadata associated with a location or object in a spreadsheet. Developer metadata may be used to associate arbitrary data with various parts of a spreadsheet and will remain associated at those locations as they move around and the spreadsheet is edited. For example, if developer metadata is associated with row 5 and another row is then subsequently inserted above row 5, that original metadata will still be associated with the row it was first associated with (what is now row 6). If the associated object is deleted its metadata is deleted too."
        }
      ]
  spreadsheets.developerMetadata.search:
    description: |-
      Returns all developer metadata matching the specified DataFilter. If the provided DataFilter represents a DeveloperMetadataLookup object, this will return all DeveloperMetadata entries selected by it. If the DataFilter represents a location in a spreadsheet, this will return all developer metadata associated with locations intersecting that region.
    versions:
      from: 4.0.0
    link: https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets.developerMetadata/search
    example:
      inputs: [
        {
          "id": "SearchDeveloperMetadataRequest",
          "type": "object",
          "properties": {
            "dataFilters": {
              "type": "array",
              "items": {
                "id": "DataFilter",
                "type": "object",
                "properties": {
                  "a1Range": {
                    "type": "string",
                    "description": "Selects data that matches the specified A1 range."
                  },
                  "gridRange": {
                    "id": "GridRange",
                    "type": "object",
                    "properties": {
                      "sheetId": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The sheet this range is on."
                      },
                      "endRowIndex": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The end row (exclusive) of the range, or not set if unbounded."
                      },
                      "startRowIndex": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The start row (inclusive) of the range, or not set if unbounded."
                      },
                      "endColumnIndex": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The end column (exclusive) of the range, or not set if unbounded."
                      },
                      "startColumnIndex": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The start column (inclusive) of the range, or not set if unbounded."
                      }
                    },
                    "description": "A range on a sheet. All indexes are zero-based. Indexes are half open, i.e. the start index is inclusive and the end index is exclusive -- [start_index, end_index). Missing indexes indicate the range is unbounded on that side. For example, if `\"Sheet1\"` is sheet ID 0, then: `Sheet1!A1:A1 == sheet_id: 0, start_row_index: 0, end_row_index: 1, start_column_index: 0, end_column_index: 1` `Sheet1!A3:B4 == sheet_id: 0, start_row_index: 2, end_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1!A:B == sheet_id: 0, start_column_index: 0, end_column_index: 2` `Sheet1!A5:B == sheet_id: 0, start_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1 == sheet_id:0` The start index must always be less than or equal to the end index. If the start index equals the end index, then the range is empty. Empty ranges are typically not meaningful and are usually rendered in the UI as `#REF!`."
                  },
                  "developerMetadataLookup": {
                    "id": "DeveloperMetadataLookup",
                    "type": "object",
                    "properties": {
                      "metadataId": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Limits the selected developer metadata to that which has a matching DeveloperMetadata.metadata_id."
                      },
                      "visibility": {
                        "enum": [
                          "DEVELOPER_METADATA_VISIBILITY_UNSPECIFIED",
                          "DOCUMENT",
                          "PROJECT"
                        ],
                        "type": "string",
                        "description": "Limits the selected developer metadata to that which has a matching DeveloperMetadata.visibility. If left unspecified, all developer metadata visibile to the requesting project is considered.",
                        "enumDescriptions": [
                          "Default value.",
                          "Document-visible metadata is accessible from any developer project with access to the document.",
                          "Project-visible metadata is only visible to and accessible by the developer project that created the metadata."
                        ]
                      },
                      "metadataKey": {
                        "type": "string",
                        "description": "Limits the selected developer metadata to that which has a matching DeveloperMetadata.metadata_key."
                      },
                      "locationType": {
                        "enum": [
                          "DEVELOPER_METADATA_LOCATION_TYPE_UNSPECIFIED",
                          "ROW",
                          "COLUMN",
                          "SHEET",
                          "SPREADSHEET"
                        ],
                        "type": "string",
                        "description": "Limits the selected developer metadata to those entries which are associated with locations of the specified type. For example, when this field is specified as ROW this lookup only considers developer metadata associated on rows. If the field is left unspecified, all location types are considered. This field cannot be specified as SPREADSHEET when the locationMatchingStrategy is specified as INTERSECTING or when the metadataLocation is specified as a non-spreadsheet location: spreadsheet metadata cannot intersect any other developer metadata location. This field also must be left unspecified when the locationMatchingStrategy is specified as EXACT.",
                        "enumDescriptions": [
                          "Default value.",
                          "Developer metadata associated on an entire row dimension.",
                          "Developer metadata associated on an entire column dimension.",
                          "Developer metadata associated on an entire sheet.",
                          "Developer metadata associated on the entire spreadsheet."
                        ]
                      },
                      "metadataValue": {
                        "type": "string",
                        "description": "Limits the selected developer metadata to that which has a matching DeveloperMetadata.metadata_value."
                      },
                      "metadataLocation": {
                        "id": "DeveloperMetadataLocation",
                        "type": "object",
                        "properties": {
                          "sheetId": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The ID of the sheet when metadata is associated with an entire sheet."
                          },
                          "spreadsheet": {
                            "type": "boolean",
                            "description": "True when metadata is associated with an entire spreadsheet."
                          },
                          "locationType": {
                            "enum": [
                              "DEVELOPER_METADATA_LOCATION_TYPE_UNSPECIFIED",
                              "ROW",
                              "COLUMN",
                              "SHEET",
                              "SPREADSHEET"
                            ],
                            "type": "string",
                            "description": "The type of location this object represents. This field is read-only.",
                            "enumDescriptions": [
                              "Default value.",
                              "Developer metadata associated on an entire row dimension.",
                              "Developer metadata associated on an entire column dimension.",
                              "Developer metadata associated on an entire sheet.",
                              "Developer metadata associated on the entire spreadsheet."
                            ]
                          },
                          "dimensionRange": {
                            "id": "DimensionRange",
                            "type": "object",
                            "properties": {
                              "sheetId": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The sheet this span is on."
                              },
                              "endIndex": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The end (exclusive) of the span, or not set if unbounded."
                              },
                              "dimension": {
                                "enum": [
                                  "DIMENSION_UNSPECIFIED",
                                  "ROWS",
                                  "COLUMNS"
                                ],
                                "type": "string",
                                "description": "The dimension of the span.",
                                "enumDescriptions": [
                                  "The default value, do not use.",
                                  "Operates on the rows of a sheet.",
                                  "Operates on the columns of a sheet."
                                ]
                              },
                              "startIndex": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The start (inclusive) of the span, or not set if unbounded."
                              }
                            },
                            "description": "Represents the row or column when metadata is associated with a dimension. The specified DimensionRange must represent a single row or column; it cannot be unbounded or span multiple rows or columns."
                          }
                        },
                        "description": "Limits the selected developer metadata to those entries associated with the specified location. This field either matches exact locations or all intersecting locations according the specified locationMatchingStrategy."
                      },
                      "locationMatchingStrategy": {
                        "enum": [
                          "DEVELOPER_METADATA_LOCATION_MATCHING_STRATEGY_UNSPECIFIED",
                          "EXACT_LOCATION",
                          "INTERSECTING_LOCATION"
                        ],
                        "type": "string",
                        "description": "Determines how this lookup matches the location. If this field is specified as EXACT, only developer metadata associated on the exact location specified is matched. If this field is specified to INTERSECTING, developer metadata associated on intersecting locations is also matched. If left unspecified, this field assumes a default value of INTERSECTING. If this field is specified, a metadataLocation must also be specified.",
                        "enumDescriptions": [
                          "Default value. This value must not be used.",
                          "Indicates that a specified location should be matched exactly. For example, if row three were specified as a location this matching strategy would only match developer metadata also associated on row three. Metadata associated on other locations would not be considered.",
                          "Indicates that a specified location should match that exact location as well as any intersecting locations. For example, if row three were specified as a location this matching strategy would match developer metadata associated on row three as well as metadata associated on locations that intersect row three. If, for instance, there was developer metadata associated on column B, this matching strategy would also match that location because column B intersects row three."
                        ]
                      }
                    },
                    "description": "Selects data associated with the developer metadata matching the criteria described by this DeveloperMetadataLookup."
                  }
                },
                "description": "Filter that describes what data should be selected or returned from a request."
              },
              "description": "The data filters describing the criteria used to determine which DeveloperMetadata entries to return. DeveloperMetadata matching any of the specified filters are included in the response."
            }
          },
          "description": "A request to retrieve all developer metadata matching the set of specified criteria."
        }
      ]
      outputs: [
        {
          "id": "SearchDeveloperMetadataResponse",
          "type": "object",
          "properties": {
            "matchedDeveloperMetadata": {
              "type": "array",
              "items": {
                "id": "MatchedDeveloperMetadata",
                "type": "object",
                "properties": {
                  "dataFilters": {
                    "type": "array",
                    "items": {
                      "id": "DataFilter",
                      "type": "object",
                      "properties": {
                        "a1Range": {
                          "type": "string",
                          "description": "Selects data that matches the specified A1 range."
                        },
                        "gridRange": {
                          "id": "GridRange",
                          "type": "object",
                          "properties": {
                            "sheetId": {
                              "type": "integer",
                              "format": "int32",
                              "description": "The sheet this range is on."
                            },
                            "endRowIndex": {
                              "type": "integer",
                              "format": "int32",
                              "description": "The end row (exclusive) of the range, or not set if unbounded."
                            },
                            "startRowIndex": {
                              "type": "integer",
                              "format": "int32",
                              "description": "The start row (inclusive) of the range, or not set if unbounded."
                            },
                            "endColumnIndex": {
                              "type": "integer",
                              "format": "int32",
                              "description": "The end column (exclusive) of the range, or not set if unbounded."
                            },
                            "startColumnIndex": {
                              "type": "integer",
                              "format": "int32",
                              "description": "The start column (inclusive) of the range, or not set if unbounded."
                            }
                          },
                          "description": "A range on a sheet. All indexes are zero-based. Indexes are half open, i.e. the start index is inclusive and the end index is exclusive -- [start_index, end_index). Missing indexes indicate the range is unbounded on that side. For example, if `\"Sheet1\"` is sheet ID 0, then: `Sheet1!A1:A1 == sheet_id: 0, start_row_index: 0, end_row_index: 1, start_column_index: 0, end_column_index: 1` `Sheet1!A3:B4 == sheet_id: 0, start_row_index: 2, end_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1!A:B == sheet_id: 0, start_column_index: 0, end_column_index: 2` `Sheet1!A5:B == sheet_id: 0, start_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1 == sheet_id:0` The start index must always be less than or equal to the end index. If the start index equals the end index, then the range is empty. Empty ranges are typically not meaningful and are usually rendered in the UI as `#REF!`."
                        },
                        "developerMetadataLookup": {
                          "id": "DeveloperMetadataLookup",
                          "type": "object",
                          "properties": {
                            "metadataId": {
                              "type": "integer",
                              "format": "int32",
                              "description": "Limits the selected developer metadata to that which has a matching DeveloperMetadata.metadata_id."
                            },
                            "visibility": {
                              "enum": [
                                "DEVELOPER_METADATA_VISIBILITY_UNSPECIFIED",
                                "DOCUMENT",
                                "PROJECT"
                              ],
                              "type": "string",
                              "description": "Limits the selected developer metadata to that which has a matching DeveloperMetadata.visibility. If left unspecified, all developer metadata visibile to the requesting project is considered.",
                              "enumDescriptions": [
                                "Default value.",
                                "Document-visible metadata is accessible from any developer project with access to the document.",
                                "Project-visible metadata is only visible to and accessible by the developer project that created the metadata."
                              ]
                            },
                            "metadataKey": {
                              "type": "string",
                              "description": "Limits the selected developer metadata to that which has a matching DeveloperMetadata.metadata_key."
                            },
                            "locationType": {
                              "enum": [
                                "DEVELOPER_METADATA_LOCATION_TYPE_UNSPECIFIED",
                                "ROW",
                                "COLUMN",
                                "SHEET",
                                "SPREADSHEET"
                              ],
                              "type": "string",
                              "description": "Limits the selected developer metadata to those entries which are associated with locations of the specified type. For example, when this field is specified as ROW this lookup only considers developer metadata associated on rows. If the field is left unspecified, all location types are considered. This field cannot be specified as SPREADSHEET when the locationMatchingStrategy is specified as INTERSECTING or when the metadataLocation is specified as a non-spreadsheet location: spreadsheet metadata cannot intersect any other developer metadata location. This field also must be left unspecified when the locationMatchingStrategy is specified as EXACT.",
                              "enumDescriptions": [
                                "Default value.",
                                "Developer metadata associated on an entire row dimension.",
                                "Developer metadata associated on an entire column dimension.",
                                "Developer metadata associated on an entire sheet.",
                                "Developer metadata associated on the entire spreadsheet."
                              ]
                            },
                            "metadataValue": {
                              "type": "string",
                              "description": "Limits the selected developer metadata to that which has a matching DeveloperMetadata.metadata_value."
                            },
                            "metadataLocation": {
                              "id": "DeveloperMetadataLocation",
                              "type": "object",
                              "properties": {
                                "sheetId": {
                                  "type": "integer",
                                  "format": "int32",
                                  "description": "The ID of the sheet when metadata is associated with an entire sheet."
                                },
                                "spreadsheet": {
                                  "type": "boolean",
                                  "description": "True when metadata is associated with an entire spreadsheet."
                                },
                                "locationType": {
                                  "enum": [
                                    "DEVELOPER_METADATA_LOCATION_TYPE_UNSPECIFIED",
                                    "ROW",
                                    "COLUMN",
                                    "SHEET",
                                    "SPREADSHEET"
                                  ],
                                  "type": "string",
                                  "description": "The type of location this object represents. This field is read-only.",
                                  "enumDescriptions": [
                                    "Default value.",
                                    "Developer metadata associated on an entire row dimension.",
                                    "Developer metadata associated on an entire column dimension.",
                                    "Developer metadata associated on an entire sheet.",
                                    "Developer metadata associated on the entire spreadsheet."
                                  ]
                                },
                                "dimensionRange": {
                                  "id": "DimensionRange",
                                  "type": "object",
                                  "properties": {
                                    "sheetId": {
                                      "type": "integer",
                                      "format": "int32",
                                      "description": "The sheet this span is on."
                                    },
                                    "endIndex": {
                                      "type": "integer",
                                      "format": "int32",
                                      "description": "The end (exclusive) of the span, or not set if unbounded."
                                    },
                                    "dimension": {
                                      "enum": [
                                        "DIMENSION_UNSPECIFIED",
                                        "ROWS",
                                        "COLUMNS"
                                      ],
                                      "type": "string",
                                      "description": "The dimension of the span.",
                                      "enumDescriptions": [
                                        "The default value, do not use.",
                                        "Operates on the rows of a sheet.",
                                        "Operates on the columns of a sheet."
                                      ]
                                    },
                                    "startIndex": {
                                      "type": "integer",
                                      "format": "int32",
                                      "description": "The start (inclusive) of the span, or not set if unbounded."
                                    }
                                  },
                                  "description": "Represents the row or column when metadata is associated with a dimension. The specified DimensionRange must represent a single row or column; it cannot be unbounded or span multiple rows or columns."
                                }
                              },
                              "description": "Limits the selected developer metadata to those entries associated with the specified location. This field either matches exact locations or all intersecting locations according the specified locationMatchingStrategy."
                            },
                            "locationMatchingStrategy": {
                              "enum": [
                                "DEVELOPER_METADATA_LOCATION_MATCHING_STRATEGY_UNSPECIFIED",
                                "EXACT_LOCATION",
                                "INTERSECTING_LOCATION"
                              ],
                              "type": "string",
                              "description": "Determines how this lookup matches the location. If this field is specified as EXACT, only developer metadata associated on the exact location specified is matched. If this field is specified to INTERSECTING, developer metadata associated on intersecting locations is also matched. If left unspecified, this field assumes a default value of INTERSECTING. If this field is specified, a metadataLocation must also be specified.",
                              "enumDescriptions": [
                                "Default value. This value must not be used.",
                                "Indicates that a specified location should be matched exactly. For example, if row three were specified as a location this matching strategy would only match developer metadata also associated on row three. Metadata associated on other locations would not be considered.",
                                "Indicates that a specified location should match that exact location as well as any intersecting locations. For example, if row three were specified as a location this matching strategy would match developer metadata associated on row three as well as metadata associated on locations that intersect row three. If, for instance, there was developer metadata associated on column B, this matching strategy would also match that location because column B intersects row three."
                              ]
                            }
                          },
                          "description": "Selects data associated with the developer metadata matching the criteria described by this DeveloperMetadataLookup."
                        }
                      },
                      "description": "Filter that describes what data should be selected or returned from a request."
                    },
                    "description": "All filters matching the returned developer metadata."
                  },
                  "developerMetadata": {
                    "id": "DeveloperMetadata",
                    "type": "object",
                    "properties": {
                      "location": {
                        "id": "DeveloperMetadataLocation",
                        "type": "object",
                        "properties": {
                          "sheetId": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The ID of the sheet when metadata is associated with an entire sheet."
                          },
                          "spreadsheet": {
                            "type": "boolean",
                            "description": "True when metadata is associated with an entire spreadsheet."
                          },
                          "locationType": {
                            "enum": [
                              "DEVELOPER_METADATA_LOCATION_TYPE_UNSPECIFIED",
                              "ROW",
                              "COLUMN",
                              "SHEET",
                              "SPREADSHEET"
                            ],
                            "type": "string",
                            "description": "The type of location this object represents. This field is read-only.",
                            "enumDescriptions": [
                              "Default value.",
                              "Developer metadata associated on an entire row dimension.",
                              "Developer metadata associated on an entire column dimension.",
                              "Developer metadata associated on an entire sheet.",
                              "Developer metadata associated on the entire spreadsheet."
                            ]
                          },
                          "dimensionRange": {
                            "id": "DimensionRange",
                            "type": "object",
                            "properties": {
                              "sheetId": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The sheet this span is on."
                              },
                              "endIndex": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The end (exclusive) of the span, or not set if unbounded."
                              },
                              "dimension": {
                                "enum": [
                                  "DIMENSION_UNSPECIFIED",
                                  "ROWS",
                                  "COLUMNS"
                                ],
                                "type": "string",
                                "description": "The dimension of the span.",
                                "enumDescriptions": [
                                  "The default value, do not use.",
                                  "Operates on the rows of a sheet.",
                                  "Operates on the columns of a sheet."
                                ]
                              },
                              "startIndex": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The start (inclusive) of the span, or not set if unbounded."
                              }
                            },
                            "description": "Represents the row or column when metadata is associated with a dimension. The specified DimensionRange must represent a single row or column; it cannot be unbounded or span multiple rows or columns."
                          }
                        },
                        "description": "The location where the metadata is associated."
                      },
                      "metadataId": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The spreadsheet-scoped unique ID that identifies the metadata. IDs may be specified when metadata is created, otherwise one will be randomly generated and assigned. Must be positive."
                      },
                      "visibility": {
                        "enum": [
                          "DEVELOPER_METADATA_VISIBILITY_UNSPECIFIED",
                          "DOCUMENT",
                          "PROJECT"
                        ],
                        "type": "string",
                        "description": "The metadata visibility. Developer metadata must always have a visibility specified.",
                        "enumDescriptions": [
                          "Default value.",
                          "Document-visible metadata is accessible from any developer project with access to the document.",
                          "Project-visible metadata is only visible to and accessible by the developer project that created the metadata."
                        ]
                      },
                      "metadataKey": {
                        "type": "string",
                        "description": "The metadata key. There may be multiple metadata in a spreadsheet with the same key. Developer metadata must always have a key specified."
                      },
                      "metadataValue": {
                        "type": "string",
                        "description": "Data associated with the metadata's key."
                      }
                    },
                    "description": "Developer metadata associated with a location or object in a spreadsheet. Developer metadata may be used to associate arbitrary data with various parts of a spreadsheet and will remain associated at those locations as they move around and the spreadsheet is edited. For example, if developer metadata is associated with row 5 and another row is then subsequently inserted above row 5, that original metadata will still be associated with the row it was first associated with (what is now row 6). If the associated object is deleted its metadata is deleted too."
                  }
                },
                "description": "A developer metadata entry and the data filters specified in the original request that matched it."
              },
              "description": "The metadata matching the criteria of the search request."
            }
          },
          "description": "A reply to a developer metadata search request."
        }
      ]
  spreadsheets.get:
    description: |-
      Returns the spreadsheet at the given ID. The caller must specify the spreadsheet ID. By default, data within grids will not be returned. You can include grid data one of two ways: * Specify a field mask listing your desired fields using the `fields` URL parameter in HTTP * Set the includeGridData URL parameter to true. If a field mask is set, the `includeGridData` parameter is ignored For large spreadsheets, it is recommended to retrieve only the specific fields of the spreadsheet that you want. To retrieve only subsets of the spreadsheet, use the ranges URL parameter. Multiple ranges can be specified. Limiting the range will return only the portions of the spreadsheet that intersect the requested ranges. Ranges are specified using A1 notation.
    versions:
      from: 4.0.0
    link: https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/get
    example:
      outputs: [
        {}
      ]
      inputs: [
        {}
      ]
  spreadsheets.list:
    description: |-
      Lists files of type vnd.google-apps.spreadsheet that reside in the Drive.
    versions:
      from: 4.0.0
    link: https://developers.google.com/drive/api/v3/reference/files/list
    example:
      inputs: [
        { }
      ]
      outputs: [
        { }
      ]
  spreadsheets.getByDataFilter:
    description: |-
      Returns the spreadsheet at the given ID. The caller must specify the spreadsheet ID. This method differs from GetSpreadsheet in that it allows selecting which subsets of spreadsheet data to return by specifying a dataFilters parameter. Multiple DataFilters can be specified. Specifying one or more data filters will return the portions of the spreadsheet that intersect ranges matched by any of the filters. By default, data within grids will not be returned. You can include grid data one of two ways: * Specify a field mask listing your desired fields using the `fields` URL parameter in HTTP * Set the includeGridData parameter to true. If a field mask is set, the `includeGridData` parameter is ignored For large spreadsheets, it is recommended to retrieve only the specific fields of the spreadsheet that you want.
    versions:
      from: 4.0.0
    link: https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/getByDataFilter
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  spreadsheets.sheets.copyTo:
    description: |-
      Copies a single sheet from a spreadsheet to another spreadsheet. Returns the properties of the newly created sheet.
    versions:
      from: 4.0.0
    link: https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets.sheets/copyTo
    example:
      inputs: [
        {
          "id": "CopySheetToAnotherSpreadsheetRequest",
          "type": "object",
          "properties": {
            "destinationSpreadsheetId": {
              "type": "string",
              "description": "The ID of the spreadsheet to copy the sheet to."
            }
          },
          "description": "The request to copy a sheet across spreadsheets."
        }
      ]
      outputs: [
        {
          "id": "SheetProperties",
          "type": "object",
          "properties": {
            "index": {
              "type": "integer",
              "format": "int32",
              "description": "The index of the sheet within the spreadsheet. When adding or updating sheet properties, if this field is excluded then the sheet is added or moved to the end of the sheet list. When updating sheet indices or inserting sheets, movement is considered in \"before the move\" indexes. For example, if there were 3 sheets (S1, S2, S3) in order to move S1 ahead of S2 the index would have to be set to 2. A sheet index update request is ignored if the requested index is identical to the sheets current index or if the requested new index is equal to the current sheet index + 1."
            },
            "title": {
              "type": "string",
              "description": "The name of the sheet."
            },
            "hidden": {
              "type": "boolean",
              "description": "True if the sheet is hidden in the UI, false if it's visible."
            },
            "sheetId": {
              "type": "integer",
              "format": "int32",
              "description": "The ID of the sheet. Must be non-negative. This field cannot be changed once set."
            },
            "tabColor": {
              "id": "Color",
              "type": "object",
              "properties": {
                "red": {
                  "type": "number",
                  "format": "float",
                  "description": "The amount of red in the color as a value in the interval [0, 1]."
                },
                "blue": {
                  "type": "number",
                  "format": "float",
                  "description": "The amount of blue in the color as a value in the interval [0, 1]."
                },
                "alpha": {
                  "type": "number",
                  "format": "float",
                  "description": "The fraction of this color that should be applied to the pixel. That is, the final pixel color is defined by the equation: `pixel color = alpha * (this color) + (1.0 - alpha) * (background color)` This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color. This uses a wrapper message rather than a simple float scalar so that it is possible to distinguish between a default value and the value being unset. If omitted, this color object is rendered as a solid color (as if the alpha value had been explicitly given a value of 1.0)."
                },
                "green": {
                  "type": "number",
                  "format": "float",
                  "description": "The amount of green in the color as a value in the interval [0, 1]."
                }
              },
              "description": "The color of the tab in the UI."
            },
            "sheetType": {
              "enum": [
                "SHEET_TYPE_UNSPECIFIED",
                "GRID",
                "OBJECT",
                "DATA_SOURCE"
              ],
              "type": "string",
              "description": "The type of sheet. Defaults to GRID. This field cannot be changed once set.",
              "enumDescriptions": [
                "Default value, do not use.",
                "The sheet is a grid.",
                "The sheet has no grid and instead has an object like a chart or image.",
                "The sheet connects with an external DataSource and shows the preview of data."
              ]
            },
            "rightToLeft": {
              "type": "boolean",
              "description": "True if the sheet is an RTL sheet instead of an LTR sheet."
            },
            "tabColorStyle": {
              "id": "ColorStyle",
              "type": "object",
              "properties": {
                "rgbColor": {
                  "id": "Color",
                  "type": "object",
                  "properties": {
                    "red": {
                      "type": "number",
                      "format": "float",
                      "description": "The amount of red in the color as a value in the interval [0, 1]."
                    },
                    "blue": {
                      "type": "number",
                      "format": "float",
                      "description": "The amount of blue in the color as a value in the interval [0, 1]."
                    },
                    "alpha": {
                      "type": "number",
                      "format": "float",
                      "description": "The fraction of this color that should be applied to the pixel. That is, the final pixel color is defined by the equation: `pixel color = alpha * (this color) + (1.0 - alpha) * (background color)` This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color. This uses a wrapper message rather than a simple float scalar so that it is possible to distinguish between a default value and the value being unset. If omitted, this color object is rendered as a solid color (as if the alpha value had been explicitly given a value of 1.0)."
                    },
                    "green": {
                      "type": "number",
                      "format": "float",
                      "description": "The amount of green in the color as a value in the interval [0, 1]."
                    }
                  },
                  "description": "RGB color."
                },
                "themeColor": {
                  "enum": [
                    "THEME_COLOR_TYPE_UNSPECIFIED",
                    "TEXT",
                    "BACKGROUND",
                    "ACCENT1",
                    "ACCENT2",
                    "ACCENT3",
                    "ACCENT4",
                    "ACCENT5",
                    "ACCENT6",
                    "LINK"
                  ],
                  "type": "string",
                  "description": "Theme color.",
                  "enumDescriptions": [
                    "Unspecified theme color",
                    "Represents the primary text color",
                    "Represents the primary background color",
                    "Represents the first accent color",
                    "Represents the second accent color",
                    "Represents the third accent color",
                    "Represents the fourth accent color",
                    "Represents the fifth accent color",
                    "Represents the sixth accent color",
                    "Represents the color to use for hyperlinks"
                  ]
                }
              },
              "description": "The color of the tab in the UI. If tab_color is also set, this field takes precedence."
            },
            "gridProperties": {
              "id": "GridProperties",
              "type": "object",
              "properties": {
                "rowCount": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The number of rows in the grid."
                },
                "columnCount": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The number of columns in the grid."
                },
                "hideGridlines": {
                  "type": "boolean",
                  "description": "True if the grid isn't showing gridlines in the UI."
                },
                "frozenRowCount": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The number of rows that are frozen in the grid."
                },
                "frozenColumnCount": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The number of columns that are frozen in the grid."
                },
                "rowGroupControlAfter": {
                  "type": "boolean",
                  "description": "True if the row grouping control toggle is shown after the group."
                },
                "columnGroupControlAfter": {
                  "type": "boolean",
                  "description": "True if the column grouping control toggle is shown after the group."
                }
              },
              "description": "Additional properties of the sheet if this sheet is a grid. (If the sheet is an object sheet, containing a chart or image, then this field will be absent.) When writing it is an error to set any grid properties on non-grid sheets. If this sheet is a DATA_SOURCE sheet, this field is output only but contains the properties that reflect how a data source sheet is rendered in the UI, e.g. row_count."
            },
            "dataSourceSheetProperties": {
              "id": "DataSourceSheetProperties",
              "type": "object",
              "readOnly": true,
              "properties": {
                "columns": {
                  "type": "array",
                  "items": {
                    "id": "DataSourceColumn",
                    "type": "object",
                    "properties": {
                      "formula": {
                        "type": "string",
                        "description": "The formula of the calculated column."
                      },
                      "reference": {
                        "id": "DataSourceColumnReference",
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The display name of the column. It should be unique within a data source."
                          }
                        },
                        "description": "The column reference."
                      }
                    },
                    "description": "A column in a data source."
                  },
                  "description": "The columns displayed on the sheet, corresponding to the values in RowData."
                },
                "dataSourceId": {
                  "type": "string",
                  "description": "ID of the DataSource the sheet is connected to."
                },
                "dataExecutionStatus": {
                  "id": "DataExecutionStatus",
                  "type": "object",
                  "properties": {
                    "state": {
                      "enum": [
                        "DATA_EXECUTION_STATE_UNSPECIFIED",
                        "NOT_STARTED",
                        "RUNNING",
                        "SUCCEEDED",
                        "FAILED"
                      ],
                      "type": "string",
                      "description": "The state of the data execution.",
                      "enumDescriptions": [
                        "Default value, do not use.",
                        "The data execution has not started.",
                        "The data execution has started and is running.",
                        "The data execution has completed successfully.",
                        "The data execution has completed with errors."
                      ]
                    },
                    "errorCode": {
                      "enum": [
                        "DATA_EXECUTION_ERROR_CODE_UNSPECIFIED",
                        "TIMED_OUT",
                        "TOO_MANY_ROWS",
                        "TOO_MANY_CELLS",
                        "ENGINE",
                        "PARAMETER_INVALID",
                        "UNSUPPORTED_DATA_TYPE",
                        "DUPLICATE_COLUMN_NAMES",
                        "INTERRUPTED",
                        "CONCURRENT_QUERY",
                        "OTHER",
                        "TOO_MANY_CHARS_PER_CELL",
                        "DATA_NOT_FOUND",
                        "PERMISSION_DENIED",
                        "MISSING_COLUMN_ALIAS",
                        "OBJECT_NOT_FOUND",
                        "OBJECT_IN_ERROR_STATE",
                        "OBJECT_SPEC_INVALID"
                      ],
                      "type": "string",
                      "description": "The error code.",
                      "enumDescriptions": [
                        "Default value, do not use.",
                        "The data execution timed out.",
                        "The data execution returns more rows than the limit.",
                        "The data execution returns more cells than the limit.",
                        "Error is received from the backend data execution engine (e.g. BigQuery). Check error_message for details.",
                        "One or some of the provided data source parameters are invalid.",
                        "The data execution returns an unsupported data type.",
                        "The data execution returns duplicate column names or aliases.",
                        "The data execution is interrupted. Please refresh later.",
                        "The data execution is currently in progress, can not be refreshed until it completes.",
                        "Other errors.",
                        "The data execution returns values that exceed the maximum characters allowed in a single cell.",
                        "The database referenced by the data source is not found. */",
                        "The user does not have access to the database referenced by the data source.",
                        "The data execution returns columns with missing aliases.",
                        "The data source object does not exist.",
                        "The data source object is currently in error state. To force refresh, set force in RefreshDataSourceRequest.",
                        "The data source object specification is invalid."
                      ]
                    },
                    "errorMessage": {
                      "type": "string",
                      "description": "The error message, which may be empty."
                    },
                    "lastRefreshTime": {
                      "type": "string",
                      "format": "google-datetime",
                      "description": "Gets the time the data last successfully refreshed."
                    }
                  },
                  "description": "The data execution status."
                }
              },
              "description": "Output only. If present, the field contains DATA_SOURCE sheet specific properties."
            }
          },
          "description": "Properties of a sheet."
        }
      ]
  spreadsheets.values.append:
    description: |-
      Appends values to a spreadsheet. The input range is used to search for existing data and find a "table" within that range. Values will be appended to the next row of the table, starting with the first column of the table. See the [guide](/sheets/api/guides/values#appending_values) and [sample code](/sheets/api/samples/writing#append_values) for specific details of how tables are detected and data is appended. The caller must specify the spreadsheet ID, range, and a valueInputOption. The `valueInputOption` only controls how the input data will be added to the sheet (column-wise or row-wise), it does not influence what cell the data starts being written to.
    versions:
      from: 4.0.0
    link: https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets.values/append
    example:
      inputs: [
        {
          "id": "ValueRange",
          "type": "object",
          "properties": {
            "range": {
              "type": "string",
              "description": "The range the values cover, in A1 notation. For output, this range indicates the entire requested range, even though the values will exclude trailing rows and columns. When appending values, this field represents the range to search for a table, after which values will be appended."
            },
            "values": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "any"
                }
              },
              "description": "The data that was read or to be written. This is an array of arrays, the outer array representing all the data and each inner array representing a major dimension. Each item in the inner array corresponds with one cell. For output, empty trailing rows and columns will not be included. For input, supported value types are: bool, string, and double. Null values will be skipped. To set a cell to an empty value, set the string value to an empty string."
            },
            "majorDimension": {
              "enum": [
                "DIMENSION_UNSPECIFIED",
                "ROWS",
                "COLUMNS"
              ],
              "type": "string",
              "description": "The major dimension of the values. For output, if the spreadsheet data is: `A1=1,B1=2,A2=3,B2=4`, then requesting `range=A1:B2,majorDimension=ROWS` will return `[[1,2],[3,4]]`, whereas requesting `range=A1:B2,majorDimension=COLUMNS` will return `[[1,3],[2,4]]`. For input, with `range=A1:B2,majorDimension=ROWS` then `[[1,2],[3,4]]` will set `A1=1,B1=2,A2=3,B2=4`. With `range=A1:B2,majorDimension=COLUMNS` then `[[1,2],[3,4]]` will set `A1=1,B1=3,A2=2,B2=4`. When writing, if this field is not set, it defaults to ROWS.",
              "enumDescriptions": [
                "The default value, do not use.",
                "Operates on the rows of a sheet.",
                "Operates on the columns of a sheet."
              ]
            }
          },
          "description": "Data within a range of the spreadsheet."
        }
      ]
      outputs: [
        {
          "id": "AppendValuesResponse",
          "type": "object",
          "properties": {
            "updates": {
              "id": "UpdateValuesResponse",
              "type": "object",
              "properties": {
                "updatedData": {
                  "id": "ValueRange",
                  "type": "object",
                  "properties": {
                    "range": {
                      "type": "string",
                      "description": "The range the values cover, in A1 notation. For output, this range indicates the entire requested range, even though the values will exclude trailing rows and columns. When appending values, this field represents the range to search for a table, after which values will be appended."
                    },
                    "values": {
                      "type": "array",
                      "items": {
                        "type": "array",
                        "items": {
                          "type": "any"
                        }
                      },
                      "description": "The data that was read or to be written. This is an array of arrays, the outer array representing all the data and each inner array representing a major dimension. Each item in the inner array corresponds with one cell. For output, empty trailing rows and columns will not be included. For input, supported value types are: bool, string, and double. Null values will be skipped. To set a cell to an empty value, set the string value to an empty string."
                    },
                    "majorDimension": {
                      "enum": [
                        "DIMENSION_UNSPECIFIED",
                        "ROWS",
                        "COLUMNS"
                      ],
                      "type": "string",
                      "description": "The major dimension of the values. For output, if the spreadsheet data is: `A1=1,B1=2,A2=3,B2=4`, then requesting `range=A1:B2,majorDimension=ROWS` will return `[[1,2],[3,4]]`, whereas requesting `range=A1:B2,majorDimension=COLUMNS` will return `[[1,3],[2,4]]`. For input, with `range=A1:B2,majorDimension=ROWS` then `[[1,2],[3,4]]` will set `A1=1,B1=2,A2=3,B2=4`. With `range=A1:B2,majorDimension=COLUMNS` then `[[1,2],[3,4]]` will set `A1=1,B1=3,A2=2,B2=4`. When writing, if this field is not set, it defaults to ROWS.",
                      "enumDescriptions": [
                        "The default value, do not use.",
                        "Operates on the rows of a sheet.",
                        "Operates on the columns of a sheet."
                      ]
                    }
                  },
                  "description": "Data within a range of the spreadsheet."
                },
                "updatedRows": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The number of rows where at least one cell in the row was updated."
                },
                "updatedCells": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The number of cells updated."
                },
                "updatedRange": {
                  "type": "string",
                  "description": "The range (in A1 notation) that updates were applied to."
                },
                "spreadsheetId": {
                  "type": "string",
                  "description": "The spreadsheet the updates were applied to."
                },
                "updatedColumns": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The number of columns where at least one cell in the column was updated."
                }
              },
              "description": "Information about the updates that were applied."
            },
            "tableRange": {
              "type": "string",
              "description": "The range (in A1 notation) of the table that values are being appended to (before the values were appended). Empty if no table was found."
            },
            "spreadsheetId": {
              "type": "string",
              "description": "The spreadsheet the updates were applied to."
            }
          },
          "description": "The response when updating a range of values in a spreadsheet."
        }
      ]
  spreadsheets.values.batchClear:
    description: |-
      Clears one or more ranges of values from a spreadsheet. The caller must specify the spreadsheet ID and one or more ranges. Only values are cleared -- all other properties of the cell (such as formatting, data validation, etc..) are kept.
    versions:
      from: 4.0.0
    link: https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets.values/batchClear
    example:
      inputs: [
        {
          "id": "BatchClearValuesRequest",
          "type": "object",
          "properties": {
            "ranges": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "The ranges to clear, in A1 or R1C1 notation."
            }
          },
          "description": "The request for clearing more than one range of values in a spreadsheet."
        }
      ]
      outputs: [
        {
          "id": "BatchClearValuesResponse",
          "type": "object",
          "properties": {
            "clearedRanges": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "The ranges that were cleared, in A1 notation. If the requests are for an unbounded range or a ranger larger than the bounds of the sheet, this is the actual ranges that were cleared, bounded to the sheet's limits."
            },
            "spreadsheetId": {
              "type": "string",
              "description": "The spreadsheet the updates were applied to."
            }
          },
          "description": "The response when clearing a range of values in a spreadsheet."
        }
      ]
  spreadsheets.values.batchClearByDataFilter:
    description: |-
      Clears one or more ranges of values from a spreadsheet. The caller must specify the spreadsheet ID and one or more DataFilters. Ranges matching any of the specified data filters will be cleared. Only values are cleared -- all other properties of the cell (such as formatting, data validation, etc..) are kept.
    versions:
      from: 4.0.0
    link: https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets.values/batchClearByDataFilter
    example:
      inputs: [
        {
          "id": "BatchClearValuesByDataFilterRequest",
          "type": "object",
          "properties": {
            "dataFilters": {
              "type": "array",
              "items": {
                "id": "DataFilter",
                "type": "object",
                "properties": {
                  "a1Range": {
                    "type": "string",
                    "description": "Selects data that matches the specified A1 range."
                  },
                  "gridRange": {
                    "id": "GridRange",
                    "type": "object",
                    "properties": {
                      "sheetId": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The sheet this range is on."
                      },
                      "endRowIndex": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The end row (exclusive) of the range, or not set if unbounded."
                      },
                      "startRowIndex": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The start row (inclusive) of the range, or not set if unbounded."
                      },
                      "endColumnIndex": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The end column (exclusive) of the range, or not set if unbounded."
                      },
                      "startColumnIndex": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The start column (inclusive) of the range, or not set if unbounded."
                      }
                    },
                    "description": "A range on a sheet. All indexes are zero-based. Indexes are half open, i.e. the start index is inclusive and the end index is exclusive -- [start_index, end_index). Missing indexes indicate the range is unbounded on that side. For example, if `\"Sheet1\"` is sheet ID 0, then: `Sheet1!A1:A1 == sheet_id: 0, start_row_index: 0, end_row_index: 1, start_column_index: 0, end_column_index: 1` `Sheet1!A3:B4 == sheet_id: 0, start_row_index: 2, end_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1!A:B == sheet_id: 0, start_column_index: 0, end_column_index: 2` `Sheet1!A5:B == sheet_id: 0, start_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1 == sheet_id:0` The start index must always be less than or equal to the end index. If the start index equals the end index, then the range is empty. Empty ranges are typically not meaningful and are usually rendered in the UI as `#REF!`."
                  },
                  "developerMetadataLookup": {
                    "id": "DeveloperMetadataLookup",
                    "type": "object",
                    "properties": {
                      "metadataId": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Limits the selected developer metadata to that which has a matching DeveloperMetadata.metadata_id."
                      },
                      "visibility": {
                        "enum": [
                          "DEVELOPER_METADATA_VISIBILITY_UNSPECIFIED",
                          "DOCUMENT",
                          "PROJECT"
                        ],
                        "type": "string",
                        "description": "Limits the selected developer metadata to that which has a matching DeveloperMetadata.visibility. If left unspecified, all developer metadata visibile to the requesting project is considered.",
                        "enumDescriptions": [
                          "Default value.",
                          "Document-visible metadata is accessible from any developer project with access to the document.",
                          "Project-visible metadata is only visible to and accessible by the developer project that created the metadata."
                        ]
                      },
                      "metadataKey": {
                        "type": "string",
                        "description": "Limits the selected developer metadata to that which has a matching DeveloperMetadata.metadata_key."
                      },
                      "locationType": {
                        "enum": [
                          "DEVELOPER_METADATA_LOCATION_TYPE_UNSPECIFIED",
                          "ROW",
                          "COLUMN",
                          "SHEET",
                          "SPREADSHEET"
                        ],
                        "type": "string",
                        "description": "Limits the selected developer metadata to those entries which are associated with locations of the specified type. For example, when this field is specified as ROW this lookup only considers developer metadata associated on rows. If the field is left unspecified, all location types are considered. This field cannot be specified as SPREADSHEET when the locationMatchingStrategy is specified as INTERSECTING or when the metadataLocation is specified as a non-spreadsheet location: spreadsheet metadata cannot intersect any other developer metadata location. This field also must be left unspecified when the locationMatchingStrategy is specified as EXACT.",
                        "enumDescriptions": [
                          "Default value.",
                          "Developer metadata associated on an entire row dimension.",
                          "Developer metadata associated on an entire column dimension.",
                          "Developer metadata associated on an entire sheet.",
                          "Developer metadata associated on the entire spreadsheet."
                        ]
                      },
                      "metadataValue": {
                        "type": "string",
                        "description": "Limits the selected developer metadata to that which has a matching DeveloperMetadata.metadata_value."
                      },
                      "metadataLocation": {
                        "id": "DeveloperMetadataLocation",
                        "type": "object",
                        "properties": {
                          "sheetId": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The ID of the sheet when metadata is associated with an entire sheet."
                          },
                          "spreadsheet": {
                            "type": "boolean",
                            "description": "True when metadata is associated with an entire spreadsheet."
                          },
                          "locationType": {
                            "enum": [
                              "DEVELOPER_METADATA_LOCATION_TYPE_UNSPECIFIED",
                              "ROW",
                              "COLUMN",
                              "SHEET",
                              "SPREADSHEET"
                            ],
                            "type": "string",
                            "description": "The type of location this object represents. This field is read-only.",
                            "enumDescriptions": [
                              "Default value.",
                              "Developer metadata associated on an entire row dimension.",
                              "Developer metadata associated on an entire column dimension.",
                              "Developer metadata associated on an entire sheet.",
                              "Developer metadata associated on the entire spreadsheet."
                            ]
                          },
                          "dimensionRange": {
                            "id": "DimensionRange",
                            "type": "object",
                            "properties": {
                              "sheetId": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The sheet this span is on."
                              },
                              "endIndex": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The end (exclusive) of the span, or not set if unbounded."
                              },
                              "dimension": {
                                "enum": [
                                  "DIMENSION_UNSPECIFIED",
                                  "ROWS",
                                  "COLUMNS"
                                ],
                                "type": "string",
                                "description": "The dimension of the span.",
                                "enumDescriptions": [
                                  "The default value, do not use.",
                                  "Operates on the rows of a sheet.",
                                  "Operates on the columns of a sheet."
                                ]
                              },
                              "startIndex": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The start (inclusive) of the span, or not set if unbounded."
                              }
                            },
                            "description": "Represents the row or column when metadata is associated with a dimension. The specified DimensionRange must represent a single row or column; it cannot be unbounded or span multiple rows or columns."
                          }
                        },
                        "description": "Limits the selected developer metadata to those entries associated with the specified location. This field either matches exact locations or all intersecting locations according the specified locationMatchingStrategy."
                      },
                      "locationMatchingStrategy": {
                        "enum": [
                          "DEVELOPER_METADATA_LOCATION_MATCHING_STRATEGY_UNSPECIFIED",
                          "EXACT_LOCATION",
                          "INTERSECTING_LOCATION"
                        ],
                        "type": "string",
                        "description": "Determines how this lookup matches the location. If this field is specified as EXACT, only developer metadata associated on the exact location specified is matched. If this field is specified to INTERSECTING, developer metadata associated on intersecting locations is also matched. If left unspecified, this field assumes a default value of INTERSECTING. If this field is specified, a metadataLocation must also be specified.",
                        "enumDescriptions": [
                          "Default value. This value must not be used.",
                          "Indicates that a specified location should be matched exactly. For example, if row three were specified as a location this matching strategy would only match developer metadata also associated on row three. Metadata associated on other locations would not be considered.",
                          "Indicates that a specified location should match that exact location as well as any intersecting locations. For example, if row three were specified as a location this matching strategy would match developer metadata associated on row three as well as metadata associated on locations that intersect row three. If, for instance, there was developer metadata associated on column B, this matching strategy would also match that location because column B intersects row three."
                        ]
                      }
                    },
                    "description": "Selects data associated with the developer metadata matching the criteria described by this DeveloperMetadataLookup."
                  }
                },
                "description": "Filter that describes what data should be selected or returned from a request."
              },
              "description": "The DataFilters used to determine which ranges to clear."
            }
          },
          "description": "The request for clearing more than one range selected by a DataFilter in a spreadsheet."
        }
      ]
      outputs: [
        {
          "id": "BatchClearValuesByDataFilterResponse",
          "type": "object",
          "properties": {
            "clearedRanges": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "The ranges that were cleared, in A1 notation. If the requests are for an unbounded range or a ranger larger than the bounds of the sheet, this is the actual ranges that were cleared, bounded to the sheet's limits."
            },
            "spreadsheetId": {
              "type": "string",
              "description": "The spreadsheet the updates were applied to."
            }
          },
          "description": "The response when clearing a range of values selected with DataFilters in a spreadsheet."
        }
      ]
  spreadsheets.values.batchGet:
    description: |-
      Returns one or more ranges of values from a spreadsheet. The caller must specify the spreadsheet ID and one or more ranges.
    versions:
      from: 4.0.0
    link: https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets.values/batchGet
    example:
      inputs: [
        {}
      ]
      outputs: [
        {
          "id": "BatchGetValuesResponse",
          "type": "object",
          "properties": {
            "valueRanges": {
              "type": "array",
              "items": {
                "id": "ValueRange",
                "type": "object",
                "properties": {
                  "range": {
                    "type": "string",
                    "description": "The range the values cover, in A1 notation. For output, this range indicates the entire requested range, even though the values will exclude trailing rows and columns. When appending values, this field represents the range to search for a table, after which values will be appended."
                  },
                  "values": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "any"
                      }
                    },
                    "description": "The data that was read or to be written. This is an array of arrays, the outer array representing all the data and each inner array representing a major dimension. Each item in the inner array corresponds with one cell. For output, empty trailing rows and columns will not be included. For input, supported value types are: bool, string, and double. Null values will be skipped. To set a cell to an empty value, set the string value to an empty string."
                  },
                  "majorDimension": {
                    "enum": [
                      "DIMENSION_UNSPECIFIED",
                      "ROWS",
                      "COLUMNS"
                    ],
                    "type": "string",
                    "description": "The major dimension of the values. For output, if the spreadsheet data is: `A1=1,B1=2,A2=3,B2=4`, then requesting `range=A1:B2,majorDimension=ROWS` will return `[[1,2],[3,4]]`, whereas requesting `range=A1:B2,majorDimension=COLUMNS` will return `[[1,3],[2,4]]`. For input, with `range=A1:B2,majorDimension=ROWS` then `[[1,2],[3,4]]` will set `A1=1,B1=2,A2=3,B2=4`. With `range=A1:B2,majorDimension=COLUMNS` then `[[1,2],[3,4]]` will set `A1=1,B1=3,A2=2,B2=4`. When writing, if this field is not set, it defaults to ROWS.",
                    "enumDescriptions": [
                      "The default value, do not use.",
                      "Operates on the rows of a sheet.",
                      "Operates on the columns of a sheet."
                    ]
                  }
                },
                "description": "Data within a range of the spreadsheet."
              },
              "description": "The requested values. The order of the ValueRanges is the same as the order of the requested ranges."
            },
            "spreadsheetId": {
              "type": "string",
              "description": "The ID of the spreadsheet the data was retrieved from."
            }
          },
          "description": "The response when retrieving more than one range of values in a spreadsheet."
        }
      ]
  spreadsheets.values.batchGetByDataFilter:
    description: |-
      Returns one or more ranges of values that match the specified data filters. The caller must specify the spreadsheet ID and one or more DataFilters. Ranges that match any of the data filters in the request will be returned.
    versions:
      from: 4.0.0
    link: https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets.values/batchGetByDataFilter
    example:
      inputs: [
        {
          "id": "BatchGetValuesByDataFilterRequest",
          "type": "object",
          "properties": {
            "dataFilters": {
              "type": "array",
              "items": {
                "id": "DataFilter",
                "type": "object",
                "properties": {
                  "a1Range": {
                    "type": "string",
                    "description": "Selects data that matches the specified A1 range."
                  },
                  "gridRange": {
                    "id": "GridRange",
                    "type": "object",
                    "properties": {
                      "sheetId": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The sheet this range is on."
                      },
                      "endRowIndex": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The end row (exclusive) of the range, or not set if unbounded."
                      },
                      "startRowIndex": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The start row (inclusive) of the range, or not set if unbounded."
                      },
                      "endColumnIndex": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The end column (exclusive) of the range, or not set if unbounded."
                      },
                      "startColumnIndex": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The start column (inclusive) of the range, or not set if unbounded."
                      }
                    },
                    "description": "A range on a sheet. All indexes are zero-based. Indexes are half open, i.e. the start index is inclusive and the end index is exclusive -- [start_index, end_index). Missing indexes indicate the range is unbounded on that side. For example, if `\"Sheet1\"` is sheet ID 0, then: `Sheet1!A1:A1 == sheet_id: 0, start_row_index: 0, end_row_index: 1, start_column_index: 0, end_column_index: 1` `Sheet1!A3:B4 == sheet_id: 0, start_row_index: 2, end_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1!A:B == sheet_id: 0, start_column_index: 0, end_column_index: 2` `Sheet1!A5:B == sheet_id: 0, start_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1 == sheet_id:0` The start index must always be less than or equal to the end index. If the start index equals the end index, then the range is empty. Empty ranges are typically not meaningful and are usually rendered in the UI as `#REF!`."
                  },
                  "developerMetadataLookup": {
                    "id": "DeveloperMetadataLookup",
                    "type": "object",
                    "properties": {
                      "metadataId": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Limits the selected developer metadata to that which has a matching DeveloperMetadata.metadata_id."
                      },
                      "visibility": {
                        "enum": [
                          "DEVELOPER_METADATA_VISIBILITY_UNSPECIFIED",
                          "DOCUMENT",
                          "PROJECT"
                        ],
                        "type": "string",
                        "description": "Limits the selected developer metadata to that which has a matching DeveloperMetadata.visibility. If left unspecified, all developer metadata visibile to the requesting project is considered.",
                        "enumDescriptions": [
                          "Default value.",
                          "Document-visible metadata is accessible from any developer project with access to the document.",
                          "Project-visible metadata is only visible to and accessible by the developer project that created the metadata."
                        ]
                      },
                      "metadataKey": {
                        "type": "string",
                        "description": "Limits the selected developer metadata to that which has a matching DeveloperMetadata.metadata_key."
                      },
                      "locationType": {
                        "enum": [
                          "DEVELOPER_METADATA_LOCATION_TYPE_UNSPECIFIED",
                          "ROW",
                          "COLUMN",
                          "SHEET",
                          "SPREADSHEET"
                        ],
                        "type": "string",
                        "description": "Limits the selected developer metadata to those entries which are associated with locations of the specified type. For example, when this field is specified as ROW this lookup only considers developer metadata associated on rows. If the field is left unspecified, all location types are considered. This field cannot be specified as SPREADSHEET when the locationMatchingStrategy is specified as INTERSECTING or when the metadataLocation is specified as a non-spreadsheet location: spreadsheet metadata cannot intersect any other developer metadata location. This field also must be left unspecified when the locationMatchingStrategy is specified as EXACT.",
                        "enumDescriptions": [
                          "Default value.",
                          "Developer metadata associated on an entire row dimension.",
                          "Developer metadata associated on an entire column dimension.",
                          "Developer metadata associated on an entire sheet.",
                          "Developer metadata associated on the entire spreadsheet."
                        ]
                      },
                      "metadataValue": {
                        "type": "string",
                        "description": "Limits the selected developer metadata to that which has a matching DeveloperMetadata.metadata_value."
                      },
                      "metadataLocation": {
                        "id": "DeveloperMetadataLocation",
                        "type": "object",
                        "properties": {
                          "sheetId": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The ID of the sheet when metadata is associated with an entire sheet."
                          },
                          "spreadsheet": {
                            "type": "boolean",
                            "description": "True when metadata is associated with an entire spreadsheet."
                          },
                          "locationType": {
                            "enum": [
                              "DEVELOPER_METADATA_LOCATION_TYPE_UNSPECIFIED",
                              "ROW",
                              "COLUMN",
                              "SHEET",
                              "SPREADSHEET"
                            ],
                            "type": "string",
                            "description": "The type of location this object represents. This field is read-only.",
                            "enumDescriptions": [
                              "Default value.",
                              "Developer metadata associated on an entire row dimension.",
                              "Developer metadata associated on an entire column dimension.",
                              "Developer metadata associated on an entire sheet.",
                              "Developer metadata associated on the entire spreadsheet."
                            ]
                          },
                          "dimensionRange": {
                            "id": "DimensionRange",
                            "type": "object",
                            "properties": {
                              "sheetId": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The sheet this span is on."
                              },
                              "endIndex": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The end (exclusive) of the span, or not set if unbounded."
                              },
                              "dimension": {
                                "enum": [
                                  "DIMENSION_UNSPECIFIED",
                                  "ROWS",
                                  "COLUMNS"
                                ],
                                "type": "string",
                                "description": "The dimension of the span.",
                                "enumDescriptions": [
                                  "The default value, do not use.",
                                  "Operates on the rows of a sheet.",
                                  "Operates on the columns of a sheet."
                                ]
                              },
                              "startIndex": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The start (inclusive) of the span, or not set if unbounded."
                              }
                            },
                            "description": "Represents the row or column when metadata is associated with a dimension. The specified DimensionRange must represent a single row or column; it cannot be unbounded or span multiple rows or columns."
                          }
                        },
                        "description": "Limits the selected developer metadata to those entries associated with the specified location. This field either matches exact locations or all intersecting locations according the specified locationMatchingStrategy."
                      },
                      "locationMatchingStrategy": {
                        "enum": [
                          "DEVELOPER_METADATA_LOCATION_MATCHING_STRATEGY_UNSPECIFIED",
                          "EXACT_LOCATION",
                          "INTERSECTING_LOCATION"
                        ],
                        "type": "string",
                        "description": "Determines how this lookup matches the location. If this field is specified as EXACT, only developer metadata associated on the exact location specified is matched. If this field is specified to INTERSECTING, developer metadata associated on intersecting locations is also matched. If left unspecified, this field assumes a default value of INTERSECTING. If this field is specified, a metadataLocation must also be specified.",
                        "enumDescriptions": [
                          "Default value. This value must not be used.",
                          "Indicates that a specified location should be matched exactly. For example, if row three were specified as a location this matching strategy would only match developer metadata also associated on row three. Metadata associated on other locations would not be considered.",
                          "Indicates that a specified location should match that exact location as well as any intersecting locations. For example, if row three were specified as a location this matching strategy would match developer metadata associated on row three as well as metadata associated on locations that intersect row three. If, for instance, there was developer metadata associated on column B, this matching strategy would also match that location because column B intersects row three."
                        ]
                      }
                    },
                    "description": "Selects data associated with the developer metadata matching the criteria described by this DeveloperMetadataLookup."
                  }
                },
                "description": "Filter that describes what data should be selected or returned from a request."
              },
              "description": "The data filters used to match the ranges of values to retrieve. Ranges that match any of the specified data filters are included in the response."
            },
            "majorDimension": {
              "enum": [
                "DIMENSION_UNSPECIFIED",
                "ROWS",
                "COLUMNS"
              ],
              "type": "string",
              "description": "The major dimension that results should use. For example, if the spreadsheet data is: `A1=1,B1=2,A2=3,B2=4`, then a request that selects that range and sets `majorDimension=ROWS` returns `[[1,2],[3,4]]`, whereas a request that sets `majorDimension=COLUMNS` returns `[[1,3],[2,4]]`.",
              "enumDescriptions": [
                "The default value, do not use.",
                "Operates on the rows of a sheet.",
                "Operates on the columns of a sheet."
              ]
            },
            "valueRenderOption": {
              "enum": [
                "FORMATTED_VALUE",
                "UNFORMATTED_VALUE",
                "FORMULA"
              ],
              "type": "string",
              "description": "How values should be represented in the output. The default render option is ValueRenderOption.FORMATTED_VALUE.",
              "enumDescriptions": [
                "Values will be calculated & formatted in the reply according to the cell's formatting. Formatting is based on the spreadsheet's locale, not the requesting user's locale. For example, if `A1` is `1.23` and `A2` is `=A1` and formatted as currency, then `A2` would return `\"$1.23\"`.",
                "Values will be calculated, but not formatted in the reply. For example, if `A1` is `1.23` and `A2` is `=A1` and formatted as currency, then `A2` would return the number `1.23`.",
                "Values will not be calculated. The reply will include the formulas. For example, if `A1` is `1.23` and `A2` is `=A1` and formatted as currency, then A2 would return `\"=A1\"`."
              ]
            },
            "dateTimeRenderOption": {
              "enum": [
                "SERIAL_NUMBER",
                "FORMATTED_STRING"
              ],
              "type": "string",
              "description": "How dates, times, and durations should be represented in the output. This is ignored if value_render_option is FORMATTED_VALUE. The default dateTime render option is [DateTimeRenderOption.SERIAL_NUMBER].",
              "enumDescriptions": [
                "Instructs date, time, datetime, and duration fields to be output as doubles in \"serial number\" format, as popularized by Lotus 1-2-3. The whole number portion of the value (left of the decimal) counts the days since December 30th 1899. The fractional portion (right of the decimal) counts the time as a fraction of the day. For example, January 1st 1900 at noon would be 2.5, 2 because it's 2 days after December 30st 1899, and .5 because noon is half a day. February 1st 1900 at 3pm would be 33.625. This correctly treats the year 1900 as not a leap year.",
                "Instructs date, time, datetime, and duration fields to be output as strings in their given number format (which is dependent on the spreadsheet locale)."
              ]
            }
          },
          "description": "The request for retrieving a range of values in a spreadsheet selected by a set of DataFilters."
        }
      ]
      outputs: [
        {
          "id": "BatchGetValuesByDataFilterResponse",
          "type": "object",
          "properties": {
            "valueRanges": {
              "type": "array",
              "items": {
                "id": "MatchedValueRange",
                "type": "object",
                "properties": {
                  "valueRange": {
                    "id": "ValueRange",
                    "type": "object",
                    "properties": {
                      "range": {
                        "type": "string",
                        "description": "The range the values cover, in A1 notation. For output, this range indicates the entire requested range, even though the values will exclude trailing rows and columns. When appending values, this field represents the range to search for a table, after which values will be appended."
                      },
                      "values": {
                        "type": "array",
                        "items": {
                          "type": "array",
                          "items": {
                            "type": "any"
                          }
                        },
                        "description": "The data that was read or to be written. This is an array of arrays, the outer array representing all the data and each inner array representing a major dimension. Each item in the inner array corresponds with one cell. For output, empty trailing rows and columns will not be included. For input, supported value types are: bool, string, and double. Null values will be skipped. To set a cell to an empty value, set the string value to an empty string."
                      },
                      "majorDimension": {
                        "enum": [
                          "DIMENSION_UNSPECIFIED",
                          "ROWS",
                          "COLUMNS"
                        ],
                        "type": "string",
                        "description": "The major dimension of the values. For output, if the spreadsheet data is: `A1=1,B1=2,A2=3,B2=4`, then requesting `range=A1:B2,majorDimension=ROWS` will return `[[1,2],[3,4]]`, whereas requesting `range=A1:B2,majorDimension=COLUMNS` will return `[[1,3],[2,4]]`. For input, with `range=A1:B2,majorDimension=ROWS` then `[[1,2],[3,4]]` will set `A1=1,B1=2,A2=3,B2=4`. With `range=A1:B2,majorDimension=COLUMNS` then `[[1,2],[3,4]]` will set `A1=1,B1=3,A2=2,B2=4`. When writing, if this field is not set, it defaults to ROWS.",
                        "enumDescriptions": [
                          "The default value, do not use.",
                          "Operates on the rows of a sheet.",
                          "Operates on the columns of a sheet."
                        ]
                      }
                    },
                    "description": "Data within a range of the spreadsheet."
                  },
                  "dataFilters": {
                    "type": "array",
                    "items": {
                      "id": "DataFilter",
                      "type": "object",
                      "properties": {
                        "a1Range": {
                          "type": "string",
                          "description": "Selects data that matches the specified A1 range."
                        },
                        "gridRange": {
                          "id": "GridRange",
                          "type": "object",
                          "properties": {
                            "sheetId": {
                              "type": "integer",
                              "format": "int32",
                              "description": "The sheet this range is on."
                            },
                            "endRowIndex": {
                              "type": "integer",
                              "format": "int32",
                              "description": "The end row (exclusive) of the range, or not set if unbounded."
                            },
                            "startRowIndex": {
                              "type": "integer",
                              "format": "int32",
                              "description": "The start row (inclusive) of the range, or not set if unbounded."
                            },
                            "endColumnIndex": {
                              "type": "integer",
                              "format": "int32",
                              "description": "The end column (exclusive) of the range, or not set if unbounded."
                            },
                            "startColumnIndex": {
                              "type": "integer",
                              "format": "int32",
                              "description": "The start column (inclusive) of the range, or not set if unbounded."
                            }
                          },
                          "description": "A range on a sheet. All indexes are zero-based. Indexes are half open, i.e. the start index is inclusive and the end index is exclusive -- [start_index, end_index). Missing indexes indicate the range is unbounded on that side. For example, if `\"Sheet1\"` is sheet ID 0, then: `Sheet1!A1:A1 == sheet_id: 0, start_row_index: 0, end_row_index: 1, start_column_index: 0, end_column_index: 1` `Sheet1!A3:B4 == sheet_id: 0, start_row_index: 2, end_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1!A:B == sheet_id: 0, start_column_index: 0, end_column_index: 2` `Sheet1!A5:B == sheet_id: 0, start_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1 == sheet_id:0` The start index must always be less than or equal to the end index. If the start index equals the end index, then the range is empty. Empty ranges are typically not meaningful and are usually rendered in the UI as `#REF!`."
                        },
                        "developerMetadataLookup": {
                          "id": "DeveloperMetadataLookup",
                          "type": "object",
                          "properties": {
                            "metadataId": {
                              "type": "integer",
                              "format": "int32",
                              "description": "Limits the selected developer metadata to that which has a matching DeveloperMetadata.metadata_id."
                            },
                            "visibility": {
                              "enum": [
                                "DEVELOPER_METADATA_VISIBILITY_UNSPECIFIED",
                                "DOCUMENT",
                                "PROJECT"
                              ],
                              "type": "string",
                              "description": "Limits the selected developer metadata to that which has a matching DeveloperMetadata.visibility. If left unspecified, all developer metadata visibile to the requesting project is considered.",
                              "enumDescriptions": [
                                "Default value.",
                                "Document-visible metadata is accessible from any developer project with access to the document.",
                                "Project-visible metadata is only visible to and accessible by the developer project that created the metadata."
                              ]
                            },
                            "metadataKey": {
                              "type": "string",
                              "description": "Limits the selected developer metadata to that which has a matching DeveloperMetadata.metadata_key."
                            },
                            "locationType": {
                              "enum": [
                                "DEVELOPER_METADATA_LOCATION_TYPE_UNSPECIFIED",
                                "ROW",
                                "COLUMN",
                                "SHEET",
                                "SPREADSHEET"
                              ],
                              "type": "string",
                              "description": "Limits the selected developer metadata to those entries which are associated with locations of the specified type. For example, when this field is specified as ROW this lookup only considers developer metadata associated on rows. If the field is left unspecified, all location types are considered. This field cannot be specified as SPREADSHEET when the locationMatchingStrategy is specified as INTERSECTING or when the metadataLocation is specified as a non-spreadsheet location: spreadsheet metadata cannot intersect any other developer metadata location. This field also must be left unspecified when the locationMatchingStrategy is specified as EXACT.",
                              "enumDescriptions": [
                                "Default value.",
                                "Developer metadata associated on an entire row dimension.",
                                "Developer metadata associated on an entire column dimension.",
                                "Developer metadata associated on an entire sheet.",
                                "Developer metadata associated on the entire spreadsheet."
                              ]
                            },
                            "metadataValue": {
                              "type": "string",
                              "description": "Limits the selected developer metadata to that which has a matching DeveloperMetadata.metadata_value."
                            },
                            "metadataLocation": {
                              "id": "DeveloperMetadataLocation",
                              "type": "object",
                              "properties": {
                                "sheetId": {
                                  "type": "integer",
                                  "format": "int32",
                                  "description": "The ID of the sheet when metadata is associated with an entire sheet."
                                },
                                "spreadsheet": {
                                  "type": "boolean",
                                  "description": "True when metadata is associated with an entire spreadsheet."
                                },
                                "locationType": {
                                  "enum": [
                                    "DEVELOPER_METADATA_LOCATION_TYPE_UNSPECIFIED",
                                    "ROW",
                                    "COLUMN",
                                    "SHEET",
                                    "SPREADSHEET"
                                  ],
                                  "type": "string",
                                  "description": "The type of location this object represents. This field is read-only.",
                                  "enumDescriptions": [
                                    "Default value.",
                                    "Developer metadata associated on an entire row dimension.",
                                    "Developer metadata associated on an entire column dimension.",
                                    "Developer metadata associated on an entire sheet.",
                                    "Developer metadata associated on the entire spreadsheet."
                                  ]
                                },
                                "dimensionRange": {
                                  "id": "DimensionRange",
                                  "type": "object",
                                  "properties": {
                                    "sheetId": {
                                      "type": "integer",
                                      "format": "int32",
                                      "description": "The sheet this span is on."
                                    },
                                    "endIndex": {
                                      "type": "integer",
                                      "format": "int32",
                                      "description": "The end (exclusive) of the span, or not set if unbounded."
                                    },
                                    "dimension": {
                                      "enum": [
                                        "DIMENSION_UNSPECIFIED",
                                        "ROWS",
                                        "COLUMNS"
                                      ],
                                      "type": "string",
                                      "description": "The dimension of the span.",
                                      "enumDescriptions": [
                                        "The default value, do not use.",
                                        "Operates on the rows of a sheet.",
                                        "Operates on the columns of a sheet."
                                      ]
                                    },
                                    "startIndex": {
                                      "type": "integer",
                                      "format": "int32",
                                      "description": "The start (inclusive) of the span, or not set if unbounded."
                                    }
                                  },
                                  "description": "Represents the row or column when metadata is associated with a dimension. The specified DimensionRange must represent a single row or column; it cannot be unbounded or span multiple rows or columns."
                                }
                              },
                              "description": "Limits the selected developer metadata to those entries associated with the specified location. This field either matches exact locations or all intersecting locations according the specified locationMatchingStrategy."
                            },
                            "locationMatchingStrategy": {
                              "enum": [
                                "DEVELOPER_METADATA_LOCATION_MATCHING_STRATEGY_UNSPECIFIED",
                                "EXACT_LOCATION",
                                "INTERSECTING_LOCATION"
                              ],
                              "type": "string",
                              "description": "Determines how this lookup matches the location. If this field is specified as EXACT, only developer metadata associated on the exact location specified is matched. If this field is specified to INTERSECTING, developer metadata associated on intersecting locations is also matched. If left unspecified, this field assumes a default value of INTERSECTING. If this field is specified, a metadataLocation must also be specified.",
                              "enumDescriptions": [
                                "Default value. This value must not be used.",
                                "Indicates that a specified location should be matched exactly. For example, if row three were specified as a location this matching strategy would only match developer metadata also associated on row three. Metadata associated on other locations would not be considered.",
                                "Indicates that a specified location should match that exact location as well as any intersecting locations. For example, if row three were specified as a location this matching strategy would match developer metadata associated on row three as well as metadata associated on locations that intersect row three. If, for instance, there was developer metadata associated on column B, this matching strategy would also match that location because column B intersects row three."
                              ]
                            }
                          },
                          "description": "Selects data associated with the developer metadata matching the criteria described by this DeveloperMetadataLookup."
                        }
                      },
                      "description": "Filter that describes what data should be selected or returned from a request."
                    },
                    "description": "The DataFilters from the request that matched the range of values."
                  }
                },
                "description": "A value range that was matched by one or more data filers."
              },
              "description": "The requested values with the list of data filters that matched them."
            },
            "spreadsheetId": {
              "type": "string",
              "description": "The ID of the spreadsheet the data was retrieved from."
            }
          },
          "description": "The response when retrieving more than one range of values in a spreadsheet selected by DataFilters."
        }
      ]
  spreadsheets.values.batchUpdate:
    description: |-
      Sets values in one or more ranges of a spreadsheet. The caller must specify the spreadsheet ID, a valueInputOption, and one or more ValueRanges.
    versions:
      from: 4.0.0
    link: https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets.values/batchUpdate
    example:
      inputs: [
        {
          "id": "BatchUpdateValuesRequest",
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "id": "ValueRange",
                "type": "object",
                "properties": {
                  "range": {
                    "type": "string",
                    "description": "The range the values cover, in A1 notation. For output, this range indicates the entire requested range, even though the values will exclude trailing rows and columns. When appending values, this field represents the range to search for a table, after which values will be appended."
                  },
                  "values": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "any"
                      }
                    },
                    "description": "The data that was read or to be written. This is an array of arrays, the outer array representing all the data and each inner array representing a major dimension. Each item in the inner array corresponds with one cell. For output, empty trailing rows and columns will not be included. For input, supported value types are: bool, string, and double. Null values will be skipped. To set a cell to an empty value, set the string value to an empty string."
                  },
                  "majorDimension": {
                    "enum": [
                      "DIMENSION_UNSPECIFIED",
                      "ROWS",
                      "COLUMNS"
                    ],
                    "type": "string",
                    "description": "The major dimension of the values. For output, if the spreadsheet data is: `A1=1,B1=2,A2=3,B2=4`, then requesting `range=A1:B2,majorDimension=ROWS` will return `[[1,2],[3,4]]`, whereas requesting `range=A1:B2,majorDimension=COLUMNS` will return `[[1,3],[2,4]]`. For input, with `range=A1:B2,majorDimension=ROWS` then `[[1,2],[3,4]]` will set `A1=1,B1=2,A2=3,B2=4`. With `range=A1:B2,majorDimension=COLUMNS` then `[[1,2],[3,4]]` will set `A1=1,B1=3,A2=2,B2=4`. When writing, if this field is not set, it defaults to ROWS.",
                    "enumDescriptions": [
                      "The default value, do not use.",
                      "Operates on the rows of a sheet.",
                      "Operates on the columns of a sheet."
                    ]
                  }
                },
                "description": "Data within a range of the spreadsheet."
              },
              "description": "The new values to apply to the spreadsheet."
            },
            "valueInputOption": {
              "enum": [
                "INPUT_VALUE_OPTION_UNSPECIFIED",
                "RAW",
                "USER_ENTERED"
              ],
              "type": "string",
              "description": "How the input data should be interpreted.",
              "enumDescriptions": [
                "Default input value. This value must not be used.",
                "The values the user has entered will not be parsed and will be stored as-is.",
                "The values will be parsed as if the user typed them into the UI. Numbers will stay as numbers, but strings may be converted to numbers, dates, etc. following the same rules that are applied when entering text into a cell via the Google Sheets UI."
              ]
            },
            "includeValuesInResponse": {
              "type": "boolean",
              "description": "Determines if the update response should include the values of the cells that were updated. By default, responses do not include the updated values. The `updatedData` field within each of the BatchUpdateValuesResponse.responses contains the updated values. If the range to write was larger than the range actually written, the response includes all values in the requested range (excluding trailing empty rows and columns)."
            },
            "responseValueRenderOption": {
              "enum": [
                "FORMATTED_VALUE",
                "UNFORMATTED_VALUE",
                "FORMULA"
              ],
              "type": "string",
              "description": "Determines how values in the response should be rendered. The default render option is ValueRenderOption.FORMATTED_VALUE.",
              "enumDescriptions": [
                "Values will be calculated & formatted in the reply according to the cell's formatting. Formatting is based on the spreadsheet's locale, not the requesting user's locale. For example, if `A1` is `1.23` and `A2` is `=A1` and formatted as currency, then `A2` would return `\"$1.23\"`.",
                "Values will be calculated, but not formatted in the reply. For example, if `A1` is `1.23` and `A2` is `=A1` and formatted as currency, then `A2` would return the number `1.23`.",
                "Values will not be calculated. The reply will include the formulas. For example, if `A1` is `1.23` and `A2` is `=A1` and formatted as currency, then A2 would return `\"=A1\"`."
              ]
            },
            "responseDateTimeRenderOption": {
              "enum": [
                "SERIAL_NUMBER",
                "FORMATTED_STRING"
              ],
              "type": "string",
              "description": "Determines how dates, times, and durations in the response should be rendered. This is ignored if response_value_render_option is FORMATTED_VALUE. The default dateTime render option is DateTimeRenderOption.SERIAL_NUMBER.",
              "enumDescriptions": [
                "Instructs date, time, datetime, and duration fields to be output as doubles in \"serial number\" format, as popularized by Lotus 1-2-3. The whole number portion of the value (left of the decimal) counts the days since December 30th 1899. The fractional portion (right of the decimal) counts the time as a fraction of the day. For example, January 1st 1900 at noon would be 2.5, 2 because it's 2 days after December 30st 1899, and .5 because noon is half a day. February 1st 1900 at 3pm would be 33.625. This correctly treats the year 1900 as not a leap year.",
                "Instructs date, time, datetime, and duration fields to be output as strings in their given number format (which is dependent on the spreadsheet locale)."
              ]
            }
          },
          "description": "The request for updating more than one range of values in a spreadsheet."
        }
      ]
      outputs: [
        {
          "id": "BatchUpdateValuesResponse",
          "type": "object",
          "properties": {
            "responses": {
              "type": "array",
              "items": {
                "id": "UpdateValuesResponse",
                "type": "object",
                "properties": {
                  "updatedData": {
                    "id": "ValueRange",
                    "type": "object",
                    "properties": {
                      "range": {
                        "type": "string",
                        "description": "The range the values cover, in A1 notation. For output, this range indicates the entire requested range, even though the values will exclude trailing rows and columns. When appending values, this field represents the range to search for a table, after which values will be appended."
                      },
                      "values": {
                        "type": "array",
                        "items": {
                          "type": "array",
                          "items": {
                            "type": "any"
                          }
                        },
                        "description": "The data that was read or to be written. This is an array of arrays, the outer array representing all the data and each inner array representing a major dimension. Each item in the inner array corresponds with one cell. For output, empty trailing rows and columns will not be included. For input, supported value types are: bool, string, and double. Null values will be skipped. To set a cell to an empty value, set the string value to an empty string."
                      },
                      "majorDimension": {
                        "enum": [
                          "DIMENSION_UNSPECIFIED",
                          "ROWS",
                          "COLUMNS"
                        ],
                        "type": "string",
                        "description": "The major dimension of the values. For output, if the spreadsheet data is: `A1=1,B1=2,A2=3,B2=4`, then requesting `range=A1:B2,majorDimension=ROWS` will return `[[1,2],[3,4]]`, whereas requesting `range=A1:B2,majorDimension=COLUMNS` will return `[[1,3],[2,4]]`. For input, with `range=A1:B2,majorDimension=ROWS` then `[[1,2],[3,4]]` will set `A1=1,B1=2,A2=3,B2=4`. With `range=A1:B2,majorDimension=COLUMNS` then `[[1,2],[3,4]]` will set `A1=1,B1=3,A2=2,B2=4`. When writing, if this field is not set, it defaults to ROWS.",
                        "enumDescriptions": [
                          "The default value, do not use.",
                          "Operates on the rows of a sheet.",
                          "Operates on the columns of a sheet."
                        ]
                      }
                    },
                    "description": "Data within a range of the spreadsheet."
                  },
                  "updatedRows": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The number of rows where at least one cell in the row was updated."
                  },
                  "updatedCells": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The number of cells updated."
                  },
                  "updatedRange": {
                    "type": "string",
                    "description": "The range (in A1 notation) that updates were applied to."
                  },
                  "spreadsheetId": {
                    "type": "string",
                    "description": "The spreadsheet the updates were applied to."
                  },
                  "updatedColumns": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The number of columns where at least one cell in the column was updated."
                  }
                },
                "description": "The response when updating a range of values in a spreadsheet."
              },
              "description": "One UpdateValuesResponse per requested range, in the same order as the requests appeared."
            },
            "spreadsheetId": {
              "type": "string",
              "description": "The spreadsheet the updates were applied to."
            },
            "totalUpdatedRows": {
              "type": "integer",
              "format": "int32",
              "description": "The total number of rows where at least one cell in the row was updated."
            },
            "totalUpdatedCells": {
              "type": "integer",
              "format": "int32",
              "description": "The total number of cells updated."
            },
            "totalUpdatedSheets": {
              "type": "integer",
              "format": "int32",
              "description": "The total number of sheets where at least one cell in the sheet was updated."
            },
            "totalUpdatedColumns": {
              "type": "integer",
              "format": "int32",
              "description": "The total number of columns where at least one cell in the column was updated."
            }
          },
          "description": "The response when updating a range of values in a spreadsheet."
        }
      ]
  spreadsheets.values.batchUpdateByDataFilter:
    description: |-
      Sets values in one or more ranges of a spreadsheet. The caller must specify the spreadsheet ID, a valueInputOption, and one or more DataFilterValueRanges.
    versions:
      from: 4.0.0
    link: https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets.values/batchUpdateByDataFilter
    example:
      inputs: [
        {
          "id": "BatchUpdateValuesByDataFilterRequest",
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "id": "DataFilterValueRange",
                "type": "object",
                "properties": {
                  "values": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "any"
                      }
                    },
                    "description": "The data to be written. If the provided values exceed any of the ranges matched by the data filter then the request fails. If the provided values are less than the matched ranges only the specified values are written, existing values in the matched ranges remain unaffected."
                  },
                  "dataFilter": {
                    "id": "DataFilter",
                    "type": "object",
                    "properties": {
                      "a1Range": {
                        "type": "string",
                        "description": "Selects data that matches the specified A1 range."
                      },
                      "gridRange": {
                        "id": "GridRange",
                        "type": "object",
                        "properties": {
                          "sheetId": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The sheet this range is on."
                          },
                          "endRowIndex": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The end row (exclusive) of the range, or not set if unbounded."
                          },
                          "startRowIndex": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The start row (inclusive) of the range, or not set if unbounded."
                          },
                          "endColumnIndex": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The end column (exclusive) of the range, or not set if unbounded."
                          },
                          "startColumnIndex": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The start column (inclusive) of the range, or not set if unbounded."
                          }
                        },
                        "description": "A range on a sheet. All indexes are zero-based. Indexes are half open, i.e. the start index is inclusive and the end index is exclusive -- [start_index, end_index). Missing indexes indicate the range is unbounded on that side. For example, if `\"Sheet1\"` is sheet ID 0, then: `Sheet1!A1:A1 == sheet_id: 0, start_row_index: 0, end_row_index: 1, start_column_index: 0, end_column_index: 1` `Sheet1!A3:B4 == sheet_id: 0, start_row_index: 2, end_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1!A:B == sheet_id: 0, start_column_index: 0, end_column_index: 2` `Sheet1!A5:B == sheet_id: 0, start_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1 == sheet_id:0` The start index must always be less than or equal to the end index. If the start index equals the end index, then the range is empty. Empty ranges are typically not meaningful and are usually rendered in the UI as `#REF!`."
                      },
                      "developerMetadataLookup": {
                        "id": "DeveloperMetadataLookup",
                        "type": "object",
                        "properties": {
                          "metadataId": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Limits the selected developer metadata to that which has a matching DeveloperMetadata.metadata_id."
                          },
                          "visibility": {
                            "enum": [
                              "DEVELOPER_METADATA_VISIBILITY_UNSPECIFIED",
                              "DOCUMENT",
                              "PROJECT"
                            ],
                            "type": "string",
                            "description": "Limits the selected developer metadata to that which has a matching DeveloperMetadata.visibility. If left unspecified, all developer metadata visibile to the requesting project is considered.",
                            "enumDescriptions": [
                              "Default value.",
                              "Document-visible metadata is accessible from any developer project with access to the document.",
                              "Project-visible metadata is only visible to and accessible by the developer project that created the metadata."
                            ]
                          },
                          "metadataKey": {
                            "type": "string",
                            "description": "Limits the selected developer metadata to that which has a matching DeveloperMetadata.metadata_key."
                          },
                          "locationType": {
                            "enum": [
                              "DEVELOPER_METADATA_LOCATION_TYPE_UNSPECIFIED",
                              "ROW",
                              "COLUMN",
                              "SHEET",
                              "SPREADSHEET"
                            ],
                            "type": "string",
                            "description": "Limits the selected developer metadata to those entries which are associated with locations of the specified type. For example, when this field is specified as ROW this lookup only considers developer metadata associated on rows. If the field is left unspecified, all location types are considered. This field cannot be specified as SPREADSHEET when the locationMatchingStrategy is specified as INTERSECTING or when the metadataLocation is specified as a non-spreadsheet location: spreadsheet metadata cannot intersect any other developer metadata location. This field also must be left unspecified when the locationMatchingStrategy is specified as EXACT.",
                            "enumDescriptions": [
                              "Default value.",
                              "Developer metadata associated on an entire row dimension.",
                              "Developer metadata associated on an entire column dimension.",
                              "Developer metadata associated on an entire sheet.",
                              "Developer metadata associated on the entire spreadsheet."
                            ]
                          },
                          "metadataValue": {
                            "type": "string",
                            "description": "Limits the selected developer metadata to that which has a matching DeveloperMetadata.metadata_value."
                          },
                          "metadataLocation": {
                            "id": "DeveloperMetadataLocation",
                            "type": "object",
                            "properties": {
                              "sheetId": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The ID of the sheet when metadata is associated with an entire sheet."
                              },
                              "spreadsheet": {
                                "type": "boolean",
                                "description": "True when metadata is associated with an entire spreadsheet."
                              },
                              "locationType": {
                                "enum": [
                                  "DEVELOPER_METADATA_LOCATION_TYPE_UNSPECIFIED",
                                  "ROW",
                                  "COLUMN",
                                  "SHEET",
                                  "SPREADSHEET"
                                ],
                                "type": "string",
                                "description": "The type of location this object represents. This field is read-only.",
                                "enumDescriptions": [
                                  "Default value.",
                                  "Developer metadata associated on an entire row dimension.",
                                  "Developer metadata associated on an entire column dimension.",
                                  "Developer metadata associated on an entire sheet.",
                                  "Developer metadata associated on the entire spreadsheet."
                                ]
                              },
                              "dimensionRange": {
                                "id": "DimensionRange",
                                "type": "object",
                                "properties": {
                                  "sheetId": {
                                    "type": "integer",
                                    "format": "int32",
                                    "description": "The sheet this span is on."
                                  },
                                  "endIndex": {
                                    "type": "integer",
                                    "format": "int32",
                                    "description": "The end (exclusive) of the span, or not set if unbounded."
                                  },
                                  "dimension": {
                                    "enum": [
                                      "DIMENSION_UNSPECIFIED",
                                      "ROWS",
                                      "COLUMNS"
                                    ],
                                    "type": "string",
                                    "description": "The dimension of the span.",
                                    "enumDescriptions": [
                                      "The default value, do not use.",
                                      "Operates on the rows of a sheet.",
                                      "Operates on the columns of a sheet."
                                    ]
                                  },
                                  "startIndex": {
                                    "type": "integer",
                                    "format": "int32",
                                    "description": "The start (inclusive) of the span, or not set if unbounded."
                                  }
                                },
                                "description": "Represents the row or column when metadata is associated with a dimension. The specified DimensionRange must represent a single row or column; it cannot be unbounded or span multiple rows or columns."
                              }
                            },
                            "description": "Limits the selected developer metadata to those entries associated with the specified location. This field either matches exact locations or all intersecting locations according the specified locationMatchingStrategy."
                          },
                          "locationMatchingStrategy": {
                            "enum": [
                              "DEVELOPER_METADATA_LOCATION_MATCHING_STRATEGY_UNSPECIFIED",
                              "EXACT_LOCATION",
                              "INTERSECTING_LOCATION"
                            ],
                            "type": "string",
                            "description": "Determines how this lookup matches the location. If this field is specified as EXACT, only developer metadata associated on the exact location specified is matched. If this field is specified to INTERSECTING, developer metadata associated on intersecting locations is also matched. If left unspecified, this field assumes a default value of INTERSECTING. If this field is specified, a metadataLocation must also be specified.",
                            "enumDescriptions": [
                              "Default value. This value must not be used.",
                              "Indicates that a specified location should be matched exactly. For example, if row three were specified as a location this matching strategy would only match developer metadata also associated on row three. Metadata associated on other locations would not be considered.",
                              "Indicates that a specified location should match that exact location as well as any intersecting locations. For example, if row three were specified as a location this matching strategy would match developer metadata associated on row three as well as metadata associated on locations that intersect row three. If, for instance, there was developer metadata associated on column B, this matching strategy would also match that location because column B intersects row three."
                            ]
                          }
                        },
                        "description": "Selects data associated with the developer metadata matching the criteria described by this DeveloperMetadataLookup."
                      }
                    },
                    "description": "Filter that describes what data should be selected or returned from a request."
                  },
                  "majorDimension": {
                    "enum": [
                      "DIMENSION_UNSPECIFIED",
                      "ROWS",
                      "COLUMNS"
                    ],
                    "type": "string",
                    "description": "The major dimension of the values.",
                    "enumDescriptions": [
                      "The default value, do not use.",
                      "Operates on the rows of a sheet.",
                      "Operates on the columns of a sheet."
                    ]
                  }
                },
                "description": "A range of values whose location is specified by a DataFilter."
              },
              "description": "The new values to apply to the spreadsheet. If more than one range is matched by the specified DataFilter the specified values are applied to all of those ranges."
            },
            "valueInputOption": {
              "enum": [
                "INPUT_VALUE_OPTION_UNSPECIFIED",
                "RAW",
                "USER_ENTERED"
              ],
              "type": "string",
              "description": "How the input data should be interpreted.",
              "enumDescriptions": [
                "Default input value. This value must not be used.",
                "The values the user has entered will not be parsed and will be stored as-is.",
                "The values will be parsed as if the user typed them into the UI. Numbers will stay as numbers, but strings may be converted to numbers, dates, etc. following the same rules that are applied when entering text into a cell via the Google Sheets UI."
              ]
            },
            "includeValuesInResponse": {
              "type": "boolean",
              "description": "Determines if the update response should include the values of the cells that were updated. By default, responses do not include the updated values. The `updatedData` field within each of the BatchUpdateValuesResponse.responses contains the updated values. If the range to write was larger than the range actually written, the response includes all values in the requested range (excluding trailing empty rows and columns)."
            },
            "responseValueRenderOption": {
              "enum": [
                "FORMATTED_VALUE",
                "UNFORMATTED_VALUE",
                "FORMULA"
              ],
              "type": "string",
              "description": "Determines how values in the response should be rendered. The default render option is ValueRenderOption.FORMATTED_VALUE.",
              "enumDescriptions": [
                "Values will be calculated & formatted in the reply according to the cell's formatting. Formatting is based on the spreadsheet's locale, not the requesting user's locale. For example, if `A1` is `1.23` and `A2` is `=A1` and formatted as currency, then `A2` would return `\"$1.23\"`.",
                "Values will be calculated, but not formatted in the reply. For example, if `A1` is `1.23` and `A2` is `=A1` and formatted as currency, then `A2` would return the number `1.23`.",
                "Values will not be calculated. The reply will include the formulas. For example, if `A1` is `1.23` and `A2` is `=A1` and formatted as currency, then A2 would return `\"=A1\"`."
              ]
            },
            "responseDateTimeRenderOption": {
              "enum": [
                "SERIAL_NUMBER",
                "FORMATTED_STRING"
              ],
              "type": "string",
              "description": "Determines how dates, times, and durations in the response should be rendered. This is ignored if response_value_render_option is FORMATTED_VALUE. The default dateTime render option is DateTimeRenderOption.SERIAL_NUMBER.",
              "enumDescriptions": [
                "Instructs date, time, datetime, and duration fields to be output as doubles in \"serial number\" format, as popularized by Lotus 1-2-3. The whole number portion of the value (left of the decimal) counts the days since December 30th 1899. The fractional portion (right of the decimal) counts the time as a fraction of the day. For example, January 1st 1900 at noon would be 2.5, 2 because it's 2 days after December 30st 1899, and .5 because noon is half a day. February 1st 1900 at 3pm would be 33.625. This correctly treats the year 1900 as not a leap year.",
                "Instructs date, time, datetime, and duration fields to be output as strings in their given number format (which is dependent on the spreadsheet locale)."
              ]
            }
          },
          "description": "The request for updating more than one range of values in a spreadsheet."
        }
      ]
      outputs: [
        {
          "id": "BatchUpdateValuesByDataFilterResponse",
          "type": "object",
          "properties": {
            "responses": {
              "type": "array",
              "items": {
                "id": "UpdateValuesByDataFilterResponse",
                "type": "object",
                "properties": {
                  "dataFilter": {
                    "id": "DataFilter",
                    "type": "object",
                    "properties": {
                      "a1Range": {
                        "type": "string",
                        "description": "Selects data that matches the specified A1 range."
                      },
                      "gridRange": {
                        "id": "GridRange",
                        "type": "object",
                        "properties": {
                          "sheetId": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The sheet this range is on."
                          },
                          "endRowIndex": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The end row (exclusive) of the range, or not set if unbounded."
                          },
                          "startRowIndex": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The start row (inclusive) of the range, or not set if unbounded."
                          },
                          "endColumnIndex": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The end column (exclusive) of the range, or not set if unbounded."
                          },
                          "startColumnIndex": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The start column (inclusive) of the range, or not set if unbounded."
                          }
                        },
                        "description": "A range on a sheet. All indexes are zero-based. Indexes are half open, i.e. the start index is inclusive and the end index is exclusive -- [start_index, end_index). Missing indexes indicate the range is unbounded on that side. For example, if `\"Sheet1\"` is sheet ID 0, then: `Sheet1!A1:A1 == sheet_id: 0, start_row_index: 0, end_row_index: 1, start_column_index: 0, end_column_index: 1` `Sheet1!A3:B4 == sheet_id: 0, start_row_index: 2, end_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1!A:B == sheet_id: 0, start_column_index: 0, end_column_index: 2` `Sheet1!A5:B == sheet_id: 0, start_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1 == sheet_id:0` The start index must always be less than or equal to the end index. If the start index equals the end index, then the range is empty. Empty ranges are typically not meaningful and are usually rendered in the UI as `#REF!`."
                      },
                      "developerMetadataLookup": {
                        "id": "DeveloperMetadataLookup",
                        "type": "object",
                        "properties": {
                          "metadataId": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Limits the selected developer metadata to that which has a matching DeveloperMetadata.metadata_id."
                          },
                          "visibility": {
                            "enum": [
                              "DEVELOPER_METADATA_VISIBILITY_UNSPECIFIED",
                              "DOCUMENT",
                              "PROJECT"
                            ],
                            "type": "string",
                            "description": "Limits the selected developer metadata to that which has a matching DeveloperMetadata.visibility. If left unspecified, all developer metadata visibile to the requesting project is considered.",
                            "enumDescriptions": [
                              "Default value.",
                              "Document-visible metadata is accessible from any developer project with access to the document.",
                              "Project-visible metadata is only visible to and accessible by the developer project that created the metadata."
                            ]
                          },
                          "metadataKey": {
                            "type": "string",
                            "description": "Limits the selected developer metadata to that which has a matching DeveloperMetadata.metadata_key."
                          },
                          "locationType": {
                            "enum": [
                              "DEVELOPER_METADATA_LOCATION_TYPE_UNSPECIFIED",
                              "ROW",
                              "COLUMN",
                              "SHEET",
                              "SPREADSHEET"
                            ],
                            "type": "string",
                            "description": "Limits the selected developer metadata to those entries which are associated with locations of the specified type. For example, when this field is specified as ROW this lookup only considers developer metadata associated on rows. If the field is left unspecified, all location types are considered. This field cannot be specified as SPREADSHEET when the locationMatchingStrategy is specified as INTERSECTING or when the metadataLocation is specified as a non-spreadsheet location: spreadsheet metadata cannot intersect any other developer metadata location. This field also must be left unspecified when the locationMatchingStrategy is specified as EXACT.",
                            "enumDescriptions": [
                              "Default value.",
                              "Developer metadata associated on an entire row dimension.",
                              "Developer metadata associated on an entire column dimension.",
                              "Developer metadata associated on an entire sheet.",
                              "Developer metadata associated on the entire spreadsheet."
                            ]
                          },
                          "metadataValue": {
                            "type": "string",
                            "description": "Limits the selected developer metadata to that which has a matching DeveloperMetadata.metadata_value."
                          },
                          "metadataLocation": {
                            "id": "DeveloperMetadataLocation",
                            "type": "object",
                            "properties": {
                              "sheetId": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The ID of the sheet when metadata is associated with an entire sheet."
                              },
                              "spreadsheet": {
                                "type": "boolean",
                                "description": "True when metadata is associated with an entire spreadsheet."
                              },
                              "locationType": {
                                "enum": [
                                  "DEVELOPER_METADATA_LOCATION_TYPE_UNSPECIFIED",
                                  "ROW",
                                  "COLUMN",
                                  "SHEET",
                                  "SPREADSHEET"
                                ],
                                "type": "string",
                                "description": "The type of location this object represents. This field is read-only.",
                                "enumDescriptions": [
                                  "Default value.",
                                  "Developer metadata associated on an entire row dimension.",
                                  "Developer metadata associated on an entire column dimension.",
                                  "Developer metadata associated on an entire sheet.",
                                  "Developer metadata associated on the entire spreadsheet."
                                ]
                              },
                              "dimensionRange": {
                                "id": "DimensionRange",
                                "type": "object",
                                "properties": {
                                  "sheetId": {
                                    "type": "integer",
                                    "format": "int32",
                                    "description": "The sheet this span is on."
                                  },
                                  "endIndex": {
                                    "type": "integer",
                                    "format": "int32",
                                    "description": "The end (exclusive) of the span, or not set if unbounded."
                                  },
                                  "dimension": {
                                    "enum": [
                                      "DIMENSION_UNSPECIFIED",
                                      "ROWS",
                                      "COLUMNS"
                                    ],
                                    "type": "string",
                                    "description": "The dimension of the span.",
                                    "enumDescriptions": [
                                      "The default value, do not use.",
                                      "Operates on the rows of a sheet.",
                                      "Operates on the columns of a sheet."
                                    ]
                                  },
                                  "startIndex": {
                                    "type": "integer",
                                    "format": "int32",
                                    "description": "The start (inclusive) of the span, or not set if unbounded."
                                  }
                                },
                                "description": "Represents the row or column when metadata is associated with a dimension. The specified DimensionRange must represent a single row or column; it cannot be unbounded or span multiple rows or columns."
                              }
                            },
                            "description": "Limits the selected developer metadata to those entries associated with the specified location. This field either matches exact locations or all intersecting locations according the specified locationMatchingStrategy."
                          },
                          "locationMatchingStrategy": {
                            "enum": [
                              "DEVELOPER_METADATA_LOCATION_MATCHING_STRATEGY_UNSPECIFIED",
                              "EXACT_LOCATION",
                              "INTERSECTING_LOCATION"
                            ],
                            "type": "string",
                            "description": "Determines how this lookup matches the location. If this field is specified as EXACT, only developer metadata associated on the exact location specified is matched. If this field is specified to INTERSECTING, developer metadata associated on intersecting locations is also matched. If left unspecified, this field assumes a default value of INTERSECTING. If this field is specified, a metadataLocation must also be specified.",
                            "enumDescriptions": [
                              "Default value. This value must not be used.",
                              "Indicates that a specified location should be matched exactly. For example, if row three were specified as a location this matching strategy would only match developer metadata also associated on row three. Metadata associated on other locations would not be considered.",
                              "Indicates that a specified location should match that exact location as well as any intersecting locations. For example, if row three were specified as a location this matching strategy would match developer metadata associated on row three as well as metadata associated on locations that intersect row three. If, for instance, there was developer metadata associated on column B, this matching strategy would also match that location because column B intersects row three."
                            ]
                          }
                        },
                        "description": "Selects data associated with the developer metadata matching the criteria described by this DeveloperMetadataLookup."
                      }
                    },
                    "description": "Filter that describes what data should be selected or returned from a request."
                  },
                  "updatedData": {
                    "id": "ValueRange",
                    "type": "object",
                    "properties": {
                      "range": {
                        "type": "string",
                        "description": "The range the values cover, in A1 notation. For output, this range indicates the entire requested range, even though the values will exclude trailing rows and columns. When appending values, this field represents the range to search for a table, after which values will be appended."
                      },
                      "values": {
                        "type": "array",
                        "items": {
                          "type": "array",
                          "items": {
                            "type": "any"
                          }
                        },
                        "description": "The data that was read or to be written. This is an array of arrays, the outer array representing all the data and each inner array representing a major dimension. Each item in the inner array corresponds with one cell. For output, empty trailing rows and columns will not be included. For input, supported value types are: bool, string, and double. Null values will be skipped. To set a cell to an empty value, set the string value to an empty string."
                      },
                      "majorDimension": {
                        "enum": [
                          "DIMENSION_UNSPECIFIED",
                          "ROWS",
                          "COLUMNS"
                        ],
                        "type": "string",
                        "description": "The major dimension of the values. For output, if the spreadsheet data is: `A1=1,B1=2,A2=3,B2=4`, then requesting `range=A1:B2,majorDimension=ROWS` will return `[[1,2],[3,4]]`, whereas requesting `range=A1:B2,majorDimension=COLUMNS` will return `[[1,3],[2,4]]`. For input, with `range=A1:B2,majorDimension=ROWS` then `[[1,2],[3,4]]` will set `A1=1,B1=2,A2=3,B2=4`. With `range=A1:B2,majorDimension=COLUMNS` then `[[1,2],[3,4]]` will set `A1=1,B1=3,A2=2,B2=4`. When writing, if this field is not set, it defaults to ROWS.",
                        "enumDescriptions": [
                          "The default value, do not use.",
                          "Operates on the rows of a sheet.",
                          "Operates on the columns of a sheet."
                        ]
                      }
                    },
                    "description": "Data within a range of the spreadsheet."
                  },
                  "updatedRows": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The number of rows where at least one cell in the row was updated."
                  },
                  "updatedCells": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The number of cells updated."
                  },
                  "updatedRange": {
                    "type": "string",
                    "description": "The range (in A1 notation) that updates were applied to."
                  },
                  "updatedColumns": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The number of columns where at least one cell in the column was updated."
                  }
                },
                "description": "The response when updating a range of values by a data filter in a spreadsheet."
              },
              "description": "The response for each range updated."
            },
            "spreadsheetId": {
              "type": "string",
              "description": "The spreadsheet the updates were applied to."
            },
            "totalUpdatedRows": {
              "type": "integer",
              "format": "int32",
              "description": "The total number of rows where at least one cell in the row was updated."
            },
            "totalUpdatedCells": {
              "type": "integer",
              "format": "int32",
              "description": "The total number of cells updated."
            },
            "totalUpdatedSheets": {
              "type": "integer",
              "format": "int32",
              "description": "The total number of sheets where at least one cell in the sheet was updated."
            },
            "totalUpdatedColumns": {
              "type": "integer",
              "format": "int32",
              "description": "The total number of columns where at least one cell in the column was updated."
            }
          },
          "description": "The response when updating a range of values in a spreadsheet."
        }
      ]
  spreadsheets.values.clear:
    description: |-
      Clears values from a spreadsheet. The caller must specify the spreadsheet ID and range. Only values are cleared -- all other properties of the cell (such as formatting, data validation, etc..) are kept.
    versions:
      from: 4.0.0
    link: https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets.values/clear
    example:
      inputs: [
        {
          "id": "ClearValuesRequest",
          "type": "object",
          "properties": {},
          "description": "The request for clearing a range of values in a spreadsheet."
        }
      ]
      outputs: [
        {
          "id": "ClearValuesResponse",
          "type": "object",
          "properties": {
            "clearedRange": {
              "type": "string",
              "description": "The range (in A1 notation) that was cleared. (If the request was for an unbounded range or a ranger larger than the bounds of the sheet, this will be the actual range that was cleared, bounded to the sheet's limits.)"
            },
            "spreadsheetId": {
              "type": "string",
              "description": "The spreadsheet the updates were applied to."
            }
          },
          "description": "The response when clearing a range of values in a spreadsheet."
        }
      ]
  spreadsheets.values.get:
    description: |-
      Returns a range of values from a spreadsheet. The caller must specify the spreadsheet ID and a range.
    versions:
      from: 4.0.0
    link: https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets.values/get
    example:
      inputs: [
        {}
      ]
      outputs: [
        {}
      ]
  spreadsheets.values.update:
    description: |-
      Sets values in a range of a spreadsheet. The caller must specify the spreadsheet ID, range, and a valueInputOption.
    versions:
      from: 4.0.0
    link: https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets.values/update
    example:
      inputs: [
        {
          "id": "ValueRange",
          "type": "object",
          "properties": {
            "range": {
              "type": "string",
              "description": "The range the values cover, in A1 notation. For output, this range indicates the entire requested range, even though the values will exclude trailing rows and columns. When appending values, this field represents the range to search for a table, after which values will be appended."
            },
            "values": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "any"
                }
              },
              "description": "The data that was read or to be written. This is an array of arrays, the outer array representing all the data and each inner array representing a major dimension. Each item in the inner array corresponds with one cell. For output, empty trailing rows and columns will not be included. For input, supported value types are: bool, string, and double. Null values will be skipped. To set a cell to an empty value, set the string value to an empty string."
            },
            "majorDimension": {
              "enum": [
                "DIMENSION_UNSPECIFIED",
                "ROWS",
                "COLUMNS"
              ],
              "type": "string",
              "description": "The major dimension of the values. For output, if the spreadsheet data is: `A1=1,B1=2,A2=3,B2=4`, then requesting `range=A1:B2,majorDimension=ROWS` will return `[[1,2],[3,4]]`, whereas requesting `range=A1:B2,majorDimension=COLUMNS` will return `[[1,3],[2,4]]`. For input, with `range=A1:B2,majorDimension=ROWS` then `[[1,2],[3,4]]` will set `A1=1,B1=2,A2=3,B2=4`. With `range=A1:B2,majorDimension=COLUMNS` then `[[1,2],[3,4]]` will set `A1=1,B1=3,A2=2,B2=4`. When writing, if this field is not set, it defaults to ROWS.",
              "enumDescriptions": [
                "The default value, do not use.",
                "Operates on the rows of a sheet.",
                "Operates on the columns of a sheet."
              ]
            }
          },
          "description": "Data within a range of the spreadsheet."
        }
      ]
      outputs: [
        {
          "id": "UpdateValuesResponse",
          "type": "object",
          "properties": {
            "updatedData": {
              "id": "ValueRange",
              "type": "object",
              "properties": {
                "range": {
                  "type": "string",
                  "description": "The range the values cover, in A1 notation. For output, this range indicates the entire requested range, even though the values will exclude trailing rows and columns. When appending values, this field represents the range to search for a table, after which values will be appended."
                },
                "values": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "any"
                    }
                  },
                  "description": "The data that was read or to be written. This is an array of arrays, the outer array representing all the data and each inner array representing a major dimension. Each item in the inner array corresponds with one cell. For output, empty trailing rows and columns will not be included. For input, supported value types are: bool, string, and double. Null values will be skipped. To set a cell to an empty value, set the string value to an empty string."
                },
                "majorDimension": {
                  "enum": [
                    "DIMENSION_UNSPECIFIED",
                    "ROWS",
                    "COLUMNS"
                  ],
                  "type": "string",
                  "description": "The major dimension of the values. For output, if the spreadsheet data is: `A1=1,B1=2,A2=3,B2=4`, then requesting `range=A1:B2,majorDimension=ROWS` will return `[[1,2],[3,4]]`, whereas requesting `range=A1:B2,majorDimension=COLUMNS` will return `[[1,3],[2,4]]`. For input, with `range=A1:B2,majorDimension=ROWS` then `[[1,2],[3,4]]` will set `A1=1,B1=2,A2=3,B2=4`. With `range=A1:B2,majorDimension=COLUMNS` then `[[1,2],[3,4]]` will set `A1=1,B1=3,A2=2,B2=4`. When writing, if this field is not set, it defaults to ROWS.",
                  "enumDescriptions": [
                    "The default value, do not use.",
                    "Operates on the rows of a sheet.",
                    "Operates on the columns of a sheet."
                  ]
                }
              },
              "description": "Data within a range of the spreadsheet."
            },
            "updatedRows": {
              "type": "integer",
              "format": "int32",
              "description": "The number of rows where at least one cell in the row was updated."
            },
            "updatedCells": {
              "type": "integer",
              "format": "int32",
              "description": "The number of cells updated."
            },
            "updatedRange": {
              "type": "string",
              "description": "The range (in A1 notation) that updates were applied to."
            },
            "spreadsheetId": {
              "type": "string",
              "description": "The spreadsheet the updates were applied to."
            },
            "updatedColumns": {
              "type": "integer",
              "format": "int32",
              "description": "The number of columns where at least one cell in the column was updated."
            }
          },
          "description": "The response when updating a range of values in a spreadsheet."
        }
      ]
